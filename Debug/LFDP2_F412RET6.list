
LFDP2_F412RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d680  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  0800d850  0800d850  0001d850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e074  0800e074  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e074  0800e074  0001e074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e07c  0800e07c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e07c  0800e07c  0001e07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e080  0800e080  0001e080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800e084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005798  2000021c  0800e2a0  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200059b4  0800e2a0  000259b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000195bf  00000000  00000000  0002028f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041ed  00000000  00000000  0003984e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  0003da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001270  00000000  00000000  0003f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a5b  00000000  00000000  00040488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a22  00000000  00000000  00065ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6326  00000000  00000000  00086905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a60  00000000  00000000  0015cc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d838 	.word	0x0800d838

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000220 	.word	0x20000220
 800020c:	0800d838 	.word	0x0800d838

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xb8>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800104a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800105e:	2201      	movs	r2, #1
 8001060:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <MX_ADC1_Init+0xbc>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800107e:	2202      	movs	r2, #2
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001092:	f003 fa35 	bl	8004500 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800109c:	f002 fa88 	bl	80035b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010a8:	2307      	movs	r3, #7
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_ADC1_Init+0xb4>)
 80010b2:	f003 fb77 	bl	80047a4 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010bc:	f002 fa78 	bl	80035b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010c0:	2303      	movs	r3, #3
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_ADC1_Init+0xb4>)
 80010ce:	f003 fb69 	bl	80047a4 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010d8:	f002 fa6a 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000238 	.word	0x20000238
 80010e8:	40012000 	.word	0x40012000
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <HAL_ADC_MspInit+0xdc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d157      	bne.n	80011c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = NTC_Pin|ACC_Z_Pin;
 800114a:	2309      	movs	r3, #9
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	481d      	ldr	r0, [pc, #116]	; (80011d4 <HAL_ADC_MspInit+0xe4>)
 800115e:	f004 fa71 	bl	8005644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001164:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <HAL_ADC_MspInit+0xec>)
 8001166:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 800117c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001180:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001188:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001198:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 80011a8:	f003 feae 	bl	8004f08 <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011b2:	f002 f9fd 	bl	80035b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012000 	.word	0x40012000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	20000280 	.word	0x20000280
 80011dc:	40026410 	.word	0x40026410

080011e0 <ch395_gpio_init>:
 * @brief       ch395_gpio初始化
 * @param       无
 * @retval      无
 */
void ch395_gpio_init( void )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CH395_RST_GPIO_Port, CH395_RST_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2101      	movs	r1, #1
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ch395_gpio_init+0x18>)
 80011ea:	f004 fbbf 	bl	800596c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80011ee:	2014      	movs	r0, #20
 80011f0:	f003 f962 	bl	80044b8 <HAL_Delay>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020400 	.word	0x40020400

080011fc <ch395_read_write_byte>:
 * @brief       硬件SPI输出且输入8个位数据
 * @param       d:将要送入到ch395的数据
 * @retval      无
 */
uint8_t ch395_read_write_byte( uint8_t data )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
    uint8_t rxdata;
    rxdata = spi1_read_write_byte(data);       /* SPI写入一个CH395Q数据并返回一个数据 */
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fda3 	bl	8003d54 <spi1_read_write_byte>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
    return rxdata;                             /* 返回收到的数据 */
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <ch395_write_cmd>:
 * @brief       向ch395写命令
 * @param       将要写入ch395的命令码
 * @retval      无
 */
void ch395_write_cmd( uint8_t mcmd )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;                         /* 防止CS原来为低，先将CS置高 */
 8001226:	2201      	movs	r2, #1
 8001228:	2110      	movs	r1, #16
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <ch395_write_cmd+0x34>)
 800122c:	f004 fb9e 	bl	800596c <HAL_GPIO_WritePin>
    ch395_scs_low;                          /* 命令开始，CS拉低 */
 8001230:	2200      	movs	r2, #0
 8001232:	2110      	movs	r1, #16
 8001234:	4806      	ldr	r0, [pc, #24]	; (8001250 <ch395_write_cmd+0x34>)
 8001236:	f004 fb99 	bl	800596c <HAL_GPIO_WritePin>
    ch395_read_write_byte(mcmd);            /* SPI发送命令码 */
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffdd 	bl	80011fc <ch395_read_write_byte>
    HAL_Delay(2);                            /* 必要延时,延时1.5uS确保读写周期不小于1.5uS */
 8001242:	2002      	movs	r0, #2
 8001244:	f003 f938 	bl	80044b8 <HAL_Delay>

}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020000 	.word	0x40020000

08001254 <ch395_write_data>:
 * @brief       向ch395写数据
 * @param       将要写入ch395的数据
 * @retval      无
 */
void ch395_write_data( uint8_t mdata )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
    ch395_read_write_byte(mdata);           /* SPI发送数据 */
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffcb 	bl	80011fc <ch395_read_write_byte>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <ch395_read_data>:
 * @brief       从ch395读数据
 * @param       无
 * @retval      返回读取的数据
 */
uint8_t ch395_read_data( void )
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
    uint8_t i;
    i = ch395_read_write_byte(0xff);        /* SPI读数据 */
 8001274:	20ff      	movs	r0, #255	; 0xff
 8001276:	f7ff ffc1 	bl	80011fc <ch395_read_write_byte>
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
    return i;
 800127e:	79fb      	ldrb	r3, [r7, #7]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <ch395_keeplive_set>:
 * @brief       ch395_keeplive_set 保活定时器参数设置
 * @param       无
 * @retval      无
 */
void ch395_keeplive_set(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    ch395_keeplive_cnt(DEF_KEEP_LIVE_CNT);
 800128c:	20c8      	movs	r0, #200	; 0xc8
 800128e:	f001 fa40 	bl	8002712 <ch395_keeplive_cnt>
    ch395_keeplive_idle(DEF_KEEP_LIVE_IDLE);
 8001292:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001296:	f001 fa4c 	bl	8002732 <ch395_keeplive_idle>
    ch395_keeplive_intvl(DEF_KEEP_LIVE_PERIOD);
 800129a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800129e:	f001 fa6c 	bl	800277a <ch395_keeplive_intvl>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <ch395q_socket_config>:
 * @brief       ch395 socket配置
 * @param       ch395_sokect：Socket配置信息
 * @retval      无
 */
uint8_t ch395q_socket_config(ch395_socket * ch395_sokect)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    if (ch395_sokect == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <ch395q_socket_config+0x12>
    {
        return 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e141      	b.n	800153e <ch395q_socket_config+0x296>
    }

    if (g_ch395q_sta.dhcp_status == DHCP_UP)                                    /* DHCP获取成功状态 */
 80012ba:	4ba3      	ldr	r3, [pc, #652]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d164      	bne.n	800138c <ch395q_socket_config+0xe4>
    {
        ch395_sokect->net_info.ip[0] = g_ch395q_sta.ipinf_buf[0];
 80012c2:	4ba1      	ldr	r3, [pc, #644]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012c4:	78da      	ldrb	r2, [r3, #3]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]
        ch395_sokect->net_info.ip[1] = g_ch395q_sta.ipinf_buf[1];
 80012cc:	4b9e      	ldr	r3, [pc, #632]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012ce:	791a      	ldrb	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        ch395_sokect->net_info.ip[2] = g_ch395q_sta.ipinf_buf[2];
 80012d6:	4b9c      	ldr	r3, [pc, #624]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012d8:	795a      	ldrb	r2, [r3, #5]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        ch395_sokect->net_info.ip[3] = g_ch395q_sta.ipinf_buf[3];
 80012e0:	4b99      	ldr	r3, [pc, #612]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012e2:	799a      	ldrb	r2, [r3, #6]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

        ch395_sokect->net_info.gwip[0] = g_ch395q_sta.ipinf_buf[4];
 80012ea:	4b97      	ldr	r3, [pc, #604]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012ec:	79da      	ldrb	r2, [r3, #7]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        ch395_sokect->net_info.gwip[1] = g_ch395q_sta.ipinf_buf[5];
 80012f4:	4b94      	ldr	r3, [pc, #592]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012f6:	7a1a      	ldrb	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ch395_sokect->net_info.gwip[2] = g_ch395q_sta.ipinf_buf[6];
 80012fe:	4b92      	ldr	r3, [pc, #584]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001300:	7a5a      	ldrb	r2, [r3, #9]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        ch395_sokect->net_info.gwip[3] = g_ch395q_sta.ipinf_buf[7];
 8001308:	4b8f      	ldr	r3, [pc, #572]	; (8001548 <ch395q_socket_config+0x2a0>)
 800130a:	7a9a      	ldrb	r2, [r3, #10]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

        ch395_sokect->net_info.mask[0] = g_ch395q_sta.ipinf_buf[8];
 8001312:	4b8d      	ldr	r3, [pc, #564]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001314:	7ada      	ldrb	r2, [r3, #11]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        ch395_sokect->net_info.mask[1] = g_ch395q_sta.ipinf_buf[9];
 800131c:	4b8a      	ldr	r3, [pc, #552]	; (8001548 <ch395q_socket_config+0x2a0>)
 800131e:	7b1a      	ldrb	r2, [r3, #12]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        ch395_sokect->net_info.mask[2] = g_ch395q_sta.ipinf_buf[10];
 8001326:	4b88      	ldr	r3, [pc, #544]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001328:	7b5a      	ldrb	r2, [r3, #13]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        ch395_sokect->net_info.mask[3] = g_ch395q_sta.ipinf_buf[11];
 8001330:	4b85      	ldr	r3, [pc, #532]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001332:	7b9a      	ldrb	r2, [r3, #14]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

        ch395_sokect->net_info.dns1[0] = g_ch395q_sta.ipinf_buf[12];
 800133a:	4b83      	ldr	r3, [pc, #524]	; (8001548 <ch395q_socket_config+0x2a0>)
 800133c:	7bda      	ldrb	r2, [r3, #15]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        ch395_sokect->net_info.dns1[1] = g_ch395q_sta.ipinf_buf[13];
 8001344:	4b80      	ldr	r3, [pc, #512]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001346:	7c1a      	ldrb	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        ch395_sokect->net_info.dns1[2] = g_ch395q_sta.ipinf_buf[14];
 800134e:	4b7e      	ldr	r3, [pc, #504]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001350:	7c5a      	ldrb	r2, [r3, #17]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        ch395_sokect->net_info.dns1[3] = g_ch395q_sta.ipinf_buf[15];
 8001358:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <ch395q_socket_config+0x2a0>)
 800135a:	7c9a      	ldrb	r2, [r3, #18]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

        ch395_sokect->net_info.dns2[0] = g_ch395q_sta.ipinf_buf[16];
 8001362:	4b79      	ldr	r3, [pc, #484]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001364:	7cda      	ldrb	r2, [r3, #19]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        ch395_sokect->net_info.dns2[1] = g_ch395q_sta.ipinf_buf[17];
 800136c:	4b76      	ldr	r3, [pc, #472]	; (8001548 <ch395q_socket_config+0x2a0>)
 800136e:	7d1a      	ldrb	r2, [r3, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        ch395_sokect->net_info.dns2[2] = g_ch395q_sta.ipinf_buf[18];
 8001376:	4b74      	ldr	r3, [pc, #464]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001378:	7d5a      	ldrb	r2, [r3, #21]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        ch395_sokect->net_info.dns2[3] = g_ch395q_sta.ipinf_buf[19];
 8001380:	4b71      	ldr	r3, [pc, #452]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001382:	7d9a      	ldrb	r2, [r3, #22]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800138a:	e013      	b.n	80013b4 <ch395q_socket_config+0x10c>
    }
    else                                                                      /* DHCP获取失败状态，设置静态IP地址信息 */
    {
        ch395_cmd_set_ipaddr(ch395_sokect->net_config.ipaddr);                /* 设置CH395的IP地址 */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3334      	adds	r3, #52	; 0x34
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fe27 	bl	8001fe4 <ch395_cmd_set_ipaddr>
        ch395_cmd_set_gw_ipaddr(ch395_sokect->net_config.gwipaddr);           /* 设置网关地址 */
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3338      	adds	r3, #56	; 0x38
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fe44 	bl	8002028 <ch395_cmd_set_gw_ipaddr>
        ch395_cmd_set_maskaddr(ch395_sokect->net_config.maskaddr);            /* 设置子网掩码，默认为255.255.255.0*/
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	333c      	adds	r3, #60	; 0x3c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fe61 	bl	800206c <ch395_cmd_set_maskaddr>
        ch395_cmd_init();
 80013aa:	f000 fddd 	bl	8001f68 <ch395_cmd_init>
        HAL_Delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f003 f882 	bl	80044b8 <HAL_Delay>
    }

    ch395_cmd_set_macaddr(ch395_sokect->net_config.macaddr);                  /* 设置MAC地址 */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3340      	adds	r3, #64	; 0x40
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fe79 	bl	80020b0 <ch395_cmd_set_macaddr>

    memcpy(&g_ch395q_sta.socket[ch395_sokect->socket_index].config, ch395_sokect, sizeof(ch395_socket));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	3318      	adds	r3, #24
 80013ce:	4a5e      	ldr	r2, [pc, #376]	; (8001548 <ch395q_socket_config+0x2a0>)
 80013d0:	4413      	add	r3, r2
 80013d2:	2248      	movs	r2, #72	; 0x48
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f008 fb00 	bl	80099dc <memcpy>

    switch(ch395_sokect->proto)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	789b      	ldrb	r3, [r3, #2]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	f200 80ab 	bhi.w	800153c <ch395q_socket_config+0x294>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <ch395q_socket_config+0x144>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	08001451 	.word	0x08001451
 80013f4:	080014bf 	.word	0x080014bf
 80013f8:	08001519 	.word	0x08001519
    {
        case CH395Q_SOCKET_UDP:
            /* socket 为UDP模式 */
            ch395_set_socket_desip(ch395_sokect->socket_index, ch395_sokect->des_ip);                                           /* 设置socket 0目标IP地址 */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785a      	ldrb	r2, [r3, #1]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3303      	adds	r3, #3
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f000 fe9a 	bl	8002140 <ch395_set_socket_desip>
            ch395_set_socket_prot_type(ch395_sokect->socket_index,  PROTO_TYPE_UDP);                                            /* 设置socket 0协议类型 */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	2102      	movs	r1, #2
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fec8 	bl	80021a8 <ch395_set_socket_prot_type>
            ch395_set_socket_desport(ch395_sokect->socket_index, ch395_sokect->des_port);                                       /* 设置socket 0目的端口 */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	785a      	ldrb	r2, [r3, #1]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	891b      	ldrh	r3, [r3, #8]
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f000 fede 	bl	80021e4 <ch395_set_socket_desport>
            ch395_set_socket_sourport(ch395_sokect->socket_index, ch395_sokect->sour_port);                                     /* 设置socket 0源端口 */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	785a      	ldrb	r2, [r3, #1]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	895b      	ldrh	r3, [r3, #10]
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f000 fefc 	bl	8002230 <ch395_set_socket_sourport>
            g_ch395q_sta.ch395_error(ch395_open_socket(ch395_sokect->socket_index));                                            /* 检查是否成功 */
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <ch395q_socket_config+0x2a0>)
 800143a:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 ffb8 	bl	80023b8 <ch395_open_socket>
 8001448:	4603      	mov	r3, r0
 800144a:	4618      	mov	r0, r3
 800144c:	47a0      	blx	r4
            break;
 800144e:	e075      	b.n	800153c <ch395q_socket_config+0x294>
        case CH395Q_SOCKET_TCP_CLIENT:
            /* socket 为TCPClient模式 */
            ch395_keeplive_set();                                                                                               /* 保活设置 */
 8001450:	f7ff ff1a 	bl	8001288 <ch395_keeplive_set>
            ch395_set_socket_desip(ch395_sokect->socket_index, ch395_sokect->des_ip);                                           /* 设置socket 0目标IP地址 */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	785a      	ldrb	r2, [r3, #1]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3303      	adds	r3, #3
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f000 fe6e 	bl	8002140 <ch395_set_socket_desip>
            ch395_set_socket_prot_type(ch395_sokect->socket_index,  PROTO_TYPE_TCP);                                            /* 设置socket 0协议类型 */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	2103      	movs	r1, #3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fe9c 	bl	80021a8 <ch395_set_socket_prot_type>
            ch395_set_socket_desport(ch395_sokect->socket_index, ch395_sokect->des_port);                                       /* 设置socket 0目的端口 */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	785a      	ldrb	r2, [r3, #1]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	891b      	ldrh	r3, [r3, #8]
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f000 feb2 	bl	80021e4 <ch395_set_socket_desport>
            ch395_set_socket_sourport(ch395_sokect->socket_index, ch395_sokect->sour_port);                                     /* 设置socket 0源端口 */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	785a      	ldrb	r2, [r3, #1]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	895b      	ldrh	r3, [r3, #10]
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f000 fed0 	bl	8002230 <ch395_set_socket_sourport>
            g_ch395q_sta.ch395_error(ch395_open_socket(ch395_sokect->socket_index));                                            /* 检查sokect是否打开成功 */
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001492:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 ff8c 	bl	80023b8 <ch395_open_socket>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4618      	mov	r0, r3
 80014a4:	47a0      	blx	r4
            g_ch395q_sta.ch395_error(ch395_tcp_connect(ch395_sokect->socket_index));                                            /* 检查tcp连接是否成功 */
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <ch395q_socket_config+0x2a0>)
 80014a8:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 ffdd 	bl	8002470 <ch395_tcp_connect>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	47a0      	blx	r4
            break;
 80014bc:	e03e      	b.n	800153c <ch395q_socket_config+0x294>
        case CH395Q_SOCKET_TCP_SERVER:
            /* socket 为TCPServer模式 */
            ch395_set_socket_desip(ch395_sokect->socket_index, ch395_sokect->des_ip);                                           /* 设置socket 0目标IP地址 */
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	785a      	ldrb	r2, [r3, #1]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3303      	adds	r3, #3
 80014c6:	4619      	mov	r1, r3
 80014c8:	4610      	mov	r0, r2
 80014ca:	f000 fe39 	bl	8002140 <ch395_set_socket_desip>
            ch395_set_socket_prot_type(ch395_sokect->socket_index,  PROTO_TYPE_TCP);                                            /* 设置socket 0协议类型 */
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	785b      	ldrb	r3, [r3, #1]
 80014d2:	2103      	movs	r1, #3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fe67 	bl	80021a8 <ch395_set_socket_prot_type>
            ch395_set_socket_sourport(ch395_sokect->socket_index, ch395_sokect->sour_port);                                     /* 设置socket 0源端口 */
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	785a      	ldrb	r2, [r3, #1]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	895b      	ldrh	r3, [r3, #10]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4610      	mov	r0, r2
 80014e6:	f000 fea3 	bl	8002230 <ch395_set_socket_sourport>
            g_ch395q_sta.ch395_error(ch395_open_socket(ch395_sokect->socket_index));                                            /* 检查sokect是否打开成功 */
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <ch395q_socket_config+0x2a0>)
 80014ec:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 ff5f 	bl	80023b8 <ch395_open_socket>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	47a0      	blx	r4
            g_ch395q_sta.ch395_error(ch395_tcp_listen(ch395_sokect->socket_index));                                             /* 监听tcp连接 */
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001502:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 ffde 	bl	80024cc <ch395_tcp_listen>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	47a0      	blx	r4
            break;
 8001516:	e011      	b.n	800153c <ch395q_socket_config+0x294>
        case CH395Q_SOCKET_MAC_RAW:
            ch395_set_socket_prot_type(ch395_sokect->socket_index,  PROTO_TYPE_MAC_RAW);                                        /* 设置socket 0协议类型 */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fe42 	bl	80021a8 <ch395_set_socket_prot_type>
            g_ch395q_sta.ch395_error(ch395_open_socket(ch395_sokect->socket_index));                                            /* 检查sokect是否打开成功 */
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001526:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 ff42 	bl	80023b8 <ch395_open_socket>
 8001534:	4603      	mov	r3, r0
 8001536:	4618      	mov	r0, r3
 8001538:	47a0      	blx	r4
            break;
 800153a:	bf00      	nop
    }

    return 1;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	200002e0 	.word	0x200002e0

0800154c <ch395_error>:
 * @brief       调试使用，显示错误代码，并停机
 * @param       ierror 检测命令
 * @retval      无
 */
void ch395_error(uint8_t ierror)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
    if (ierror == CMD_ERR_SUCCESS)
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00b      	beq.n	8001574 <ch395_error+0x28>
    {
        return;          /* 操作成功 */
    }

    printf("Error: %02X\r\n", (uint16_t)ierror);    /* 显示错误 */
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4619      	mov	r1, r3
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <ch395_error+0x30>)
 8001562:	f008 f813 	bl	800958c <iprintf>

    while ( 1 )
    {
        HAL_Delay(200);
 8001566:	20c8      	movs	r0, #200	; 0xc8
 8001568:	f002 ffa6 	bl	80044b8 <HAL_Delay>
        HAL_Delay(200);
 800156c:	20c8      	movs	r0, #200	; 0xc8
 800156e:	f002 ffa3 	bl	80044b8 <HAL_Delay>
        HAL_Delay(200);
 8001572:	e7f8      	b.n	8001566 <ch395_error+0x1a>
        return;          /* 操作成功 */
 8001574:	bf00      	nop
    }
}
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	0800d850 	.word	0x0800d850

08001580 <ch395_phy_status>:
 * @brief       CH395 PHY状态
 * @param       phy_status：PHY状态值
 * @retval      无
 */
void ch395_phy_status(uint8_t phy_status)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
    switch (phy_status)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3b01      	subs	r3, #1
 800158e:	2b0f      	cmp	r3, #15
 8001590:	d836      	bhi.n	8001600 <ch395_phy_status+0x80>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <ch395_phy_status+0x18>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015d9 	.word	0x080015d9
 800159c:	080015e1 	.word	0x080015e1
 80015a0:	08001601 	.word	0x08001601
 80015a4:	080015e9 	.word	0x080015e9
 80015a8:	08001601 	.word	0x08001601
 80015ac:	08001601 	.word	0x08001601
 80015b0:	08001601 	.word	0x08001601
 80015b4:	080015f1 	.word	0x080015f1
 80015b8:	08001601 	.word	0x08001601
 80015bc:	08001601 	.word	0x08001601
 80015c0:	08001601 	.word	0x08001601
 80015c4:	08001601 	.word	0x08001601
 80015c8:	08001601 	.word	0x08001601
 80015cc:	08001601 	.word	0x08001601
 80015d0:	08001601 	.word	0x08001601
 80015d4:	080015f9 	.word	0x080015f9
    {
        case PHY_DISCONN:
            printf("PHY DISCONN\r\n");
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <ch395_phy_status+0xa0>)
 80015da:	f008 f83d 	bl	8009658 <puts>
            break;
 80015de:	e013      	b.n	8001608 <ch395_phy_status+0x88>
        case PHY_10M_FLL:
            printf("PHY 10M_FLL\r\n");
 80015e0:	4810      	ldr	r0, [pc, #64]	; (8001624 <ch395_phy_status+0xa4>)
 80015e2:	f008 f839 	bl	8009658 <puts>
            break;
 80015e6:	e00f      	b.n	8001608 <ch395_phy_status+0x88>
        case PHY_10M_HALF:
            printf("PHY 10M_HALF\r\n");
 80015e8:	480f      	ldr	r0, [pc, #60]	; (8001628 <ch395_phy_status+0xa8>)
 80015ea:	f008 f835 	bl	8009658 <puts>
            break;
 80015ee:	e00b      	b.n	8001608 <ch395_phy_status+0x88>
        case PHY_100M_FLL:
            printf("PHY 100M_FLL\r\n");
 80015f0:	480e      	ldr	r0, [pc, #56]	; (800162c <ch395_phy_status+0xac>)
 80015f2:	f008 f831 	bl	8009658 <puts>
            break;
 80015f6:	e007      	b.n	8001608 <ch395_phy_status+0x88>
        case PHY_100M_HALF:
            printf("PHY 100M_HALF\r\n");
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <ch395_phy_status+0xb0>)
 80015fa:	f008 f82d 	bl	8009658 <puts>
            break;
 80015fe:	e003      	b.n	8001608 <ch395_phy_status+0x88>
        default:
            printf("PHY AUTO\r\n");
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <ch395_phy_status+0xb4>)
 8001602:	f008 f829 	bl	8009658 <puts>
            break;
 8001606:	bf00      	nop
    }

    /* 喂狗 */
    HAL_IWDG_Refresh(&hiwdg);
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <ch395_phy_status+0xb8>)
 800160a:	f005 fa0c 	bl	8006a26 <HAL_IWDG_Refresh>
    HAL_Delay(1000);
 800160e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001612:	f002 ff51 	bl	80044b8 <HAL_Delay>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	0800d860 	.word	0x0800d860
 8001624:	0800d870 	.word	0x0800d870
 8001628:	0800d880 	.word	0x0800d880
 800162c:	0800d890 	.word	0x0800d890
 8001630:	0800d8a0 	.word	0x0800d8a0
 8001634:	0800d8b0 	.word	0x0800d8b0
 8001638:	20000658 	.word	0x20000658

0800163c <ch395_socket_r_s_buf_modify>:
 * @brief      设置socket接口的接收与发送缓冲区
 * @param      无
 * @retval     无
 */
void ch395_socket_r_s_buf_modify(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

   ch395_set_socket_recv_buf(0,0,4);                                                            /* Socket 0 ，接收缓冲区4*512 = 2K，发送缓冲区2*512 = 1K*/
 8001640:	2204      	movs	r2, #4
 8001642:	2100      	movs	r1, #0
 8001644:	2000      	movs	r0, #0
 8001646:	f000 fff3 	bl	8002630 <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(0,4,2);
 800164a:	2202      	movs	r2, #2
 800164c:	2104      	movs	r1, #4
 800164e:	2000      	movs	r0, #0
 8001650:	f001 f80a 	bl	8002668 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(1,6,4);                                                            /* Socket 1 */
 8001654:	2204      	movs	r2, #4
 8001656:	2106      	movs	r1, #6
 8001658:	2001      	movs	r0, #1
 800165a:	f000 ffe9 	bl	8002630 <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(1,10,2);
 800165e:	2202      	movs	r2, #2
 8001660:	210a      	movs	r1, #10
 8001662:	2001      	movs	r0, #1
 8001664:	f001 f800 	bl	8002668 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(2,12,4);                                                           /* Socket 2 */
 8001668:	2204      	movs	r2, #4
 800166a:	210c      	movs	r1, #12
 800166c:	2002      	movs	r0, #2
 800166e:	f000 ffdf 	bl	8002630 <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(2,16,2);
 8001672:	2202      	movs	r2, #2
 8001674:	2110      	movs	r1, #16
 8001676:	2002      	movs	r0, #2
 8001678:	f000 fff6 	bl	8002668 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(3,18,4);                                                           /* Socket 3 */
 800167c:	2204      	movs	r2, #4
 800167e:	2112      	movs	r1, #18
 8001680:	2003      	movs	r0, #3
 8001682:	f000 ffd5 	bl	8002630 <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(3,22,2);
 8001686:	2202      	movs	r2, #2
 8001688:	2116      	movs	r1, #22
 800168a:	2003      	movs	r0, #3
 800168c:	f000 ffec 	bl	8002668 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(4,24,4);                                                           /* Socket 4 */
 8001690:	2204      	movs	r2, #4
 8001692:	2118      	movs	r1, #24
 8001694:	2004      	movs	r0, #4
 8001696:	f000 ffcb 	bl	8002630 <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(4,28,2);
 800169a:	2202      	movs	r2, #2
 800169c:	211c      	movs	r1, #28
 800169e:	2004      	movs	r0, #4
 80016a0:	f000 ffe2 	bl	8002668 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(5,30,4);                                                           /* Socket 5 */
 80016a4:	2204      	movs	r2, #4
 80016a6:	211e      	movs	r1, #30
 80016a8:	2005      	movs	r0, #5
 80016aa:	f000 ffc1 	bl	8002630 <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(5,34,2);
 80016ae:	2202      	movs	r2, #2
 80016b0:	2122      	movs	r1, #34	; 0x22
 80016b2:	2005      	movs	r0, #5
 80016b4:	f000 ffd8 	bl	8002668 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(6,36,4);                                                           /* Socket 6 */
 80016b8:	2204      	movs	r2, #4
 80016ba:	2124      	movs	r1, #36	; 0x24
 80016bc:	2006      	movs	r0, #6
 80016be:	f000 ffb7 	bl	8002630 <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(6,40,2);
 80016c2:	2202      	movs	r2, #2
 80016c4:	2128      	movs	r1, #40	; 0x28
 80016c6:	2006      	movs	r0, #6
 80016c8:	f000 ffce 	bl	8002668 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(7,42,4);                                                           /* Socket 7 */
 80016cc:	2204      	movs	r2, #4
 80016ce:	212a      	movs	r1, #42	; 0x2a
 80016d0:	2007      	movs	r0, #7
 80016d2:	f000 ffad 	bl	8002630 <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(7,46,2);
 80016d6:	2202      	movs	r2, #2
 80016d8:	212e      	movs	r1, #46	; 0x2e
 80016da:	2007      	movs	r0, #7
 80016dc:	f000 ffc4 	bl	8002668 <ch395_set_socket_send_buf>

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <ch395_hardware_init>:
 * @brief      ch395_tcp初始化
 * @param      无
 * @retval     无
 */
void ch395_hardware_init(void)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
    uint8_t i;
    ch395_gpio_init();
 80016ea:	f7ff fd79 	bl	80011e0 <ch395_gpio_init>

    g_ch395q_sta.ch395_error = ch395_error;
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <ch395_hardware_init+0xc4>)
 80016f0:	4a2e      	ldr	r2, [pc, #184]	; (80017ac <ch395_hardware_init+0xc8>)
 80016f2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    g_ch395q_sta.ch395_phy_cb = ch395_phy_status;
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <ch395_hardware_init+0xc4>)
 80016f8:	4a2d      	ldr	r2, [pc, #180]	; (80017b0 <ch395_hardware_init+0xcc>)
 80016fa:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
    g_ch395q_sta.ch395_reconnection = ch395_reconnection;
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <ch395_hardware_init+0xc4>)
 8001700:	4a2c      	ldr	r2, [pc, #176]	; (80017b4 <ch395_hardware_init+0xd0>)
 8001702:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
    g_ch395q_sta.dhcp_status = DHCP_STA;
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <ch395_hardware_init+0xc4>)
 8001708:	2202      	movs	r2, #2
 800170a:	709a      	strb	r2, [r3, #2]

    i = ch395_cmd_check_exist(0x65);                                        /* 测试命令，用于测试硬件以及接口通讯 */
 800170c:	2065      	movs	r0, #101	; 0x65
 800170e:	f000 fbf9 	bl	8001f04 <ch395_cmd_check_exist>
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]

    if (i != 0x9a)
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b9a      	cmp	r3, #154	; 0x9a
 800171a:	d005      	beq.n	8001728 <ch395_hardware_init+0x44>
    {
        g_ch395q_sta.ch395_error(i);                                        /* ch395q检测错误 */
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <ch395_hardware_init+0xc4>)
 800171e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	4610      	mov	r0, r2
 8001726:	4798      	blx	r3
    }

    ch395_cmd_reset();                                                      /* 对ch395q复位 */
 8001728:	f000 fbc8 	bl	8001ebc <ch395_cmd_reset>
    HAL_Delay(100);                                                          /* 这里必须等待100以上延时 */
 800172c:	2064      	movs	r0, #100	; 0x64
 800172e:	f002 fec3 	bl	80044b8 <HAL_Delay>

    g_ch395q_sta.ch395_error(ch395_cmd_init());                             /* 初始化ch395q命令 */
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <ch395_hardware_init+0xc4>)
 8001734:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001738:	f000 fc16 	bl	8001f68 <ch395_cmd_init>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	47a0      	blx	r4
    ch395_socket_r_s_buf_modify();
 8001742:	f7ff ff7b 	bl	800163c <ch395_socket_r_s_buf_modify>
//      ch395_set_tcpmss(536);
//      ch395_set_start_para(FUN_PARA_FLAG_TCP_SERVER | SOCK_CTRL_FLAG_SOCKET_CLOSE);

    do
    {
        g_ch395q_sta.phy_status = ch395_cmd_get_phy_status();               /* 获取PHY状态 */
 8001746:	f000 fbf9 	bl	8001f3c <ch395_cmd_get_phy_status>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <ch395_hardware_init+0xc4>)
 8001750:	705a      	strb	r2, [r3, #1]
        g_ch395q_sta.ch395_phy_cb(g_ch395q_sta.phy_status);                 /* 判断双工和网速模式 */
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <ch395_hardware_init+0xc4>)
 8001754:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8001758:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <ch395_hardware_init+0xc4>)
 800175a:	7852      	ldrb	r2, [r2, #1]
 800175c:	4610      	mov	r0, r2
 800175e:	4798      	blx	r3
    }
    while(g_ch395q_sta.phy_status == PHY_DISCONN);
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <ch395_hardware_init+0xc4>)
 8001762:	785b      	ldrb	r3, [r3, #1]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d0ee      	beq.n	8001746 <ch395_hardware_init+0x62>

    g_ch395q_sta.version = ch395_cmd_get_ver();                             /* 获取版本 */
 8001768:	f000 fbb6 	bl	8001ed8 <ch395_cmd_get_ver>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <ch395_hardware_init+0xc4>)
 8001772:	701a      	strb	r2, [r3, #0]
    printf("CH395VER : %2x\r\n", (uint16_t)g_ch395q_sta.version);
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <ch395_hardware_init+0xc4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	480f      	ldr	r0, [pc, #60]	; (80017b8 <ch395_hardware_init+0xd4>)
 800177c:	f007 ff06 	bl	800958c <iprintf>

    i = ch395_dhcp_enable(1);                                               /* 开启DHCP */
 8001780:	2001      	movs	r0, #1
 8001782:	f000 fef1 	bl	8002568 <ch395_dhcp_enable>
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
    g_ch395q_sta.ch395_error(i);                                            /* ch395q检测错误 */
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <ch395_hardware_init+0xc4>)
 800178c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	4610      	mov	r0, r2
 8001794:	4798      	blx	r3

    HAL_Delay(1000);                                                         /* ch395q初始化延时 */
 8001796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800179a:	f002 fe8d 	bl	80044b8 <HAL_Delay>
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd90      	pop	{r4, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200002e0 	.word	0x200002e0
 80017ac:	0800154d 	.word	0x0800154d
 80017b0:	08001581 	.word	0x08001581
 80017b4:	08001bb5 	.word	0x08001bb5
 80017b8:	0800d8bc 	.word	0x0800d8bc

080017bc <ch395_socket_interrupt>:
 * @brief       CH395 socket 中断,在全局中断中被调用
 * @param       sockindex （0~7）
 * @retval      无
 */
void ch395_socket_interrupt(uint8_t sockindex)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
    uint8_t  sock_int_socket;
    uint16_t rx_len = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	81fb      	strh	r3, [r7, #14]

    sock_int_socket = ch395_get_socket_int(sockindex);      /* 获取socket 的中断状态 */
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 feab 	bl	8002528 <ch395_get_socket_int>
 80017d2:	4603      	mov	r3, r0
 80017d4:	737b      	strb	r3, [r7, #13]
    if (sock_int_socket & SINT_STAT_SENBUF_FREE)            /* 发送缓冲区空闲，可以继续写入要发送的数据 */
    {

    }

    if (sock_int_socket & SINT_STAT_SEND_OK)                /* 发送完成中断 */
 80017d6:	7b7b      	ldrb	r3, [r7, #13]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <ch395_socket_interrupt+0x2a>
    {
    	/* 若发送完成，则喂狗，否则说明发送失败，连续发送失败则说明已与服务端断开，则看门狗复位重启传感器 */
    	HAL_IWDG_Refresh(&hiwdg);
 80017e0:	487a      	ldr	r0, [pc, #488]	; (80019cc <ch395_socket_interrupt+0x210>)
 80017e2:	f005 f920 	bl	8006a26 <HAL_IWDG_Refresh>
    }

    if (sock_int_socket & SINT_STAT_RECV)                   /* 接收中断 */
 80017e6:	7b7b      	ldrb	r3, [r7, #13]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d049      	beq.n	8001884 <ch395_socket_interrupt+0xc8>
    {
        g_ch395q_sta.socket[sockindex].config.recv.size = ch395_get_recv_length(sockindex);     /* 获取当前缓冲区内数据长度 */
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd7a 	bl	80022ec <ch395_get_recv_length>
 80017f8:	4603      	mov	r3, r0
 80017fa:	79fa      	ldrb	r2, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	4974      	ldr	r1, [pc, #464]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3334      	adds	r3, #52	; 0x34
 800180c:	6018      	str	r0, [r3, #0]
        rx_len = g_ch395q_sta.socket[sockindex].config.recv.size;
 800180e:	79fa      	ldrb	r2, [r7, #7]
 8001810:	496f      	ldr	r1, [pc, #444]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3334      	adds	r3, #52	; 0x34
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	81fb      	strh	r3, [r7, #14]
        ch395_get_recv_data(sockindex, rx_len, g_ch395q_sta.socket[sockindex].config.recv.buf); /* 读取数据 */
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	496a      	ldr	r1, [pc, #424]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3330      	adds	r3, #48	; 0x30
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	89f9      	ldrh	r1, [r7, #14]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fd7d 	bl	8002338 <ch395_get_recv_data>
        g_ch395q_sta.socket[sockindex].config.recv.buf[rx_len] = '\0';
 800183e:	79fa      	ldrb	r2, [r7, #7]
 8001840:	4963      	ldr	r1, [pc, #396]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001842:	4613      	mov	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	3330      	adds	r3, #48	; 0x30
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	4413      	add	r3, r2
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
//        printf("%s", g_ch395q_sta.socket[sockindex].config.recv.buf);
        g_ch395q_sta.socket[sockindex].config.recv.recv_flag |= 0x04;
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	495d      	ldr	r1, [pc, #372]	; (80019d0 <ch395_socket_interrupt+0x214>)
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	332c      	adds	r3, #44	; 0x2c
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	b2d8      	uxtb	r0, r3
 8001872:	4957      	ldr	r1, [pc, #348]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001874:	4613      	mov	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	332c      	adds	r3, #44	; 0x2c
 8001880:	4602      	mov	r2, r0
 8001882:	701a      	strb	r2, [r3, #0]
    }

    if (sock_int_socket & SINT_STAT_CONNECT)                /* 连接中断，仅在TCP模式下有效 */
 8001884:	7b7b      	ldrb	r3, [r7, #13]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d014      	beq.n	80018b8 <ch395_socket_interrupt+0xfc>
    {
        if (g_ch395q_sta.socket[sockindex].config.proto == CH395Q_SOCKET_TCP_CLIENT)
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	494f      	ldr	r1, [pc, #316]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	331a      	adds	r3, #26
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d109      	bne.n	80018b8 <ch395_socket_interrupt+0xfc>
        {
            ch395_set_keeplive(sockindex,1);                /* 打开KEEPALIVE保活定时器 */
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 ff1b 	bl	80026e4 <ch395_set_keeplive>
            ch395_setttl_num(sockindex,60);                 /* 设置TTL */
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	213c      	movs	r1, #60	; 0x3c
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 ff85 	bl	80027c2 <ch395_setttl_num>
        }
    }

    if (sock_int_socket & SINT_STAT_DISCONNECT)             /* 断开中断，仅在TCP模式下有效 */
 80018b8:	7b7b      	ldrb	r3, [r7, #13]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d048      	beq.n	8001954 <ch395_socket_interrupt+0x198>
    {
        g_ch395q_sta.ch395_error(ch395_open_socket(g_ch395q_sta.socket[sockindex].config.socket_index));
 80018c2:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <ch395_socket_interrupt+0x214>)
 80018c4:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 80018c8:	79fa      	ldrb	r2, [r7, #7]
 80018ca:	4941      	ldr	r1, [pc, #260]	; (80019d0 <ch395_socket_interrupt+0x214>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	3319      	adds	r3, #25
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fd6c 	bl	80023b8 <ch395_open_socket>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4618      	mov	r0, r3
 80018e4:	47a0      	blx	r4

        switch(g_ch395q_sta.socket[sockindex].config.proto)
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	4939      	ldr	r1, [pc, #228]	; (80019d0 <ch395_socket_interrupt+0x214>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	331a      	adds	r3, #26
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d002      	beq.n	8001902 <ch395_socket_interrupt+0x146>
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d013      	beq.n	8001928 <ch395_socket_interrupt+0x16c>
                break;
            case CH395Q_SOCKET_TCP_SERVER:
                g_ch395q_sta.ch395_error(ch395_tcp_listen(g_ch395q_sta.socket[sockindex].config.socket_index));
                break;
            default:
                break;
 8001900:	e025      	b.n	800194e <ch395_socket_interrupt+0x192>
                g_ch395q_sta.ch395_error(ch395_tcp_connect(g_ch395q_sta.socket[sockindex].config.socket_index));
 8001902:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001904:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	4931      	ldr	r1, [pc, #196]	; (80019d0 <ch395_socket_interrupt+0x214>)
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3319      	adds	r3, #25
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fda8 	bl	8002470 <ch395_tcp_connect>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	47a0      	blx	r4
                break;
 8001926:	e012      	b.n	800194e <ch395_socket_interrupt+0x192>
                g_ch395q_sta.ch395_error(ch395_tcp_listen(g_ch395q_sta.socket[sockindex].config.socket_index));
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <ch395_socket_interrupt+0x214>)
 800192a:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	4927      	ldr	r1, [pc, #156]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	3319      	adds	r3, #25
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fdc3 	bl	80024cc <ch395_tcp_listen>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	47a0      	blx	r4
                break;
 800194c:	bf00      	nop
        }
        HAL_Delay(200);                                      /* 延时200MS后再次重试，没有必要过于频繁连接 */
 800194e:	20c8      	movs	r0, #200	; 0xc8
 8001950:	f002 fdb2 	bl	80044b8 <HAL_Delay>
    }

    if (sock_int_socket & SINT_STAT_TIM_OUT)                /* 超时中断，仅在TCP模式下有效 */
 8001954:	7b7b      	ldrb	r3, [r7, #13]
 8001956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d031      	beq.n	80019c2 <ch395_socket_interrupt+0x206>
    {
        if (g_ch395q_sta.socket[sockindex].config.proto == CH395Q_SOCKET_TCP_CLIENT)
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	491b      	ldr	r1, [pc, #108]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	331a      	adds	r3, #26
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d126      	bne.n	80019c2 <ch395_socket_interrupt+0x206>
        {
            HAL_Delay(200);                                  /* 延时200MS后再次重试，没有必要过于频繁连接 */
 8001974:	20c8      	movs	r0, #200	; 0xc8
 8001976:	f002 fd9f 	bl	80044b8 <HAL_Delay>
            g_ch395q_sta.ch395_error(ch395_open_socket(g_ch395q_sta.socket[sockindex].config.socket_index));
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <ch395_socket_interrupt+0x214>)
 800197c:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	4913      	ldr	r1, [pc, #76]	; (80019d0 <ch395_socket_interrupt+0x214>)
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	3319      	adds	r3, #25
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fd10 	bl	80023b8 <ch395_open_socket>
 8001998:	4603      	mov	r3, r0
 800199a:	4618      	mov	r0, r3
 800199c:	47a0      	blx	r4
            g_ch395q_sta.ch395_error(ch395_tcp_connect(g_ch395q_sta.socket[sockindex].config.socket_index));
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <ch395_socket_interrupt+0x214>)
 80019a0:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 80019a4:	79fa      	ldrb	r2, [r7, #7]
 80019a6:	490a      	ldr	r1, [pc, #40]	; (80019d0 <ch395_socket_interrupt+0x214>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3319      	adds	r3, #25
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fd5a 	bl	8002470 <ch395_tcp_connect>
 80019bc:	4603      	mov	r3, r0
 80019be:	4618      	mov	r0, r3
 80019c0:	47a0      	blx	r4
        }
    }
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000658 	.word	0x20000658
 80019d0:	200002e0 	.word	0x200002e0

080019d4 <ch395_interrupt_handler>:
 * @brief       CH395全局中断函数
 * @param       无
 * @retval      无
 */
void ch395_interrupt_handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af02      	add	r7, sp, #8
    uint16_t  init_status;
    uint8_t i;

    init_status = ch395_cmd_get_glob_int_status_all();
 80019da:	f000 fe61 	bl	80026a0 <ch395_cmd_get_glob_int_status_all>
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]

    if (init_status & GINT_STAT_UNREACH)                                    /* 不可达中断，读取不可达信息 */
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <ch395_interrupt_handler+0x1e>
    {
         ch395_cmd_get_unreachippt(g_ch395q_sta.ipinf_buf);
 80019ec:	485e      	ldr	r0, [pc, #376]	; (8001b68 <ch395_interrupt_handler+0x194>)
 80019ee:	f000 fb85 	bl	80020fc <ch395_cmd_get_unreachippt>
    if (init_status & GINT_STAT_IP_CONFLI)                                  /* 产生IP冲突中断，建议重新修改CH395的 IP，并初始化CH395 */
    {

    }

    if (init_status & GINT_STAT_PHY_CHANGE)                                 /* 产生PHY改变中断 */
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <ch395_interrupt_handler+0x34>
    {
        g_ch395q_sta.phy_status = ch395_cmd_get_phy_status();               /* 获取PHY状态 */
 80019fc:	f000 fa9e 	bl	8001f3c <ch395_cmd_get_phy_status>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a06:	705a      	strb	r2, [r3, #1]
    }

    if (init_status & GINT_STAT_DHCP)                                       /* 处理DHCP中断 */
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d066      	beq.n	8001ae0 <ch395_interrupt_handler+0x10c>
    {

        i = ch395_get_dhcp_status();
 8001a12:	f000 fdd5 	bl	80025c0 <ch395_get_dhcp_status>
 8001a16:	4603      	mov	r3, r0
 8001a18:	717b      	strb	r3, [r7, #5]
        i = DHCP_DOWN;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	717b      	strb	r3, [r7, #5]

        switch (i)
 8001a1e:	797b      	ldrb	r3, [r7, #5]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d156      	bne.n	8001ad2 <ch395_interrupt_handler+0xfe>
        {
            case DHCP_UP:
                ch395_get_ipinf(g_ch395q_sta.ipinf_buf);
 8001a24:	4850      	ldr	r0, [pc, #320]	; (8001b68 <ch395_interrupt_handler+0x194>)
 8001a26:	f000 fde1 	bl	80025ec <ch395_get_ipinf>
                printf("IP:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[0], (uint16_t)g_ch395q_sta.ipinf_buf[1], (uint16_t)g_ch395q_sta.ipinf_buf[2], (uint16_t)g_ch395q_sta.ipinf_buf[3]);
 8001a2a:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a2c:	78db      	ldrb	r3, [r3, #3]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4b4e      	ldr	r3, [pc, #312]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a32:	791b      	ldrb	r3, [r3, #4]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a38:	795b      	ldrb	r3, [r3, #5]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a3e:	799b      	ldrb	r3, [r3, #6]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	4603      	mov	r3, r0
 8001a44:	484a      	ldr	r0, [pc, #296]	; (8001b70 <ch395_interrupt_handler+0x19c>)
 8001a46:	f007 fda1 	bl	800958c <iprintf>
                printf("GWIP:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[4], (uint16_t)g_ch395q_sta.ipinf_buf[5], (uint16_t)g_ch395q_sta.ipinf_buf[6], (uint16_t)g_ch395q_sta.ipinf_buf[7]);
 8001a4a:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a4c:	79db      	ldrb	r3, [r3, #7]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a52:	7a1b      	ldrb	r3, [r3, #8]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a58:	7a5b      	ldrb	r3, [r3, #9]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a5e:	7a9b      	ldrb	r3, [r3, #10]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4603      	mov	r3, r0
 8001a64:	4843      	ldr	r0, [pc, #268]	; (8001b74 <ch395_interrupt_handler+0x1a0>)
 8001a66:	f007 fd91 	bl	800958c <iprintf>
                printf("Mask:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[8], (uint16_t)g_ch395q_sta.ipinf_buf[9], (uint16_t)g_ch395q_sta.ipinf_buf[10], (uint16_t)g_ch395q_sta.ipinf_buf[11]);
 8001a6a:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a6c:	7adb      	ldrb	r3, [r3, #11]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a72:	7b1b      	ldrb	r3, [r3, #12]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a78:	7b5b      	ldrb	r3, [r3, #13]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a7e:	7b9b      	ldrb	r3, [r3, #14]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	4603      	mov	r3, r0
 8001a84:	483c      	ldr	r0, [pc, #240]	; (8001b78 <ch395_interrupt_handler+0x1a4>)
 8001a86:	f007 fd81 	bl	800958c <iprintf>
                printf("DNS1:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[12], (uint16_t)g_ch395q_sta.ipinf_buf[13], (uint16_t)g_ch395q_sta.ipinf_buf[14], (uint16_t)g_ch395q_sta.ipinf_buf[15]);
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a8c:	7bdb      	ldrb	r3, [r3, #15]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a92:	7c1b      	ldrb	r3, [r3, #16]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a98:	7c5b      	ldrb	r3, [r3, #17]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001a9e:	7c9b      	ldrb	r3, [r3, #18]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4835      	ldr	r0, [pc, #212]	; (8001b7c <ch395_interrupt_handler+0x1a8>)
 8001aa6:	f007 fd71 	bl	800958c <iprintf>
                printf("DNS2:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[16], (uint16_t)g_ch395q_sta.ipinf_buf[17], (uint16_t)g_ch395q_sta.ipinf_buf[18], (uint16_t)g_ch395q_sta.ipinf_buf[19]);
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001aac:	7cdb      	ldrb	r3, [r3, #19]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001ab2:	7d1b      	ldrb	r3, [r3, #20]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001ab8:	7d5b      	ldrb	r3, [r3, #21]
 8001aba:	4618      	mov	r0, r3
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001abe:	7d9b      	ldrb	r3, [r3, #22]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	482e      	ldr	r0, [pc, #184]	; (8001b80 <ch395_interrupt_handler+0x1ac>)
 8001ac6:	f007 fd61 	bl	800958c <iprintf>
                g_ch395q_sta.dhcp_status = DHCP_UP;
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	709a      	strb	r2, [r3, #2]
                break;
 8001ad0:	e006      	b.n	8001ae0 <ch395_interrupt_handler+0x10c>
            default:
                g_ch395q_sta.dhcp_status = DHCP_DOWN;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <ch395_interrupt_handler+0x198>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	709a      	strb	r2, [r3, #2]
                /* 设置默认IP地址信息 */
                printf("Static IP Mode.....................................\r\n");
 8001ad8:	482a      	ldr	r0, [pc, #168]	; (8001b84 <ch395_interrupt_handler+0x1b0>)
 8001ada:	f007 fdbd 	bl	8009658 <puts>
                break;
 8001ade:	bf00      	nop
        }
    }

    if (init_status & GINT_STAT_SOCK0)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <ch395_interrupt_handler+0x11c>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_0);                          /* 处理socket 0中断 */
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff fe66 	bl	80017bc <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK1)
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <ch395_interrupt_handler+0x12c>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_1);                          /* 处理socket 1中断 */
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff fe5e 	bl	80017bc <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK2)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <ch395_interrupt_handler+0x13c>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_2);                          /* 处理socket 2中断 */
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7ff fe56 	bl	80017bc <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK3)
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <ch395_interrupt_handler+0x14c>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_3);                          /* 处理socket 3中断 */
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	f7ff fe4e 	bl	80017bc <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK4)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <ch395_interrupt_handler+0x15c>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_4);                          /* 处理socket 4中断 */
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	f7ff fe46 	bl	80017bc <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK5)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <ch395_interrupt_handler+0x16c>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_5);                          /* 处理socket 5中断 */
 8001b3a:	2005      	movs	r0, #5
 8001b3c:	f7ff fe3e 	bl	80017bc <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK6)
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <ch395_interrupt_handler+0x17c>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_6);                          /* 处理socket 6中断 */
 8001b4a:	2006      	movs	r0, #6
 8001b4c:	f7ff fe36 	bl	80017bc <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK7)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <ch395_interrupt_handler+0x18c>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_7);                          /* 处理socket 7中断 */
 8001b5a:	2007      	movs	r0, #7
 8001b5c:	f7ff fe2e 	bl	80017bc <ch395_socket_interrupt>
    }
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200002e3 	.word	0x200002e3
 8001b6c:	200002e0 	.word	0x200002e0
 8001b70:	0800d8d0 	.word	0x0800d8d0
 8001b74:	0800d8ec 	.word	0x0800d8ec
 8001b78:	0800d908 	.word	0x0800d908
 8001b7c:	0800d924 	.word	0x0800d924
 8001b80:	0800d940 	.word	0x0800d940
 8001b84:	0800d95c 	.word	0x0800d95c

08001b88 <ch395q_handler>:
 * @brief       CH395全局管理函数
 * @param       无
 * @retval      无
 */
void ch395q_handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
    if (ch395_int_pin_wire == 0)
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <ch395q_handler+0x24>)
 8001b90:	f003 fed4 	bl	800593c <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <ch395q_handler+0x16>
    {
        ch395_interrupt_handler();                                       /* 中断处理函数 */
 8001b9a:	f7ff ff1b 	bl	80019d4 <ch395_interrupt_handler>
    }

    g_ch395q_sta.ch395_reconnection();                                   /* 检测PHY状态，并重新连接 */
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <ch395q_handler+0x28>)
 8001ba0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8001ba4:	4798      	blx	r3
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	200002e0 	.word	0x200002e0

08001bb4 <ch395_reconnection>:
 * @brief       检测PHY状态，并重新连接
 * @param       无
 * @retval      无
 */
void ch395_reconnection(void)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
    for (uint8_t socket_index = CH395Q_SOCKET_0 ; socket_index <= CH395Q_SOCKET_7 ; socket_index ++ )
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	e16e      	b.n	8001e9e <ch395_reconnection+0x2ea>
    {
        if (g_ch395q_sta.phy_status == PHY_DISCONN && (g_ch395q_sta.dhcp_status == DHCP_UP || g_ch395q_sta.dhcp_status == DHCP_DOWN || g_ch395q_sta.dhcp_status == DHCP_STA))
 8001bc0:	4bbb      	ldr	r3, [pc, #748]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d13c      	bne.n	8001c42 <ch395_reconnection+0x8e>
 8001bc8:	4bb9      	ldr	r3, [pc, #740]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001bca:	789b      	ldrb	r3, [r3, #2]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <ch395_reconnection+0x2c>
 8001bd0:	4bb7      	ldr	r3, [pc, #732]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001bd2:	789b      	ldrb	r3, [r3, #2]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d003      	beq.n	8001be0 <ch395_reconnection+0x2c>
 8001bd8:	4bb5      	ldr	r3, [pc, #724]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001bda:	789b      	ldrb	r3, [r3, #2]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <ch395_reconnection+0x8e>
        {
            if (g_ch395q_sta.socket[socket_index].config.socket_enable == CH395Q_ENABLE)
 8001be0:	79fa      	ldrb	r2, [r7, #7]
 8001be2:	49b3      	ldr	r1, [pc, #716]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	3318      	adds	r3, #24
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d121      	bne.n	8001c3a <ch395_reconnection+0x86>
            {
                ch395_close_socket(g_ch395q_sta.socket[socket_index].config.socket_index);
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	49ad      	ldr	r1, [pc, #692]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3319      	adds	r3, #25
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fc03 	bl	8002414 <ch395_close_socket>
                g_ch395q_sta.ch395_error(ch395_dhcp_enable(0));                                                                 /* ch395q检测错误 */
 8001c0e:	4ba8      	ldr	r3, [pc, #672]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001c10:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 fca7 	bl	8002568 <ch395_dhcp_enable>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	47a0      	blx	r4
                g_ch395q_sta.socket[socket_index].config.socket_enable = CH395Q_DISABLE;
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	49a3      	ldr	r1, [pc, #652]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3318      	adds	r3, #24
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
                g_ch395q_sta.dhcp_status = DHCP_STA;
 8001c34:	4b9e      	ldr	r3, [pc, #632]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001c36:	2202      	movs	r2, #2
 8001c38:	709a      	strb	r2, [r3, #2]
            }

            printf("PHY DISCONN\r\n");
 8001c3a:	489e      	ldr	r0, [pc, #632]	; (8001eb4 <ch395_reconnection+0x300>)
 8001c3c:	f007 fd0c 	bl	8009658 <puts>
 8001c40:	e12a      	b.n	8001e98 <ch395_reconnection+0x2e4>
        }
        else
        {
            if (g_ch395q_sta.phy_status != PHY_DISCONN && g_ch395q_sta.socket[socket_index].config.socket_enable == CH395Q_DISABLE)
 8001c42:	4b9b      	ldr	r3, [pc, #620]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	f000 8126 	beq.w	8001e98 <ch395_reconnection+0x2e4>
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	4998      	ldr	r1, [pc, #608]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3318      	adds	r3, #24
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f040 811a 	bne.w	8001e98 <ch395_reconnection+0x2e4>
            {
                if (g_ch395q_sta.dhcp_status == DHCP_STA)
 8001c64:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d114      	bne.n	8001c96 <ch395_reconnection+0xe2>
                {
                    ch395_cmd_reset();                                                                                          /* 对ch395q复位 */
 8001c6c:	f000 f926 	bl	8001ebc <ch395_cmd_reset>
                    HAL_Delay(100);                                                                                              /* 这里必须等待100以上延时 */
 8001c70:	2064      	movs	r0, #100	; 0x64
 8001c72:	f002 fc21 	bl	80044b8 <HAL_Delay>
                    ch395_cmd_init();
 8001c76:	f000 f977 	bl	8001f68 <ch395_cmd_init>
                    HAL_Delay(100);                                                                                              /* 这里必须等待100以上延时 */
 8001c7a:	2064      	movs	r0, #100	; 0x64
 8001c7c:	f002 fc1c 	bl	80044b8 <HAL_Delay>
                    ch395_socket_r_s_buf_modify();
 8001c80:	f7ff fcdc 	bl	800163c <ch395_socket_r_s_buf_modify>
//                    ch395_set_tcpmss(536);
//                    ch395_set_start_para(FUN_PARA_FLAG_TCP_SERVER | SOCK_CTRL_FLAG_SOCKET_CLOSE);
                    g_ch395q_sta.ch395_error(ch395_dhcp_enable(1));                                                             /* 开启DHCP */
 8001c84:	4b8a      	ldr	r3, [pc, #552]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001c86:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f000 fc6c 	bl	8002568 <ch395_dhcp_enable>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4618      	mov	r0, r3
 8001c94:	47a0      	blx	r4
                }

                do
                {
                    if (ch395_int_pin_wire == 0)
 8001c96:	2102      	movs	r1, #2
 8001c98:	4887      	ldr	r0, [pc, #540]	; (8001eb8 <ch395_reconnection+0x304>)
 8001c9a:	f003 fe4f 	bl	800593c <HAL_GPIO_ReadPin>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <ch395_reconnection+0xf4>
                    {
                        ch395_interrupt_handler();                                                                              /* 中断处理函数 */
 8001ca4:	f7ff fe96 	bl	80019d4 <ch395_interrupt_handler>
                    }
                }
                while (g_ch395q_sta.dhcp_status == DHCP_STA);                                                                   /* 获取DHCP */
 8001ca8:	4b81      	ldr	r3, [pc, #516]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001caa:	789b      	ldrb	r3, [r3, #2]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d0f2      	beq.n	8001c96 <ch395_reconnection+0xe2>

                switch(g_ch395q_sta.socket[socket_index].config.proto)
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	497f      	ldr	r1, [pc, #508]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	331a      	adds	r3, #26
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	f200 80d2 	bhi.w	8001e6c <ch395_reconnection+0x2b8>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <ch395_reconnection+0x11c>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001d55 	.word	0x08001d55
 8001cd8:	08001de1 	.word	0x08001de1
 8001cdc:	08001e4d 	.word	0x08001e4d
                {
                    case CH395Q_SOCKET_UDP:
                        /* socket 为UDP模式 */
                        ch395_set_socket_desip(socket_index, g_ch395q_sta.socket[socket_index].config.des_ip);                  /* 设置socket 0目标IP地址 */
 8001ce0:	79fa      	ldrb	r2, [r7, #7]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	3318      	adds	r3, #24
 8001cec:	4a70      	ldr	r2, [pc, #448]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001cee:	4413      	add	r3, r2
 8001cf0:	1cda      	adds	r2, r3, #3
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fa22 	bl	8002140 <ch395_set_socket_desip>
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_UDP);                                              /* 设置socket 0协议类型 */
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2102      	movs	r1, #2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fa51 	bl	80021a8 <ch395_set_socket_prot_type>
                        ch395_set_socket_desport(socket_index, g_ch395q_sta.socket[socket_index].config.des_port);              /* 设置socket 0目的端口 */
 8001d06:	79fa      	ldrb	r2, [r7, #7]
 8001d08:	4969      	ldr	r1, [pc, #420]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	3320      	adds	r3, #32
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fa61 	bl	80021e4 <ch395_set_socket_desport>
                        ch395_set_socket_sourport(socket_index, g_ch395q_sta.socket[socket_index].config.sour_port);            /* 设置socket 0源端口 */
 8001d22:	79fa      	ldrb	r2, [r7, #7]
 8001d24:	4962      	ldr	r1, [pc, #392]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	3322      	adds	r3, #34	; 0x22
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fa79 	bl	8002230 <ch395_set_socket_sourport>
                        g_ch395q_sta.ch395_error(ch395_open_socket(socket_index));                                              /* 检查是否成功 */
 8001d3e:	4b5c      	ldr	r3, [pc, #368]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001d40:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fb36 	bl	80023b8 <ch395_open_socket>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	47a0      	blx	r4
                        break;
 8001d52:	e097      	b.n	8001e84 <ch395_reconnection+0x2d0>
                    case CH395Q_SOCKET_TCP_CLIENT:
                        /* socket 为TCPClient模式 */
                        ch395_keeplive_set();                                                                                   /* 保活设置 */
 8001d54:	f7ff fa98 	bl	8001288 <ch395_keeplive_set>
                        ch395_set_socket_desip(socket_index, g_ch395q_sta.socket[socket_index].config.des_ip);                  /* 设置socket 0目标IP地址 */
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	3318      	adds	r3, #24
 8001d64:	4a52      	ldr	r2, [pc, #328]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001d66:	4413      	add	r3, r2
 8001d68:	1cda      	adds	r2, r3, #3
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f9e6 	bl	8002140 <ch395_set_socket_desip>
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_TCP);                                              /* 设置socket 0协议类型 */
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2103      	movs	r1, #3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fa15 	bl	80021a8 <ch395_set_socket_prot_type>
                        ch395_set_socket_desport(socket_index,g_ch395q_sta.socket[socket_index].config.des_port);               /* 设置socket 0目的端口 */
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	494b      	ldr	r1, [pc, #300]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3320      	adds	r3, #32
 8001d8e:	881a      	ldrh	r2, [r3, #0]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fa25 	bl	80021e4 <ch395_set_socket_desport>
                        ch395_set_socket_sourport(socket_index,g_ch395q_sta.socket[socket_index].config.sour_port);             /* 设置socket 0源端口 */
 8001d9a:	79fa      	ldrb	r2, [r7, #7]
 8001d9c:	4944      	ldr	r1, [pc, #272]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	3322      	adds	r3, #34	; 0x22
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fa3d 	bl	8002230 <ch395_set_socket_sourport>
                        g_ch395q_sta.ch395_error(ch395_open_socket(socket_index));                                              /* 检查sokect是否打开成功 */
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001db8:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fafa 	bl	80023b8 <ch395_open_socket>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	47a0      	blx	r4
                        g_ch395q_sta.ch395_error(ch395_tcp_connect(socket_index));                                              /* 检查tcp连接是否成功 */
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001dcc:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fb4c 	bl	8002470 <ch395_tcp_connect>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	47a0      	blx	r4
                        break;
 8001dde:	e051      	b.n	8001e84 <ch395_reconnection+0x2d0>
                    case CH395Q_SOCKET_TCP_SERVER:
                        /* socket 为TCPServer模式 */
                        ch395_set_socket_desip(socket_index, g_ch395q_sta.socket[socket_index].config.des_ip);                  /* 设置socket 0目标IP地址 */
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	3318      	adds	r3, #24
 8001dec:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001dee:	4413      	add	r3, r2
 8001df0:	1cda      	adds	r2, r3, #3
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f9a2 	bl	8002140 <ch395_set_socket_desip>
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_TCP);                                              /* 设置socket 0协议类型 */
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2103      	movs	r1, #3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f9d1 	bl	80021a8 <ch395_set_socket_prot_type>
                        ch395_set_socket_sourport(socket_index, g_ch395q_sta.socket[socket_index].config.sour_port);            /* 设置socket 0源端口 */
 8001e06:	79fa      	ldrb	r2, [r7, #7]
 8001e08:	4929      	ldr	r1, [pc, #164]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	3322      	adds	r3, #34	; 0x22
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fa07 	bl	8002230 <ch395_set_socket_sourport>
                        g_ch395q_sta.ch395_error(ch395_open_socket(socket_index));                                              /* 检查sokect是否打开成功 */
 8001e22:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001e24:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fac4 	bl	80023b8 <ch395_open_socket>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	47a0      	blx	r4
                        g_ch395q_sta.ch395_error(ch395_tcp_listen(socket_index));                                               /* 监听tcp连接 */
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001e38:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fb44 	bl	80024cc <ch395_tcp_listen>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4618      	mov	r0, r3
 8001e48:	47a0      	blx	r4
                        break;
 8001e4a:	e01b      	b.n	8001e84 <ch395_reconnection+0x2d0>
                    case CH395Q_SOCKET_MAC_RAW:
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_MAC_RAW);                                          /* 设置socket 0协议类型 */
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 f9a9 	bl	80021a8 <ch395_set_socket_prot_type>
                        g_ch395q_sta.ch395_error(ch395_open_socket(socket_index));                                              /* 检查sokect是否打开成功 */
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001e58:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 faaa 	bl	80023b8 <ch395_open_socket>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4618      	mov	r0, r3
 8001e68:	47a0      	blx	r4
                        break;
 8001e6a:	e00b      	b.n	8001e84 <ch395_reconnection+0x2d0>
                    default:
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_TCP);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	2103      	movs	r1, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f999 	bl	80021a8 <ch395_set_socket_prot_type>
                        ch395_set_socket_sourport(socket_index, 8080);                                                          /* 设置socket 1~7源端口 */
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f641 7190 	movw	r1, #8080	; 0x1f90
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 f9d7 	bl	8002230 <ch395_set_socket_sourport>
                        break;
 8001e82:	bf00      	nop
                }
                g_ch395q_sta.socket[socket_index].config.socket_enable = CH395Q_ENABLE;
 8001e84:	79fa      	ldrb	r2, [r7, #7]
 8001e86:	490a      	ldr	r1, [pc, #40]	; (8001eb0 <ch395_reconnection+0x2fc>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	3318      	adds	r3, #24
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
    for (uint8_t socket_index = CH395Q_SOCKET_0 ; socket_index <= CH395Q_SOCKET_7 ; socket_index ++ )
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	f67f ae8d 	bls.w	8001bc0 <ch395_reconnection+0xc>
            }
        }
    }
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	200002e0 	.word	0x200002e0
 8001eb4:	0800d860 	.word	0x0800d860
 8001eb8:	40020400 	.word	0x40020400

08001ebc <ch395_cmd_reset>:
 * @brief       复位ch395芯片
 * @param       无
 * @retval      无
 */
void ch395_cmd_reset(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
    ch395_write_cmd(CMD00_RESET_ALL);
 8001ec0:	2005      	movs	r0, #5
 8001ec2:	f7ff f9ab 	bl	800121c <ch395_write_cmd>
    ch395_scs_hign;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2110      	movs	r1, #16
 8001eca:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <ch395_cmd_reset+0x18>)
 8001ecc:	f003 fd4e 	bl	800596c <HAL_GPIO_WritePin>
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <ch395_cmd_get_ver>:
 * @brief       获取芯片以及固件版本号，1字节，高四位表示芯片版本，
 * @param       无
 * @retval      1字节芯片及固件版本号
 */
uint8_t ch395_cmd_get_ver(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
    uint8_t i;
    ch395_write_cmd(CMD01_GET_IC_VER);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f7ff f99c 	bl	800121c <ch395_write_cmd>
    i = ch395_read_data();
 8001ee4:	f7ff f9c3 	bl	800126e <ch395_read_data>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;
 8001eec:	2201      	movs	r2, #1
 8001eee:	2110      	movs	r1, #16
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <ch395_cmd_get_ver+0x28>)
 8001ef2:	f003 fd3b 	bl	800596c <HAL_GPIO_WritePin>
    return i;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020000 	.word	0x40020000

08001f04 <ch395_cmd_check_exist>:
 * @brief       测试命令，用于测试硬件以及接口通讯，
 * @param       1字节测试数据
 * @retval      硬件ok，返回 testdata按位取反
 */
uint8_t ch395_cmd_check_exist(uint8_t testdata)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    ch395_write_cmd(CMD11_CHECK_EXIST);
 8001f0e:	2006      	movs	r0, #6
 8001f10:	f7ff f984 	bl	800121c <ch395_write_cmd>
    ch395_write_data(testdata);
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f99c 	bl	8001254 <ch395_write_data>
    i = ch395_read_data();
 8001f1c:	f7ff f9a7 	bl	800126e <ch395_read_data>
 8001f20:	4603      	mov	r3, r0
 8001f22:	73fb      	strb	r3, [r7, #15]
    ch395_scs_hign;
 8001f24:	2201      	movs	r2, #1
 8001f26:	2110      	movs	r1, #16
 8001f28:	4803      	ldr	r0, [pc, #12]	; (8001f38 <ch395_cmd_check_exist+0x34>)
 8001f2a:	f003 fd1f 	bl	800596c <HAL_GPIO_WritePin>
    return i;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40020000 	.word	0x40020000

08001f3c <ch395_cmd_get_phy_status>:
 * @brief       获取phy的状态
 * @param       无
 * @retval      当前ch395phy状态，参考phy参数/状态定义
 */
uint8_t ch395_cmd_get_phy_status(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
    uint8_t i;

    ch395_write_cmd(CMD01_GET_PHY_STATUS);
 8001f42:	2026      	movs	r0, #38	; 0x26
 8001f44:	f7ff f96a 	bl	800121c <ch395_write_cmd>
    i = ch395_read_data();
 8001f48:	f7ff f991 	bl	800126e <ch395_read_data>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;
 8001f50:	2201      	movs	r2, #1
 8001f52:	2110      	movs	r1, #16
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <ch395_cmd_get_phy_status+0x28>)
 8001f56:	f003 fd09 	bl	800596c <HAL_GPIO_WritePin>
    return i;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020000 	.word	0x40020000

08001f68 <ch395_cmd_init>:
 * @brief       初始化ch395芯片
 * @param       无
 * @retval      返回执行结果
 */
uint8_t ch395_cmd_init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]
    uint8_t s = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	71bb      	strb	r3, [r7, #6]

    ch395_write_cmd(CMD0W_INIT_CH395);
 8001f76:	2027      	movs	r0, #39	; 0x27
 8001f78:	f7ff f950 	bl	800121c <ch395_write_cmd>
    ch395_scs_hign;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2110      	movs	r1, #16
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <ch395_cmd_init+0x4c>)
 8001f82:	f003 fcf3 	bl	800596c <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(10);                          /* 延时查询，建议2MS以上 */
 8001f86:	200a      	movs	r0, #10
 8001f88:	f002 fa96 	bl	80044b8 <HAL_Delay>
        s = ch395_get_cmd_status();            /* 不能过于频繁查询 */
 8001f8c:	f000 f814 	bl	8001fb8 <ch395_get_cmd_status>
 8001f90:	4603      	mov	r3, r0
 8001f92:	71bb      	strb	r3, [r7, #6]

        if (s != CH395_ERR_BUSY)
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d106      	bne.n	8001fa8 <ch395_cmd_init+0x40>
        {
            break;         /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	71fa      	strb	r2, [r7, #7]
 8001fa0:	2bc8      	cmp	r3, #200	; 0xc8
 8001fa2:	d9f0      	bls.n	8001f86 <ch395_cmd_init+0x1e>
        {
            return CH395_ERR_UNKNOW; /* 超时退出,本函数需要500MS以上执行完毕 */
 8001fa4:	23fa      	movs	r3, #250	; 0xfa
 8001fa6:	e001      	b.n	8001fac <ch395_cmd_init+0x44>
            break;         /* 如果CH395芯片返回忙状态 */
 8001fa8:	bf00      	nop
        }
    }

    return s;
 8001faa:	79bb      	ldrb	r3, [r7, #6]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40020000 	.word	0x40020000

08001fb8 <ch395_get_cmd_status>:
 * @brief       获取命令执行状态，某些命令需要等待命令执行结果
 * @param       无
 * @retval      返回上一条命令执行状态
 */
uint8_t ch395_get_cmd_status(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
    uint8_t i;

    ch395_write_cmd(CMD01_GET_CMD_STATUS);
 8001fbe:	202c      	movs	r0, #44	; 0x2c
 8001fc0:	f7ff f92c 	bl	800121c <ch395_write_cmd>
    i = ch395_read_data();
 8001fc4:	f7ff f953 	bl	800126e <ch395_read_data>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2110      	movs	r1, #16
 8001fd0:	4803      	ldr	r0, [pc, #12]	; (8001fe0 <ch395_get_cmd_status+0x28>)
 8001fd2:	f003 fccb 	bl	800596c <HAL_GPIO_WritePin>
    return i;
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <ch395_cmd_set_ipaddr>:
 * @brief       设置ch395的ip地址
 * @param       ipaddr 指ip地址
 * @retval      无
 */
void ch395_cmd_set_ipaddr(uint8_t *ipaddr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD40_SET_IP_ADDR);
 8001fec:	2022      	movs	r0, #34	; 0x22
 8001fee:	f7ff f915 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 4; i++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e009      	b.n	800200c <ch395_cmd_set_ipaddr+0x28>
    {
        ch395_write_data(*ipaddr++);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f927 	bl	8001254 <ch395_write_data>
    for (i = 0; i < 4; i++)
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	3301      	adds	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d9f2      	bls.n	8001ff8 <ch395_cmd_set_ipaddr+0x14>
    }

    ch395_scs_hign;
 8002012:	2201      	movs	r2, #1
 8002014:	2110      	movs	r1, #16
 8002016:	4803      	ldr	r0, [pc, #12]	; (8002024 <ch395_cmd_set_ipaddr+0x40>)
 8002018:	f003 fca8 	bl	800596c <HAL_GPIO_WritePin>
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40020000 	.word	0x40020000

08002028 <ch395_cmd_set_gw_ipaddr>:
 * @brief       设置ch395的网关ip地址
 * @param       ipaddr 指向网关ip地址
 * @retval      无
 */
void ch395_cmd_set_gw_ipaddr(uint8_t *gwipaddr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD40_SET_GWIP_ADDR);
 8002030:	2023      	movs	r0, #35	; 0x23
 8002032:	f7ff f8f3 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 4; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e009      	b.n	8002050 <ch395_cmd_set_gw_ipaddr+0x28>
    {
        ch395_write_data(*gwipaddr++);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff f905 	bl	8001254 <ch395_write_data>
    for (i = 0; i < 4; i++)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3301      	adds	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d9f2      	bls.n	800203c <ch395_cmd_set_gw_ipaddr+0x14>
    }

    ch395_scs_hign;
 8002056:	2201      	movs	r2, #1
 8002058:	2110      	movs	r1, #16
 800205a:	4803      	ldr	r0, [pc, #12]	; (8002068 <ch395_cmd_set_gw_ipaddr+0x40>)
 800205c:	f003 fc86 	bl	800596c <HAL_GPIO_WritePin>
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40020000 	.word	0x40020000

0800206c <ch395_cmd_set_maskaddr>:
 * @brief       设置ch395的子网掩码，默认为255.255.255.0
 * @param       maskaddr 指子网掩码地址
 * @retval      无
 */
void ch395_cmd_set_maskaddr(uint8_t *maskaddr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD40_SET_MASK_ADDR);
 8002074:	2024      	movs	r0, #36	; 0x24
 8002076:	f7ff f8d1 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 4; i++)
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e009      	b.n	8002094 <ch395_cmd_set_maskaddr+0x28>
    {
        ch395_write_data(*maskaddr++);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff f8e3 	bl	8001254 <ch395_write_data>
    for (i = 0; i < 4; i++)
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	3301      	adds	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d9f2      	bls.n	8002080 <ch395_cmd_set_maskaddr+0x14>
    }

    ch395_scs_hign;
 800209a:	2201      	movs	r2, #1
 800209c:	2110      	movs	r1, #16
 800209e:	4803      	ldr	r0, [pc, #12]	; (80020ac <ch395_cmd_set_maskaddr+0x40>)
 80020a0:	f003 fc64 	bl	800596c <HAL_GPIO_WritePin>
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40020000 	.word	0x40020000

080020b0 <ch395_cmd_set_macaddr>:
 * @brief       设置ch395的mac地址。
 * @param       mcaddr mac地址指针
 * @retval      无
 */
void ch395_cmd_set_macaddr(uint8_t *amcaddr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD60_SET_MAC_ADDR);
 80020b8:	2021      	movs	r0, #33	; 0x21
 80020ba:	f7ff f8af 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 6; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e009      	b.n	80020d8 <ch395_cmd_set_macaddr+0x28>
    {
        ch395_write_data(*amcaddr++);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f8c1 	bl	8001254 <ch395_write_data>
    for (i = 0; i < 6; i++)
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	3301      	adds	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d9f2      	bls.n	80020c4 <ch395_cmd_set_macaddr+0x14>
    }

    ch395_scs_hign;
 80020de:	2201      	movs	r2, #1
 80020e0:	2110      	movs	r1, #16
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <ch395_cmd_set_macaddr+0x48>)
 80020e4:	f003 fc42 	bl	800596c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80020e8:	2064      	movs	r0, #100	; 0x64
 80020ea:	f002 f9e5 	bl	80044b8 <HAL_Delay>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40020000 	.word	0x40020000

080020fc <ch395_cmd_get_unreachippt>:
     @arg       第3-4字节为端口号
     @arg       第4-8字节为ip地址
 * @retval      无
 */
void ch395_cmd_get_unreachippt(uint8_t *list)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD08_GET_UNREACH_IPPORT);
 8002104:	2028      	movs	r0, #40	; 0x28
 8002106:	f7ff f889 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 8; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e009      	b.n	8002124 <ch395_cmd_get_unreachippt+0x28>
    {
        *list++ = ch395_read_data();
 8002110:	687c      	ldr	r4, [r7, #4]
 8002112:	1c63      	adds	r3, r4, #1
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	f7ff f8aa 	bl	800126e <ch395_read_data>
 800211a:	4603      	mov	r3, r0
 800211c:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < 8; i++)
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	3301      	adds	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b07      	cmp	r3, #7
 8002128:	d9f2      	bls.n	8002110 <ch395_cmd_get_unreachippt+0x14>
    }

    ch395_scs_hign;
 800212a:	2201      	movs	r2, #1
 800212c:	2110      	movs	r1, #16
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <ch395_cmd_get_unreachippt+0x40>)
 8002130:	f003 fc1c 	bl	800596c <HAL_GPIO_WritePin>
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bd90      	pop	{r4, r7, pc}
 800213c:	40020000 	.word	0x40020000

08002140 <ch395_set_socket_desip>:
 * @param       sockindex socket索引
 * @param       ipaddr 指向ip地址
 * @retval      无
 */
void ch395_set_socket_desip(uint8_t sockindex, uint8_t *ipaddr)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
    ch395_write_cmd(CMD50_SET_IP_ADDR_SN);
 800214c:	2031      	movs	r0, #49	; 0x31
 800214e:	f7ff f865 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff f87d 	bl	8001254 <ch395_write_data>
    ch395_write_data(*ipaddr++);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	603a      	str	r2, [r7, #0]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f876 	bl	8001254 <ch395_write_data>
    ch395_write_data(*ipaddr++);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	603a      	str	r2, [r7, #0]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f86f 	bl	8001254 <ch395_write_data>
    ch395_write_data(*ipaddr++);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	603a      	str	r2, [r7, #0]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f868 	bl	8001254 <ch395_write_data>
    ch395_write_data(*ipaddr++);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	603a      	str	r2, [r7, #0]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff f861 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 8002192:	2201      	movs	r2, #1
 8002194:	2110      	movs	r1, #16
 8002196:	4803      	ldr	r0, [pc, #12]	; (80021a4 <ch395_set_socket_desip+0x64>)
 8002198:	f003 fbe8 	bl	800596c <HAL_GPIO_WritePin>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40020000 	.word	0x40020000

080021a8 <ch395_set_socket_prot_type>:
 * @param       sockindex socket索引,prottype 协议类型
 * @param       请参考 socket协议类型定义(ch395inc.h)
 * @retval      无
 */
void ch395_set_socket_prot_type(uint8_t sockindex, uint8_t prottype)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	460a      	mov	r2, r1
 80021b2:	71fb      	strb	r3, [r7, #7]
 80021b4:	4613      	mov	r3, r2
 80021b6:	71bb      	strb	r3, [r7, #6]
    ch395_write_cmd(CMD20_SET_PROTO_TYPE_SN);
 80021b8:	2034      	movs	r0, #52	; 0x34
 80021ba:	f7ff f82f 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f847 	bl	8001254 <ch395_write_data>
    ch395_write_data(prottype);
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f843 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 80021ce:	2201      	movs	r2, #1
 80021d0:	2110      	movs	r1, #16
 80021d2:	4803      	ldr	r0, [pc, #12]	; (80021e0 <ch395_set_socket_prot_type+0x38>)
 80021d4:	f003 fbca 	bl	800596c <HAL_GPIO_WritePin>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40020000 	.word	0x40020000

080021e4 <ch395_set_socket_desport>:
 * @param       sockindex socket索引
 * @param       desprot 2字节目的端口
 * @retval      无
 */
void ch395_set_socket_desport(uint8_t sockindex, uint16_t desprot)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4613      	mov	r3, r2
 80021f2:	80bb      	strh	r3, [r7, #4]
    ch395_write_cmd(CMD30_SET_DES_PORT_SN);
 80021f4:	2032      	movs	r0, #50	; 0x32
 80021f6:	f7ff f811 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f829 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)desprot);
 8002202:	88bb      	ldrh	r3, [r7, #4]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f824 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(desprot >> 8));
 800220c:	88bb      	ldrh	r3, [r7, #4]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff f81d 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 800221a:	2201      	movs	r2, #1
 800221c:	2110      	movs	r1, #16
 800221e:	4803      	ldr	r0, [pc, #12]	; (800222c <ch395_set_socket_desport+0x48>)
 8002220:	f003 fba4 	bl	800596c <HAL_GPIO_WritePin>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40020000 	.word	0x40020000

08002230 <ch395_set_socket_sourport>:
 * @param       sockindex socket索引
 * @param       desprot 2字节源端口
 * @retval      无
 */
void ch395_set_socket_sourport(uint8_t sockindex, uint16_t surprot)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	460a      	mov	r2, r1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	80bb      	strh	r3, [r7, #4]
    ch395_write_cmd(CMD30_SET_SOUR_PORT_SN);
 8002240:	2033      	movs	r0, #51	; 0x33
 8002242:	f7fe ffeb 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f803 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)surprot);
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fffe 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(surprot >> 8));
 8002258:	88bb      	ldrh	r3, [r7, #4]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fff7 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 8002266:	2201      	movs	r2, #1
 8002268:	2110      	movs	r1, #16
 800226a:	4803      	ldr	r0, [pc, #12]	; (8002278 <ch395_set_socket_sourport+0x48>)
 800226c:	f003 fb7e 	bl	800596c <HAL_GPIO_WritePin>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40020000 	.word	0x40020000

0800227c <ch395_send_data>:
 * @param       databuf  数据缓冲区
 * @param       len   长度
 * @retval      无
 */
void ch395_send_data(uint8_t sockindex, uint8_t *databuf, uint16_t len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	80bb      	strh	r3, [r7, #4]
    uint16_t i;

    ch395_write_cmd(CMD30_WRITE_SEND_BUF_SN);
 800228c:	2039      	movs	r0, #57	; 0x39
 800228e:	f7fe ffc5 	bl	800121c <ch395_write_cmd>
    ch395_write_data((uint8_t)sockindex);
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ffdd 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)len);
 800229a:	88bb      	ldrh	r3, [r7, #4]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe ffd8 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(len >> 8));
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe ffd1 	bl	8001254 <ch395_write_data>

    for (i = 0; i < len; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	81fb      	strh	r3, [r7, #14]
 80022b6:	e009      	b.n	80022cc <ch395_send_data+0x50>
    {
        ch395_write_data(*databuf++);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	603a      	str	r2, [r7, #0]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe ffc7 	bl	8001254 <ch395_write_data>
    for (i = 0; i < len; i++)
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	3301      	adds	r3, #1
 80022ca:	81fb      	strh	r3, [r7, #14]
 80022cc:	89fa      	ldrh	r2, [r7, #14]
 80022ce:	88bb      	ldrh	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d3f1      	bcc.n	80022b8 <ch395_send_data+0x3c>
    }

    ch395_scs_hign;
 80022d4:	2201      	movs	r2, #1
 80022d6:	2110      	movs	r1, #16
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <ch395_send_data+0x6c>)
 80022da:	f003 fb47 	bl	800596c <HAL_GPIO_WritePin>
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020000 	.word	0x40020000

080022ec <ch395_get_recv_length>:
 * @brief       获取接收缓冲区长度
 * @param       sockindex socket索引
 * @retval      返回接收缓冲区有效长度
 */
uint16_t ch395_get_recv_length(uint8_t sockindex)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
    uint16_t i;

    ch395_write_cmd(CMD12_GET_RECV_LEN_SN);
 80022f6:	203b      	movs	r0, #59	; 0x3b
 80022f8:	f7fe ff90 	bl	800121c <ch395_write_cmd>
    ch395_write_data((uint8_t)sockindex);
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe ffa8 	bl	8001254 <ch395_write_data>
    i = ch395_read_data();
 8002304:	f7fe ffb3 	bl	800126e <ch395_read_data>
 8002308:	4603      	mov	r3, r0
 800230a:	81fb      	strh	r3, [r7, #14]
    i = (uint16_t)(ch395_read_data() << 8) + i;
 800230c:	f7fe ffaf 	bl	800126e <ch395_read_data>
 8002310:	4603      	mov	r3, r0
 8002312:	b29b      	uxth	r3, r3
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	b29a      	uxth	r2, r3
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	4413      	add	r3, r2
 800231c:	81fb      	strh	r3, [r7, #14]
    ch395_scs_hign;
 800231e:	2201      	movs	r2, #1
 8002320:	2110      	movs	r1, #16
 8002322:	4804      	ldr	r0, [pc, #16]	; (8002334 <ch395_get_recv_length+0x48>)
 8002324:	f003 fb22 	bl	800596c <HAL_GPIO_WritePin>
    return i;
 8002328:	89fb      	ldrh	r3, [r7, #14]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40020000 	.word	0x40020000

08002338 <ch395_get_recv_data>:
 * @param       len  长度
 * @param       pbuf  缓冲区
 * @retval      无
 */
void ch395_get_recv_data(uint8_t sockindex, uint16_t len, uint8_t *pbuf)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	603a      	str	r2, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
 8002344:	460b      	mov	r3, r1
 8002346:	80bb      	strh	r3, [r7, #4]
    uint16_t i;

    if (!len)return;
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d02e      	beq.n	80023ac <ch395_get_recv_data+0x74>

    ch395_write_cmd(CMD30_READ_RECV_BUF_SN);
 800234e:	203c      	movs	r0, #60	; 0x3c
 8002350:	f7fe ff64 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe ff7c 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)len);
 800235c:	88bb      	ldrh	r3, [r7, #4]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ff77 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(len >> 8));
 8002366:	88bb      	ldrh	r3, [r7, #4]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b29b      	uxth	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe ff70 	bl	8001254 <ch395_write_data>
    delay_us(1);
 8002374:	2001      	movs	r0, #1
 8002376:	f001 f8dd 	bl	8003534 <delay_us>

    for (i = 0; i < len; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	81fb      	strh	r3, [r7, #14]
 800237e:	e00b      	b.n	8002398 <ch395_get_recv_data+0x60>
    {
        *pbuf = ch395_read_data();
 8002380:	f7fe ff75 	bl	800126e <ch395_read_data>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	701a      	strb	r2, [r3, #0]
        pbuf++;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	603b      	str	r3, [r7, #0]
    for (i = 0; i < len; i++)
 8002392:	89fb      	ldrh	r3, [r7, #14]
 8002394:	3301      	adds	r3, #1
 8002396:	81fb      	strh	r3, [r7, #14]
 8002398:	89fa      	ldrh	r2, [r7, #14]
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d3ef      	bcc.n	8002380 <ch395_get_recv_data+0x48>
    }

    ch395_scs_hign;
 80023a0:	2201      	movs	r2, #1
 80023a2:	2110      	movs	r1, #16
 80023a4:	4803      	ldr	r0, [pc, #12]	; (80023b4 <ch395_get_recv_data+0x7c>)
 80023a6:	f003 fae1 	bl	800596c <HAL_GPIO_WritePin>
 80023aa:	e000      	b.n	80023ae <ch395_get_recv_data+0x76>
    if (!len)return;
 80023ac:	bf00      	nop
}
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020000 	.word	0x40020000

080023b8 <ch395_open_socket>:
 * @brief       打开socket，此命令需要等待执行成功
 * @param       sockindex socket索引
 * @retval      返回执行结果
 */
uint8_t  ch395_open_socket(uint8_t sockindex)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
    uint8_t s = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73bb      	strb	r3, [r7, #14]
    ch395_write_cmd(CMD1W_OPEN_SOCKET_SN);
 80023ca:	2035      	movs	r0, #53	; 0x35
 80023cc:	f7fe ff26 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe ff3e 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 80023d8:	2201      	movs	r2, #1
 80023da:	2110      	movs	r1, #16
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <ch395_open_socket+0x58>)
 80023de:	f003 fac5 	bl	800596c <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(5);                          /* 延时查询，建议2MS以上 */
 80023e2:	2005      	movs	r0, #5
 80023e4:	f002 f868 	bl	80044b8 <HAL_Delay>
        s = ch395_get_cmd_status();           /* 不能过于频繁查询 */
 80023e8:	f7ff fde6 	bl	8001fb8 <ch395_get_cmd_status>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 80023f0:	7bbb      	ldrb	r3, [r7, #14]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d106      	bne.n	8002404 <ch395_open_socket+0x4c>
        {
            break;        /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	73fa      	strb	r2, [r7, #15]
 80023fc:	2bc8      	cmp	r3, #200	; 0xc8
 80023fe:	d9f0      	bls.n	80023e2 <ch395_open_socket+0x2a>
        {
            return CH395_ERR_UNKNOW; /* 超时退出 */
 8002400:	23fa      	movs	r3, #250	; 0xfa
 8002402:	e001      	b.n	8002408 <ch395_open_socket+0x50>
            break;        /* 如果CH395芯片返回忙状态 */
 8002404:	bf00      	nop
        }
    }

    return s;
 8002406:	7bbb      	ldrb	r3, [r7, #14]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40020000 	.word	0x40020000

08002414 <ch395_close_socket>:
 * @brief       关闭socket，
 * @param       sockindex socket索引
 * @retval      返回执行结果
 */
uint8_t  ch395_close_socket(uint8_t sockindex)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
    uint8_t s = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	73bb      	strb	r3, [r7, #14]
    ch395_write_cmd(CMD1W_CLOSE_SOCKET_SN);
 8002426:	203d      	movs	r0, #61	; 0x3d
 8002428:	f7fe fef8 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe ff10 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 8002434:	2201      	movs	r2, #1
 8002436:	2110      	movs	r1, #16
 8002438:	480c      	ldr	r0, [pc, #48]	; (800246c <ch395_close_socket+0x58>)
 800243a:	f003 fa97 	bl	800596c <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(5);                            /* 延时查询，建议2MS以上 */
 800243e:	2005      	movs	r0, #5
 8002440:	f002 f83a 	bl	80044b8 <HAL_Delay>
        s = ch395_get_cmd_status();             /* 不能过于频繁查询 */
 8002444:	f7ff fdb8 	bl	8001fb8 <ch395_get_cmd_status>
 8002448:	4603      	mov	r3, r0
 800244a:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 800244c:	7bbb      	ldrb	r3, [r7, #14]
 800244e:	2b10      	cmp	r3, #16
 8002450:	d106      	bne.n	8002460 <ch395_close_socket+0x4c>
        {
            break;          /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	73fa      	strb	r2, [r7, #15]
 8002458:	2bc8      	cmp	r3, #200	; 0xc8
 800245a:	d9f0      	bls.n	800243e <ch395_close_socket+0x2a>
        {
            return CH395_ERR_UNKNOW;  /* 超时退出 */
 800245c:	23fa      	movs	r3, #250	; 0xfa
 800245e:	e001      	b.n	8002464 <ch395_close_socket+0x50>
            break;          /* 如果CH395芯片返回忙状态 */
 8002460:	bf00      	nop
        }
    }

    return s;
 8002462:	7bbb      	ldrb	r3, [r7, #14]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40020000 	.word	0x40020000

08002470 <ch395_tcp_connect>:
 * @brief       tcp连接，仅在tcp模式下有效，此命令需要等待执行成功
 * @param       sockindex socket索引
 * @retval      返回执行结果
 */
uint8_t ch395_tcp_connect(uint8_t sockindex)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
    uint8_t s = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	73bb      	strb	r3, [r7, #14]
    ch395_write_cmd(CMD1W_TCP_CONNECT_SN);
 8002482:	2037      	movs	r0, #55	; 0x37
 8002484:	f7fe feca 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fee2 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 8002490:	2201      	movs	r2, #1
 8002492:	2110      	movs	r1, #16
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <ch395_tcp_connect+0x58>)
 8002496:	f003 fa69 	bl	800596c <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(5);                            /* 延时查询，建议2MS以上 */
 800249a:	2005      	movs	r0, #5
 800249c:	f002 f80c 	bl	80044b8 <HAL_Delay>
        s = ch395_get_cmd_status();             /* 不能过于频繁查询 */
 80024a0:	f7ff fd8a 	bl	8001fb8 <ch395_get_cmd_status>
 80024a4:	4603      	mov	r3, r0
 80024a6:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 80024a8:	7bbb      	ldrb	r3, [r7, #14]
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d106      	bne.n	80024bc <ch395_tcp_connect+0x4c>
        {
            break;          /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	73fa      	strb	r2, [r7, #15]
 80024b4:	2bc8      	cmp	r3, #200	; 0xc8
 80024b6:	d9f0      	bls.n	800249a <ch395_tcp_connect+0x2a>
        {
            return CH395_ERR_UNKNOW;  /* 超时退出 */
 80024b8:	23fa      	movs	r3, #250	; 0xfa
 80024ba:	e001      	b.n	80024c0 <ch395_tcp_connect+0x50>
            break;          /* 如果CH395芯片返回忙状态 */
 80024bc:	bf00      	nop
        }
    }

    return s;
 80024be:	7bbb      	ldrb	r3, [r7, #14]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020000 	.word	0x40020000

080024cc <ch395_tcp_listen>:
 * @brief       tcp监听，仅在tcp模式下有效，此命令需要等待执行成功
 * @param       sockindex socket索引
 * @retval      返回执行结果
 */
uint8_t ch395_tcp_listen(uint8_t sockindex)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
    uint8_t s = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	73bb      	strb	r3, [r7, #14]
    ch395_write_cmd(CMD1W_TCP_LISTEN_SN);
 80024de:	2036      	movs	r0, #54	; 0x36
 80024e0:	f7fe fe9c 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe feb4 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 80024ec:	2201      	movs	r2, #1
 80024ee:	2110      	movs	r1, #16
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <ch395_tcp_listen+0x58>)
 80024f2:	f003 fa3b 	bl	800596c <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(5);                           /* 延时查询，建议2MS以上 */
 80024f6:	2005      	movs	r0, #5
 80024f8:	f001 ffde 	bl	80044b8 <HAL_Delay>
        s = ch395_get_cmd_status();            /* 不能过于频繁查询 */
 80024fc:	f7ff fd5c 	bl	8001fb8 <ch395_get_cmd_status>
 8002500:	4603      	mov	r3, r0
 8002502:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	2b10      	cmp	r3, #16
 8002508:	d106      	bne.n	8002518 <ch395_tcp_listen+0x4c>
        {
            break;         /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	73fa      	strb	r2, [r7, #15]
 8002510:	2bc8      	cmp	r3, #200	; 0xc8
 8002512:	d9f0      	bls.n	80024f6 <ch395_tcp_listen+0x2a>
        {
            return CH395_ERR_UNKNOW; /* 超时退出 */
 8002514:	23fa      	movs	r3, #250	; 0xfa
 8002516:	e001      	b.n	800251c <ch395_tcp_listen+0x50>
            break;         /* 如果CH395芯片返回忙状态 */
 8002518:	bf00      	nop
        }
    }

    return s;
 800251a:	7bbb      	ldrb	r3, [r7, #14]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40020000 	.word	0x40020000

08002528 <ch395_get_socket_int>:
 * @brief       获取socket n的中断状态
 * @param       sockindex   socket索引
 * @retval      中断状态
 */
uint8_t ch395_get_socket_int(uint8_t sockindex)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
    uint8_t intstatus;
    ch395_write_cmd(CMD11_GET_INT_STATUS_SN);
 8002532:	2030      	movs	r0, #48	; 0x30
 8002534:	f7fe fe72 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fe8a 	bl	8001254 <ch395_write_data>
    delay_us(2);
 8002540:	2002      	movs	r0, #2
 8002542:	f000 fff7 	bl	8003534 <delay_us>
    intstatus = ch395_read_data();
 8002546:	f7fe fe92 	bl	800126e <ch395_read_data>
 800254a:	4603      	mov	r3, r0
 800254c:	73fb      	strb	r3, [r7, #15]
    ch395_scs_hign;
 800254e:	2201      	movs	r2, #1
 8002550:	2110      	movs	r1, #16
 8002552:	4804      	ldr	r0, [pc, #16]	; (8002564 <ch395_get_socket_int+0x3c>)
 8002554:	f003 fa0a 	bl	800596c <HAL_GPIO_WritePin>
    return intstatus;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40020000 	.word	0x40020000

08002568 <ch395_dhcp_enable>:
 *   @arg       1:启动dhcp
 *   @arg       0：停止dhcp
 * @retval      执行状态
 */
uint8_t  ch395_dhcp_enable(uint8_t flag)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
    uint8_t s;
    ch395_write_cmd(CMD10_DHCP_ENABLE);
 8002576:	2041      	movs	r0, #65	; 0x41
 8002578:	f7fe fe50 	bl	800121c <ch395_write_cmd>
    ch395_write_data(flag);
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fe68 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 8002584:	2201      	movs	r2, #1
 8002586:	2110      	movs	r1, #16
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <ch395_dhcp_enable+0x54>)
 800258a:	f003 f9ef 	bl	800596c <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(20);
 800258e:	2014      	movs	r0, #20
 8002590:	f001 ff92 	bl	80044b8 <HAL_Delay>
        s = ch395_get_cmd_status();            /* 不能过于频繁查询 */
 8002594:	f7ff fd10 	bl	8001fb8 <ch395_get_cmd_status>
 8002598:	4603      	mov	r3, r0
 800259a:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d106      	bne.n	80025b0 <ch395_dhcp_enable+0x48>
        {
            break;         /* 如果ch395芯片返回忙状态 */
        }

        if (i++ > 200)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	73fa      	strb	r2, [r7, #15]
 80025a8:	2bc8      	cmp	r3, #200	; 0xc8
 80025aa:	d9f0      	bls.n	800258e <ch395_dhcp_enable+0x26>
        {
            return CH395_ERR_UNKNOW; /* 超时退出 */
 80025ac:	23fa      	movs	r3, #250	; 0xfa
 80025ae:	e001      	b.n	80025b4 <ch395_dhcp_enable+0x4c>
            break;         /* 如果ch395芯片返回忙状态 */
 80025b0:	bf00      	nop
        }
    }

    return s;
 80025b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40020000 	.word	0x40020000

080025c0 <ch395_get_dhcp_status>:
 * @brief       获取dhcp状态
 * @param       无
 * @retval      dhcp状态，0为成功，其他值表示错误
 */
uint8_t ch395_get_dhcp_status(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
    uint8_t status;
    ch395_write_cmd(CMD01_GET_DHCP_STATUS);
 80025c6:	2042      	movs	r0, #66	; 0x42
 80025c8:	f7fe fe28 	bl	800121c <ch395_write_cmd>
    status = ch395_read_data();
 80025cc:	f7fe fe4f 	bl	800126e <ch395_read_data>
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;
 80025d4:	2201      	movs	r2, #1
 80025d6:	2110      	movs	r1, #16
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <ch395_get_dhcp_status+0x28>)
 80025da:	f003 f9c7 	bl	800596c <HAL_GPIO_WritePin>
    return status;
 80025de:	79fb      	ldrb	r3, [r7, #7]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40020000 	.word	0x40020000

080025ec <ch395_get_ipinf>:
 * @brief       获取ip，子网掩码和网关地址
 * @param       sockindex socket索引
 * @retval      12个字节的ip,子网掩码和网关地址
 */
void ch395_get_ipinf(uint8_t *addr)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    ch395_write_cmd(CMD014_GET_IP_INF);
 80025f4:	2043      	movs	r0, #67	; 0x43
 80025f6:	f7fe fe11 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 20; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e009      	b.n	8002614 <ch395_get_ipinf+0x28>
    {
        *addr++ = ch395_read_data();
 8002600:	687c      	ldr	r4, [r7, #4]
 8002602:	1c63      	adds	r3, r4, #1
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	f7fe fe32 	bl	800126e <ch395_read_data>
 800260a:	4603      	mov	r3, r0
 800260c:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < 20; i++)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	3301      	adds	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b13      	cmp	r3, #19
 8002618:	d9f2      	bls.n	8002600 <ch395_get_ipinf+0x14>
    }

    ch395_scs_hign;
 800261a:	2201      	movs	r2, #1
 800261c:	2110      	movs	r1, #16
 800261e:	4803      	ldr	r0, [pc, #12]	; (800262c <ch395_get_ipinf+0x40>)
 8002620:	f003 f9a4 	bl	800596c <HAL_GPIO_WritePin>
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	40020000 	.word	0x40020000

08002630 <ch395_set_socket_recv_buf>:
 * @param       startblk   起始地
 * @param       单位缓冲区个数 ，单位为512字节
 * @retval      无
 */
void ch395_set_socket_recv_buf(uint8_t sockindex, uint8_t startblk, uint8_t blknum)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
 800263a:	460b      	mov	r3, r1
 800263c:	71bb      	strb	r3, [r7, #6]
 800263e:	4613      	mov	r3, r2
 8002640:	717b      	strb	r3, [r7, #5]
    ch395_write_cmd(CMD30_SET_RECV_BUF);
 8002642:	2052      	movs	r0, #82	; 0x52
 8002644:	f7fe fdea 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fe02 	bl	8001254 <ch395_write_data>
    ch395_write_data(startblk);
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fdfe 	bl	8001254 <ch395_write_data>
    ch395_write_data(blknum);
 8002658:	797b      	ldrb	r3, [r7, #5]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fdfa 	bl	8001254 <ch395_write_data>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <ch395_set_socket_send_buf>:
 * @param       startblk   起始地址
 * @param       blknum     单位缓冲区个数
 * @retval      无
 */
void ch395_set_socket_send_buf(uint8_t sockindex, uint8_t startblk, uint8_t blknum)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
 8002672:	460b      	mov	r3, r1
 8002674:	71bb      	strb	r3, [r7, #6]
 8002676:	4613      	mov	r3, r2
 8002678:	717b      	strb	r3, [r7, #5]
    ch395_write_cmd(CMD30_SET_SEND_BUF);
 800267a:	2053      	movs	r0, #83	; 0x53
 800267c:	f7fe fdce 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fde6 	bl	8001254 <ch395_write_data>
    ch395_write_data(startblk);
 8002688:	79bb      	ldrb	r3, [r7, #6]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fde2 	bl	8001254 <ch395_write_data>
    ch395_write_data(blknum);
 8002690:	797b      	ldrb	r3, [r7, #5]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fdde 	bl	8001254 <ch395_write_data>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <ch395_cmd_get_glob_int_status_all>:
 * @brief       获取全局中断状态，收到此命令ch395自动取消中断,0x44及以上版本使用
 * @param       无
 * @retval      返回当前的全局中断状态
 */
uint16_t ch395_cmd_get_glob_int_status_all(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
    uint16_t init_status;
    ch395_write_cmd(CMD02_GET_GLOB_INT_STATUS_ALL);
 80026a6:	2019      	movs	r0, #25
 80026a8:	f7fe fdb8 	bl	800121c <ch395_write_cmd>
    delay_us(2);
 80026ac:	2002      	movs	r0, #2
 80026ae:	f000 ff41 	bl	8003534 <delay_us>
    init_status = ch395_read_data();
 80026b2:	f7fe fddc 	bl	800126e <ch395_read_data>
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
    init_status = (uint16_t)(ch395_read_data() << 8) + init_status;
 80026ba:	f7fe fdd8 	bl	800126e <ch395_read_data>
 80026be:	4603      	mov	r3, r0
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	4413      	add	r3, r2
 80026ca:	80fb      	strh	r3, [r7, #6]
    ch395_scs_hign;
 80026cc:	2201      	movs	r2, #1
 80026ce:	2110      	movs	r1, #16
 80026d0:	4803      	ldr	r0, [pc, #12]	; (80026e0 <ch395_cmd_get_glob_int_status_all+0x40>)
 80026d2:	f003 f94b 	bl	800596c <HAL_GPIO_WritePin>
    return  init_status;
 80026d6:	88fb      	ldrh	r3, [r7, #6]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40020000 	.word	0x40020000

080026e4 <ch395_set_keeplive>:
 * @param       sockindex socket号
 * @param       cmd 0：关闭 1：开启
 * @retval      无
 */
void ch395_set_keeplive(uint8_t sockindex, uint8_t cmd)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	460a      	mov	r2, r1
 80026ee:	71fb      	strb	r3, [r7, #7]
 80026f0:	4613      	mov	r3, r2
 80026f2:	71bb      	strb	r3, [r7, #6]
    ch395_write_cmd(CMD20_SET_KEEP_LIVE_SN);
 80026f4:	2059      	movs	r0, #89	; 0x59
 80026f6:	f7fe fd91 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fda9 	bl	8001254 <ch395_write_data>
    ch395_write_data(cmd);
 8002702:	79bb      	ldrb	r3, [r7, #6]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fda5 	bl	8001254 <ch395_write_data>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <ch395_keeplive_cnt>:
 * @brief       设置keepalive重试次数
 * @param       cnt 重试次数（）
 * @retval      无
 */
void ch395_keeplive_cnt(uint8_t cnt)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
    ch395_write_cmd(CMD10_SET_KEEP_LIVE_CNT);
 800271c:	2058      	movs	r0, #88	; 0x58
 800271e:	f7fe fd7d 	bl	800121c <ch395_write_cmd>
    ch395_write_data(cnt);
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fd95 	bl	8001254 <ch395_write_data>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <ch395_keeplive_idle>:
 * @brief       设置keeplive空闲
 * @param       idle 空闲时间（单位：ms）
 * @retval      无
 */
void ch395_keeplive_idle(uint32_t idle)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
    ch395_write_cmd(CMD40_SET_KEEP_LIVE_IDLE);
 800273a:	2056      	movs	r0, #86	; 0x56
 800273c:	f7fe fd6e 	bl	800121c <ch395_write_cmd>
    ch395_write_data((uint8_t)idle);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fd85 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)((uint16_t)idle >> 8));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	b29b      	uxth	r3, r3
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b29b      	uxth	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fd7d 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(idle >> 16));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fd77 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(idle >> 24));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0e1b      	lsrs	r3, r3, #24
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fd71 	bl	8001254 <ch395_write_data>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <ch395_keeplive_intvl>:
 * @brief       设置keeplive间隔时间
 * @param       intvl 间隔时间（单位：ms）
 * @retval      无
 */
void ch395_keeplive_intvl(uint32_t intvl)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
    ch395_write_cmd(CMD40_SET_KEEP_LIVE_INTVL);
 8002782:	2057      	movs	r0, #87	; 0x57
 8002784:	f7fe fd4a 	bl	800121c <ch395_write_cmd>
    ch395_write_data((uint8_t)intvl);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fd61 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)((uint16_t)intvl >> 8));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	b29b      	uxth	r3, r3
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	b29b      	uxth	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fd59 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(intvl >> 16));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fd53 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(intvl >> 24));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0e1b      	lsrs	r3, r3, #24
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fd4d 	bl	8001254 <ch395_write_data>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <ch395_setttl_num>:
 * @param       ssockindex socket号
 * @param       ttlnum:ttl数
 * @retval      无
 */
void ch395_setttl_num(uint8_t sockindex, uint8_t ttlnum)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	460a      	mov	r2, r1
 80027cc:	71fb      	strb	r3, [r7, #7]
 80027ce:	4613      	mov	r3, r2
 80027d0:	71bb      	strb	r3, [r7, #6]
    ch395_write_cmd(CMD20_SET_TTL);
 80027d2:	2051      	movs	r0, #81	; 0x51
 80027d4:	f7fe fd22 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fd3a 	bl	8001254 <ch395_write_data>
    ch395_write_data(ttlnum);
 80027e0:	79bb      	ldrb	r3, [r7, #6]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fd36 	bl	8001254 <ch395_write_data>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <MX_DMA_Init+0x78>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a1a      	ldr	r2, [pc, #104]	; (8002868 <MX_DMA_Init+0x78>)
 8002800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <MX_DMA_Init+0x78>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <MX_DMA_Init+0x78>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a13      	ldr	r2, [pc, #76]	; (8002868 <MX_DMA_Init+0x78>)
 800281c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_DMA_Init+0x78>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	200b      	movs	r0, #11
 8002834:	f002 fb31 	bl	8004e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002838:	200b      	movs	r0, #11
 800283a:	f002 fb4a 	bl	8004ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	200c      	movs	r0, #12
 8002844:	f002 fb29 	bl	8004e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002848:	200c      	movs	r0, #12
 800284a:	f002 fb42 	bl	8004ed2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2038      	movs	r0, #56	; 0x38
 8002854:	f002 fb21 	bl	8004e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002858:	2038      	movs	r0, #56	; 0x38
 800285a:	f002 fb3a 	bl	8004ed2 <HAL_NVIC_EnableIRQ>

}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <MX_GPIO_Init+0x138>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a46      	ldr	r2, [pc, #280]	; (80029a4 <MX_GPIO_Init+0x138>)
 800288c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <MX_GPIO_Init+0x138>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a3f      	ldr	r2, [pc, #252]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <MX_GPIO_Init+0x138>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin|LED1_Pin
 80028f2:	2201      	movs	r2, #1
 80028f4:	2137      	movs	r1, #55	; 0x37
 80028f6:	482c      	ldr	r0, [pc, #176]	; (80029a8 <MX_GPIO_Init+0x13c>)
 80028f8:	f003 f838 	bl	800596c <HAL_GPIO_WritePin>
                          |LED0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH395_CS_GPIO_Port, CH395_CS_Pin, GPIO_PIN_RESET);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2110      	movs	r1, #16
 8002900:	482a      	ldr	r0, [pc, #168]	; (80029ac <MX_GPIO_Init+0x140>)
 8002902:	f003 f833 	bl	800596c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH395_RST_Pin|SPI2_CS1_Pin, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	f241 0101 	movw	r1, #4097	; 0x1001
 800290c:	4828      	ldr	r0, [pc, #160]	; (80029b0 <MX_GPIO_Init+0x144>)
 800290e:	f003 f82d 	bl	800596c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin|LED1_Pin
 8002912:	2337      	movs	r3, #55	; 0x37
 8002914:	617b      	str	r3, [r7, #20]
                          |LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002916:	2301      	movs	r3, #1
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	481f      	ldr	r0, [pc, #124]	; (80029a8 <MX_GPIO_Init+0x13c>)
 800292a:	f002 fe8b 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CH395_CS_Pin;
 800292e:	2310      	movs	r3, #16
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800293a:	2301      	movs	r3, #1
 800293c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH395_CS_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4819      	ldr	r0, [pc, #100]	; (80029ac <MX_GPIO_Init+0x140>)
 8002946:	f002 fe7d 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CH395_RST_Pin;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002956:	2302      	movs	r3, #2
 8002958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH395_RST_GPIO_Port, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4813      	ldr	r0, [pc, #76]	; (80029b0 <MX_GPIO_Init+0x144>)
 8002962:	f002 fe6f 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 8002966:	2302      	movs	r3, #2
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296e:	2301      	movs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	480d      	ldr	r0, [pc, #52]	; (80029b0 <MX_GPIO_Init+0x144>)
 800297a:	f002 fe63 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin;
 800297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS1_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4806      	ldr	r0, [pc, #24]	; (80029b0 <MX_GPIO_Init+0x144>)
 8002998:	f002 fe54 	bl	8005644 <HAL_GPIO_Init>

}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400

080029b4 <HAL_I2C_MemRxCpltCallback>:
/* USER CODE BEGIN 0 */

extern uint8_t IIC_State;

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <HAL_I2C_MemRxCpltCallback+0x24>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d102      	bne.n	80029ca <HAL_I2C_MemRxCpltCallback+0x16>
	{
		IIC_State = 1;
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_I2C_MemRxCpltCallback+0x28>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
	}
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000544 	.word	0x20000544
 80029dc:	2000066c 	.word	0x2000066c

080029e0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029e6:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <MX_I2C1_Init+0x54>)
 80029e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <MX_I2C1_Init+0x58>)
 80029ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a1c:	4804      	ldr	r0, [pc, #16]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a1e:	f002 ffbf 	bl	80059a0 <HAL_I2C_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a28:	f000 fdc2 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000544 	.word	0x20000544
 8002a34:	40005400 	.word	0x40005400
 8002a38:	000186a0 	.word	0x000186a0

08002a3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a48      	ldr	r2, [pc, #288]	; (8002b7c <HAL_I2C_MspInit+0x140>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	f040 8089 	bne.w	8002b72 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_I2C_MspInit+0x144>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a45      	ldr	r2, [pc, #276]	; (8002b80 <HAL_I2C_MspInit+0x144>)
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_I2C_MspInit+0x144>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a7c:	23c0      	movs	r3, #192	; 0xc0
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a80:	2312      	movs	r3, #18
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	483b      	ldr	r0, [pc, #236]	; (8002b84 <HAL_I2C_MspInit+0x148>)
 8002a98:	f002 fdd4 	bl	8005644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <HAL_I2C_MspInit+0x144>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4a36      	ldr	r2, [pc, #216]	; (8002b80 <HAL_I2C_MspInit+0x144>)
 8002aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_I2C_MspInit+0x144>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002ab8:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002aba:	4a34      	ldr	r2, [pc, #208]	; (8002b8c <HAL_I2C_MspInit+0x150>)
 8002abc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002abe:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002aec:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002aee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002af2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002afa:	4823      	ldr	r0, [pc, #140]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002afc:	f002 fa04 	bl	8004f08 <HAL_DMA_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002b06:	f000 fd53 	bl	80035b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_I2C_MspInit+0x14c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b18:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <HAL_I2C_MspInit+0x158>)
 8002b1a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b34:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b4e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b56:	480e      	ldr	r0, [pc, #56]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b58:	f002 f9d6 	bl	8004f08 <HAL_DMA_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002b62:	f000 fd25 	bl	80035b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002b6c:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_I2C_MspInit+0x154>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020400 	.word	0x40020400
 8002b88:	20000598 	.word	0x20000598
 8002b8c:	40026010 	.word	0x40026010
 8002b90:	200005f8 	.word	0x200005f8
 8002b94:	40026028 	.word	0x40026028

08002b98 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_IWDG_Init+0x2c>)
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <MX_IWDG_Init+0x30>)
 8002ba0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <MX_IWDG_Init+0x2c>)
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_IWDG_Init+0x2c>)
 8002baa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002bae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <MX_IWDG_Init+0x2c>)
 8002bb2:	f003 fef6 	bl	80069a2 <HAL_IWDG_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002bbc:	f000 fcf8 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000658 	.word	0x20000658
 8002bc8:	40003000 	.word	0x40003000

08002bcc <LIS2DH12_ReadAcc_Init>:
 *      Author: 15300
 */
#include "lis2dh12.h"

void LIS2DH12_ReadAcc_Init(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]
	uint8_t ctrlreg1_addr_data[2] = {0x20, 0x9f};
 8002bd4:	f649 7320 	movw	r3, #40736	; 0x9f20
 8002bd8:	81bb      	strh	r3, [r7, #12]
	uint8_t ctrlreg4_addr_data[2] = {0x23, 0x10};
 8002bda:	f241 0323 	movw	r3, #4131	; 0x1023
 8002bde:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Master_Transmit(hi2c, LIS2DH12_Addr_SD0_SA0_0, ctrlreg1_addr_data, 2, HAL_MAX_DELAY);
 8002be0:	f107 020c 	add.w	r2, r7, #12
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2302      	movs	r3, #2
 8002bec:	2130      	movs	r1, #48	; 0x30
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f003 f81a 	bl	8005c28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, LIS2DH12_Addr_SD0_SA0_0, ctrlreg4_addr_data, 2, HAL_MAX_DELAY);
 8002bf4:	f107 0208 	add.w	r2, r7, #8
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2302      	movs	r3, #2
 8002c00:	2130      	movs	r1, #48	; 0x30
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f003 f810 	bl	8005c28 <HAL_I2C_Master_Transmit>
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <LIS2DH12_ReadAccall>:
{
	HAL_I2C_Master_Receive_DMA(hi2c, LIS2DH12_Addr_SD0_SA0_0, value, 1);
}

void LIS2DH12_ReadAccall(I2C_HandleTypeDef *hi2c, uint8_t *value)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	static uint8_t accall_addr = 0xa8;
//	char message[50] = {0};

	status = HAL_I2C_Mem_Read_DMA(hi2c, LIS2DH12_Addr_SD0_SA0_0, accall_addr, I2C_MEMADD_SIZE_8BIT, value, 6);
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <LIS2DH12_ReadAccall+0x30>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	2306      	movs	r3, #6
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	2130      	movs	r1, #48	; 0x30
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f003 f8f9 	bl	8005e24 <HAL_I2C_Mem_Read_DMA>
 8002c32:	4603      	mov	r3, r0
 8002c34:	73fb      	strb	r3, [r7, #15]
//	else if(status == HAL_TIMEOUT)
//	{
//		sprintf(message, "i2c timeout!\r\n");
//		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
//	}
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000000 	.word	0x20000000

08002c44 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a39      	ldr	r2, [pc, #228]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d16a      	bne.n	8002d2a <HAL_TIM_PeriodElapsedCallback+0xe6>
	{
		int16_t *dataptr_x;
		int16_t *dataptr_y;

		if(iic_switch == 1) {
 8002c54:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x22>
			dataptr_x = iic_accx_buf_1;
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002c5e:	617b      	str	r3, [r7, #20]
			dataptr_y = iic_accy_buf_1;
 8002c60:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e007      	b.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x32>
		}
		else if(iic_switch == 2) {
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d103      	bne.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x32>
			dataptr_x = iic_accx_buf_2;
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002c70:	617b      	str	r3, [r7, #20]
			dataptr_y = iic_accy_buf_2;
 8002c72:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002c74:	613b      	str	r3, [r7, #16]
		}
		if(IIC_State == 1) {
 8002c76:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d127      	bne.n	8002cce <HAL_TIM_PeriodElapsedCallback+0x8a>
			*(dataptr_x + acc_num) = acc_all[1];
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002c80:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002c84:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b20a      	sxth	r2, r1
 8002c90:	801a      	strh	r2, [r3, #0]
			*(dataptr_y + acc_num) = acc_all[3];
 8002c92:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002c94:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8002c98:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	b20a      	sxth	r2, r1
 8002ca4:	801a      	strh	r2, [r3, #0]

			pre_accx = acc_all[1];
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002ca8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002cac:	b21a      	sxth	r2, r3
 8002cae:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002cb0:	801a      	strh	r2, [r3, #0]
			pre_accy = acc_all[3];
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002cb4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002cb8:	b21a      	sxth	r2, r3
 8002cba:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002cbc:	801a      	strh	r2, [r3, #0]

			IIC_State = 0;
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
			LIS2DH12_ReadAccall(&hi2c1, acc_all);
 8002cc4:	4922      	ldr	r1, [pc, #136]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002cc6:	4826      	ldr	r0, [pc, #152]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002cc8:	f7ff ffa2 	bl	8002c10 <LIS2DH12_ReadAccall>
 8002ccc:	e011      	b.n	8002cf2 <HAL_TIM_PeriodElapsedCallback+0xae>
		}
		else {
			*(dataptr_x + acc_num) = pre_accx;
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002cda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cde:	801a      	strh	r2, [r3, #0]
			*(dataptr_y + acc_num) = pre_accy;
 8002ce0:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002cec:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cf0:	801a      	strh	r2, [r3, #0]
		}

		int16_t *dataptr_z;

		if(adc_switch == 1) {
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_TIM_PeriodElapsedCallback+0xbc>
			dataptr_z = adc_accz_buf_1;
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e005      	b.n	8002d0c <HAL_TIM_PeriodElapsedCallback+0xc8>
		}
		else if(adc_switch == 2) {
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d101      	bne.n	8002d0c <HAL_TIM_PeriodElapsedCallback+0xc8>
			dataptr_z = adc_accz_buf_2;
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002d0a:	60fb      	str	r3, [r7, #12]
		}
		*(dataptr_z + acc_num) = adc_buf[1];
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002d0e:	8859      	ldrh	r1, [r3, #2]
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4413      	add	r3, r2
 8002d1a:	b20a      	sxth	r2, r1
 8002d1c:	801a      	strh	r2, [r3, #0]

		acc_num++;
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d28:	801a      	strh	r2, [r3, #0]
	}
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200057d8 	.word	0x200057d8
 8002d38:	20000035 	.word	0x20000035
 8002d3c:	200037b8 	.word	0x200037b8
 8002d40:	20004758 	.word	0x20004758
 8002d44:	20003f88 	.word	0x20003f88
 8002d48:	20004f28 	.word	0x20004f28
 8002d4c:	2000066c 	.word	0x2000066c
 8002d50:	20000670 	.word	0x20000670
 8002d54:	20002810 	.word	0x20002810
 8002d58:	20002812 	.word	0x20002812
 8002d5c:	20002814 	.word	0x20002814
 8002d60:	20000544 	.word	0x20000544
 8002d64:	20000034 	.word	0x20000034
 8002d68:	20002818 	.word	0x20002818
 8002d6c:	20002fe8 	.word	0x20002fe8
 8002d70:	20000664 	.word	0x20000664
 8002d74:	00000000 	.word	0x00000000

08002d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d7c:	b091      	sub	sp, #68	; 0x44
 8002d7e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d80:	f001 fb28 	bl	80043d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d84:	f000 fb6a 	bl	800345c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d88:	f7ff fd70 	bl	800286c <MX_GPIO_Init>
  MX_DMA_Init();
 8002d8c:	f7ff fd30 	bl	80027f0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d90:	f001 f9cc 	bl	800412c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002d94:	f7ff fe24 	bl	80029e0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002d98:	f000 ff28 	bl	8003bec <MX_SPI2_Init>
  MX_SPI1_Init();
 8002d9c:	f000 fef0 	bl	8003b80 <MX_SPI1_Init>
  MX_ADC1_Init();
 8002da0:	f7fe f946 	bl	8001030 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002da4:	f001 f954 	bl	8004050 <MX_TIM6_Init>
  MX_IWDG_Init();
 8002da8:	f7ff fef6 	bl	8002b98 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  // Flash Init
  W25QXX_Init();
 8002dac:	f001 fa30 	bl	8004210 <W25QXX_Init>
  while(W25QXX_ReadID() != W25Q128) {
 8002db0:	e014      	b.n	8002ddc <main+0x64>
	  printf("Flash Error!!\r\n");
 8002db2:	48a4      	ldr	r0, [pc, #656]	; (8003044 <main+0x2cc>)
 8002db4:	f006 fc50 	bl	8009658 <puts>
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8002db8:	2201      	movs	r2, #1
 8002dba:	2120      	movs	r1, #32
 8002dbc:	48a2      	ldr	r0, [pc, #648]	; (8003048 <main+0x2d0>)
 8002dbe:	f002 fdd5 	bl	800596c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002dc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dc6:	f001 fb77 	bl	80044b8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2120      	movs	r1, #32
 8002dce:	489e      	ldr	r0, [pc, #632]	; (8003048 <main+0x2d0>)
 8002dd0:	f002 fdcc 	bl	800596c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002dd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dd8:	f001 fb6e 	bl	80044b8 <HAL_Delay>
  while(W25QXX_ReadID() != W25Q128) {
 8002ddc:	f001 fa98 	bl	8004310 <W25QXX_ReadID>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461a      	mov	r2, r3
 8002de4:	f64e 7317 	movw	r3, #61207	; 0xef17
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1e2      	bne.n	8002db2 <main+0x3a>
  }

  // ADC Init (ADXL1002 + NTC)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, (uint32_t)2);
 8002dec:	2202      	movs	r2, #2
 8002dee:	4997      	ldr	r1, [pc, #604]	; (800304c <main+0x2d4>)
 8002df0:	4897      	ldr	r0, [pc, #604]	; (8003050 <main+0x2d8>)
 8002df2:	f001 fbc9 	bl	8004588 <HAL_ADC_Start_DMA>

  // Lis2dh12 Init (IIC + DMA)
  LIS2DH12_ReadAcc_Init(&hi2c1);
 8002df6:	4897      	ldr	r0, [pc, #604]	; (8003054 <main+0x2dc>)
 8002df8:	f7ff fee8 	bl	8002bcc <LIS2DH12_ReadAcc_Init>
  LIS2DH12_ReadAccall(&hi2c1, acc_all);
 8002dfc:	4996      	ldr	r1, [pc, #600]	; (8003058 <main+0x2e0>)
 8002dfe:	4895      	ldr	r0, [pc, #596]	; (8003054 <main+0x2dc>)
 8002e00:	f7ff ff06 	bl	8002c10 <LIS2DH12_ReadAccall>
  HAL_Delay(10);
 8002e04:	200a      	movs	r0, #10
 8002e06:	f001 fb57 	bl	80044b8 <HAL_Delay>

  // Sensor Correct
  Com_Value_Init_DMA();
 8002e0a:	f000 fc75 	bl	80036f8 <Com_Value_Init_DMA>

  // CH395 TCP Init
  printf("ch395_des_ipaddr: %d.%d.%d.%d\r\n", ch395_des_ipaddr[0], ch395_des_ipaddr[1], ch395_des_ipaddr[2], ch395_des_ipaddr[3]);
 8002e0e:	4b93      	ldr	r3, [pc, #588]	; (800305c <main+0x2e4>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	4619      	mov	r1, r3
 8002e14:	4b91      	ldr	r3, [pc, #580]	; (800305c <main+0x2e4>)
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b90      	ldr	r3, [pc, #576]	; (800305c <main+0x2e4>)
 8002e1c:	789b      	ldrb	r3, [r3, #2]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4b8e      	ldr	r3, [pc, #568]	; (800305c <main+0x2e4>)
 8002e22:	78db      	ldrb	r3, [r3, #3]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4603      	mov	r3, r0
 8002e28:	488d      	ldr	r0, [pc, #564]	; (8003060 <main+0x2e8>)
 8002e2a:	f006 fbaf 	bl	800958c <iprintf>
  printf("ch395_des_port:   %d\r\n", ch395_des_port);
 8002e2e:	4b8d      	ldr	r3, [pc, #564]	; (8003064 <main+0x2ec>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	488c      	ldr	r0, [pc, #560]	; (8003068 <main+0x2f0>)
 8002e36:	f006 fba9 	bl	800958c <iprintf>
  __HAL_SPI_ENABLE(&hspi1);
 8002e3a:	4b8c      	ldr	r3, [pc, #560]	; (800306c <main+0x2f4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b8a      	ldr	r3, [pc, #552]	; (800306c <main+0x2f4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e48:	601a      	str	r2, [r3, #0]
  spi1_read_write_byte(0Xff);
 8002e4a:	20ff      	movs	r0, #255	; 0xff
 8002e4c:	f000 ff82 	bl	8003d54 <spi1_read_write_byte>
  ch395_hardware_init();
 8002e50:	f7fe fc48 	bl	80016e4 <ch395_hardware_init>
  do {
	  ch395q_handler();
 8002e54:	f7fe fe98 	bl	8001b88 <ch395q_handler>
  } while(g_ch395q_sta.dhcp_status == DHCP_STA);                                                                       /* 获取DHCP */
 8002e58:	4b85      	ldr	r3, [pc, #532]	; (8003070 <main+0x2f8>)
 8002e5a:	789b      	ldrb	r3, [r3, #2]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d0f9      	beq.n	8002e54 <main+0xdc>

  cha95_sockct_sta[0].socket_enable = CH395Q_ENABLE;                                                                  /* 使能socket对 */
 8002e60:	4b84      	ldr	r3, [pc, #528]	; (8003074 <main+0x2fc>)
 8002e62:	2202      	movs	r2, #2
 8002e64:	701a      	strb	r2, [r3, #0]
  cha95_sockct_sta[0].socket_index = CH395Q_SOCKET_0;                                                                 /* 设置socket对 */
 8002e66:	4b83      	ldr	r3, [pc, #524]	; (8003074 <main+0x2fc>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	705a      	strb	r2, [r3, #1]
 8002e6c:	4b7b      	ldr	r3, [pc, #492]	; (800305c <main+0x2e4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
  memcpy(cha95_sockct_sta[0].des_ip, ch395_des_ipaddr, sizeof(cha95_sockct_sta[0].des_ip));                           /* 设置目标IP地址 */
 8002e70:	4a80      	ldr	r2, [pc, #512]	; (8003074 <main+0x2fc>)
 8002e72:	f8c2 3003 	str.w	r3, [r2, #3]
 8002e76:	4b80      	ldr	r3, [pc, #512]	; (8003078 <main+0x300>)
 8002e78:	681b      	ldr	r3, [r3, #0]
  memcpy(cha95_sockct_sta[0].net_config.ipaddr, ch395_ipaddr, sizeof(cha95_sockct_sta[0].net_config.ipaddr));         /* 设置静态本地IP地址 */
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	; (8003074 <main+0x2fc>)
 8002e7c:	6353      	str	r3, [r2, #52]	; 0x34
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <main+0x304>)
 8002e80:	681b      	ldr	r3, [r3, #0]
  memcpy(cha95_sockct_sta[0].net_config.gwipaddr, ch395_gw_ipaddr, sizeof(cha95_sockct_sta[0].net_config.gwipaddr));  /* 设置静态网关IP地址 */
 8002e82:	4a7c      	ldr	r2, [pc, #496]	; (8003074 <main+0x2fc>)
 8002e84:	6393      	str	r3, [r2, #56]	; 0x38
 8002e86:	4b7e      	ldr	r3, [pc, #504]	; (8003080 <main+0x308>)
 8002e88:	681b      	ldr	r3, [r3, #0]
  memcpy(cha95_sockct_sta[0].net_config.maskaddr, ch395_ipmask, sizeof(cha95_sockct_sta[0].net_config.maskaddr));     /* 设置静态子网掩码地址 */
 8002e8a:	4a7a      	ldr	r2, [pc, #488]	; (8003074 <main+0x2fc>)
 8002e8c:	63d3      	str	r3, [r2, #60]	; 0x3c
  memcpy(cha95_sockct_sta[0].net_config.macaddr, ch395_macaddr, sizeof(cha95_sockct_sta[0].net_config.macaddr));      /* 设置静态MAC地址 */
 8002e8e:	4b79      	ldr	r3, [pc, #484]	; (8003074 <main+0x2fc>)
 8002e90:	4a7c      	ldr	r2, [pc, #496]	; (8003084 <main+0x30c>)
 8002e92:	3340      	adds	r3, #64	; 0x40
 8002e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e98:	6018      	str	r0, [r3, #0]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	8019      	strh	r1, [r3, #0]
  cha95_sockct_sta[0].des_port = ch395_des_port;                                                                      /* 目标端口 */
 8002e9e:	4b71      	ldr	r3, [pc, #452]	; (8003064 <main+0x2ec>)
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	4b74      	ldr	r3, [pc, #464]	; (8003074 <main+0x2fc>)
 8002ea4:	811a      	strh	r2, [r3, #8]
  cha95_sockct_sta[0].sour_port = 8080;                                                                               /* 源端口 */
 8002ea6:	4b73      	ldr	r3, [pc, #460]	; (8003074 <main+0x2fc>)
 8002ea8:	f641 7290 	movw	r2, #8080	; 0x1f90
 8002eac:	815a      	strh	r2, [r3, #10]
  cha95_sockct_sta[0].proto = CH395Q_SOCKET_TCP_CLIENT;                                                               /* 设置协议 */
 8002eae:	4b71      	ldr	r3, [pc, #452]	; (8003074 <main+0x2fc>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	709a      	strb	r2, [r3, #2]
  cha95_sockct_sta[0].send.buf = socket0_send_buf;                                                                    /* 发送数据 */
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <main+0x2fc>)
 8002eb6:	4a74      	ldr	r2, [pc, #464]	; (8003088 <main+0x310>)
 8002eb8:	60da      	str	r2, [r3, #12]
  cha95_sockct_sta[0].send.size = sizeof(socket0_send_buf);                                                           /* 发送数据大小 */
 8002eba:	4b6e      	ldr	r3, [pc, #440]	; (8003074 <main+0x2fc>)
 8002ebc:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002ec0:	611a      	str	r2, [r3, #16]
  cha95_sockct_sta[0].recv.buf =  socket0_recv_buf;                                                                   /* 接收数据缓冲区 */
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <main+0x2fc>)
 8002ec4:	4a71      	ldr	r2, [pc, #452]	; (800308c <main+0x314>)
 8002ec6:	619a      	str	r2, [r3, #24]
  cha95_sockct_sta[0].recv.size = sizeof(socket0_recv_buf);                                                           /* 接收数据大小 */
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <main+0x2fc>)
 8002eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ece:	61da      	str	r2, [r3, #28]
  ch395q_socket_config(&cha95_sockct_sta[0]);                                                                         /* 配置socket参数 */
 8002ed0:	4868      	ldr	r0, [pc, #416]	; (8003074 <main+0x2fc>)
 8002ed2:	f7fe f9e9 	bl	80012a8 <ch395q_socket_config>

  if(g_ch395q_sta.dhcp_status == DHCP_DOWN) {
 8002ed6:	4b66      	ldr	r3, [pc, #408]	; (8003070 <main+0x2f8>)
 8002ed8:	789b      	ldrb	r3, [r3, #2]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d149      	bne.n	8002f72 <main+0x1fa>
	  printf("ch395_ipaddr:     %d.%d.%d.%d\r\n", ch395_ipaddr[0], ch395_ipaddr[1], ch395_ipaddr[2], ch395_ipaddr[3]);
 8002ede:	4b66      	ldr	r3, [pc, #408]	; (8003078 <main+0x300>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4b64      	ldr	r3, [pc, #400]	; (8003078 <main+0x300>)
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b63      	ldr	r3, [pc, #396]	; (8003078 <main+0x300>)
 8002eec:	789b      	ldrb	r3, [r3, #2]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <main+0x300>)
 8002ef2:	78db      	ldrb	r3, [r3, #3]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4865      	ldr	r0, [pc, #404]	; (8003090 <main+0x318>)
 8002efa:	f006 fb47 	bl	800958c <iprintf>
	  printf("ch395_gw_ipaddr:  %d.%d.%d.%d\r\n", ch395_gw_ipaddr[0], ch395_gw_ipaddr[1], ch395_gw_ipaddr[2], ch395_gw_ipaddr[3]);
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <main+0x304>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	4619      	mov	r1, r3
 8002f04:	4b5d      	ldr	r3, [pc, #372]	; (800307c <main+0x304>)
 8002f06:	785b      	ldrb	r3, [r3, #1]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b5c      	ldr	r3, [pc, #368]	; (800307c <main+0x304>)
 8002f0c:	789b      	ldrb	r3, [r3, #2]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4b5a      	ldr	r3, [pc, #360]	; (800307c <main+0x304>)
 8002f12:	78db      	ldrb	r3, [r3, #3]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4603      	mov	r3, r0
 8002f18:	485e      	ldr	r0, [pc, #376]	; (8003094 <main+0x31c>)
 8002f1a:	f006 fb37 	bl	800958c <iprintf>
	  printf("ch395_ipmask:     %d.%d.%d.%d\r\n", ch395_ipmask[0], ch395_ipmask[1], ch395_ipmask[2], ch395_ipmask[3]);
 8002f1e:	4b58      	ldr	r3, [pc, #352]	; (8003080 <main+0x308>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4b56      	ldr	r3, [pc, #344]	; (8003080 <main+0x308>)
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b55      	ldr	r3, [pc, #340]	; (8003080 <main+0x308>)
 8002f2c:	789b      	ldrb	r3, [r3, #2]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	4b53      	ldr	r3, [pc, #332]	; (8003080 <main+0x308>)
 8002f32:	78db      	ldrb	r3, [r3, #3]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4603      	mov	r3, r0
 8002f38:	4857      	ldr	r0, [pc, #348]	; (8003098 <main+0x320>)
 8002f3a:	f006 fb27 	bl	800958c <iprintf>
	  printf("ch395_macaddr:    %02x %02x %02x %02x %02x %02x\r\n", ch395_macaddr[0], ch395_macaddr[1], ch395_macaddr[2],
 8002f3e:	4b51      	ldr	r3, [pc, #324]	; (8003084 <main+0x30c>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <main+0x30c>)
 8002f46:	785b      	ldrb	r3, [r3, #1]
 8002f48:	461c      	mov	r4, r3
 8002f4a:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <main+0x30c>)
 8002f4c:	789b      	ldrb	r3, [r3, #2]
 8002f4e:	461d      	mov	r5, r3
																   ch395_macaddr[3], ch395_macaddr[4], ch395_macaddr[5]);
 8002f50:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <main+0x30c>)
 8002f52:	78db      	ldrb	r3, [r3, #3]
	  printf("ch395_macaddr:    %02x %02x %02x %02x %02x %02x\r\n", ch395_macaddr[0], ch395_macaddr[1], ch395_macaddr[2],
 8002f54:	461a      	mov	r2, r3
																   ch395_macaddr[3], ch395_macaddr[4], ch395_macaddr[5]);
 8002f56:	4b4b      	ldr	r3, [pc, #300]	; (8003084 <main+0x30c>)
 8002f58:	791b      	ldrb	r3, [r3, #4]
	  printf("ch395_macaddr:    %02x %02x %02x %02x %02x %02x\r\n", ch395_macaddr[0], ch395_macaddr[1], ch395_macaddr[2],
 8002f5a:	4619      	mov	r1, r3
																   ch395_macaddr[3], ch395_macaddr[4], ch395_macaddr[5]);
 8002f5c:	4b49      	ldr	r3, [pc, #292]	; (8003084 <main+0x30c>)
 8002f5e:	795b      	ldrb	r3, [r3, #5]
	  printf("ch395_macaddr:    %02x %02x %02x %02x %02x %02x\r\n", ch395_macaddr[0], ch395_macaddr[1], ch395_macaddr[2],
 8002f60:	9302      	str	r3, [sp, #8]
 8002f62:	9101      	str	r1, [sp, #4]
 8002f64:	9200      	str	r2, [sp, #0]
 8002f66:	462b      	mov	r3, r5
 8002f68:	4622      	mov	r2, r4
 8002f6a:	4601      	mov	r1, r0
 8002f6c:	484b      	ldr	r0, [pc, #300]	; (800309c <main+0x324>)
 8002f6e:	f006 fb0d 	bl	800958c <iprintf>
  }
  printf("ch395_sn:         %s\r\n", ch395_sn);
 8002f72:	494b      	ldr	r1, [pc, #300]	; (80030a0 <main+0x328>)
 8002f74:	484b      	ldr	r0, [pc, #300]	; (80030a4 <main+0x32c>)
 8002f76:	f006 fb09 	bl	800958c <iprintf>

  sprintf(socket0_send_buf, "request %s", ch395_sn);
 8002f7a:	4a49      	ldr	r2, [pc, #292]	; (80030a0 <main+0x328>)
 8002f7c:	494a      	ldr	r1, [pc, #296]	; (80030a8 <main+0x330>)
 8002f7e:	4842      	ldr	r0, [pc, #264]	; (8003088 <main+0x310>)
 8002f80:	f006 fb72 	bl	8009668 <siprintf>
  uint8_t *isFound;
  do {
	  printf("rtim requesting...\r\n");
 8002f84:	4849      	ldr	r0, [pc, #292]	; (80030ac <main+0x334>)
 8002f86:	f006 fb67 	bl	8009658 <puts>
	  ch395_send_data(0, (uint8_t *)socket0_send_buf, strlen((char *)socket0_send_buf));
 8002f8a:	483f      	ldr	r0, [pc, #252]	; (8003088 <main+0x310>)
 8002f8c:	f7fd f990 	bl	80002b0 <strlen>
 8002f90:	4603      	mov	r3, r0
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	493c      	ldr	r1, [pc, #240]	; (8003088 <main+0x310>)
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff f96f 	bl	800227c <ch395_send_data>
	  HAL_Delay(500);
 8002f9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fa2:	f001 fa89 	bl	80044b8 <HAL_Delay>
	  ch395q_handler();
 8002fa6:	f7fe fdef 	bl	8001b88 <ch395q_handler>
	  HAL_Delay(500);
 8002faa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fae:	f001 fa83 	bl	80044b8 <HAL_Delay>
	  isFound = strstr(socket0_recv_buf, "rtim");
 8002fb2:	493f      	ldr	r1, [pc, #252]	; (80030b0 <main+0x338>)
 8002fb4:	4835      	ldr	r0, [pc, #212]	; (800308c <main+0x314>)
 8002fb6:	f006 fc85 	bl	80098c4 <strstr>
 8002fba:	61f8      	str	r0, [r7, #28]
  } while(isFound == NULL);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0e0      	beq.n	8002f84 <main+0x20c>
  memcpy(rtim, isFound + 4, 16);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	4619      	mov	r1, r3
 8002fca:	483a      	ldr	r0, [pc, #232]	; (80030b4 <main+0x33c>)
 8002fcc:	f006 fd06 	bl	80099dc <memcpy>
  printf("rtim:[%s]\r\n", rtim);
 8002fd0:	4938      	ldr	r1, [pc, #224]	; (80030b4 <main+0x33c>)
 8002fd2:	4839      	ldr	r0, [pc, #228]	; (80030b8 <main+0x340>)
 8002fd4:	f006 fada 	bl	800958c <iprintf>
  sscanf(rtim, "%8d%8d", &rtime_head_8, &rtime_foot_8);
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <main+0x344>)
 8002fda:	4a39      	ldr	r2, [pc, #228]	; (80030c0 <main+0x348>)
 8002fdc:	4939      	ldr	r1, [pc, #228]	; (80030c4 <main+0x34c>)
 8002fde:	4835      	ldr	r0, [pc, #212]	; (80030b4 <main+0x33c>)
 8002fe0:	f006 fb62 	bl	80096a8 <siscanf>

  // TIM6 Tnit
  HAL_TIM_Base_Start_IT(&htim6);
 8002fe4:	4838      	ldr	r0, [pc, #224]	; (80030c8 <main+0x350>)
 8002fe6:	f004 fd19 	bl	8007a1c <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8002fea:	200a      	movs	r0, #10
 8002fec:	f001 fa64 	bl	80044b8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint16_t cumulative_num = 0;
	  char *ptr = socket0_send_buf;
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <main+0x310>)
 8002ff2:	61bb      	str	r3, [r7, #24]
	  int16_t *dataptr_z;
	  int16_t *dataptr_x;
	  int16_t *dataptr_y;

	  uint8_t old_adc_switch = adc_switch;
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <main+0x354>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	75fb      	strb	r3, [r7, #23]
	  uint8_t old_iic_switch = iic_switch;
 8002ffa:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <main+0x358>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	75bb      	strb	r3, [r7, #22]
	  uint16_t old_acc_num = acc_num;
 8003000:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <main+0x35c>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	82bb      	strh	r3, [r7, #20]

	  (adc_switch == 1)?(adc_switch = 2):(adc_switch = 1);
 8003006:	4b31      	ldr	r3, [pc, #196]	; (80030cc <main+0x354>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d103      	bne.n	8003016 <main+0x29e>
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <main+0x354>)
 8003010:	2202      	movs	r2, #2
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e002      	b.n	800301c <main+0x2a4>
 8003016:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <main+0x354>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
	  (iic_switch == 1)?(iic_switch = 2):(iic_switch = 1);
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <main+0x358>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d103      	bne.n	800302c <main+0x2b4>
 8003024:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <main+0x358>)
 8003026:	2202      	movs	r2, #2
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e002      	b.n	8003032 <main+0x2ba>
 800302c:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <main+0x358>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]

	  acc_num = 0;
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <main+0x35c>)
 8003034:	2200      	movs	r2, #0
 8003036:	801a      	strh	r2, [r3, #0]

	  if(old_adc_switch == 1) { dataptr_z = &adc_accz_buf_1[0]; }
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d14e      	bne.n	80030dc <main+0x364>
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <main+0x360>)
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003042:	e050      	b.n	80030e6 <main+0x36e>
 8003044:	0800d994 	.word	0x0800d994
 8003048:	40020800 	.word	0x40020800
 800304c:	20000664 	.word	0x20000664
 8003050:	20000238 	.word	0x20000238
 8003054:	20000544 	.word	0x20000544
 8003058:	20000670 	.word	0x20000670
 800305c:	2000002c 	.word	0x2000002c
 8003060:	0800d9a4 	.word	0x0800d9a4
 8003064:	20000030 	.word	0x20000030
 8003068:	0800d9c4 	.word	0x0800d9c4
 800306c:	20005724 	.word	0x20005724
 8003070:	200002e0 	.word	0x200002e0
 8003074:	200025d0 	.word	0x200025d0
 8003078:	20000010 	.word	0x20000010
 800307c:	20000014 	.word	0x20000014
 8003080:	20000018 	.word	0x20000018
 8003084:	2000001c 	.word	0x2000001c
 8003088:	20000678 	.word	0x20000678
 800308c:	200021d0 	.word	0x200021d0
 8003090:	0800d9dc 	.word	0x0800d9dc
 8003094:	0800d9fc 	.word	0x0800d9fc
 8003098:	0800da1c 	.word	0x0800da1c
 800309c:	0800da3c 	.word	0x0800da3c
 80030a0:	20000024 	.word	0x20000024
 80030a4:	0800da70 	.word	0x0800da70
 80030a8:	0800da88 	.word	0x0800da88
 80030ac:	0800da94 	.word	0x0800da94
 80030b0:	0800daa8 	.word	0x0800daa8
 80030b4:	200056f8 	.word	0x200056f8
 80030b8:	0800dab0 	.word	0x0800dab0
 80030bc:	20005710 	.word	0x20005710
 80030c0:	2000570c 	.word	0x2000570c
 80030c4:	0800dabc 	.word	0x0800dabc
 80030c8:	200057d8 	.word	0x200057d8
 80030cc:	20000034 	.word	0x20000034
 80030d0:	20000035 	.word	0x20000035
 80030d4:	20002810 	.word	0x20002810
 80030d8:	20002818 	.word	0x20002818
	  else if(old_adc_switch == 2) { dataptr_z = &adc_accz_buf_2[0]; }
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d101      	bne.n	80030e6 <main+0x36e>
 80030e2:	4b58      	ldr	r3, [pc, #352]	; (8003244 <main+0x4cc>)
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if(old_iic_switch == 1) { dataptr_x = &iic_accx_buf_1[0]; dataptr_y = &iic_accy_buf_1[0]; }
 80030e6:	7dbb      	ldrb	r3, [r7, #22]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d104      	bne.n	80030f6 <main+0x37e>
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <main+0x4d0>)
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f0:	4b56      	ldr	r3, [pc, #344]	; (800324c <main+0x4d4>)
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
 80030f4:	e006      	b.n	8003104 <main+0x38c>
	  else if(old_iic_switch == 2) { dataptr_x = &iic_accx_buf_2[0]; dataptr_y = &iic_accy_buf_2[0]; }
 80030f6:	7dbb      	ldrb	r3, [r7, #22]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d103      	bne.n	8003104 <main+0x38c>
 80030fc:	4b54      	ldr	r3, [pc, #336]	; (8003250 <main+0x4d8>)
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003100:	4b54      	ldr	r3, [pc, #336]	; (8003254 <main+0x4dc>)
 8003102:	627b      	str	r3, [r7, #36]	; 0x24

	  cumulative_num += old_acc_num;
 8003104:	4b54      	ldr	r3, [pc, #336]	; (8003258 <main+0x4e0>)
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	8abb      	ldrh	r3, [r7, #20]
 800310a:	4413      	add	r3, r2
 800310c:	b29a      	uxth	r2, r3
 800310e:	4b52      	ldr	r3, [pc, #328]	; (8003258 <main+0x4e0>)
 8003110:	801a      	strh	r2, [r3, #0]
	  printf("%d  %08d%08d\r\n", old_acc_num, rtime_head_8, rtime_foot_8);
 8003112:	8ab9      	ldrh	r1, [r7, #20]
 8003114:	4b51      	ldr	r3, [pc, #324]	; (800325c <main+0x4e4>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b51      	ldr	r3, [pc, #324]	; (8003260 <main+0x4e8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4851      	ldr	r0, [pc, #324]	; (8003264 <main+0x4ec>)
 800311e:	f006 fa35 	bl	800958c <iprintf>
	  static float test_x, test_y, test_z;
	  if(cumulative_num >= data_frequency) {
 8003122:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <main+0x4e0>)
 8003124:	881a      	ldrh	r2, [r3, #0]
 8003126:	4b50      	ldr	r3, [pc, #320]	; (8003268 <main+0x4f0>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d342      	bcc.n	80031b4 <main+0x43c>
		  printf("\r\n");
 800312e:	484f      	ldr	r0, [pc, #316]	; (800326c <main+0x4f4>)
 8003130:	f006 fa92 	bl	8009658 <puts>
		  printf(">>> frequency:[%d], cumulative_num:[%d], old_acc_num:[%d], ntc:[%05.1f], rtime:[%08d%08d], ",
 8003134:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <main+0x4f0>)
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	461d      	mov	r5, r3
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <main+0x4e0>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	461e      	mov	r6, r3
 8003140:	8abc      	ldrh	r4, [r7, #20]
 8003142:	4b4b      	ldr	r3, [pc, #300]	; (8003270 <main+0x4f8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fa1e 	bl	8000588 <__aeabi_f2d>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4942      	ldr	r1, [pc, #264]	; (800325c <main+0x4e4>)
 8003152:	6809      	ldr	r1, [r1, #0]
 8003154:	4842      	ldr	r0, [pc, #264]	; (8003260 <main+0x4e8>)
 8003156:	6800      	ldr	r0, [r0, #0]
 8003158:	9003      	str	r0, [sp, #12]
 800315a:	9102      	str	r1, [sp, #8]
 800315c:	e9cd 2300 	strd	r2, r3, [sp]
 8003160:	4623      	mov	r3, r4
 8003162:	4632      	mov	r2, r6
 8003164:	4629      	mov	r1, r5
 8003166:	4843      	ldr	r0, [pc, #268]	; (8003274 <main+0x4fc>)
 8003168:	f006 fa10 	bl	800958c <iprintf>
				  	  data_frequency, cumulative_num, old_acc_num, ntc, rtime_head_8, rtime_foot_8);
		  printf("    accx:[%.4f], accy:[%.4f], accz:[%.4f]\r\n", test_x, test_y, test_z);
 800316c:	4b42      	ldr	r3, [pc, #264]	; (8003278 <main+0x500>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd fa09 	bl	8000588 <__aeabi_f2d>
 8003176:	4680      	mov	r8, r0
 8003178:	4689      	mov	r9, r1
 800317a:	4b40      	ldr	r3, [pc, #256]	; (800327c <main+0x504>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fa02 	bl	8000588 <__aeabi_f2d>
 8003184:	4604      	mov	r4, r0
 8003186:	460d      	mov	r5, r1
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <main+0x508>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f9fb 	bl	8000588 <__aeabi_f2d>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800319a:	e9cd 4500 	strd	r4, r5, [sp]
 800319e:	4642      	mov	r2, r8
 80031a0:	464b      	mov	r3, r9
 80031a2:	4838      	ldr	r0, [pc, #224]	; (8003284 <main+0x50c>)
 80031a4:	f006 f9f2 	bl	800958c <iprintf>
		  cumulative_num = 0;
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <main+0x4e0>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	801a      	strh	r2, [r3, #0]
		  printf("\r\n");
 80031ae:	482f      	ldr	r0, [pc, #188]	; (800326c <main+0x4f4>)
 80031b0:	f006 fa52 	bl	8009658 <puts>
	  }

	  sprintf(ptr, "%s", DFH);
 80031b4:	4a34      	ldr	r2, [pc, #208]	; (8003288 <main+0x510>)
 80031b6:	4935      	ldr	r1, [pc, #212]	; (800328c <main+0x514>)
 80031b8:	69b8      	ldr	r0, [r7, #24]
 80031ba:	f006 fa55 	bl	8009668 <siprintf>

	  sprintf(ptr + 6, "{%08d%08d}", rtime_head_8, rtime_foot_8);
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	1d98      	adds	r0, r3, #6
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <main+0x4e4>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b26      	ldr	r3, [pc, #152]	; (8003260 <main+0x4e8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4931      	ldr	r1, [pc, #196]	; (8003290 <main+0x518>)
 80031cc:	f006 fa4c 	bl	8009668 <siprintf>
	  rtime_calculate(old_acc_num);
 80031d0:	8abb      	ldrh	r3, [r7, #20]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fa44 	bl	8003660 <rtime_calculate>

	  ntc = Get_Kelvin_Temperature(adc_buf[0]);
 80031d8:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <main+0x51c>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fc5b 	bl	8003a98 <Get_Kelvin_Temperature>
 80031e2:	eef0 7a40 	vmov.f32	s15, s0
 80031e6:	4b22      	ldr	r3, [pc, #136]	; (8003270 <main+0x4f8>)
 80031e8:	edc3 7a00 	vstr	s15, [r3]
	  if(ntc > 999 || ntc < 0) ntc = 999.9;
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <main+0x4f8>)
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003298 <main+0x520>
 80031f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fe:	dc07      	bgt.n	8003210 <main+0x498>
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <main+0x4f8>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800320a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320e:	d502      	bpl.n	8003216 <main+0x49e>
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <main+0x4f8>)
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <main+0x524>)
 8003214:	601a      	str	r2, [r3, #0]
	  sprintf(ptr + 6 + 18, "{%05.1f}", ntc);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f103 0418 	add.w	r4, r3, #24
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <main+0x4f8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f9b1 	bl	8000588 <__aeabi_f2d>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	491d      	ldr	r1, [pc, #116]	; (80032a0 <main+0x528>)
 800322c:	4620      	mov	r0, r4
 800322e:	f006 fa1b 	bl	8009668 <siprintf>

	  sprintf(ptr + 6 + 18 + 7, "|");
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	331f      	adds	r3, #31
 8003236:	491b      	ldr	r1, [pc, #108]	; (80032a4 <main+0x52c>)
 8003238:	4618      	mov	r0, r3
 800323a:	f006 fa15 	bl	8009668 <siprintf>

	  for(uint16_t i = 0; i < old_acc_num; i++) {
 800323e:	2300      	movs	r3, #0
 8003240:	847b      	strh	r3, [r7, #34]	; 0x22
 8003242:	e0c8      	b.n	80033d6 <main+0x65e>
 8003244:	20002fe8 	.word	0x20002fe8
 8003248:	200037b8 	.word	0x200037b8
 800324c:	20004758 	.word	0x20004758
 8003250:	20003f88 	.word	0x20003f88
 8003254:	20004f28 	.word	0x20004f28
 8003258:	20005714 	.word	0x20005714
 800325c:	2000570c 	.word	0x2000570c
 8003260:	20005710 	.word	0x20005710
 8003264:	0800dac4 	.word	0x0800dac4
 8003268:	20000032 	.word	0x20000032
 800326c:	0800dad4 	.word	0x0800dad4
 8003270:	20000668 	.word	0x20000668
 8003274:	0800dad8 	.word	0x0800dad8
 8003278:	20005718 	.word	0x20005718
 800327c:	2000571c 	.word	0x2000571c
 8003280:	20005720 	.word	0x20005720
 8003284:	0800db34 	.word	0x0800db34
 8003288:	20000038 	.word	0x20000038
 800328c:	0800db60 	.word	0x0800db60
 8003290:	0800db64 	.word	0x0800db64
 8003294:	20000664 	.word	0x20000664
 8003298:	4479c000 	.word	0x4479c000
 800329c:	4479f99a 	.word	0x4479f99a
 80032a0:	0800db70 	.word	0x0800db70
 80032a4:	0800db7c 	.word	0x0800db7c
		  float data_z = (*(dataptr_z + i) * (3.3 / 4096) - com_value) / Sen_1;
 80032a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ae:	4413      	add	r3, r2
 80032b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f955 	bl	8000564 <__aeabi_i2d>
 80032ba:	a366      	add	r3, pc, #408	; (adr r3, 8003454 <main+0x6dc>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f7fd f9ba 	bl	8000638 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	461d      	mov	r5, r3
 80032cc:	4b56      	ldr	r3, [pc, #344]	; (8003428 <main+0x6b0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f959 	bl	8000588 <__aeabi_f2d>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4620      	mov	r0, r4
 80032dc:	4629      	mov	r1, r5
 80032de:	f7fc fff3 	bl	80002c8 <__aeabi_dsub>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4614      	mov	r4, r2
 80032e8:	461d      	mov	r5, r3
 80032ea:	4b50      	ldr	r3, [pc, #320]	; (800342c <main+0x6b4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd f94a 	bl	8000588 <__aeabi_f2d>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4620      	mov	r0, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7fd fac6 	bl	800088c <__aeabi_ddiv>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	f7fd fc8e 	bl	8000c28 <__aeabi_d2f>
 800330c:	4603      	mov	r3, r0
 800330e:	613b      	str	r3, [r7, #16]
		  float data_x = *(dataptr_x + i) * Sen_3;
 8003310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003316:	4413      	add	r3, r2
 8003318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003324:	4b42      	ldr	r3, [pc, #264]	; (8003430 <main+0x6b8>)
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332e:	edc7 7a03 	vstr	s15, [r7, #12]
		  float data_y = *(dataptr_y + i) * Sen_3;
 8003332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	4413      	add	r3, r2
 800333a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003346:	4b3a      	ldr	r3, [pc, #232]	; (8003430 <main+0x6b8>)
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003350:	edc7 7a02 	vstr	s15, [r7, #8]
		  test_z = data_z;
 8003354:	4a37      	ldr	r2, [pc, #220]	; (8003434 <main+0x6bc>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6013      	str	r3, [r2, #0]
		  test_x = data_x;
 800335a:	4a37      	ldr	r2, [pc, #220]	; (8003438 <main+0x6c0>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6013      	str	r3, [r2, #0]
		  test_y = data_y;
 8003360:	4a36      	ldr	r2, [pc, #216]	; (800343c <main+0x6c4>)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6013      	str	r3, [r2, #0]
		  sprintf((ptr + 6 + 18 + 7 + 1 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 8003366:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	3320      	adds	r3, #32
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	18d4      	adds	r4, r2, r3
 8003374:	ed97 0a04 	vldr	s0, [r7, #16]
 8003378:	f000 f91f 	bl	80035ba <int_separate>
 800337c:	4603      	mov	r3, r0
 800337e:	4698      	mov	r8, r3
 8003380:	ed97 0a04 	vldr	s0, [r7, #16]
 8003384:	f000 f938 	bl	80035f8 <dec_separate>
 8003388:	4603      	mov	r3, r0
 800338a:	4699      	mov	r9, r3
				  	  	  	  	  	  	  	  	  	  	  	   	   int_separate(data_x), dec_separate(data_x),
 800338c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003390:	f000 f913 	bl	80035ba <int_separate>
 8003394:	4603      	mov	r3, r0
		  sprintf((ptr + 6 + 18 + 7 + 1 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 8003396:	461d      	mov	r5, r3
				  	  	  	  	  	  	  	  	  	  	  	   	   int_separate(data_x), dec_separate(data_x),
 8003398:	ed97 0a03 	vldr	s0, [r7, #12]
 800339c:	f000 f92c 	bl	80035f8 <dec_separate>
 80033a0:	4603      	mov	r3, r0
		  sprintf((ptr + 6 + 18 + 7 + 1 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 80033a2:	461e      	mov	r6, r3
																   int_separate(data_y), dec_separate(data_y));
 80033a4:	ed97 0a02 	vldr	s0, [r7, #8]
 80033a8:	f000 f907 	bl	80035ba <int_separate>
 80033ac:	4603      	mov	r3, r0
		  sprintf((ptr + 6 + 18 + 7 + 1 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 80033ae:	607b      	str	r3, [r7, #4]
																   int_separate(data_y), dec_separate(data_y));
 80033b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80033b4:	f000 f920 	bl	80035f8 <dec_separate>
 80033b8:	4603      	mov	r3, r0
		  sprintf((ptr + 6 + 18 + 7 + 1 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 80033ba:	9303      	str	r3, [sp, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	9302      	str	r3, [sp, #8]
 80033c0:	9601      	str	r6, [sp, #4]
 80033c2:	9500      	str	r5, [sp, #0]
 80033c4:	464b      	mov	r3, r9
 80033c6:	4642      	mov	r2, r8
 80033c8:	491d      	ldr	r1, [pc, #116]	; (8003440 <main+0x6c8>)
 80033ca:	4620      	mov	r0, r4
 80033cc:	f006 f94c 	bl	8009668 <siprintf>
	  for(uint16_t i = 0; i < old_acc_num; i++) {
 80033d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033d2:	3301      	adds	r3, #1
 80033d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80033d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80033d8:	8abb      	ldrh	r3, [r7, #20]
 80033da:	429a      	cmp	r2, r3
 80033dc:	f4ff af64 	bcc.w	80032a8 <main+0x530>
	  }

	  sprintf(ptr + 6 + 18 + 7 + 1 + old_acc_num * 7, "%s", DFF);
 80033e0:	8aba      	ldrh	r2, [r7, #20]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	3320      	adds	r3, #32
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <main+0x6cc>)
 80033f0:	4915      	ldr	r1, [pc, #84]	; (8003448 <main+0x6d0>)
 80033f2:	4618      	mov	r0, r3
 80033f4:	f006 f938 	bl	8009668 <siprintf>

	  sprintf(ptr + 6 + 18 + 7 + 1 + old_acc_num * 7 + 3, "\0");
 80033f8:	8aba      	ldrh	r2, [r7, #20]
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	3323      	adds	r3, #35	; 0x23
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	4911      	ldr	r1, [pc, #68]	; (800344c <main+0x6d4>)
 8003408:	4618      	mov	r0, r3
 800340a:	f006 f92d 	bl	8009668 <siprintf>

	  ch395_send_data(0, (uint8_t *)socket0_send_buf, strlen((char *)socket0_send_buf));
 800340e:	4810      	ldr	r0, [pc, #64]	; (8003450 <main+0x6d8>)
 8003410:	f7fc ff4e 	bl	80002b0 <strlen>
 8003414:	4603      	mov	r3, r0
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	490d      	ldr	r1, [pc, #52]	; (8003450 <main+0x6d8>)
 800341c:	2000      	movs	r0, #0
 800341e:	f7fe ff2d 	bl	800227c <ch395_send_data>

	  ch395q_handler();
 8003422:	f7fe fbb1 	bl	8001b88 <ch395q_handler>
  {
 8003426:	e5e3      	b.n	8002ff0 <main+0x278>
 8003428:	20000008 	.word	0x20000008
 800342c:	20000004 	.word	0x20000004
 8003430:	2000000c 	.word	0x2000000c
 8003434:	20005720 	.word	0x20005720
 8003438:	20005718 	.word	0x20005718
 800343c:	2000571c 	.word	0x2000571c
 8003440:	0800db80 	.word	0x0800db80
 8003444:	20000040 	.word	0x20000040
 8003448:	0800db60 	.word	0x0800db60
 800344c:	0800db90 	.word	0x0800db90
 8003450:	20000678 	.word	0x20000678
 8003454:	66666666 	.word	0x66666666
 8003458:	3f4a6666 	.word	0x3f4a6666

0800345c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b094      	sub	sp, #80	; 0x50
 8003460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003462:	f107 031c 	add.w	r3, r7, #28
 8003466:	2234      	movs	r2, #52	; 0x34
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f006 fa22 	bl	80098b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	4b29      	ldr	r3, [pc, #164]	; (800352c <SystemClock_Config+0xd0>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	4a28      	ldr	r2, [pc, #160]	; (800352c <SystemClock_Config+0xd0>)
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	6413      	str	r3, [r2, #64]	; 0x40
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <SystemClock_Config+0xd0>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800349c:	2300      	movs	r3, #0
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4b23      	ldr	r3, [pc, #140]	; (8003530 <SystemClock_Config+0xd4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <SystemClock_Config+0xd4>)
 80034a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b20      	ldr	r3, [pc, #128]	; (8003530 <SystemClock_Config+0xd4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80034b8:	2309      	movs	r3, #9
 80034ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80034c2:	2301      	movs	r3, #1
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034c6:	2302      	movs	r3, #2
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80034d0:	2304      	movs	r3, #4
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80034d4:	2364      	movs	r3, #100	; 0x64
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034d8:	2302      	movs	r3, #2
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80034dc:	2302      	movs	r3, #2
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80034e0:	2302      	movs	r3, #2
 80034e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034e4:	f107 031c 	add.w	r3, r7, #28
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 fccd 	bl	8006e88 <HAL_RCC_OscConfig>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80034f4:	f000 f85c 	bl	80035b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034f8:	230f      	movs	r3, #15
 80034fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034fc:	2302      	movs	r3, #2
 80034fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003508:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800350e:	f107 0308 	add.w	r3, r7, #8
 8003512:	2103      	movs	r1, #3
 8003514:	4618      	mov	r0, r3
 8003516:	f003 fa97 	bl	8006a48 <HAL_RCC_ClockConfig>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003520:	f000 f846 	bl	80035b0 <Error_Handler>
  }
}
 8003524:	bf00      	nop
 8003526:	3750      	adds	r7, #80	; 0x50
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40023800 	.word	0x40023800
 8003530:	40007000 	.word	0x40007000

08003534 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t udelay)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	uint32_t startval, tickn, delays, wait;

	startval = SysTick->VAL;
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <delay_us+0x78>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	617b      	str	r3, [r7, #20]
	tickn = HAL_GetTick();
 8003542:	f000 ffad 	bl	80044a0 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]
//	sysc = 100000;  //SystemCoreClock / (1000U / uwTickFreq);
	delays = udelay * 100; //sysc / 1000 * udelay;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2264      	movs	r2, #100	; 0x64
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	60fb      	str	r3, [r7, #12]
	if(delays > startval)
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	429a      	cmp	r2, r3
 8003558:	d914      	bls.n	8003584 <delay_us+0x50>
	{
		while(HAL_GetTick() == tickn)
 800355a:	bf00      	nop
 800355c:	f000 ffa0 	bl	80044a0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4293      	cmp	r3, r2
 8003566:	d0f9      	beq.n	800355c <delay_us+0x28>
		{

		}
		wait = 100000 + startval - delays;
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8003572:	33a0      	adds	r3, #160	; 0xa0
 8003574:	60bb      	str	r3, [r7, #8]
		while(wait < SysTick->VAL)
 8003576:	bf00      	nop
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <delay_us+0x78>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d3fa      	bcc.n	8003578 <delay_us+0x44>
		while(wait < SysTick->VAL && HAL_GetTick() == tickn)
		{

		}
	}
}
 8003582:	e00f      	b.n	80035a4 <delay_us+0x70>
		wait = startval - delays;
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	60bb      	str	r3, [r7, #8]
		while(wait < SysTick->VAL && HAL_GetTick() == tickn)
 800358c:	bf00      	nop
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <delay_us+0x78>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	429a      	cmp	r2, r3
 8003596:	d205      	bcs.n	80035a4 <delay_us+0x70>
 8003598:	f000 ff82 	bl	80044a0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d0f4      	beq.n	800358e <delay_us+0x5a>
}
 80035a4:	bf00      	nop
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035b4:	b672      	cpsid	i
}
 80035b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <Error_Handler+0x8>

080035ba <int_separate>:
extern float Sen_3;
extern int8_t acc_all[6];

// 分离出整数部分（有符号）
char int_separate(float d)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	ed87 0a01 	vstr	s0, [r7, #4]
	char a = (int)d;
 80035c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035cc:	edc7 7a00 	vstr	s15, [r7]
 80035d0:	783b      	ldrb	r3, [r7, #0]
 80035d2:	73fb      	strb	r3, [r7, #15]

	if((int)d == 0) {
 80035d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035dc:	ee17 3a90 	vmov	r3, s15
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <int_separate+0x2e>
		a = 'o';
 80035e4:	236f      	movs	r3, #111	; 0x6f
 80035e6:	73fb      	strb	r3, [r7, #15]
	}

	return a;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <dec_separate>:

// 分离出小数部分（无符号、小数点后两位）
char dec_separate(float d)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	ed87 0a01 	vstr	s0, [r7, #4]
	int a = d;
 8003602:	edd7 7a01 	vldr	s15, [r7, #4]
 8003606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800360a:	ee17 3a90 	vmov	r3, s15
 800360e:	613b      	str	r3, [r7, #16]
	int b = (d-a)*100.0;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800361a:	ed97 7a01 	vldr	s14, [r7, #4]
 800361e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003622:	ee17 0a90 	vmov	r0, s15
 8003626:	f7fc ffaf 	bl	8000588 <__aeabi_f2d>
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <dec_separate+0x64>)
 8003630:	f7fd f802 	bl	8000638 <__aeabi_dmul>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	f7fd faac 	bl	8000b98 <__aeabi_d2iz>
 8003640:	4603      	mov	r3, r0
 8003642:	60fb      	str	r3, [r7, #12]
	char ss = b;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	75fb      	strb	r3, [r7, #23]

	if(b == 0) {
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <dec_separate+0x5a>
		ss = 'o';
 800364e:	236f      	movs	r3, #111	; 0x6f
 8003650:	75fb      	strb	r3, [r7, #23]
	}

	return ss;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40590000 	.word	0x40590000

08003660 <rtime_calculate>:

// 计算时间戳
void rtime_calculate(uint16_t old_num)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	80fb      	strh	r3, [r7, #6]
	float tim = 1000000 / data_frequency;
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <rtime_calculate+0x7c>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <rtime_calculate+0x80>)
 8003672:	fb93 f3f2 	sdiv	r3, r3, r2
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367e:	edc7 7a03 	vstr	s15, [r7, #12]
	rtime_foot_8 += old_num * tim;
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <rtime_calculate+0x84>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003698:	edd7 7a03 	vldr	s15, [r7, #12]
 800369c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a8:	ee17 2a90 	vmov	r2, s15
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <rtime_calculate+0x84>)
 80036ae:	601a      	str	r2, [r3, #0]

	if(rtime_foot_8 >= 100000000)
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <rtime_calculate+0x84>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <rtime_calculate+0x88>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d90a      	bls.n	80036d0 <rtime_calculate+0x70>
	{
		rtime_foot_8 -= 100000000;
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <rtime_calculate+0x84>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <rtime_calculate+0x8c>)
 80036c0:	4413      	add	r3, r2
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <rtime_calculate+0x84>)
 80036c4:	6013      	str	r3, [r2, #0]
		rtime_head_8++;
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <rtime_calculate+0x90>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <rtime_calculate+0x90>)
 80036ce:	6013      	str	r3, [r2, #0]
	}
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	20000032 	.word	0x20000032
 80036e0:	000f4240 	.word	0x000f4240
 80036e4:	20005710 	.word	0x20005710
 80036e8:	05f5e0ff 	.word	0x05f5e0ff
 80036ec:	fa0a1f00 	.word	0xfa0a1f00
 80036f0:	2000570c 	.word	0x2000570c
 80036f4:	00000000 	.word	0x00000000

080036f8 <Com_Value_Init_DMA>:

// 通过三轴的z轴数据矫正单轴数据
void Com_Value_Init_DMA(void)
{
 80036f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036fc:	b088      	sub	sp, #32
 80036fe:	af04      	add	r7, sp, #16
	uint8_t flag = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
	float accz_1;
	float accz_3;

	printf("The sensor is correcting...... \r\n");
 8003704:	4872      	ldr	r0, [pc, #456]	; (80038d0 <Com_Value_Init_DMA+0x1d8>)
 8003706:	f005 ffa7 	bl	8009658 <puts>

//	while(1)
	while(flag == 0)
 800370a:	e0c5      	b.n	8003898 <Com_Value_Init_DMA+0x1a0>
	{
		accz_1 = (adc_buf[1] * 3.3/4096 - com_value) / Sen_1;
 800370c:	4b71      	ldr	r3, [pc, #452]	; (80038d4 <Com_Value_Init_DMA+0x1dc>)
 800370e:	885b      	ldrh	r3, [r3, #2]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fc ff27 	bl	8000564 <__aeabi_i2d>
 8003716:	a366      	add	r3, pc, #408	; (adr r3, 80038b0 <Com_Value_Init_DMA+0x1b8>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f7fc ff8c 	bl	8000638 <__aeabi_dmul>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <Com_Value_Init_DMA+0x1e0>)
 800372e:	f7fd f8ad 	bl	800088c <__aeabi_ddiv>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4614      	mov	r4, r2
 8003738:	461d      	mov	r5, r3
 800373a:	4b68      	ldr	r3, [pc, #416]	; (80038dc <Com_Value_Init_DMA+0x1e4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc ff22 	bl	8000588 <__aeabi_f2d>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4620      	mov	r0, r4
 800374a:	4629      	mov	r1, r5
 800374c:	f7fc fdbc 	bl	80002c8 <__aeabi_dsub>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4614      	mov	r4, r2
 8003756:	461d      	mov	r5, r3
 8003758:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <Com_Value_Init_DMA+0x1e8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc ff13 	bl	8000588 <__aeabi_f2d>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4620      	mov	r0, r4
 8003768:	4629      	mov	r1, r5
 800376a:	f7fd f88f 	bl	800088c <__aeabi_ddiv>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	f7fd fa57 	bl	8000c28 <__aeabi_d2f>
 800377a:	4603      	mov	r3, r0
 800377c:	60bb      	str	r3, [r7, #8]
		accz_3 = acc_all[5] * Sen_3;
 800377e:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <Com_Value_Init_DMA+0x1ec>)
 8003780:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800378c:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <Com_Value_Init_DMA+0x1f0>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a01 	vstr	s15, [r7, #4]

		// 上电前，以三轴加速度芯片的z轴加速度accz_3作为标准，
		// 调整补偿量com_value，使传感器上电时的单轴加速度accz_1 = accz_3 ± 0.001g
		if(flag == 0 && (accz_1 - accz_3) > 0.001) {
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d125      	bne.n	80037ec <Com_Value_Init_DMA+0xf4>
 80037a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80037a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ac:	ee17 0a90 	vmov	r0, s15
 80037b0:	f7fc feea 	bl	8000588 <__aeabi_f2d>
 80037b4:	a340      	add	r3, pc, #256	; (adr r3, 80038b8 <Com_Value_Init_DMA+0x1c0>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f7fd f9cd 	bl	8000b58 <__aeabi_dcmpgt>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <Com_Value_Init_DMA+0xf4>
			com_value += 0.0001;
 80037c4:	4b45      	ldr	r3, [pc, #276]	; (80038dc <Com_Value_Init_DMA+0x1e4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc fedd 	bl	8000588 <__aeabi_f2d>
 80037ce:	a33c      	add	r3, pc, #240	; (adr r3, 80038c0 <Com_Value_Init_DMA+0x1c8>)
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f7fc fd7a 	bl	80002cc <__adddf3>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f7fd fa22 	bl	8000c28 <__aeabi_d2f>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4a3d      	ldr	r2, [pc, #244]	; (80038dc <Com_Value_Init_DMA+0x1e4>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e02d      	b.n	8003848 <Com_Value_Init_DMA+0x150>
		}
		else if(flag == 0 && (accz_1 - accz_3) < -0.001) {
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d125      	bne.n	800383e <Com_Value_Init_DMA+0x146>
 80037f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80037f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037fe:	ee17 0a90 	vmov	r0, s15
 8003802:	f7fc fec1 	bl	8000588 <__aeabi_f2d>
 8003806:	a330      	add	r3, pc, #192	; (adr r3, 80038c8 <Com_Value_Init_DMA+0x1d0>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fd f986 	bl	8000b1c <__aeabi_dcmplt>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d013      	beq.n	800383e <Com_Value_Init_DMA+0x146>
			com_value -= 0.0001;
 8003816:	4b31      	ldr	r3, [pc, #196]	; (80038dc <Com_Value_Init_DMA+0x1e4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fc feb4 	bl	8000588 <__aeabi_f2d>
 8003820:	a327      	add	r3, pc, #156	; (adr r3, 80038c0 <Com_Value_Init_DMA+0x1c8>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc fd4f 	bl	80002c8 <__aeabi_dsub>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	f7fd f9f9 	bl	8000c28 <__aeabi_d2f>
 8003836:	4603      	mov	r3, r0
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <Com_Value_Init_DMA+0x1e4>)
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	e004      	b.n	8003848 <Com_Value_Init_DMA+0x150>
		}
		else {
			flag = 1;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
			printf("Calibration is completed \r\n");
 8003842:	482a      	ldr	r0, [pc, #168]	; (80038ec <Com_Value_Init_DMA+0x1f4>)
 8003844:	f005 ff08 	bl	8009658 <puts>
		}

		LIS2DH12_ReadAccall(&hi2c1, acc_all);			/* 启动I2C DMA采集 */
 8003848:	4926      	ldr	r1, [pc, #152]	; (80038e4 <Com_Value_Init_DMA+0x1ec>)
 800384a:	4829      	ldr	r0, [pc, #164]	; (80038f0 <Com_Value_Init_DMA+0x1f8>)
 800384c:	f7ff f9e0 	bl	8002c10 <LIS2DH12_ReadAccall>
		delay_us(100);
 8003850:	2064      	movs	r0, #100	; 0x64
 8003852:	f7ff fe6f 	bl	8003534 <delay_us>

		if(flag == 1) {
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11d      	bne.n	8003898 <Com_Value_Init_DMA+0x1a0>
			printf("corrected information: %.5f  %.5f  %.5f\r\n", accz_3, accz_1, com_value);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fc fe93 	bl	8000588 <__aeabi_f2d>
 8003862:	4680      	mov	r8, r0
 8003864:	4689      	mov	r9, r1
 8003866:	68b8      	ldr	r0, [r7, #8]
 8003868:	f7fc fe8e 	bl	8000588 <__aeabi_f2d>
 800386c:	4604      	mov	r4, r0
 800386e:	460d      	mov	r5, r1
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <Com_Value_Init_DMA+0x1e4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc fe87 	bl	8000588 <__aeabi_f2d>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003882:	e9cd 4500 	strd	r4, r5, [sp]
 8003886:	4642      	mov	r2, r8
 8003888:	464b      	mov	r3, r9
 800388a:	481a      	ldr	r0, [pc, #104]	; (80038f4 <Com_Value_Init_DMA+0x1fc>)
 800388c:	f005 fe7e 	bl	800958c <iprintf>
			HAL_Delay(500);
 8003890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003894:	f000 fe10 	bl	80044b8 <HAL_Delay>
	while(flag == 0)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f43f af36 	beq.w	800370c <Com_Value_Init_DMA+0x14>
		}
	}
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038ac:	f3af 8000 	nop.w
 80038b0:	66666666 	.word	0x66666666
 80038b4:	400a6666 	.word	0x400a6666
 80038b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80038bc:	3f50624d 	.word	0x3f50624d
 80038c0:	eb1c432d 	.word	0xeb1c432d
 80038c4:	3f1a36e2 	.word	0x3f1a36e2
 80038c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80038cc:	bf50624d 	.word	0xbf50624d
 80038d0:	0800db94 	.word	0x0800db94
 80038d4:	20000664 	.word	0x20000664
 80038d8:	40b00000 	.word	0x40b00000
 80038dc:	20000008 	.word	0x20000008
 80038e0:	20000004 	.word	0x20000004
 80038e4:	20000670 	.word	0x20000670
 80038e8:	2000000c 	.word	0x2000000c
 80038ec:	0800dbb8 	.word	0x0800dbb8
 80038f0:	20000544 	.word	0x20000544
 80038f4:	0800dbd4 	.word	0x0800dbd4

080038f8 <temp_Get_R>:
#include "ntc.h"

//模拟量转电阻
float temp_Get_R(uint16_t adct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	80fb      	strh	r3, [r7, #6]
	float v1,v2,r;

	v1 = (float)(adct*3.3)/4096;//将NTC电路上的ADC采样值转换为电压
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fc fe2d 	bl	8000564 <__aeabi_i2d>
 800390a:	a31d      	add	r3, pc, #116	; (adr r3, 8003980 <temp_Get_R+0x88>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f7fc fe92 	bl	8000638 <__aeabi_dmul>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	f7fd f984 	bl	8000c28 <__aeabi_d2f>
 8003920:	ee06 0a90 	vmov	s13, r0
 8003924:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003988 <temp_Get_R+0x90>
 8003928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392c:	edc7 7a05 	vstr	s15, [r7, #20]
	v2 = 3.3 - v1;
 8003930:	6978      	ldr	r0, [r7, #20]
 8003932:	f7fc fe29 	bl	8000588 <__aeabi_f2d>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	a111      	add	r1, pc, #68	; (adr r1, 8003980 <temp_Get_R+0x88>)
 800393c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003940:	f7fc fcc2 	bl	80002c8 <__aeabi_dsub>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f7fd f96c 	bl	8000c28 <__aeabi_d2f>
 8003950:	4603      	mov	r3, r0
 8003952:	613b      	str	r3, [r7, #16]
	r = (v1/v2) * 10;
 8003954:	edd7 6a05 	vldr	s13, [r7, #20]
 8003958:	ed97 7a04 	vldr	s14, [r7, #16]
 800395c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003960:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003968:	edc7 7a03 	vstr	s15, [r7, #12]

	return r;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	ee07 3a90 	vmov	s15, r3
}
 8003972:	eeb0 0a67 	vmov.f32	s0, s15
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	f3af 8000 	nop.w
 8003980:	66666666 	.word	0x66666666
 8003984:	400a6666 	.word	0x400a6666
 8003988:	45800000 	.word	0x45800000

0800398c <myln>:

//实现ln(x) 的计算
double myln(double a)
{
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0
 8003992:	ed87 0b00 	vstr	d0, [r7]
   int N = 15;//取了前15+1项来估算
 8003996:	230f      	movs	r3, #15
 8003998:	61fb      	str	r3, [r7, #28]
   int k,nk;
   double x,xx,y;
   x = (a-1)/(a+1);
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	4b3c      	ldr	r3, [pc, #240]	; (8003a90 <myln+0x104>)
 80039a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039a4:	f7fc fc90 	bl	80002c8 <__aeabi_dsub>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4614      	mov	r4, r2
 80039ae:	461d      	mov	r5, r3
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <myln+0x104>)
 80039b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039ba:	f7fc fc87 	bl	80002cc <__adddf3>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	f7fc ff61 	bl	800088c <__aeabi_ddiv>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
   xx = x*x;
 80039d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039da:	f7fc fe2d 	bl	8000638 <__aeabi_dmul>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
   nk = 2*N+1;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	3301      	adds	r3, #1
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
   y = 1.0/nk;
 80039ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f0:	f7fc fdb8 	bl	8000564 <__aeabi_i2d>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	f04f 0000 	mov.w	r0, #0
 80039fc:	4924      	ldr	r1, [pc, #144]	; (8003a90 <myln+0x104>)
 80039fe:	f7fc ff45 	bl	800088c <__aeabi_ddiv>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	e9c7 2308 	strd	r2, r3, [r7, #32]
   for(k=N;k>0;k--)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0e:	e023      	b.n	8003a58 <myln+0xcc>
   {
     nk = nk - 2;
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	3b02      	subs	r3, #2
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
     y = 1.0/nk+xx*y;
 8003a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a18:	f7fc fda4 	bl	8000564 <__aeabi_i2d>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	f04f 0000 	mov.w	r0, #0
 8003a24:	491a      	ldr	r1, [pc, #104]	; (8003a90 <myln+0x104>)
 8003a26:	f7fc ff31 	bl	800088c <__aeabi_ddiv>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4614      	mov	r4, r2
 8003a30:	461d      	mov	r5, r3
 8003a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a3a:	f7fc fdfd 	bl	8000638 <__aeabi_dmul>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4620      	mov	r0, r4
 8003a44:	4629      	mov	r1, r5
 8003a46:	f7fc fc41 	bl	80002cc <__adddf3>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
   for(k=N;k>0;k--)
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	3b01      	subs	r3, #1
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	dcd8      	bgt.n	8003a10 <myln+0x84>

   }
   return 2.0*x*y;
 8003a5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	f7fc fc31 	bl	80002cc <__adddf3>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a76:	f7fc fddf 	bl	8000638 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a82:	eeb0 0a47 	vmov.f32	s0, s14
 8003a86:	eef0 0a67 	vmov.f32	s1, s15
 8003a8a:	3730      	adds	r7, #48	; 0x30
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a90:	3ff00000 	.word	0x3ff00000
 8003a94:	00000000 	.word	0x00000000

08003a98 <Get_Kelvin_Temperature>:

float Get_Kelvin_Temperature(uint16_t t)
{
 8003a98:	b5b0      	push	{r4, r5, r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	80fb      	strh	r3, [r7, #6]
	float N1,N2,N3,N4;
	float Rntc = temp_Get_R(t);
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff27 	bl	80038f8 <temp_Get_R>
 8003aaa:	ed87 0a07 	vstr	s0, [r7, #28]
	N1 = (myln(R25)-myln(Rntc))/B;
 8003aae:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8003b60 <Get_Kelvin_Temperature+0xc8>
 8003ab2:	f7ff ff6b 	bl	800398c <myln>
 8003ab6:	ec55 4b10 	vmov	r4, r5, d0
 8003aba:	69f8      	ldr	r0, [r7, #28]
 8003abc:	f7fc fd64 	bl	8000588 <__aeabi_f2d>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	ec43 2b10 	vmov	d0, r2, r3
 8003ac8:	f7ff ff60 	bl	800398c <myln>
 8003acc:	ec53 2b10 	vmov	r2, r3, d0
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	f7fc fbf8 	bl	80002c8 <__aeabi_dsub>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	a321      	add	r3, pc, #132	; (adr r3, 8003b68 <Get_Kelvin_Temperature+0xd0>)
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f7fc fed1 	bl	800088c <__aeabi_ddiv>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	f7fd f899 	bl	8000c28 <__aeabi_d2f>
 8003af6:	4603      	mov	r3, r0
 8003af8:	61bb      	str	r3, [r7, #24]
	N2 = 1/T25 - N1;
 8003afa:	69b8      	ldr	r0, [r7, #24]
 8003afc:	f7fc fd44 	bl	8000588 <__aeabi_f2d>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	a11a      	add	r1, pc, #104	; (adr r1, 8003b70 <Get_Kelvin_Temperature+0xd8>)
 8003b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b0a:	f7fc fbdd 	bl	80002c8 <__aeabi_dsub>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	f7fd f887 	bl	8000c28 <__aeabi_d2f>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	617b      	str	r3, [r7, #20]
	N3 = 1/N2;
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b22:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b2a:	edc7 7a04 	vstr	s15, [r7, #16]
	N4 = N3-273.15;//开尔文转摄氏度
 8003b2e:	6938      	ldr	r0, [r7, #16]
 8003b30:	f7fc fd2a 	bl	8000588 <__aeabi_f2d>
 8003b34:	a310      	add	r3, pc, #64	; (adr r3, 8003b78 <Get_Kelvin_Temperature+0xe0>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f7fc fbc5 	bl	80002c8 <__aeabi_dsub>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	f7fd f86f 	bl	8000c28 <__aeabi_d2f>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	60fb      	str	r3, [r7, #12]

	return N4;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	ee07 3a90 	vmov	s15, r3
}
 8003b54:	eeb0 0a67 	vmov.f32	s0, s15
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	00000000 	.word	0x00000000
 8003b64:	40590000 	.word	0x40590000
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	40aedc00 	.word	0x40aedc00
 8003b70:	dcb5db83 	.word	0xdcb5db83
 8003b74:	3f6b79e1 	.word	0x3f6b79e1
 8003b78:	66666666 	.word	0x66666666
 8003b7c:	40711266 	.word	0x40711266

08003b80 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <MX_SPI1_Init+0x68>)
 8003b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003b8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bcc:	220a      	movs	r2, #10
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bd0:	4804      	ldr	r0, [pc, #16]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bd2:	f003 fbdd 	bl	8007390 <HAL_SPI_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003bdc:	f7ff fce8 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20005724 	.word	0x20005724
 8003be8:	40013000 	.word	0x40013000

08003bec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003bf0:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003bf2:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <MX_SPI2_Init+0x68>)
 8003bf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003bfe:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c04:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003c0a:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c38:	220a      	movs	r2, #10
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c3c:	4804      	ldr	r0, [pc, #16]	; (8003c50 <MX_SPI2_Init+0x64>)
 8003c3e:	f003 fba7 	bl	8007390 <HAL_SPI_Init>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c48:	f7ff fcb2 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	2000577c 	.word	0x2000577c
 8003c54:	40003800 	.word	0x40003800

08003c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	; 0x30
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a32      	ldr	r2, [pc, #200]	; (8003d40 <HAL_SPI_MspInit+0xe8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d12c      	bne.n	8003cd4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	4a30      	ldr	r2, [pc, #192]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c88:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca6:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003cb2:	23e0      	movs	r3, #224	; 0xe0
 8003cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cc2:	2305      	movs	r3, #5
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc6:	f107 031c 	add.w	r3, r7, #28
 8003cca:	4619      	mov	r1, r3
 8003ccc:	481e      	ldr	r0, [pc, #120]	; (8003d48 <HAL_SPI_MspInit+0xf0>)
 8003cce:	f001 fcb9 	bl	8005644 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003cd2:	e031      	b.n	8003d38 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HAL_SPI_MspInit+0xf4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d12c      	bne.n	8003d38 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_SPI_MspInit+0xec>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003d16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d24:	2303      	movs	r3, #3
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d28:	2305      	movs	r3, #5
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	4619      	mov	r1, r3
 8003d32:	4807      	ldr	r0, [pc, #28]	; (8003d50 <HAL_SPI_MspInit+0xf8>)
 8003d34:	f001 fc86 	bl	8005644 <HAL_GPIO_Init>
}
 8003d38:	bf00      	nop
 8003d3a:	3730      	adds	r7, #48	; 0x30
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40013000 	.word	0x40013000
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40020400 	.word	0x40020400

08003d54 <spi1_read_write_byte>:
 * @brief       SPI1读写一个字节数据
 * @param       txdata  : 要发送的数据(1字节)
 * @retval      接收到的数据(1字节)
 */
uint8_t spi1_read_write_byte(uint8_t txdata)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
    uint8_t rxdata;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rxdata, 1, 1000);
 8003d5e:	f107 020f 	add.w	r2, r7, #15
 8003d62:	1df9      	adds	r1, r7, #7
 8003d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4803      	ldr	r0, [pc, #12]	; (8003d7c <spi1_read_write_byte+0x28>)
 8003d6e:	f003 fb98 	bl	80074a2 <HAL_SPI_TransmitReceive>
    return rxdata; /* 返回收到的数据 */
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20005724 	.word	0x20005724

08003d80 <SPI2_ReadWriteByte>:
  * @brief          封装SPI2读写函数（片外SPI Flash使用）
  * @param[in]     	TxData 发出的数据
  * @retval         RxData 收到的数据
  */
uint8_t SPI2_ReadWriteByte(uint8_t TxData)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
	HAL_SPI_TransmitReceive(&hspi2, &TxData, &RxData, 1, 1000);
 8003d8a:	f107 020f 	add.w	r2, r7, #15
 8003d8e:	1df9      	adds	r1, r7, #7
 8003d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2301      	movs	r3, #1
 8003d98:	4803      	ldr	r0, [pc, #12]	; (8003da8 <SPI2_ReadWriteByte+0x28>)
 8003d9a:	f003 fb82 	bl	80074a2 <HAL_SPI_TransmitReceive>
	return RxData;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	2000577c 	.word	0x2000577c

08003dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_MspInit+0x4c>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <HAL_MspInit+0x4c>)
 8003dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <HAL_MspInit+0x4c>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_MspInit+0x4c>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <HAL_MspInit+0x4c>)
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_MspInit+0x4c>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800

08003dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e00:	e7fe      	b.n	8003e00 <NMI_Handler+0x4>

08003e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e02:	b480      	push	{r7}
 8003e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e06:	e7fe      	b.n	8003e06 <HardFault_Handler+0x4>

08003e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e0c:	e7fe      	b.n	8003e0c <MemManage_Handler+0x4>

08003e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e12:	e7fe      	b.n	8003e12 <BusFault_Handler+0x4>

08003e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e18:	e7fe      	b.n	8003e18 <UsageFault_Handler+0x4>

08003e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e48:	f000 fb16 	bl	8004478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <DMA1_Stream0_IRQHandler+0x10>)
 8003e56:	f001 f97f 	bl	8005158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000598 	.word	0x20000598

08003e64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <DMA1_Stream1_IRQHandler+0x10>)
 8003e6a:	f001 f975 	bl	8005158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	200005f8 	.word	0x200005f8

08003e78 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <TIM6_IRQHandler+0x10>)
 8003e7e:	f003 fe3d 	bl	8007afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200057d8 	.word	0x200057d8

08003e8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e90:	4802      	ldr	r0, [pc, #8]	; (8003e9c <DMA2_Stream0_IRQHandler+0x10>)
 8003e92:	f001 f961 	bl	8005158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000280 	.word	0x20000280

08003ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return 1;
 8003ea4:	2301      	movs	r3, #1
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_kill>:

int _kill(int pid, int sig)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003eba:	f005 fd63 	bl	8009984 <__errno>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2216      	movs	r2, #22
 8003ec2:	601a      	str	r2, [r3, #0]
  return -1;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_exit>:

void _exit (int status)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ffe7 	bl	8003eb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ee2:	e7fe      	b.n	8003ee2 <_exit+0x12>

08003ee4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e00a      	b.n	8003f0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ef6:	f3af 8000 	nop.w
 8003efa:	4601      	mov	r1, r0
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	60ba      	str	r2, [r7, #8]
 8003f02:	b2ca      	uxtb	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	dbf0      	blt.n	8003ef6 <_read+0x12>
  }

  return len;
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e009      	b.n	8003f44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	60ba      	str	r2, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 f8e5 	bl	8004108 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3301      	adds	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	dbf1      	blt.n	8003f30 <_write+0x12>
  }
  return len;
 8003f4c:	687b      	ldr	r3, [r7, #4]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_close>:

int _close(int file)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f7e:	605a      	str	r2, [r3, #4]
  return 0;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <_isatty>:

int _isatty(int file)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f96:	2301      	movs	r3, #1
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fc8:	4a14      	ldr	r2, [pc, #80]	; (800401c <_sbrk+0x5c>)
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <_sbrk+0x60>)
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <_sbrk+0x64>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <_sbrk+0x64>)
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <_sbrk+0x68>)
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <_sbrk+0x64>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d207      	bcs.n	8004000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ff0:	f005 fcc8 	bl	8009984 <__errno>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	e009      	b.n	8004014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <_sbrk+0x64>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004006:	4b07      	ldr	r3, [pc, #28]	; (8004024 <_sbrk+0x64>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	4a05      	ldr	r2, [pc, #20]	; (8004024 <_sbrk+0x64>)
 8004010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20040000 	.word	0x20040000
 8004020:	00000400 	.word	0x00000400
 8004024:	200057d4 	.word	0x200057d4
 8004028:	200059b8 	.word	0x200059b8

0800402c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <SystemInit+0x20>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	4a05      	ldr	r2, [pc, #20]	; (800404c <SystemInit+0x20>)
 8004038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800403c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004056:	463b      	mov	r3, r7
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800405e:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <MX_TIM6_Init+0x60>)
 8004060:	4a14      	ldr	r2, [pc, #80]	; (80040b4 <MX_TIM6_Init+0x64>)
 8004062:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <MX_TIM6_Init+0x60>)
 8004066:	22c7      	movs	r2, #199	; 0xc7
 8004068:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <MX_TIM6_Init+0x60>)
 800406c:	2200      	movs	r2, #0
 800406e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <MX_TIM6_Init+0x60>)
 8004072:	2263      	movs	r2, #99	; 0x63
 8004074:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <MX_TIM6_Init+0x60>)
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800407c:	480c      	ldr	r0, [pc, #48]	; (80040b0 <MX_TIM6_Init+0x60>)
 800407e:	f003 fc7d 	bl	800797c <HAL_TIM_Base_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8004088:	f7ff fa92 	bl	80035b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800408c:	2300      	movs	r3, #0
 800408e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004090:	2300      	movs	r3, #0
 8004092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004094:	463b      	mov	r3, r7
 8004096:	4619      	mov	r1, r3
 8004098:	4805      	ldr	r0, [pc, #20]	; (80040b0 <MX_TIM6_Init+0x60>)
 800409a:	f003 feff 	bl	8007e9c <HAL_TIMEx_MasterConfigSynchronization>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80040a4:	f7ff fa84 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	200057d8 	.word	0x200057d8
 80040b4:	40001000 	.word	0x40001000

080040b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <HAL_TIM_Base_MspInit+0x48>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d115      	bne.n	80040f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <HAL_TIM_Base_MspInit+0x4c>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4a0c      	ldr	r2, [pc, #48]	; (8004104 <HAL_TIM_Base_MspInit+0x4c>)
 80040d4:	f043 0310 	orr.w	r3, r3, #16
 80040d8:	6413      	str	r3, [r2, #64]	; 0x40
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <HAL_TIM_Base_MspInit+0x4c>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80040e6:	2200      	movs	r2, #0
 80040e8:	2101      	movs	r1, #1
 80040ea:	2036      	movs	r0, #54	; 0x36
 80040ec:	f000 fed5 	bl	8004e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80040f0:	2036      	movs	r0, #54	; 0x36
 80040f2:	f000 feee 	bl	8004ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40001000 	.word	0x40001000
 8004104:	40023800 	.word	0x40023800

08004108 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8004110:	1d39      	adds	r1, r7, #4
 8004112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004116:	2201      	movs	r2, #1
 8004118:	4803      	ldr	r0, [pc, #12]	; (8004128 <__io_putchar+0x20>)
 800411a:	f003 ff9c 	bl	8008056 <HAL_UART_Transmit>
    return ch;
 800411e:	687b      	ldr	r3, [r7, #4]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20005820 	.word	0x20005820

0800412c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <MX_USART1_UART_Init+0x50>)
 8004134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 8004138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800413c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 8004140:	2200      	movs	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 8004146:	2200      	movs	r2, #0
 8004148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 800414c:	2200      	movs	r2, #0
 800414e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 8004152:	220c      	movs	r2, #12
 8004154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 8004158:	2200      	movs	r2, #0
 800415a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 800415e:	2200      	movs	r2, #0
 8004160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004162:	4805      	ldr	r0, [pc, #20]	; (8004178 <MX_USART1_UART_Init+0x4c>)
 8004164:	f003 ff2a 	bl	8007fbc <HAL_UART_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800416e:	f7ff fa1f 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20005820 	.word	0x20005820
 800417c:	40011000 	.word	0x40011000

08004180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	60da      	str	r2, [r3, #12]
 8004196:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a19      	ldr	r2, [pc, #100]	; (8004204 <HAL_UART_MspInit+0x84>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d12c      	bne.n	80041fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	4b18      	ldr	r3, [pc, #96]	; (8004208 <HAL_UART_MspInit+0x88>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_UART_MspInit+0x88>)
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	6453      	str	r3, [r2, #68]	; 0x44
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_UART_MspInit+0x88>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_UART_MspInit+0x88>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <HAL_UART_MspInit+0x88>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_UART_MspInit+0x88>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e0:	2302      	movs	r3, #2
 80041e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e8:	2303      	movs	r3, #3
 80041ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041ec:	2307      	movs	r3, #7
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	4619      	mov	r1, r3
 80041f6:	4805      	ldr	r0, [pc, #20]	; (800420c <HAL_UART_MspInit+0x8c>)
 80041f8:	f001 fa24 	bl	8005644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80041fc:	bf00      	nop
 80041fe:	3728      	adds	r7, #40	; 0x28
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40011000 	.word	0x40011000
 8004208:	40023800 	.word	0x40023800
 800420c:	40020000 	.word	0x40020000

08004210 <W25QXX_Init>:
//W25Q80
//容量为1M字节,共有16个Block,256个Sector

//初始化SPI FLASH的IO口
void W25QXX_Init(void)
{ 
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
  uint8_t temp;

	__HAL_SPI_ENABLE(&hspi2);                 //使能SPI2
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <W25QXX_Init+0x7c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <W25QXX_Init+0x7c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004224:	601a      	str	r2, [r3, #0]
  SPI2_ReadWriteByte(0Xff);                        //启动传输
 8004226:	20ff      	movs	r0, #255	; 0xff
 8004228:	f7ff fdaa 	bl	8003d80 <SPI2_ReadWriteByte>
	
	W25QXX_CS(1);			                //SPI FLASH不选中
 800422c:	2201      	movs	r2, #1
 800422e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004232:	4817      	ldr	r0, [pc, #92]	; (8004290 <W25QXX_Init+0x80>)
 8004234:	f001 fb9a 	bl	800596c <HAL_GPIO_WritePin>

	W25QXX_TYPE=W25QXX_ReadID();	        //读取FLASH ID
 8004238:	f000 f86a 	bl	8004310 <W25QXX_ReadID>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <W25QXX_Init+0x84>)
 8004242:	801a      	strh	r2, [r3, #0]

    if(W25QXX_TYPE==W25Q256)                
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <W25QXX_Init+0x84>)
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	f64e 7218 	movw	r2, #61208	; 0xef18
 800424c:	4293      	cmp	r3, r2
 800424e:	d118      	bne.n	8004282 <W25QXX_Init+0x72>
    {
        temp=W25QXX_ReadSR(3);              //读取状态寄存器3，判断地址模式
 8004250:	2003      	movs	r0, #3
 8004252:	f000 f821 	bl	8004298 <W25QXX_ReadSR>
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
        if((temp&0X01)==0)			        //如果不是4字节地址模式,则进入4字节地址模式
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10e      	bne.n	8004282 <W25QXX_Init+0x72>
		{
			W25QXX_CS(0); 			        //选中
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800426a:	4809      	ldr	r0, [pc, #36]	; (8004290 <W25QXX_Init+0x80>)
 800426c:	f001 fb7e 	bl	800596c <HAL_GPIO_WritePin>
			SPI2_ReadWriteByte(W25X_Enable4ByteAddr);//发送进入4字节地址模式指令
 8004270:	20b7      	movs	r0, #183	; 0xb7
 8004272:	f7ff fd85 	bl	8003d80 <SPI2_ReadWriteByte>
			W25QXX_CS(1);       		  	//取消片选
 8004276:	2201      	movs	r2, #1
 8004278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800427c:	4804      	ldr	r0, [pc, #16]	; (8004290 <W25QXX_Init+0x80>)
 800427e:	f001 fb75 	bl	800596c <HAL_GPIO_WritePin>
		}
    }
}  
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2000577c 	.word	0x2000577c
 8004290:	40020400 	.word	0x40020400
 8004294:	20000048 	.word	0x20000048

08004298 <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
uint8_t W25QXX_ReadSR(uint8_t regno)
{  
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0,command=0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73bb      	strb	r3, [r7, #14]
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d00c      	beq.n	80042ca <W25QXX_ReadSR+0x32>
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	dc0d      	bgt.n	80042d0 <W25QXX_ReadSR+0x38>
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d002      	beq.n	80042be <W25QXX_ReadSR+0x26>
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d003      	beq.n	80042c4 <W25QXX_ReadSR+0x2c>
 80042bc:	e008      	b.n	80042d0 <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 80042be:	2305      	movs	r3, #5
 80042c0:	73fb      	strb	r3, [r7, #15]
            break;
 80042c2:	e008      	b.n	80042d6 <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 80042c4:	2335      	movs	r3, #53	; 0x35
 80042c6:	73fb      	strb	r3, [r7, #15]
            break;
 80042c8:	e005      	b.n	80042d6 <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 80042ca:	2315      	movs	r3, #21
 80042cc:	73fb      	strb	r3, [r7, #15]
            break;
 80042ce:	e002      	b.n	80042d6 <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;    
 80042d0:	2305      	movs	r3, #5
 80042d2:	73fb      	strb	r3, [r7, #15]
            break;
 80042d4:	bf00      	nop
    }    
	W25QXX_CS(0);                       	//使能器件
 80042d6:	2200      	movs	r2, #0
 80042d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042dc:	480b      	ldr	r0, [pc, #44]	; (800430c <W25QXX_ReadSR+0x74>)
 80042de:	f001 fb45 	bl	800596c <HAL_GPIO_WritePin>
	SPI2_ReadWriteByte(command);            //发送读取状态寄存器命令
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fd4b 	bl	8003d80 <SPI2_ReadWriteByte>
	byte=SPI2_ReadWriteByte(0Xff);          //读取一个字节
 80042ea:	20ff      	movs	r0, #255	; 0xff
 80042ec:	f7ff fd48 	bl	8003d80 <SPI2_ReadWriteByte>
 80042f0:	4603      	mov	r3, r0
 80042f2:	73bb      	strb	r3, [r7, #14]
	W25QXX_CS(1);                         	//取消片选
 80042f4:	2201      	movs	r2, #1
 80042f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042fa:	4804      	ldr	r0, [pc, #16]	; (800430c <W25QXX_ReadSR+0x74>)
 80042fc:	f001 fb36 	bl	800596c <HAL_GPIO_WritePin>
	return byte;   
 8004300:	7bbb      	ldrb	r3, [r7, #14]
} 
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40020400 	.word	0x40020400

08004310 <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
uint16_t W25QXX_ReadID(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
	uint16_t Temp = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	80fb      	strh	r3, [r7, #6]
	W25QXX_CS(0);				    
 800431a:	2200      	movs	r2, #0
 800431c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004320:	4816      	ldr	r0, [pc, #88]	; (800437c <W25QXX_ReadID+0x6c>)
 8004322:	f001 fb23 	bl	800596c <HAL_GPIO_WritePin>
	SPI2_ReadWriteByte(0x90);//发送读取ID命令
 8004326:	2090      	movs	r0, #144	; 0x90
 8004328:	f7ff fd2a 	bl	8003d80 <SPI2_ReadWriteByte>
	SPI2_ReadWriteByte(0x00); 	    
 800432c:	2000      	movs	r0, #0
 800432e:	f7ff fd27 	bl	8003d80 <SPI2_ReadWriteByte>
	SPI2_ReadWriteByte(0x00); 	    
 8004332:	2000      	movs	r0, #0
 8004334:	f7ff fd24 	bl	8003d80 <SPI2_ReadWriteByte>
	SPI2_ReadWriteByte(0x00); 	 			   
 8004338:	2000      	movs	r0, #0
 800433a:	f7ff fd21 	bl	8003d80 <SPI2_ReadWriteByte>
	Temp|=SPI2_ReadWriteByte(0xFF)<<8;  
 800433e:	20ff      	movs	r0, #255	; 0xff
 8004340:	f7ff fd1e 	bl	8003d80 <SPI2_ReadWriteByte>
 8004344:	4603      	mov	r3, r0
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	b21a      	sxth	r2, r3
 800434a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800434e:	4313      	orrs	r3, r2
 8004350:	b21b      	sxth	r3, r3
 8004352:	80fb      	strh	r3, [r7, #6]
	Temp|=SPI2_ReadWriteByte(0xFF);	 
 8004354:	20ff      	movs	r0, #255	; 0xff
 8004356:	f7ff fd13 	bl	8003d80 <SPI2_ReadWriteByte>
 800435a:	4603      	mov	r3, r0
 800435c:	b29a      	uxth	r2, r3
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	4313      	orrs	r3, r2
 8004362:	80fb      	strh	r3, [r7, #6]
	W25QXX_CS(1);				    
 8004364:	2201      	movs	r2, #1
 8004366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800436a:	4804      	ldr	r0, [pc, #16]	; (800437c <W25QXX_ReadID+0x6c>)
 800436c:	f001 fafe 	bl	800596c <HAL_GPIO_WritePin>
	return Temp;
 8004370:	88fb      	ldrh	r3, [r7, #6]
}   		    
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40020400 	.word	0x40020400

08004380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8004380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004384:	480d      	ldr	r0, [pc, #52]	; (80043bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004386:	490e      	ldr	r1, [pc, #56]	; (80043c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004388:	4a0e      	ldr	r2, [pc, #56]	; (80043c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800438a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800438c:	e002      	b.n	8004394 <LoopCopyDataInit>

0800438e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800438e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004392:	3304      	adds	r3, #4

08004394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004398:	d3f9      	bcc.n	800438e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800439a:	4a0b      	ldr	r2, [pc, #44]	; (80043c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800439c:	4c0b      	ldr	r4, [pc, #44]	; (80043cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800439e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a0:	e001      	b.n	80043a6 <LoopFillZerobss>

080043a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043a4:	3204      	adds	r2, #4

080043a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043a8:	d3fb      	bcc.n	80043a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043aa:	f7ff fe3f 	bl	800402c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043ae:	f005 faef 	bl	8009990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043b2:	f7fe fce1 	bl	8002d78 <main>
  bx  lr    
 80043b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80043b8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80043bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043c0:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80043c4:	0800e084 	.word	0x0800e084
  ldr r2, =_sbss
 80043c8:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80043cc:	200059b4 	.word	0x200059b4

080043d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043d0:	e7fe      	b.n	80043d0 <ADC_IRQHandler>
	...

080043d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_Init+0x40>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <HAL_Init+0x40>)
 80043de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_Init+0x40>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <HAL_Init+0x40>)
 80043ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_Init+0x40>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a07      	ldr	r2, [pc, #28]	; (8004414 <HAL_Init+0x40>)
 80043f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043fc:	2003      	movs	r0, #3
 80043fe:	f000 fd41 	bl	8004e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004402:	200f      	movs	r0, #15
 8004404:	f000 f808 	bl	8004418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004408:	f7ff fcd0 	bl	8003dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40023c00 	.word	0x40023c00

08004418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_InitTick+0x54>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_InitTick+0x58>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800442e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fd59 	bl	8004eee <HAL_SYSTICK_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e00e      	b.n	8004464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b0f      	cmp	r3, #15
 800444a:	d80a      	bhi.n	8004462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800444c:	2200      	movs	r2, #0
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	f000 fd21 	bl	8004e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004458:	4a06      	ldr	r2, [pc, #24]	; (8004474 <HAL_InitTick+0x5c>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000044 	.word	0x20000044
 8004470:	20000050 	.word	0x20000050
 8004474:	2000004c 	.word	0x2000004c

08004478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_IncTick+0x20>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_IncTick+0x24>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4413      	add	r3, r2
 8004488:	4a04      	ldr	r2, [pc, #16]	; (800449c <HAL_IncTick+0x24>)
 800448a:	6013      	str	r3, [r2, #0]
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000050 	.word	0x20000050
 800449c:	20005864 	.word	0x20005864

080044a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return uwTick;
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <HAL_GetTick+0x14>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20005864 	.word	0x20005864

080044b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c0:	f7ff ffee 	bl	80044a0 <HAL_GetTick>
 80044c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d005      	beq.n	80044de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <HAL_Delay+0x44>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044de:	bf00      	nop
 80044e0:	f7ff ffde 	bl	80044a0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d8f7      	bhi.n	80044e0 <HAL_Delay+0x28>
  {
  }
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000050 	.word	0x20000050

08004500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e033      	b.n	800457e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fde6 	bl	80010f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d118      	bne.n	8004570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004546:	f023 0302 	bic.w	r3, r3, #2
 800454a:	f043 0202 	orr.w	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa48 	bl	80049e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
 800456e:	e001      	b.n	8004574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_ADC_Start_DMA+0x1e>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e0ce      	b.n	8004744 <HAL_ADC_Start_DMA+0x1bc>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d018      	beq.n	80045ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045cc:	4b5f      	ldr	r3, [pc, #380]	; (800474c <HAL_ADC_Start_DMA+0x1c4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a5f      	ldr	r2, [pc, #380]	; (8004750 <HAL_ADC_Start_DMA+0x1c8>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	0c9a      	lsrs	r2, r3, #18
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045e0:	e002      	b.n	80045e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f9      	bne.n	80045e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fc:	d107      	bne.n	800460e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800460c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	f040 8086 	bne.w	800472a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004648:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d106      	bne.n	800466c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f023 0206 	bic.w	r2, r3, #6
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
 800466a:	e002      	b.n	8004672 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800467a:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_ADC_Start_DMA+0x1cc>)
 800467c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	4a35      	ldr	r2, [pc, #212]	; (8004758 <HAL_ADC_Start_DMA+0x1d0>)
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	4a34      	ldr	r2, [pc, #208]	; (800475c <HAL_ADC_Start_DMA+0x1d4>)
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	4a33      	ldr	r2, [pc, #204]	; (8004760 <HAL_ADC_Start_DMA+0x1d8>)
 8004694:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800469e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80046ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	334c      	adds	r3, #76	; 0x4c
 80046ca:	4619      	mov	r1, r3
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f000 fcc8 	bl	8005064 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10f      	bne.n	8004700 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d129      	bne.n	8004742 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046fc:	609a      	str	r2, [r3, #8]
 80046fe:	e020      	b.n	8004742 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a17      	ldr	r2, [pc, #92]	; (8004764 <HAL_ADC_Start_DMA+0x1dc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d11b      	bne.n	8004742 <HAL_ADC_Start_DMA+0x1ba>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d114      	bne.n	8004742 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	e00b      	b.n	8004742 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0210 	orr.w	r2, r3, #16
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000044 	.word	0x20000044
 8004750:	431bde83 	.word	0x431bde83
 8004754:	40012300 	.word	0x40012300
 8004758:	08004be1 	.word	0x08004be1
 800475c:	08004c9b 	.word	0x08004c9b
 8004760:	08004cb7 	.word	0x08004cb7
 8004764:	40012000 	.word	0x40012000

08004768 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x1c>
 80047bc:	2302      	movs	r3, #2
 80047be:	e105      	b.n	80049cc <HAL_ADC_ConfigChannel+0x228>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b09      	cmp	r3, #9
 80047ce:	d925      	bls.n	800481c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68d9      	ldr	r1, [r3, #12]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	4613      	mov	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4413      	add	r3, r2
 80047e4:	3b1e      	subs	r3, #30
 80047e6:	2207      	movs	r2, #7
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43da      	mvns	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	400a      	ands	r2, r1
 80047f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68d9      	ldr	r1, [r3, #12]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	4618      	mov	r0, r3
 8004808:	4603      	mov	r3, r0
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4403      	add	r3, r0
 800480e:	3b1e      	subs	r3, #30
 8004810:	409a      	lsls	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	e022      	b.n	8004862 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6919      	ldr	r1, [r3, #16]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	4613      	mov	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4413      	add	r3, r2
 8004830:	2207      	movs	r2, #7
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43da      	mvns	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	400a      	ands	r2, r1
 800483e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6919      	ldr	r1, [r3, #16]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	4618      	mov	r0, r3
 8004852:	4603      	mov	r3, r0
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4403      	add	r3, r0
 8004858:	409a      	lsls	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b06      	cmp	r3, #6
 8004868:	d824      	bhi.n	80048b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	3b05      	subs	r3, #5
 800487c:	221f      	movs	r2, #31
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43da      	mvns	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	400a      	ands	r2, r1
 800488a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	4618      	mov	r0, r3
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	3b05      	subs	r3, #5
 80048a6:	fa00 f203 	lsl.w	r2, r0, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	635a      	str	r2, [r3, #52]	; 0x34
 80048b2:	e04c      	b.n	800494e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	d824      	bhi.n	8004906 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	3b23      	subs	r3, #35	; 0x23
 80048ce:	221f      	movs	r2, #31
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43da      	mvns	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	400a      	ands	r2, r1
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	4618      	mov	r0, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	3b23      	subs	r3, #35	; 0x23
 80048f8:	fa00 f203 	lsl.w	r2, r0, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
 8004904:	e023      	b.n	800494e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	3b41      	subs	r3, #65	; 0x41
 8004918:	221f      	movs	r2, #31
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43da      	mvns	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	400a      	ands	r2, r1
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	4618      	mov	r0, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	3b41      	subs	r3, #65	; 0x41
 8004942:	fa00 f203 	lsl.w	r2, r0, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800494e:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <HAL_ADC_ConfigChannel+0x234>)
 8004950:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a21      	ldr	r2, [pc, #132]	; (80049dc <HAL_ADC_ConfigChannel+0x238>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d109      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x1cc>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b12      	cmp	r3, #18
 8004962:	d105      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a19      	ldr	r2, [pc, #100]	; (80049dc <HAL_ADC_ConfigChannel+0x238>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d123      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x21e>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b10      	cmp	r3, #16
 8004980:	d003      	beq.n	800498a <HAL_ADC_ConfigChannel+0x1e6>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b11      	cmp	r3, #17
 8004988:	d11b      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b10      	cmp	r3, #16
 800499c:	d111      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <HAL_ADC_ConfigChannel+0x23c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <HAL_ADC_ConfigChannel+0x240>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	0c9a      	lsrs	r2, r3, #18
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049b4:	e002      	b.n	80049bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f9      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40012300 	.word	0x40012300
 80049dc:	40012000 	.word	0x40012000
 80049e0:	20000044 	.word	0x20000044
 80049e4:	431bde83 	.word	0x431bde83

080049e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049f0:	4b79      	ldr	r3, [pc, #484]	; (8004bd8 <ADC_Init+0x1f0>)
 80049f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6859      	ldr	r1, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6899      	ldr	r1, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	4a58      	ldr	r2, [pc, #352]	; (8004bdc <ADC_Init+0x1f4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d022      	beq.n	8004ac6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6899      	ldr	r1, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6899      	ldr	r1, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	e00f      	b.n	8004ae6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ae4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0202 	bic.w	r2, r2, #2
 8004af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6899      	ldr	r1, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	7e1b      	ldrb	r3, [r3, #24]
 8004b00:	005a      	lsls	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	035a      	lsls	r2, r3, #13
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	e007      	b.n	8004b5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	051a      	lsls	r2, r3, #20
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6899      	ldr	r1, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b9e:	025a      	lsls	r2, r3, #9
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	029a      	lsls	r2, r3, #10
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	40012300 	.word	0x40012300
 8004bdc:	0f000001 	.word	0x0f000001

08004be0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d13c      	bne.n	8004c74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d12b      	bne.n	8004c6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d127      	bne.n	8004c6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d119      	bne.n	8004c6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0220 	bic.w	r2, r2, #32
 8004c46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fd7b 	bl	8004768 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c72:	e00e      	b.n	8004c92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fd85 	bl	8004790 <HAL_ADC_ErrorCallback>
}
 8004c86:	e004      	b.n	8004c92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fd67 	bl	800477c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2240      	movs	r2, #64	; 0x40
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff fd5a 	bl	8004790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d00:	4013      	ands	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d16:	4a04      	ldr	r2, [pc, #16]	; (8004d28 <__NVIC_SetPriorityGrouping+0x44>)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	60d3      	str	r3, [r2, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	e000ed00 	.word	0xe000ed00

08004d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <__NVIC_GetPriorityGrouping+0x18>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	f003 0307 	and.w	r3, r3, #7
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	db0b      	blt.n	8004d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	4907      	ldr	r1, [pc, #28]	; (8004d80 <__NVIC_EnableIRQ+0x38>)
 8004d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	2001      	movs	r0, #1
 8004d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e100 	.word	0xe000e100

08004d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	db0a      	blt.n	8004dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	490c      	ldr	r1, [pc, #48]	; (8004dd0 <__NVIC_SetPriority+0x4c>)
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	0112      	lsls	r2, r2, #4
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	440b      	add	r3, r1
 8004da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dac:	e00a      	b.n	8004dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	4908      	ldr	r1, [pc, #32]	; (8004dd4 <__NVIC_SetPriority+0x50>)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	0112      	lsls	r2, r2, #4
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	761a      	strb	r2, [r3, #24]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	e000e100 	.word	0xe000e100
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f1c3 0307 	rsb	r3, r3, #7
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	bf28      	it	cs
 8004df6:	2304      	movcs	r3, #4
 8004df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d902      	bls.n	8004e08 <NVIC_EncodePriority+0x30>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3b03      	subs	r3, #3
 8004e06:	e000      	b.n	8004e0a <NVIC_EncodePriority+0x32>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e20:	f04f 31ff 	mov.w	r1, #4294967295
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	43d9      	mvns	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e30:	4313      	orrs	r3, r2
         );
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3724      	adds	r7, #36	; 0x24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e50:	d301      	bcc.n	8004e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e52:	2301      	movs	r3, #1
 8004e54:	e00f      	b.n	8004e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e56:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <SysTick_Config+0x40>)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e5e:	210f      	movs	r1, #15
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	f7ff ff8e 	bl	8004d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <SysTick_Config+0x40>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e6e:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <SysTick_Config+0x40>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	e000e010 	.word	0xe000e010

08004e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff29 	bl	8004ce4 <__NVIC_SetPriorityGrouping>
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eac:	f7ff ff3e 	bl	8004d2c <__NVIC_GetPriorityGrouping>
 8004eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	6978      	ldr	r0, [r7, #20]
 8004eb8:	f7ff ff8e 	bl	8004dd8 <NVIC_EncodePriority>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff5d 	bl	8004d84 <__NVIC_SetPriority>
}
 8004eca:	bf00      	nop
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	4603      	mov	r3, r0
 8004eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff ff31 	bl	8004d48 <__NVIC_EnableIRQ>
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ffa2 	bl	8004e40 <SysTick_Config>
 8004efc:	4603      	mov	r3, r0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f14:	f7ff fac4 	bl	80044a0 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e099      	b.n	8005058 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f44:	e00f      	b.n	8004f66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f46:	f7ff faab 	bl	80044a0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d908      	bls.n	8004f66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e078      	b.n	8005058 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e8      	bne.n	8004f46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4b38      	ldr	r3, [pc, #224]	; (8005060 <HAL_DMA_Init+0x158>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d107      	bne.n	8004fd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0307 	bic.w	r3, r3, #7
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d117      	bne.n	800502a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00e      	beq.n	800502a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa9d 	bl	800554c <DMA_CheckFifoParam>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2240      	movs	r2, #64	; 0x40
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005026:	2301      	movs	r3, #1
 8005028:	e016      	b.n	8005058 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa54 	bl	80054e0 <DMA_CalcBaseAndBitshift>
 8005038:	4603      	mov	r3, r0
 800503a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005040:	223f      	movs	r2, #63	; 0x3f
 8005042:	409a      	lsls	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	f010803f 	.word	0xf010803f

08005064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_DMA_Start_IT+0x26>
 8005086:	2302      	movs	r3, #2
 8005088:	e040      	b.n	800510c <HAL_DMA_Start_IT+0xa8>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d12f      	bne.n	80050fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f9e6 	bl	8005484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050bc:	223f      	movs	r2, #63	; 0x3f
 80050be:	409a      	lsls	r2, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0216 	orr.w	r2, r2, #22
 80050d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0208 	orr.w	r2, r2, #8
 80050ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e005      	b.n	800510a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005106:	2302      	movs	r3, #2
 8005108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d004      	beq.n	8005132 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e00c      	b.n	800514c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2205      	movs	r2, #5
 8005136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005164:	4b8e      	ldr	r3, [pc, #568]	; (80053a0 <HAL_DMA_IRQHandler+0x248>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a8e      	ldr	r2, [pc, #568]	; (80053a4 <HAL_DMA_IRQHandler+0x24c>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	0a9b      	lsrs	r3, r3, #10
 8005170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005182:	2208      	movs	r2, #8
 8005184:	409a      	lsls	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01a      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d013      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0204 	bic.w	r2, r2, #4
 80051aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	2208      	movs	r2, #8
 80051b2:	409a      	lsls	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	f043 0201 	orr.w	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	2201      	movs	r2, #1
 80051ca:	409a      	lsls	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d012      	beq.n	80051fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e6:	2201      	movs	r2, #1
 80051e8:	409a      	lsls	r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	f043 0202 	orr.w	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fe:	2204      	movs	r2, #4
 8005200:	409a      	lsls	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d012      	beq.n	8005230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521c:	2204      	movs	r2, #4
 800521e:	409a      	lsls	r2, r3
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	f043 0204 	orr.w	r2, r3, #4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005234:	2210      	movs	r2, #16
 8005236:	409a      	lsls	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d043      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d03c      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005252:	2210      	movs	r2, #16
 8005254:	409a      	lsls	r2, r3
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d018      	beq.n	800529a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d108      	bne.n	8005288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d024      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
 8005286:	e01f      	b.n	80052c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
 8005298:	e016      	b.n	80052c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d107      	bne.n	80052b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0208 	bic.w	r2, r2, #8
 80052b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052cc:	2220      	movs	r2, #32
 80052ce:	409a      	lsls	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 808f 	beq.w	80053f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8087 	beq.w	80053f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ee:	2220      	movs	r2, #32
 80052f0:	409a      	lsls	r2, r3
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d136      	bne.n	8005370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0216 	bic.w	r2, r2, #22
 8005310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695a      	ldr	r2, [r3, #20]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d103      	bne.n	8005332 <HAL_DMA_IRQHandler+0x1da>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0208 	bic.w	r2, r2, #8
 8005340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005346:	223f      	movs	r2, #63	; 0x3f
 8005348:	409a      	lsls	r2, r3
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005362:	2b00      	cmp	r3, #0
 8005364:	d07e      	beq.n	8005464 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4798      	blx	r3
        }
        return;
 800536e:	e079      	b.n	8005464 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01d      	beq.n	80053ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10d      	bne.n	80053a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	2b00      	cmp	r3, #0
 8005392:	d031      	beq.n	80053f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
 800539c:	e02c      	b.n	80053f8 <HAL_DMA_IRQHandler+0x2a0>
 800539e:	bf00      	nop
 80053a0:	20000044 	.word	0x20000044
 80053a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d023      	beq.n	80053f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
 80053b8:	e01e      	b.n	80053f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10f      	bne.n	80053e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0210 	bic.w	r2, r2, #16
 80053d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d032      	beq.n	8005466 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d022      	beq.n	8005452 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2205      	movs	r2, #5
 8005410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	3301      	adds	r3, #1
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	429a      	cmp	r2, r3
 800542e:	d307      	bcc.n	8005440 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f2      	bne.n	8005424 <HAL_DMA_IRQHandler+0x2cc>
 800543e:	e000      	b.n	8005442 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005440:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4798      	blx	r3
 8005462:	e000      	b.n	8005466 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005464:	bf00      	nop
    }
  }
}
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d108      	bne.n	80054c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054c2:	e007      	b.n	80054d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	3b10      	subs	r3, #16
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <DMA_CalcBaseAndBitshift+0x64>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054fa:	4a13      	ldr	r2, [pc, #76]	; (8005548 <DMA_CalcBaseAndBitshift+0x68>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d909      	bls.n	8005522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	659a      	str	r2, [r3, #88]	; 0x58
 8005520:	e007      	b.n	8005532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	aaaaaaab 	.word	0xaaaaaaab
 8005548:	0800dc24 	.word	0x0800dc24

0800554c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11f      	bne.n	80055a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d856      	bhi.n	800561a <DMA_CheckFifoParam+0xce>
 800556c:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <DMA_CheckFifoParam+0x28>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	08005585 	.word	0x08005585
 8005578:	08005597 	.word	0x08005597
 800557c:	08005585 	.word	0x08005585
 8005580:	0800561b 	.word	0x0800561b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d046      	beq.n	800561e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005594:	e043      	b.n	800561e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800559e:	d140      	bne.n	8005622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a4:	e03d      	b.n	8005622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ae:	d121      	bne.n	80055f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d837      	bhi.n	8005626 <DMA_CheckFifoParam+0xda>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <DMA_CheckFifoParam+0x70>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055cd 	.word	0x080055cd
 80055c0:	080055d3 	.word	0x080055d3
 80055c4:	080055cd 	.word	0x080055cd
 80055c8:	080055e5 	.word	0x080055e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      break;
 80055d0:	e030      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d025      	beq.n	800562a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e2:	e022      	b.n	800562a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055ec:	d11f      	bne.n	800562e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055f2:	e01c      	b.n	800562e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d903      	bls.n	8005602 <DMA_CheckFifoParam+0xb6>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d003      	beq.n	8005608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005600:	e018      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
      break;
 8005606:	e015      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00e      	beq.n	8005632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e00b      	b.n	8005632 <DMA_CheckFifoParam+0xe6>
      break;
 800561a:	bf00      	nop
 800561c:	e00a      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 800561e:	bf00      	nop
 8005620:	e008      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 8005622:	bf00      	nop
 8005624:	e006      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 8005626:	bf00      	nop
 8005628:	e004      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;   
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 8005632:	bf00      	nop
    }
  } 
  
  return status; 
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop

08005644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	e153      	b.n	8005908 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005660:	2201      	movs	r2, #1
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4013      	ands	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	429a      	cmp	r2, r3
 800567a:	f040 8142 	bne.w	8005902 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d005      	beq.n	8005696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005692:	2b02      	cmp	r3, #2
 8005694:	d130      	bne.n	80056f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	2203      	movs	r2, #3
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4013      	ands	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056cc:	2201      	movs	r2, #1
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	f003 0201 	and.w	r2, r3, #1
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	2b03      	cmp	r3, #3
 8005702:	d017      	beq.n	8005734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	2203      	movs	r2, #3
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d123      	bne.n	8005788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	08da      	lsrs	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3208      	adds	r2, #8
 8005748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	220f      	movs	r2, #15
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	08da      	lsrs	r2, r3, #3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3208      	adds	r2, #8
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	2203      	movs	r2, #3
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 0203 	and.w	r2, r3, #3
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 809c 	beq.w	8005902 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	4b54      	ldr	r3, [pc, #336]	; (8005920 <HAL_GPIO_Init+0x2dc>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	4a53      	ldr	r2, [pc, #332]	; (8005920 <HAL_GPIO_Init+0x2dc>)
 80057d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057d8:	6453      	str	r3, [r2, #68]	; 0x44
 80057da:	4b51      	ldr	r3, [pc, #324]	; (8005920 <HAL_GPIO_Init+0x2dc>)
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057e6:	4a4f      	ldr	r2, [pc, #316]	; (8005924 <HAL_GPIO_Init+0x2e0>)
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	089b      	lsrs	r3, r3, #2
 80057ec:	3302      	adds	r3, #2
 80057ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	220f      	movs	r2, #15
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43db      	mvns	r3, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4013      	ands	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a46      	ldr	r2, [pc, #280]	; (8005928 <HAL_GPIO_Init+0x2e4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_GPIO_Init+0x1f6>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a45      	ldr	r2, [pc, #276]	; (800592c <HAL_GPIO_Init+0x2e8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00d      	beq.n	8005836 <HAL_GPIO_Init+0x1f2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a44      	ldr	r2, [pc, #272]	; (8005930 <HAL_GPIO_Init+0x2ec>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <HAL_GPIO_Init+0x1ee>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a43      	ldr	r2, [pc, #268]	; (8005934 <HAL_GPIO_Init+0x2f0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_GPIO_Init+0x1ea>
 800582a:	2303      	movs	r3, #3
 800582c:	e006      	b.n	800583c <HAL_GPIO_Init+0x1f8>
 800582e:	2307      	movs	r3, #7
 8005830:	e004      	b.n	800583c <HAL_GPIO_Init+0x1f8>
 8005832:	2302      	movs	r3, #2
 8005834:	e002      	b.n	800583c <HAL_GPIO_Init+0x1f8>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <HAL_GPIO_Init+0x1f8>
 800583a:	2300      	movs	r3, #0
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	f002 0203 	and.w	r2, r2, #3
 8005842:	0092      	lsls	r2, r2, #2
 8005844:	4093      	lsls	r3, r2
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4313      	orrs	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800584c:	4935      	ldr	r1, [pc, #212]	; (8005924 <HAL_GPIO_Init+0x2e0>)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	089b      	lsrs	r3, r3, #2
 8005852:	3302      	adds	r3, #2
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800585a:	4b37      	ldr	r3, [pc, #220]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800587e:	4a2e      	ldr	r2, [pc, #184]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005884:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058a8:	4a23      	ldr	r2, [pc, #140]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4013      	ands	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058d2:	4a19      	ldr	r2, [pc, #100]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058d8:	4b17      	ldr	r3, [pc, #92]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058fc:	4a0e      	ldr	r2, [pc, #56]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3301      	adds	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	f67f aea8 	bls.w	8005660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3724      	adds	r7, #36	; 0x24
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	40013800 	.word	0x40013800
 8005928:	40020000 	.word	0x40020000
 800592c:	40020400 	.word	0x40020400
 8005930:	40020800 	.word	0x40020800
 8005934:	40020c00 	.word	0x40020c00
 8005938:	40013c00 	.word	0x40013c00

0800593c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	887b      	ldrh	r3, [r7, #2]
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
 8005958:	e001      	b.n	800595e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800595e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	807b      	strh	r3, [r7, #2]
 8005978:	4613      	mov	r3, r2
 800597a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800597c:	787b      	ldrb	r3, [r7, #1]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005982:	887a      	ldrh	r2, [r7, #2]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005988:	e003      	b.n	8005992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	041a      	lsls	r2, r3, #16
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	619a      	str	r2, [r3, #24]
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e12b      	b.n	8005c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fd f838 	bl	8002a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2224      	movs	r2, #36	; 0x24
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a04:	f001 fa18 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8005a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	4a81      	ldr	r2, [pc, #516]	; (8005c14 <HAL_I2C_Init+0x274>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d807      	bhi.n	8005a24 <HAL_I2C_Init+0x84>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a80      	ldr	r2, [pc, #512]	; (8005c18 <HAL_I2C_Init+0x278>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	bf94      	ite	ls
 8005a1c:	2301      	movls	r3, #1
 8005a1e:	2300      	movhi	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e006      	b.n	8005a32 <HAL_I2C_Init+0x92>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a7d      	ldr	r2, [pc, #500]	; (8005c1c <HAL_I2C_Init+0x27c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	bf94      	ite	ls
 8005a2c:	2301      	movls	r3, #1
 8005a2e:	2300      	movhi	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e0e7      	b.n	8005c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a78      	ldr	r2, [pc, #480]	; (8005c20 <HAL_I2C_Init+0x280>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	0c9b      	lsrs	r3, r3, #18
 8005a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4a6a      	ldr	r2, [pc, #424]	; (8005c14 <HAL_I2C_Init+0x274>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d802      	bhi.n	8005a74 <HAL_I2C_Init+0xd4>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	3301      	adds	r3, #1
 8005a72:	e009      	b.n	8005a88 <HAL_I2C_Init+0xe8>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	4a69      	ldr	r2, [pc, #420]	; (8005c24 <HAL_I2C_Init+0x284>)
 8005a80:	fba2 2303 	umull	r2, r3, r2, r3
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	3301      	adds	r3, #1
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	495c      	ldr	r1, [pc, #368]	; (8005c14 <HAL_I2C_Init+0x274>)
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	d819      	bhi.n	8005adc <HAL_I2C_Init+0x13c>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	1e59      	subs	r1, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005abc:	400b      	ands	r3, r1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_I2C_Init+0x138>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1e59      	subs	r1, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad6:	e051      	b.n	8005b7c <HAL_I2C_Init+0x1dc>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	e04f      	b.n	8005b7c <HAL_I2C_Init+0x1dc>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d111      	bne.n	8005b08 <HAL_I2C_Init+0x168>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1e58      	subs	r0, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6859      	ldr	r1, [r3, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	440b      	add	r3, r1
 8005af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005af6:	3301      	adds	r3, #1
 8005af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	e012      	b.n	8005b2e <HAL_I2C_Init+0x18e>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1e58      	subs	r0, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6859      	ldr	r1, [r3, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	0099      	lsls	r1, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_I2C_Init+0x196>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e022      	b.n	8005b7c <HAL_I2C_Init+0x1dc>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10e      	bne.n	8005b5c <HAL_I2C_Init+0x1bc>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1e58      	subs	r0, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	440b      	add	r3, r1
 8005b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b50:	3301      	adds	r3, #1
 8005b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	e00f      	b.n	8005b7c <HAL_I2C_Init+0x1dc>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1e58      	subs	r0, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6859      	ldr	r1, [r3, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	0099      	lsls	r1, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b72:	3301      	adds	r3, #1
 8005b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	6809      	ldr	r1, [r1, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69da      	ldr	r2, [r3, #28]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6911      	ldr	r1, [r2, #16]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	68d2      	ldr	r2, [r2, #12]
 8005bb6:	4311      	orrs	r1, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	000186a0 	.word	0x000186a0
 8005c18:	001e847f 	.word	0x001e847f
 8005c1c:	003d08ff 	.word	0x003d08ff
 8005c20:	431bde83 	.word	0x431bde83
 8005c24:	10624dd3 	.word	0x10624dd3

08005c28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	461a      	mov	r2, r3
 8005c34:	460b      	mov	r3, r1
 8005c36:	817b      	strh	r3, [r7, #10]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c3c:	f7fe fc30 	bl	80044a0 <HAL_GetTick>
 8005c40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	f040 80e0 	bne.w	8005e10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2319      	movs	r3, #25
 8005c56:	2201      	movs	r2, #1
 8005c58:	4970      	ldr	r1, [pc, #448]	; (8005e1c <HAL_I2C_Master_Transmit+0x1f4>)
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fd1a 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
 8005c68:	e0d3      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_I2C_Master_Transmit+0x50>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e0cc      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ea>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d007      	beq.n	8005c9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2221      	movs	r2, #33	; 0x21
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2210      	movs	r2, #16
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	893a      	ldrh	r2, [r7, #8]
 8005cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a50      	ldr	r2, [pc, #320]	; (8005e20 <HAL_I2C_Master_Transmit+0x1f8>)
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ce0:	8979      	ldrh	r1, [r7, #10]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa58 	bl	800619c <I2C_MasterRequestWrite>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e08d      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d0c:	e066      	b.n	8005ddc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	6a39      	ldr	r1, [r7, #32]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fd94 	bl	8006840 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d107      	bne.n	8005d36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e06b      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	781a      	ldrb	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d11b      	bne.n	8005db0 <HAL_I2C_Master_Transmit+0x188>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d017      	beq.n	8005db0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	6a39      	ldr	r1, [r7, #32]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fd84 	bl	80068c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d107      	bne.n	8005dd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e01a      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d194      	bne.n	8005d0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e000      	b.n	8005e12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e10:	2302      	movs	r3, #2
  }
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	00100002 	.word	0x00100002
 8005e20:	ffff0000 	.word	0xffff0000

08005e24 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	; 0x30
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	460b      	mov	r3, r1
 8005e38:	813b      	strh	r3, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e3e:	f7fe fb2f 	bl	80044a0 <HAL_GetTick>
 8005e42:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	f040 8176 	bne.w	8006142 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e56:	4b95      	ldr	r3, [pc, #596]	; (80060ac <HAL_I2C_Mem_Read_DMA+0x288>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	08db      	lsrs	r3, r3, #3
 8005e5c:	4a94      	ldr	r2, [pc, #592]	; (80060b0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	0a1a      	lsrs	r2, r3, #8
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	009a      	lsls	r2, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d116      	bne.n	8005eaa <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e14c      	b.n	8006144 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d0db      	beq.n	8005e70 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_I2C_Mem_Read_DMA+0xa2>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e13e      	b.n	8006144 <HAL_I2C_Mem_Read_DMA+0x320>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d007      	beq.n	8005eec <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2222      	movs	r2, #34	; 0x22
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2240      	movs	r2, #64	; 0x40
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a62      	ldr	r2, [pc, #392]	; (80060b4 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005f2e:	897a      	ldrh	r2, [r7, #10]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005f34:	893a      	ldrh	r2, [r7, #8]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80cc 	beq.w	80060e8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02d      	beq.n	8005fb4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	4a56      	ldr	r2, [pc, #344]	; (80060b8 <HAL_I2C_Mem_Read_DMA+0x294>)
 8005f5e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	4a55      	ldr	r2, [pc, #340]	; (80060bc <HAL_I2C_Mem_Read_DMA+0x298>)
 8005f66:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	2200      	movs	r2, #0
 8005f76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	2200      	movs	r2, #0
 8005f86:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3310      	adds	r3, #16
 8005f92:	4619      	mov	r1, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9e:	f7ff f861 	bl	8005064 <HAL_DMA_Start_IT>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 8087 	bne.w	80060c0 <HAL_I2C_Mem_Read_DMA+0x29c>
 8005fb2:	e013      	b.n	8005fdc <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0b3      	b.n	8006144 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005fdc:	88f8      	ldrh	r0, [r7, #6]
 8005fde:	893a      	ldrh	r2, [r7, #8]
 8005fe0:	8979      	ldrh	r1, [r7, #10]
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	2323      	movs	r3, #35	; 0x23
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	4603      	mov	r3, r0
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f957 	bl	80062a0 <I2C_RequestMemoryRead>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d023      	beq.n	8006040 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff f889 	bl	8005114 <HAL_DMA_Abort_IT>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	2200      	movs	r2, #0
 800600e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e081      	b.n	8006144 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	2b01      	cmp	r3, #1
 8006046:	d108      	bne.n	800605a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e007      	b.n	800606a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006068:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800606a:	2300      	movs	r3, #0
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006096:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a6:	605a      	str	r2, [r3, #4]
 80060a8:	e049      	b.n	800613e <HAL_I2C_Mem_Read_DMA+0x31a>
 80060aa:	bf00      	nop
 80060ac:	20000044 	.word	0x20000044
 80060b0:	14f8b589 	.word	0x14f8b589
 80060b4:	ffff0000 	.word	0xffff0000
 80060b8:	08006471 	.word	0x08006471
 80060bc:	0800661b 	.word	0x0800661b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	f043 0210 	orr.w	r2, r3, #16
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e02d      	b.n	8006144 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80060e8:	88f8      	ldrh	r0, [r7, #6]
 80060ea:	893a      	ldrh	r2, [r7, #8]
 80060ec:	8979      	ldrh	r1, [r7, #10]
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	2323      	movs	r3, #35	; 0x23
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	4603      	mov	r3, r0
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f8d1 	bl	80062a0 <I2C_RequestMemoryRead>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e01d      	b.n	8006144 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3728      	adds	r7, #40	; 0x28
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	460b      	mov	r3, r1
 80061aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d006      	beq.n	80061c6 <I2C_MasterRequestWrite+0x2a>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d003      	beq.n	80061c6 <I2C_MasterRequestWrite+0x2a>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061c4:	d108      	bne.n	80061d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e00b      	b.n	80061f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	2b12      	cmp	r3, #18
 80061de:	d107      	bne.n	80061f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fa49 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00d      	beq.n	8006224 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006216:	d103      	bne.n	8006220 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800621e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e035      	b.n	8006290 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800622c:	d108      	bne.n	8006240 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800622e:	897b      	ldrh	r3, [r7, #10]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800623c:	611a      	str	r2, [r3, #16]
 800623e:	e01b      	b.n	8006278 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006240:	897b      	ldrh	r3, [r7, #10]
 8006242:	11db      	asrs	r3, r3, #7
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0306 	and.w	r3, r3, #6
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f063 030f 	orn	r3, r3, #15
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	490e      	ldr	r1, [pc, #56]	; (8006298 <I2C_MasterRequestWrite+0xfc>)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fa6f 	bl	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e010      	b.n	8006290 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800626e:	897b      	ldrh	r3, [r7, #10]
 8006270:	b2da      	uxtb	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4907      	ldr	r1, [pc, #28]	; (800629c <I2C_MasterRequestWrite+0x100>)
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 fa5f 	bl	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	00010008 	.word	0x00010008
 800629c:	00010002 	.word	0x00010002

080062a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	4608      	mov	r0, r1
 80062aa:	4611      	mov	r1, r2
 80062ac:	461a      	mov	r2, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	817b      	strh	r3, [r7, #10]
 80062b2:	460b      	mov	r3, r1
 80062b4:	813b      	strh	r3, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 f9d4 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00d      	beq.n	800630e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006300:	d103      	bne.n	800630a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e0aa      	b.n	8006464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800630e:	897b      	ldrh	r3, [r7, #10]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800631c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	6a3a      	ldr	r2, [r7, #32]
 8006322:	4952      	ldr	r1, [pc, #328]	; (800646c <I2C_RequestMemoryRead+0x1cc>)
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 fa0c 	bl	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e097      	b.n	8006464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	6a39      	ldr	r1, [r7, #32]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fa76 	bl	8006840 <I2C_WaitOnTXEFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00d      	beq.n	8006376 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	2b04      	cmp	r3, #4
 8006360:	d107      	bne.n	8006372 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e076      	b.n	8006464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d105      	bne.n	8006388 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800637c:	893b      	ldrh	r3, [r7, #8]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	611a      	str	r2, [r3, #16]
 8006386:	e021      	b.n	80063cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006388:	893b      	ldrh	r3, [r7, #8]
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	b29b      	uxth	r3, r3
 800638e:	b2da      	uxtb	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006398:	6a39      	ldr	r1, [r7, #32]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fa50 	bl	8006840 <I2C_WaitOnTXEFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00d      	beq.n	80063c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d107      	bne.n	80063be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e050      	b.n	8006464 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063c2:	893b      	ldrh	r3, [r7, #8]
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ce:	6a39      	ldr	r1, [r7, #32]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fa35 	bl	8006840 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00d      	beq.n	80063f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d107      	bne.n	80063f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e035      	b.n	8006464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006406:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	2200      	movs	r2, #0
 8006410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f93d 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00d      	beq.n	800643c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642e:	d103      	bne.n	8006438 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e013      	b.n	8006464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800643c:	897b      	ldrh	r3, [r7, #10]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	4906      	ldr	r1, [pc, #24]	; (800646c <I2C_RequestMemoryRead+0x1cc>)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f975 	bl	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	00010002 	.word	0x00010002

08006470 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006484:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800648c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064a2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b0:	2200      	movs	r2, #0
 80064b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	2200      	movs	r2, #0
 80064c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80064ca:	2b21      	cmp	r3, #33	; 0x21
 80064cc:	d007      	beq.n	80064de <I2C_DMAXferCplt+0x6e>
 80064ce:	7cfb      	ldrb	r3, [r7, #19]
 80064d0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80064d4:	2b22      	cmp	r3, #34	; 0x22
 80064d6:	d131      	bne.n	800653c <I2C_DMAXferCplt+0xcc>
 80064d8:	7cbb      	ldrb	r3, [r7, #18]
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d12e      	bne.n	800653c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2200      	movs	r2, #0
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064f4:	7cfb      	ldrb	r3, [r7, #19]
 80064f6:	2b29      	cmp	r3, #41	; 0x29
 80064f8:	d10a      	bne.n	8006510 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2221      	movs	r2, #33	; 0x21
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2228      	movs	r2, #40	; 0x28
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006508:	6978      	ldr	r0, [r7, #20]
 800650a:	f7ff fe29 	bl	8006160 <HAL_I2C_SlaveTxCpltCallback>
 800650e:	e00c      	b.n	800652a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b2a      	cmp	r3, #42	; 0x2a
 8006514:	d109      	bne.n	800652a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2222      	movs	r2, #34	; 0x22
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2228      	movs	r2, #40	; 0x28
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006524:	6978      	ldr	r0, [r7, #20]
 8006526:	f7ff fe25 	bl	8006174 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006538:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800653a:	e06a      	b.n	8006612 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d064      	beq.n	8006612 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006560:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006570:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006578:	d009      	beq.n	800658e <I2C_DMAXferCplt+0x11e>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d006      	beq.n	800658e <I2C_DMAXferCplt+0x11e>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006586:	d002      	beq.n	800658e <I2C_DMAXferCplt+0x11e>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b20      	cmp	r3, #32
 800658c:	d107      	bne.n	800659e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065ac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065bc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2200      	movs	r2, #0
 80065c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80065cc:	6978      	ldr	r0, [r7, #20]
 80065ce:	f7ff fddb 	bl	8006188 <HAL_I2C_ErrorCallback>
}
 80065d2:	e01e      	b.n	8006612 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d10a      	bne.n	80065fe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80065f6:	6978      	ldr	r0, [r7, #20]
 80065f8:	f7fc f9dc 	bl	80029b4 <HAL_I2C_MemRxCpltCallback>
}
 80065fc:	e009      	b.n	8006612 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2212      	movs	r2, #18
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800660c:	6978      	ldr	r0, [r7, #20]
 800660e:	f7ff fd9d 	bl	800614c <HAL_I2C_MasterRxCpltCallback>
}
 8006612:	bf00      	nop
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	2200      	movs	r2, #0
 8006636:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	2200      	movs	r2, #0
 8006646:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7fe ff0f 	bl	800546c <HAL_DMA_GetError>
 800664e:	4603      	mov	r3, r0
 8006650:	2b02      	cmp	r3, #2
 8006652:	d01b      	beq.n	800668c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f043 0210 	orr.w	r2, r3, #16
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff fd7e 	bl	8006188 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a4:	e025      	b.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d021      	beq.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ae:	f7fd fef7 	bl	80044a0 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d302      	bcc.n	80066c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d116      	bne.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	f043 0220 	orr.w	r2, r3, #32
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e023      	b.n	800673a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	0c1b      	lsrs	r3, r3, #16
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d10d      	bne.n	8006718 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	43da      	mvns	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4013      	ands	r3, r2
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	bf0c      	ite	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	2300      	movne	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	e00c      	b.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	43da      	mvns	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4013      	ands	r3, r2
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	bf0c      	ite	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	2300      	movne	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	429a      	cmp	r2, r3
 8006736:	d0b6      	beq.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
 800674e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006750:	e051      	b.n	80067f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800675c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006760:	d123      	bne.n	80067aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006770:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800677a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f043 0204 	orr.w	r2, r3, #4
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e046      	b.n	8006838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d021      	beq.n	80067f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b2:	f7fd fe75 	bl	80044a0 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d302      	bcc.n	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d116      	bne.n	80067f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0220 	orr.w	r2, r3, #32
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e020      	b.n	8006838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d10c      	bne.n	800681a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	43da      	mvns	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	bf14      	ite	ne
 8006812:	2301      	movne	r3, #1
 8006814:	2300      	moveq	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	e00b      	b.n	8006832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	43da      	mvns	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4013      	ands	r3, r2
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d18d      	bne.n	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800684c:	e02d      	b.n	80068aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f878 	bl	8006944 <I2C_IsAcknowledgeFailed>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e02d      	b.n	80068ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d021      	beq.n	80068aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006866:	f7fd fe1b 	bl	80044a0 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d116      	bne.n	80068aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f043 0220 	orr.w	r2, r3, #32
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e007      	b.n	80068ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b4:	2b80      	cmp	r3, #128	; 0x80
 80068b6:	d1ca      	bne.n	800684e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068ce:	e02d      	b.n	800692c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f837 	bl	8006944 <I2C_IsAcknowledgeFailed>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e02d      	b.n	800693c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d021      	beq.n	800692c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e8:	f7fd fdda 	bl	80044a0 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d302      	bcc.n	80068fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d116      	bne.n	800692c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	f043 0220 	orr.w	r2, r3, #32
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e007      	b.n	800693c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b04      	cmp	r3, #4
 8006938:	d1ca      	bne.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695a:	d11b      	bne.n	8006994 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006964:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	f043 0204 	orr.w	r2, r3, #4
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e034      	b.n	8006a1e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80069bc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f245 5255 	movw	r2, #21845	; 0x5555
 80069c6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6852      	ldr	r2, [r2, #4]
 80069d0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6892      	ldr	r2, [r2, #8]
 80069da:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80069dc:	f7fd fd60 	bl	80044a0 <HAL_GetTick>
 80069e0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80069e2:	e00f      	b.n	8006a04 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80069e4:	f7fd fd5c 	bl	80044a0 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b31      	cmp	r3, #49	; 0x31
 80069f0:	d908      	bls.n	8006a04 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e00c      	b.n	8006a1e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e8      	bne.n	80069e4 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006a36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0cc      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a5c:	4b68      	ldr	r3, [pc, #416]	; (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d90c      	bls.n	8006a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6a:	4b65      	ldr	r3, [pc, #404]	; (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a72:	4b63      	ldr	r3, [pc, #396]	; (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0b8      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d020      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a9c:	4b59      	ldr	r3, [pc, #356]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a58      	ldr	r2, [pc, #352]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ab4:	4b53      	ldr	r3, [pc, #332]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	4a52      	ldr	r2, [pc, #328]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac0:	4b50      	ldr	r3, [pc, #320]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	494d      	ldr	r1, [pc, #308]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d044      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae6:	4b47      	ldr	r3, [pc, #284]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d119      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e07f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d003      	beq.n	8006b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d107      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b06:	4b3f      	ldr	r3, [pc, #252]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e06f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b16:	4b3b      	ldr	r3, [pc, #236]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e067      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b26:	4b37      	ldr	r3, [pc, #220]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f023 0203 	bic.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4934      	ldr	r1, [pc, #208]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b38:	f7fd fcb2 	bl	80044a0 <HAL_GetTick>
 8006b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b40:	f7fd fcae 	bl	80044a0 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e04f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b56:	4b2b      	ldr	r3, [pc, #172]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 020c 	and.w	r2, r3, #12
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d1eb      	bne.n	8006b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d20c      	bcs.n	8006b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b76:	4b22      	ldr	r3, [pc, #136]	; (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7e:	4b20      	ldr	r3, [pc, #128]	; (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d001      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e032      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b9c:	4b19      	ldr	r3, [pc, #100]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4916      	ldr	r1, [pc, #88]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bba:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	490e      	ldr	r1, [pc, #56]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bce:	f000 f821 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	490a      	ldr	r1, [pc, #40]	; (8006c08 <HAL_RCC_ClockConfig+0x1c0>)
 8006be0:	5ccb      	ldrb	r3, [r1, r3]
 8006be2:	fa22 f303 	lsr.w	r3, r2, r3
 8006be6:	4a09      	ldr	r2, [pc, #36]	; (8006c0c <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <HAL_RCC_ClockConfig+0x1c8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fd fc12 	bl	8004418 <HAL_InitTick>

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023c00 	.word	0x40023c00
 8006c04:	40023800 	.word	0x40023800
 8006c08:	0800dc0c 	.word	0x0800dc0c
 8006c0c:	20000044 	.word	0x20000044
 8006c10:	2000004c 	.word	0x2000004c

08006c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c18:	b094      	sub	sp, #80	; 0x50
 8006c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c20:	2300      	movs	r3, #0
 8006c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c24:	2300      	movs	r3, #0
 8006c26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c2c:	4b79      	ldr	r3, [pc, #484]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 030c 	and.w	r3, r3, #12
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d00d      	beq.n	8006c54 <HAL_RCC_GetSysClockFreq+0x40>
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	f200 80e1 	bhi.w	8006e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0x34>
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d003      	beq.n	8006c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c46:	e0db      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c48:	4b73      	ldr	r3, [pc, #460]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c4c:	e0db      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c4e:	4b73      	ldr	r3, [pc, #460]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8006c50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c52:	e0d8      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c54:	4b6f      	ldr	r3, [pc, #444]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c5e:	4b6d      	ldr	r3, [pc, #436]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d063      	beq.n	8006d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6a:	4b6a      	ldr	r3, [pc, #424]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	099b      	lsrs	r3, r3, #6
 8006c70:	2200      	movs	r2, #0
 8006c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
 8006c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c86:	4622      	mov	r2, r4
 8006c88:	462b      	mov	r3, r5
 8006c8a:	f04f 0000 	mov.w	r0, #0
 8006c8e:	f04f 0100 	mov.w	r1, #0
 8006c92:	0159      	lsls	r1, r3, #5
 8006c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c98:	0150      	lsls	r0, r2, #5
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	1a51      	subs	r1, r2, r1
 8006ca2:	6139      	str	r1, [r7, #16]
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cb8:	4659      	mov	r1, fp
 8006cba:	018b      	lsls	r3, r1, #6
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	018a      	lsls	r2, r1, #6
 8006cc6:	4651      	mov	r1, sl
 8006cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8006ccc:	4659      	mov	r1, fp
 8006cce:	eb63 0901 	sbc.w	r9, r3, r1
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	f04f 0300 	mov.w	r3, #0
 8006cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ce6:	4690      	mov	r8, r2
 8006ce8:	4699      	mov	r9, r3
 8006cea:	4623      	mov	r3, r4
 8006cec:	eb18 0303 	adds.w	r3, r8, r3
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	eb49 0303 	adc.w	r3, r9, r3
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d06:	4629      	mov	r1, r5
 8006d08:	024b      	lsls	r3, r1, #9
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d10:	4621      	mov	r1, r4
 8006d12:	024a      	lsls	r2, r1, #9
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d24:	f7f9 ffd0 	bl	8000cc8 <__aeabi_uldivmod>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d30:	e058      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d32:	4b38      	ldr	r3, [pc, #224]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d42:	623b      	str	r3, [r7, #32]
 8006d44:	2300      	movs	r3, #0
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
 8006d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	f04f 0000 	mov.w	r0, #0
 8006d54:	f04f 0100 	mov.w	r1, #0
 8006d58:	0159      	lsls	r1, r3, #5
 8006d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d5e:	0150      	lsls	r0, r2, #5
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4641      	mov	r1, r8
 8006d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d84:	ebb2 040a 	subs.w	r4, r2, sl
 8006d88:	eb63 050b 	sbc.w	r5, r3, fp
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	00eb      	lsls	r3, r5, #3
 8006d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d9a:	00e2      	lsls	r2, r4, #3
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	461d      	mov	r5, r3
 8006da0:	4643      	mov	r3, r8
 8006da2:	18e3      	adds	r3, r4, r3
 8006da4:	603b      	str	r3, [r7, #0]
 8006da6:	464b      	mov	r3, r9
 8006da8:	eb45 0303 	adc.w	r3, r5, r3
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dba:	4629      	mov	r1, r5
 8006dbc:	028b      	lsls	r3, r1, #10
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	028a      	lsls	r2, r1, #10
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dce:	2200      	movs	r2, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	61fa      	str	r2, [r7, #28]
 8006dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dd8:	f7f9 ff76 	bl	8000cc8 <__aeabi_uldivmod>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4613      	mov	r3, r2
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	3301      	adds	r3, #1
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006df4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dfe:	e002      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e00:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3750      	adds	r7, #80	; 0x50
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e12:	bf00      	nop
 8006e14:	40023800 	.word	0x40023800
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	007a1200 	.word	0x007a1200

08006e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e24:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000044 	.word	0x20000044

08006e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e3c:	f7ff fff0 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	0a9b      	lsrs	r3, r3, #10
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	4903      	ldr	r1, [pc, #12]	; (8006e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e4e:	5ccb      	ldrb	r3, [r1, r3]
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	0800dc1c 	.word	0x0800dc1c

08006e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e64:	f7ff ffdc 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	0b5b      	lsrs	r3, r3, #13
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	4903      	ldr	r1, [pc, #12]	; (8006e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e76:	5ccb      	ldrb	r3, [r1, r3]
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40023800 	.word	0x40023800
 8006e84:	0800dc1c 	.word	0x0800dc1c

08006e88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e273      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d075      	beq.n	8006f92 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ea6:	4b88      	ldr	r3, [pc, #544]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d00c      	beq.n	8006ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eb2:	4b85      	ldr	r3, [pc, #532]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d112      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ebe:	4b82      	ldr	r3, [pc, #520]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eca:	d10b      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ecc:	4b7e      	ldr	r3, [pc, #504]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d05b      	beq.n	8006f90 <HAL_RCC_OscConfig+0x108>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d157      	bne.n	8006f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e24e      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eec:	d106      	bne.n	8006efc <HAL_RCC_OscConfig+0x74>
 8006eee:	4b76      	ldr	r3, [pc, #472]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a75      	ldr	r2, [pc, #468]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e01d      	b.n	8006f38 <HAL_RCC_OscConfig+0xb0>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f04:	d10c      	bne.n	8006f20 <HAL_RCC_OscConfig+0x98>
 8006f06:	4b70      	ldr	r3, [pc, #448]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a6f      	ldr	r2, [pc, #444]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	4b6d      	ldr	r3, [pc, #436]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a6c      	ldr	r2, [pc, #432]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e00b      	b.n	8006f38 <HAL_RCC_OscConfig+0xb0>
 8006f20:	4b69      	ldr	r3, [pc, #420]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a68      	ldr	r2, [pc, #416]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	4b66      	ldr	r3, [pc, #408]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a65      	ldr	r2, [pc, #404]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d013      	beq.n	8006f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fd faae 	bl	80044a0 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f48:	f7fd faaa 	bl	80044a0 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e213      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	4b5b      	ldr	r3, [pc, #364]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCC_OscConfig+0xc0>
 8006f66:	e014      	b.n	8006f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f68:	f7fd fa9a 	bl	80044a0 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f70:	f7fd fa96 	bl	80044a0 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	; 0x64
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e1ff      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f82:	4b51      	ldr	r3, [pc, #324]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f0      	bne.n	8006f70 <HAL_RCC_OscConfig+0xe8>
 8006f8e:	e000      	b.n	8006f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d063      	beq.n	8007066 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006f9e:	4b4a      	ldr	r3, [pc, #296]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006faa:	4b47      	ldr	r3, [pc, #284]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d11c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fb6:	4b44      	ldr	r3, [pc, #272]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d116      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fc2:	4b41      	ldr	r3, [pc, #260]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_RCC_OscConfig+0x152>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d001      	beq.n	8006fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e1d3      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fda:	4b3b      	ldr	r3, [pc, #236]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	4937      	ldr	r1, [pc, #220]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fee:	e03a      	b.n	8007066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d020      	beq.n	800703a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ff8:	4b34      	ldr	r3, [pc, #208]	; (80070cc <HAL_RCC_OscConfig+0x244>)
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffe:	f7fd fa4f 	bl	80044a0 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007006:	f7fd fa4b 	bl	80044a0 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e1b4      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007018:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0f0      	beq.n	8007006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007024:	4b28      	ldr	r3, [pc, #160]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	4925      	ldr	r1, [pc, #148]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 8007034:	4313      	orrs	r3, r2
 8007036:	600b      	str	r3, [r1, #0]
 8007038:	e015      	b.n	8007066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800703a:	4b24      	ldr	r3, [pc, #144]	; (80070cc <HAL_RCC_OscConfig+0x244>)
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fd fa2e 	bl	80044a0 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007048:	f7fd fa2a 	bl	80044a0 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e193      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705a:	4b1b      	ldr	r3, [pc, #108]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f0      	bne.n	8007048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d036      	beq.n	80070e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d016      	beq.n	80070a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800707a:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <HAL_RCC_OscConfig+0x248>)
 800707c:	2201      	movs	r2, #1
 800707e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007080:	f7fd fa0e 	bl	80044a0 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007088:	f7fd fa0a 	bl	80044a0 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e173      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709a:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <HAL_RCC_OscConfig+0x240>)
 800709c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f0      	beq.n	8007088 <HAL_RCC_OscConfig+0x200>
 80070a6:	e01b      	b.n	80070e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070a8:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <HAL_RCC_OscConfig+0x248>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ae:	f7fd f9f7 	bl	80044a0 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b4:	e00e      	b.n	80070d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070b6:	f7fd f9f3 	bl	80044a0 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d907      	bls.n	80070d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e15c      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
 80070c8:	40023800 	.word	0x40023800
 80070cc:	42470000 	.word	0x42470000
 80070d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070d4:	4b8a      	ldr	r3, [pc, #552]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 80070d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1ea      	bne.n	80070b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8097 	beq.w	800721c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070f2:	4b83      	ldr	r3, [pc, #524]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10f      	bne.n	800711e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	4b7f      	ldr	r3, [pc, #508]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	4a7e      	ldr	r2, [pc, #504]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800710c:	6413      	str	r3, [r2, #64]	; 0x40
 800710e:	4b7c      	ldr	r3, [pc, #496]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800711e:	4b79      	ldr	r3, [pc, #484]	; (8007304 <HAL_RCC_OscConfig+0x47c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007126:	2b00      	cmp	r3, #0
 8007128:	d118      	bne.n	800715c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800712a:	4b76      	ldr	r3, [pc, #472]	; (8007304 <HAL_RCC_OscConfig+0x47c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a75      	ldr	r2, [pc, #468]	; (8007304 <HAL_RCC_OscConfig+0x47c>)
 8007130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007136:	f7fd f9b3 	bl	80044a0 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800713e:	f7fd f9af 	bl	80044a0 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e118      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007150:	4b6c      	ldr	r3, [pc, #432]	; (8007304 <HAL_RCC_OscConfig+0x47c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d106      	bne.n	8007172 <HAL_RCC_OscConfig+0x2ea>
 8007164:	4b66      	ldr	r3, [pc, #408]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007168:	4a65      	ldr	r2, [pc, #404]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 800716a:	f043 0301 	orr.w	r3, r3, #1
 800716e:	6713      	str	r3, [r2, #112]	; 0x70
 8007170:	e01c      	b.n	80071ac <HAL_RCC_OscConfig+0x324>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b05      	cmp	r3, #5
 8007178:	d10c      	bne.n	8007194 <HAL_RCC_OscConfig+0x30c>
 800717a:	4b61      	ldr	r3, [pc, #388]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 800717c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717e:	4a60      	ldr	r2, [pc, #384]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007180:	f043 0304 	orr.w	r3, r3, #4
 8007184:	6713      	str	r3, [r2, #112]	; 0x70
 8007186:	4b5e      	ldr	r3, [pc, #376]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718a:	4a5d      	ldr	r2, [pc, #372]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 800718c:	f043 0301 	orr.w	r3, r3, #1
 8007190:	6713      	str	r3, [r2, #112]	; 0x70
 8007192:	e00b      	b.n	80071ac <HAL_RCC_OscConfig+0x324>
 8007194:	4b5a      	ldr	r3, [pc, #360]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007198:	4a59      	ldr	r2, [pc, #356]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	6713      	str	r3, [r2, #112]	; 0x70
 80071a0:	4b57      	ldr	r3, [pc, #348]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 80071a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a4:	4a56      	ldr	r2, [pc, #344]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 80071a6:	f023 0304 	bic.w	r3, r3, #4
 80071aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d015      	beq.n	80071e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b4:	f7fd f974 	bl	80044a0 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ba:	e00a      	b.n	80071d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071bc:	f7fd f970 	bl	80044a0 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e0d7      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d2:	4b4b      	ldr	r3, [pc, #300]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0ee      	beq.n	80071bc <HAL_RCC_OscConfig+0x334>
 80071de:	e014      	b.n	800720a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7fd f95e 	bl	80044a0 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071e6:	e00a      	b.n	80071fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071e8:	f7fd f95a 	bl	80044a0 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e0c1      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071fe:	4b40      	ldr	r3, [pc, #256]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1ee      	bne.n	80071e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d105      	bne.n	800721c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007210:	4b3b      	ldr	r3, [pc, #236]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	4a3a      	ldr	r2, [pc, #232]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800721a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 80ad 	beq.w	8007380 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007226:	4b36      	ldr	r3, [pc, #216]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 030c 	and.w	r3, r3, #12
 800722e:	2b08      	cmp	r3, #8
 8007230:	d060      	beq.n	80072f4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d145      	bne.n	80072c6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800723a:	4b33      	ldr	r3, [pc, #204]	; (8007308 <HAL_RCC_OscConfig+0x480>)
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fd f92e 	bl	80044a0 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007248:	f7fd f92a 	bl	80044a0 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e093      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	4b29      	ldr	r3, [pc, #164]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f0      	bne.n	8007248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69da      	ldr	r2, [r3, #28]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	431a      	orrs	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	019b      	lsls	r3, r3, #6
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	085b      	lsrs	r3, r3, #1
 800727e:	3b01      	subs	r3, #1
 8007280:	041b      	lsls	r3, r3, #16
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	061b      	lsls	r3, r3, #24
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007290:	071b      	lsls	r3, r3, #28
 8007292:	491b      	ldr	r1, [pc, #108]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007298:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <HAL_RCC_OscConfig+0x480>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729e:	f7fd f8ff 	bl	80044a0 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072a6:	f7fd f8fb 	bl	80044a0 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e064      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b8:	4b11      	ldr	r3, [pc, #68]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <HAL_RCC_OscConfig+0x41e>
 80072c4:	e05c      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <HAL_RCC_OscConfig+0x480>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072cc:	f7fd f8e8 	bl	80044a0 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072d4:	f7fd f8e4 	bl	80044a0 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e04d      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_RCC_OscConfig+0x478>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0x44c>
 80072f2:	e045      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d107      	bne.n	800730c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e040      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
 8007300:	40023800 	.word	0x40023800
 8007304:	40007000 	.word	0x40007000
 8007308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800730c:	4b1f      	ldr	r3, [pc, #124]	; (800738c <HAL_RCC_OscConfig+0x504>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d030      	beq.n	800737c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007324:	429a      	cmp	r2, r3
 8007326:	d129      	bne.n	800737c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007332:	429a      	cmp	r2, r3
 8007334:	d122      	bne.n	800737c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800733c:	4013      	ands	r3, r2
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007344:	4293      	cmp	r3, r2
 8007346:	d119      	bne.n	800737c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	085b      	lsrs	r3, r3, #1
 8007354:	3b01      	subs	r3, #1
 8007356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007358:	429a      	cmp	r2, r3
 800735a:	d10f      	bne.n	800737c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007368:	429a      	cmp	r2, r3
 800736a:	d107      	bne.n	800737c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007378:	429a      	cmp	r2, r3
 800737a:	d001      	beq.n	8007380 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40023800 	.word	0x40023800

08007390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e07b      	b.n	800749a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d108      	bne.n	80073bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b2:	d009      	beq.n	80073c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	61da      	str	r2, [r3, #28]
 80073ba:	e005      	b.n	80073c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fc fc38 	bl	8003c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007438:	431a      	orrs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	ea42 0103 	orr.w	r1, r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	f003 0104 	and.w	r1, r3, #4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	f003 0210 	and.w	r2, r3, #16
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b08c      	sub	sp, #48	; 0x30
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074b0:	2301      	movs	r3, #1
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_SPI_TransmitReceive+0x26>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e18a      	b.n	80077de <HAL_SPI_TransmitReceive+0x33c>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074d0:	f7fc ffe6 	bl	80044a0 <HAL_GetTick>
 80074d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074e6:	887b      	ldrh	r3, [r7, #2]
 80074e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d00f      	beq.n	8007512 <HAL_SPI_TransmitReceive+0x70>
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f8:	d107      	bne.n	800750a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <HAL_SPI_TransmitReceive+0x68>
 8007502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007506:	2b04      	cmp	r3, #4
 8007508:	d003      	beq.n	8007512 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800750a:	2302      	movs	r3, #2
 800750c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007510:	e15b      	b.n	80077ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <HAL_SPI_TransmitReceive+0x82>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_SPI_TransmitReceive+0x82>
 800751e:	887b      	ldrh	r3, [r7, #2]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d103      	bne.n	800752c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800752a:	e14e      	b.n	80077ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b04      	cmp	r3, #4
 8007536:	d003      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2205      	movs	r2, #5
 800753c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	887a      	ldrh	r2, [r7, #2]
 8007550:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	887a      	ldrh	r2, [r7, #2]
 8007556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	887a      	ldrh	r2, [r7, #2]
 8007562:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	887a      	ldrh	r2, [r7, #2]
 8007568:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007580:	2b40      	cmp	r3, #64	; 0x40
 8007582:	d007      	beq.n	8007594 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800759c:	d178      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_SPI_TransmitReceive+0x10a>
 80075a6:	8b7b      	ldrh	r3, [r7, #26]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d166      	bne.n	800767a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	1c9a      	adds	r2, r3, #2
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075d0:	e053      	b.n	800767a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d11b      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x176>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x176>
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d113      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f4:	881a      	ldrh	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	d119      	bne.n	800765a <HAL_SPI_TransmitReceive+0x1b8>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d014      	beq.n	800765a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	b292      	uxth	r2, r2
 800763c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	1c9a      	adds	r2, r3, #2
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007656:	2301      	movs	r3, #1
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800765a:	f7fc ff21 	bl	80044a0 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007666:	429a      	cmp	r2, r3
 8007668:	d807      	bhi.n	800767a <HAL_SPI_TransmitReceive+0x1d8>
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007670:	d003      	beq.n	800767a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007678:	e0a7      	b.n	80077ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800767e:	b29b      	uxth	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1a6      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x130>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1a1      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x130>
 800768e:	e07c      	b.n	800778a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <HAL_SPI_TransmitReceive+0x1fc>
 8007698:	8b7b      	ldrh	r3, [r7, #26]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d16b      	bne.n	8007776 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	330c      	adds	r3, #12
 80076a8:	7812      	ldrb	r2, [r2, #0]
 80076aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076c4:	e057      	b.n	8007776 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d11c      	bne.n	800770e <HAL_SPI_TransmitReceive+0x26c>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d017      	beq.n	800770e <HAL_SPI_TransmitReceive+0x26c>
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d114      	bne.n	800770e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b01      	cmp	r3, #1
 800771a:	d119      	bne.n	8007750 <HAL_SPI_TransmitReceive+0x2ae>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007720:	b29b      	uxth	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d014      	beq.n	8007750 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800774c:	2301      	movs	r3, #1
 800774e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007750:	f7fc fea6 	bl	80044a0 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800775c:	429a      	cmp	r2, r3
 800775e:	d803      	bhi.n	8007768 <HAL_SPI_TransmitReceive+0x2c6>
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007766:	d102      	bne.n	800776e <HAL_SPI_TransmitReceive+0x2cc>
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	2b00      	cmp	r3, #0
 800776c:	d103      	bne.n	8007776 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007774:	e029      	b.n	80077ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1a2      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x224>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d19d      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800778a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 f8b2 	bl	80078f8 <SPI_EndRxTxTransaction>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d006      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2220      	movs	r2, #32
 80077a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80077a6:	e010      	b.n	80077ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10b      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	e000      	b.n	80077ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80077c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3730      	adds	r7, #48	; 0x30
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	4613      	mov	r3, r2
 80077f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077f8:	f7fc fe52 	bl	80044a0 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	4413      	add	r3, r2
 8007806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007808:	f7fc fe4a 	bl	80044a0 <HAL_GetTick>
 800780c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800780e:	4b39      	ldr	r3, [pc, #228]	; (80078f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	015b      	lsls	r3, r3, #5
 8007814:	0d1b      	lsrs	r3, r3, #20
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	fb02 f303 	mul.w	r3, r2, r3
 800781c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800781e:	e054      	b.n	80078ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d050      	beq.n	80078ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007828:	f7fc fe3a 	bl	80044a0 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	429a      	cmp	r2, r3
 8007836:	d902      	bls.n	800783e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d13d      	bne.n	80078ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800784c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007856:	d111      	bne.n	800787c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007860:	d004      	beq.n	800786c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786a:	d107      	bne.n	800787c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800787a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007884:	d10f      	bne.n	80078a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e017      	b.n	80078ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4013      	ands	r3, r2
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	bf0c      	ite	eq
 80078da:	2301      	moveq	r3, #1
 80078dc:	2300      	movne	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d19b      	bne.n	8007820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000044 	.word	0x20000044

080078f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007904:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <SPI_EndRxTxTransaction+0x7c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a1b      	ldr	r2, [pc, #108]	; (8007978 <SPI_EndRxTxTransaction+0x80>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	0d5b      	lsrs	r3, r3, #21
 8007910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007914:	fb02 f303 	mul.w	r3, r2, r3
 8007918:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007922:	d112      	bne.n	800794a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	2180      	movs	r1, #128	; 0x80
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7ff ff5a 	bl	80077e8 <SPI_WaitFlagStateUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793e:	f043 0220 	orr.w	r2, r3, #32
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e00f      	b.n	800796a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3b01      	subs	r3, #1
 8007954:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	d0f2      	beq.n	800794a <SPI_EndRxTxTransaction+0x52>
 8007964:	e000      	b.n	8007968 <SPI_EndRxTxTransaction+0x70>
        break;
 8007966:	bf00      	nop
  }

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000044 	.word	0x20000044
 8007978:	165e9f81 	.word	0x165e9f81

0800797c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e041      	b.n	8007a12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fc fb88 	bl	80040b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f000 f9ce 	bl	8007d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d001      	beq.n	8007a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e04e      	b.n	8007ad2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a23      	ldr	r2, [pc, #140]	; (8007ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d022      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x80>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5e:	d01d      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x80>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d018      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x80>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x80>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1c      	ldr	r2, [pc, #112]	; (8007aec <HAL_TIM_Base_Start_IT+0xd0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00e      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x80>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1b      	ldr	r2, [pc, #108]	; (8007af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d009      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x80>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a19      	ldr	r2, [pc, #100]	; (8007af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x80>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a18      	ldr	r2, [pc, #96]	; (8007af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d111      	bne.n	8007ac0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b06      	cmp	r3, #6
 8007aac:	d010      	beq.n	8007ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0201 	orr.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007abe:	e007      	b.n	8007ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40010000 	.word	0x40010000
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40000800 	.word	0x40000800
 8007aec:	40000c00 	.word	0x40000c00
 8007af0:	40010400 	.word	0x40010400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40001800 	.word	0x40001800

08007afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d122      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d11b      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0202 	mvn.w	r2, #2
 8007b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8ee 	bl	8007d20 <HAL_TIM_IC_CaptureCallback>
 8007b44:	e005      	b.n	8007b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8e0 	bl	8007d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f8f1 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	d122      	bne.n	8007bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d11b      	bne.n	8007bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f06f 0204 	mvn.w	r2, #4
 8007b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8c4 	bl	8007d20 <HAL_TIM_IC_CaptureCallback>
 8007b98:	e005      	b.n	8007ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f8b6 	bl	8007d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f8c7 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d122      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d11b      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0208 	mvn.w	r2, #8
 8007bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f89a 	bl	8007d20 <HAL_TIM_IC_CaptureCallback>
 8007bec:	e005      	b.n	8007bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f88c 	bl	8007d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f89d 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0310 	and.w	r3, r3, #16
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d122      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	2b10      	cmp	r3, #16
 8007c1a:	d11b      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0210 	mvn.w	r2, #16
 8007c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2208      	movs	r2, #8
 8007c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f870 	bl	8007d20 <HAL_TIM_IC_CaptureCallback>
 8007c40:	e005      	b.n	8007c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f862 	bl	8007d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f873 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d10e      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d107      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f06f 0201 	mvn.w	r2, #1
 8007c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fa ffe2 	bl	8002c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8a:	2b80      	cmp	r3, #128	; 0x80
 8007c8c:	d10e      	bne.n	8007cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c98:	2b80      	cmp	r3, #128	; 0x80
 8007c9a:	d107      	bne.n	8007cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f97e 	bl	8007fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b40      	cmp	r3, #64	; 0x40
 8007cb8:	d10e      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc4:	2b40      	cmp	r3, #64	; 0x40
 8007cc6:	d107      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f838 	bl	8007d48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d10e      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d107      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0220 	mvn.w	r2, #32
 8007cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f948 	bl	8007f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a40      	ldr	r2, [pc, #256]	; (8007e70 <TIM_Base_SetConfig+0x114>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d013      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7a:	d00f      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a3d      	ldr	r2, [pc, #244]	; (8007e74 <TIM_Base_SetConfig+0x118>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a3c      	ldr	r2, [pc, #240]	; (8007e78 <TIM_Base_SetConfig+0x11c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d007      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a3b      	ldr	r2, [pc, #236]	; (8007e7c <TIM_Base_SetConfig+0x120>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a3a      	ldr	r2, [pc, #232]	; (8007e80 <TIM_Base_SetConfig+0x124>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d108      	bne.n	8007dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a2f      	ldr	r2, [pc, #188]	; (8007e70 <TIM_Base_SetConfig+0x114>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d02b      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbc:	d027      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a2c      	ldr	r2, [pc, #176]	; (8007e74 <TIM_Base_SetConfig+0x118>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d023      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a2b      	ldr	r2, [pc, #172]	; (8007e78 <TIM_Base_SetConfig+0x11c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d01f      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a2a      	ldr	r2, [pc, #168]	; (8007e7c <TIM_Base_SetConfig+0x120>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d01b      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a29      	ldr	r2, [pc, #164]	; (8007e80 <TIM_Base_SetConfig+0x124>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d017      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a28      	ldr	r2, [pc, #160]	; (8007e84 <TIM_Base_SetConfig+0x128>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d013      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a27      	ldr	r2, [pc, #156]	; (8007e88 <TIM_Base_SetConfig+0x12c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d00f      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a26      	ldr	r2, [pc, #152]	; (8007e8c <TIM_Base_SetConfig+0x130>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00b      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a25      	ldr	r2, [pc, #148]	; (8007e90 <TIM_Base_SetConfig+0x134>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d007      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <TIM_Base_SetConfig+0x138>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d003      	beq.n	8007e0e <TIM_Base_SetConfig+0xb2>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a23      	ldr	r2, [pc, #140]	; (8007e98 <TIM_Base_SetConfig+0x13c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d108      	bne.n	8007e20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a0a      	ldr	r2, [pc, #40]	; (8007e70 <TIM_Base_SetConfig+0x114>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_Base_SetConfig+0xf8>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a0c      	ldr	r2, [pc, #48]	; (8007e80 <TIM_Base_SetConfig+0x124>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d103      	bne.n	8007e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	615a      	str	r2, [r3, #20]
}
 8007e62:	bf00      	nop
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40000400 	.word	0x40000400
 8007e78:	40000800 	.word	0x40000800
 8007e7c:	40000c00 	.word	0x40000c00
 8007e80:	40010400 	.word	0x40010400
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40014400 	.word	0x40014400
 8007e8c:	40014800 	.word	0x40014800
 8007e90:	40001800 	.word	0x40001800
 8007e94:	40001c00 	.word	0x40001c00
 8007e98:	40002000 	.word	0x40002000

08007e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e05a      	b.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a21      	ldr	r2, [pc, #132]	; (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d022      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f00:	d01d      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1d      	ldr	r2, [pc, #116]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d018      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1b      	ldr	r2, [pc, #108]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1a      	ldr	r2, [pc, #104]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00e      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a18      	ldr	r2, [pc, #96]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a17      	ldr	r2, [pc, #92]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d10c      	bne.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	40010400 	.word	0x40010400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40001800 	.word	0x40001800

08007f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e03f      	b.n	800804e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7fc f8cc 	bl	8004180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2224      	movs	r2, #36	; 0x24
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f929 	bl	8008258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	695a      	ldr	r2, [r3, #20]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b08a      	sub	sp, #40	; 0x28
 800805a:	af02      	add	r7, sp, #8
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	603b      	str	r3, [r7, #0]
 8008062:	4613      	mov	r3, r2
 8008064:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b20      	cmp	r3, #32
 8008074:	d17c      	bne.n	8008170 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_UART_Transmit+0x2c>
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e075      	b.n	8008172 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_UART_Transmit+0x3e>
 8008090:	2302      	movs	r3, #2
 8008092:	e06e      	b.n	8008172 <HAL_UART_Transmit+0x11c>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2221      	movs	r2, #33	; 0x21
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080aa:	f7fc f9f9 	bl	80044a0 <HAL_GetTick>
 80080ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	88fa      	ldrh	r2, [r7, #6]
 80080b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	88fa      	ldrh	r2, [r7, #6]
 80080ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c4:	d108      	bne.n	80080d8 <HAL_UART_Transmit+0x82>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	e003      	b.n	80080e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80080e8:	e02a      	b.n	8008140 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2200      	movs	r2, #0
 80080f2:	2180      	movs	r1, #128	; 0x80
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f840 	bl	800817a <UART_WaitOnFlagUntilTimeout>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e036      	b.n	8008172 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	3302      	adds	r3, #2
 800811e:	61bb      	str	r3, [r7, #24]
 8008120:	e007      	b.n	8008132 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	781a      	ldrb	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	3301      	adds	r3, #1
 8008130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1cf      	bne.n	80080ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2200      	movs	r2, #0
 8008152:	2140      	movs	r1, #64	; 0x40
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f810 	bl	800817a <UART_WaitOnFlagUntilTimeout>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e006      	b.n	8008172 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	e000      	b.n	8008172 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008170:	2302      	movs	r3, #2
  }
}
 8008172:	4618      	mov	r0, r3
 8008174:	3720      	adds	r7, #32
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b090      	sub	sp, #64	; 0x40
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	603b      	str	r3, [r7, #0]
 8008186:	4613      	mov	r3, r2
 8008188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800818a:	e050      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	d04c      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0x30>
 800819a:	f7fc f981 	bl	80044a0 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d241      	bcs.n	800822e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	330c      	adds	r3, #12
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081ca:	637a      	str	r2, [r7, #52]	; 0x34
 80081cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e5      	bne.n	80081aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3314      	adds	r3, #20
 80081e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	613b      	str	r3, [r7, #16]
   return(result);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3314      	adds	r3, #20
 80081fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081fe:	623a      	str	r2, [r7, #32]
 8008200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	69f9      	ldr	r1, [r7, #28]
 8008204:	6a3a      	ldr	r2, [r7, #32]
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	61bb      	str	r3, [r7, #24]
   return(result);
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e5      	bne.n	80081de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e00f      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4013      	ands	r3, r2
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	429a      	cmp	r2, r3
 800823c:	bf0c      	ite	eq
 800823e:	2301      	moveq	r3, #1
 8008240:	2300      	movne	r3, #0
 8008242:	b2db      	uxtb	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	429a      	cmp	r2, r3
 800824a:	d09f      	beq.n	800818c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3740      	adds	r7, #64	; 0x40
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800825c:	b0c0      	sub	sp, #256	; 0x100
 800825e:	af00      	add	r7, sp, #0
 8008260:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008274:	68d9      	ldr	r1, [r3, #12]
 8008276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	ea40 0301 	orr.w	r3, r0, r1
 8008280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	431a      	orrs	r2, r3
 8008290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	431a      	orrs	r2, r3
 8008298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	4313      	orrs	r3, r2
 80082a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082b0:	f021 010c 	bic.w	r1, r1, #12
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082be:	430b      	orrs	r3, r1
 80082c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d2:	6999      	ldr	r1, [r3, #24]
 80082d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	ea40 0301 	orr.w	r3, r0, r1
 80082de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	4b8f      	ldr	r3, [pc, #572]	; (8008524 <UART_SetConfig+0x2cc>)
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d005      	beq.n	80082f8 <UART_SetConfig+0xa0>
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	4b8d      	ldr	r3, [pc, #564]	; (8008528 <UART_SetConfig+0x2d0>)
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d104      	bne.n	8008302 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082f8:	f7fe fdb2 	bl	8006e60 <HAL_RCC_GetPCLK2Freq>
 80082fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008300:	e003      	b.n	800830a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008302:	f7fe fd99 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8008306:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008314:	f040 810c 	bne.w	8008530 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800831c:	2200      	movs	r2, #0
 800831e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008322:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008326:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800832a:	4622      	mov	r2, r4
 800832c:	462b      	mov	r3, r5
 800832e:	1891      	adds	r1, r2, r2
 8008330:	65b9      	str	r1, [r7, #88]	; 0x58
 8008332:	415b      	adcs	r3, r3
 8008334:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800833a:	4621      	mov	r1, r4
 800833c:	eb12 0801 	adds.w	r8, r2, r1
 8008340:	4629      	mov	r1, r5
 8008342:	eb43 0901 	adc.w	r9, r3, r1
 8008346:	f04f 0200 	mov.w	r2, #0
 800834a:	f04f 0300 	mov.w	r3, #0
 800834e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800835a:	4690      	mov	r8, r2
 800835c:	4699      	mov	r9, r3
 800835e:	4623      	mov	r3, r4
 8008360:	eb18 0303 	adds.w	r3, r8, r3
 8008364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008368:	462b      	mov	r3, r5
 800836a:	eb49 0303 	adc.w	r3, r9, r3
 800836e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800837e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008382:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008386:	460b      	mov	r3, r1
 8008388:	18db      	adds	r3, r3, r3
 800838a:	653b      	str	r3, [r7, #80]	; 0x50
 800838c:	4613      	mov	r3, r2
 800838e:	eb42 0303 	adc.w	r3, r2, r3
 8008392:	657b      	str	r3, [r7, #84]	; 0x54
 8008394:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008398:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800839c:	f7f8 fc94 	bl	8000cc8 <__aeabi_uldivmod>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4b61      	ldr	r3, [pc, #388]	; (800852c <UART_SetConfig+0x2d4>)
 80083a6:	fba3 2302 	umull	r2, r3, r3, r2
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	011c      	lsls	r4, r3, #4
 80083ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80083bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80083c0:	4642      	mov	r2, r8
 80083c2:	464b      	mov	r3, r9
 80083c4:	1891      	adds	r1, r2, r2
 80083c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80083c8:	415b      	adcs	r3, r3
 80083ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083d0:	4641      	mov	r1, r8
 80083d2:	eb12 0a01 	adds.w	sl, r2, r1
 80083d6:	4649      	mov	r1, r9
 80083d8:	eb43 0b01 	adc.w	fp, r3, r1
 80083dc:	f04f 0200 	mov.w	r2, #0
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083f0:	4692      	mov	sl, r2
 80083f2:	469b      	mov	fp, r3
 80083f4:	4643      	mov	r3, r8
 80083f6:	eb1a 0303 	adds.w	r3, sl, r3
 80083fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083fe:	464b      	mov	r3, r9
 8008400:	eb4b 0303 	adc.w	r3, fp, r3
 8008404:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008414:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008418:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800841c:	460b      	mov	r3, r1
 800841e:	18db      	adds	r3, r3, r3
 8008420:	643b      	str	r3, [r7, #64]	; 0x40
 8008422:	4613      	mov	r3, r2
 8008424:	eb42 0303 	adc.w	r3, r2, r3
 8008428:	647b      	str	r3, [r7, #68]	; 0x44
 800842a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800842e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008432:	f7f8 fc49 	bl	8000cc8 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4611      	mov	r1, r2
 800843c:	4b3b      	ldr	r3, [pc, #236]	; (800852c <UART_SetConfig+0x2d4>)
 800843e:	fba3 2301 	umull	r2, r3, r3, r1
 8008442:	095b      	lsrs	r3, r3, #5
 8008444:	2264      	movs	r2, #100	; 0x64
 8008446:	fb02 f303 	mul.w	r3, r2, r3
 800844a:	1acb      	subs	r3, r1, r3
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008452:	4b36      	ldr	r3, [pc, #216]	; (800852c <UART_SetConfig+0x2d4>)
 8008454:	fba3 2302 	umull	r2, r3, r3, r2
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008460:	441c      	add	r4, r3
 8008462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008466:	2200      	movs	r2, #0
 8008468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800846c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008470:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	1891      	adds	r1, r2, r2
 800847a:	63b9      	str	r1, [r7, #56]	; 0x38
 800847c:	415b      	adcs	r3, r3
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008484:	4641      	mov	r1, r8
 8008486:	1851      	adds	r1, r2, r1
 8008488:	6339      	str	r1, [r7, #48]	; 0x30
 800848a:	4649      	mov	r1, r9
 800848c:	414b      	adcs	r3, r1
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800849c:	4659      	mov	r1, fp
 800849e:	00cb      	lsls	r3, r1, #3
 80084a0:	4651      	mov	r1, sl
 80084a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084a6:	4651      	mov	r1, sl
 80084a8:	00ca      	lsls	r2, r1, #3
 80084aa:	4610      	mov	r0, r2
 80084ac:	4619      	mov	r1, r3
 80084ae:	4603      	mov	r3, r0
 80084b0:	4642      	mov	r2, r8
 80084b2:	189b      	adds	r3, r3, r2
 80084b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b8:	464b      	mov	r3, r9
 80084ba:	460a      	mov	r2, r1
 80084bc:	eb42 0303 	adc.w	r3, r2, r3
 80084c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084d8:	460b      	mov	r3, r1
 80084da:	18db      	adds	r3, r3, r3
 80084dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80084de:	4613      	mov	r3, r2
 80084e0:	eb42 0303 	adc.w	r3, r2, r3
 80084e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084ee:	f7f8 fbeb 	bl	8000cc8 <__aeabi_uldivmod>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <UART_SetConfig+0x2d4>)
 80084f8:	fba3 1302 	umull	r1, r3, r3, r2
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	2164      	movs	r1, #100	; 0x64
 8008500:	fb01 f303 	mul.w	r3, r1, r3
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	3332      	adds	r3, #50	; 0x32
 800850a:	4a08      	ldr	r2, [pc, #32]	; (800852c <UART_SetConfig+0x2d4>)
 800850c:	fba2 2303 	umull	r2, r3, r2, r3
 8008510:	095b      	lsrs	r3, r3, #5
 8008512:	f003 0207 	and.w	r2, r3, #7
 8008516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4422      	add	r2, r4
 800851e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008520:	e106      	b.n	8008730 <UART_SetConfig+0x4d8>
 8008522:	bf00      	nop
 8008524:	40011000 	.word	0x40011000
 8008528:	40011400 	.word	0x40011400
 800852c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008534:	2200      	movs	r2, #0
 8008536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800853a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800853e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008542:	4642      	mov	r2, r8
 8008544:	464b      	mov	r3, r9
 8008546:	1891      	adds	r1, r2, r2
 8008548:	6239      	str	r1, [r7, #32]
 800854a:	415b      	adcs	r3, r3
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
 800854e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008552:	4641      	mov	r1, r8
 8008554:	1854      	adds	r4, r2, r1
 8008556:	4649      	mov	r1, r9
 8008558:	eb43 0501 	adc.w	r5, r3, r1
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	00eb      	lsls	r3, r5, #3
 8008566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800856a:	00e2      	lsls	r2, r4, #3
 800856c:	4614      	mov	r4, r2
 800856e:	461d      	mov	r5, r3
 8008570:	4643      	mov	r3, r8
 8008572:	18e3      	adds	r3, r4, r3
 8008574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008578:	464b      	mov	r3, r9
 800857a:	eb45 0303 	adc.w	r3, r5, r3
 800857e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800858e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008592:	f04f 0200 	mov.w	r2, #0
 8008596:	f04f 0300 	mov.w	r3, #0
 800859a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800859e:	4629      	mov	r1, r5
 80085a0:	008b      	lsls	r3, r1, #2
 80085a2:	4621      	mov	r1, r4
 80085a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085a8:	4621      	mov	r1, r4
 80085aa:	008a      	lsls	r2, r1, #2
 80085ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80085b0:	f7f8 fb8a 	bl	8000cc8 <__aeabi_uldivmod>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4b60      	ldr	r3, [pc, #384]	; (800873c <UART_SetConfig+0x4e4>)
 80085ba:	fba3 2302 	umull	r2, r3, r3, r2
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	011c      	lsls	r4, r3, #4
 80085c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	1891      	adds	r1, r2, r2
 80085da:	61b9      	str	r1, [r7, #24]
 80085dc:	415b      	adcs	r3, r3
 80085de:	61fb      	str	r3, [r7, #28]
 80085e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085e4:	4641      	mov	r1, r8
 80085e6:	1851      	adds	r1, r2, r1
 80085e8:	6139      	str	r1, [r7, #16]
 80085ea:	4649      	mov	r1, r9
 80085ec:	414b      	adcs	r3, r1
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085fc:	4659      	mov	r1, fp
 80085fe:	00cb      	lsls	r3, r1, #3
 8008600:	4651      	mov	r1, sl
 8008602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008606:	4651      	mov	r1, sl
 8008608:	00ca      	lsls	r2, r1, #3
 800860a:	4610      	mov	r0, r2
 800860c:	4619      	mov	r1, r3
 800860e:	4603      	mov	r3, r0
 8008610:	4642      	mov	r2, r8
 8008612:	189b      	adds	r3, r3, r2
 8008614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008618:	464b      	mov	r3, r9
 800861a:	460a      	mov	r2, r1
 800861c:	eb42 0303 	adc.w	r3, r2, r3
 8008620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	67bb      	str	r3, [r7, #120]	; 0x78
 800862e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800863c:	4649      	mov	r1, r9
 800863e:	008b      	lsls	r3, r1, #2
 8008640:	4641      	mov	r1, r8
 8008642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008646:	4641      	mov	r1, r8
 8008648:	008a      	lsls	r2, r1, #2
 800864a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800864e:	f7f8 fb3b 	bl	8000cc8 <__aeabi_uldivmod>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4611      	mov	r1, r2
 8008658:	4b38      	ldr	r3, [pc, #224]	; (800873c <UART_SetConfig+0x4e4>)
 800865a:	fba3 2301 	umull	r2, r3, r3, r1
 800865e:	095b      	lsrs	r3, r3, #5
 8008660:	2264      	movs	r2, #100	; 0x64
 8008662:	fb02 f303 	mul.w	r3, r2, r3
 8008666:	1acb      	subs	r3, r1, r3
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	3332      	adds	r3, #50	; 0x32
 800866c:	4a33      	ldr	r2, [pc, #204]	; (800873c <UART_SetConfig+0x4e4>)
 800866e:	fba2 2303 	umull	r2, r3, r2, r3
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008678:	441c      	add	r4, r3
 800867a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800867e:	2200      	movs	r2, #0
 8008680:	673b      	str	r3, [r7, #112]	; 0x70
 8008682:	677a      	str	r2, [r7, #116]	; 0x74
 8008684:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008688:	4642      	mov	r2, r8
 800868a:	464b      	mov	r3, r9
 800868c:	1891      	adds	r1, r2, r2
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	415b      	adcs	r3, r3
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008698:	4641      	mov	r1, r8
 800869a:	1851      	adds	r1, r2, r1
 800869c:	6039      	str	r1, [r7, #0]
 800869e:	4649      	mov	r1, r9
 80086a0:	414b      	adcs	r3, r1
 80086a2:	607b      	str	r3, [r7, #4]
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086b0:	4659      	mov	r1, fp
 80086b2:	00cb      	lsls	r3, r1, #3
 80086b4:	4651      	mov	r1, sl
 80086b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ba:	4651      	mov	r1, sl
 80086bc:	00ca      	lsls	r2, r1, #3
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	4603      	mov	r3, r0
 80086c4:	4642      	mov	r2, r8
 80086c6:	189b      	adds	r3, r3, r2
 80086c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80086ca:	464b      	mov	r3, r9
 80086cc:	460a      	mov	r2, r1
 80086ce:	eb42 0303 	adc.w	r3, r2, r3
 80086d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	663b      	str	r3, [r7, #96]	; 0x60
 80086de:	667a      	str	r2, [r7, #100]	; 0x64
 80086e0:	f04f 0200 	mov.w	r2, #0
 80086e4:	f04f 0300 	mov.w	r3, #0
 80086e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086ec:	4649      	mov	r1, r9
 80086ee:	008b      	lsls	r3, r1, #2
 80086f0:	4641      	mov	r1, r8
 80086f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086f6:	4641      	mov	r1, r8
 80086f8:	008a      	lsls	r2, r1, #2
 80086fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086fe:	f7f8 fae3 	bl	8000cc8 <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4b0d      	ldr	r3, [pc, #52]	; (800873c <UART_SetConfig+0x4e4>)
 8008708:	fba3 1302 	umull	r1, r3, r3, r2
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	2164      	movs	r1, #100	; 0x64
 8008710:	fb01 f303 	mul.w	r3, r1, r3
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	3332      	adds	r3, #50	; 0x32
 800871a:	4a08      	ldr	r2, [pc, #32]	; (800873c <UART_SetConfig+0x4e4>)
 800871c:	fba2 2303 	umull	r2, r3, r2, r3
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	f003 020f 	and.w	r2, r3, #15
 8008726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4422      	add	r2, r4
 800872e:	609a      	str	r2, [r3, #8]
}
 8008730:	bf00      	nop
 8008732:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008736:	46bd      	mov	sp, r7
 8008738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800873c:	51eb851f 	.word	0x51eb851f

08008740 <__cvt>:
 8008740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	ec55 4b10 	vmov	r4, r5, d0
 8008748:	2d00      	cmp	r5, #0
 800874a:	460e      	mov	r6, r1
 800874c:	4619      	mov	r1, r3
 800874e:	462b      	mov	r3, r5
 8008750:	bfbb      	ittet	lt
 8008752:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008756:	461d      	movlt	r5, r3
 8008758:	2300      	movge	r3, #0
 800875a:	232d      	movlt	r3, #45	; 0x2d
 800875c:	700b      	strb	r3, [r1, #0]
 800875e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008760:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008764:	4691      	mov	r9, r2
 8008766:	f023 0820 	bic.w	r8, r3, #32
 800876a:	bfbc      	itt	lt
 800876c:	4622      	movlt	r2, r4
 800876e:	4614      	movlt	r4, r2
 8008770:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008774:	d005      	beq.n	8008782 <__cvt+0x42>
 8008776:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800877a:	d100      	bne.n	800877e <__cvt+0x3e>
 800877c:	3601      	adds	r6, #1
 800877e:	2102      	movs	r1, #2
 8008780:	e000      	b.n	8008784 <__cvt+0x44>
 8008782:	2103      	movs	r1, #3
 8008784:	ab03      	add	r3, sp, #12
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	ab02      	add	r3, sp, #8
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	ec45 4b10 	vmov	d0, r4, r5
 8008790:	4653      	mov	r3, sl
 8008792:	4632      	mov	r2, r6
 8008794:	f001 f9c0 	bl	8009b18 <_dtoa_r>
 8008798:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800879c:	4607      	mov	r7, r0
 800879e:	d102      	bne.n	80087a6 <__cvt+0x66>
 80087a0:	f019 0f01 	tst.w	r9, #1
 80087a4:	d022      	beq.n	80087ec <__cvt+0xac>
 80087a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087aa:	eb07 0906 	add.w	r9, r7, r6
 80087ae:	d110      	bne.n	80087d2 <__cvt+0x92>
 80087b0:	783b      	ldrb	r3, [r7, #0]
 80087b2:	2b30      	cmp	r3, #48	; 0x30
 80087b4:	d10a      	bne.n	80087cc <__cvt+0x8c>
 80087b6:	2200      	movs	r2, #0
 80087b8:	2300      	movs	r3, #0
 80087ba:	4620      	mov	r0, r4
 80087bc:	4629      	mov	r1, r5
 80087be:	f7f8 f9a3 	bl	8000b08 <__aeabi_dcmpeq>
 80087c2:	b918      	cbnz	r0, 80087cc <__cvt+0x8c>
 80087c4:	f1c6 0601 	rsb	r6, r6, #1
 80087c8:	f8ca 6000 	str.w	r6, [sl]
 80087cc:	f8da 3000 	ldr.w	r3, [sl]
 80087d0:	4499      	add	r9, r3
 80087d2:	2200      	movs	r2, #0
 80087d4:	2300      	movs	r3, #0
 80087d6:	4620      	mov	r0, r4
 80087d8:	4629      	mov	r1, r5
 80087da:	f7f8 f995 	bl	8000b08 <__aeabi_dcmpeq>
 80087de:	b108      	cbz	r0, 80087e4 <__cvt+0xa4>
 80087e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80087e4:	2230      	movs	r2, #48	; 0x30
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	454b      	cmp	r3, r9
 80087ea:	d307      	bcc.n	80087fc <__cvt+0xbc>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087f0:	1bdb      	subs	r3, r3, r7
 80087f2:	4638      	mov	r0, r7
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	b004      	add	sp, #16
 80087f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fc:	1c59      	adds	r1, r3, #1
 80087fe:	9103      	str	r1, [sp, #12]
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	e7f0      	b.n	80087e6 <__cvt+0xa6>

08008804 <__exponent>:
 8008804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008806:	4603      	mov	r3, r0
 8008808:	2900      	cmp	r1, #0
 800880a:	bfb8      	it	lt
 800880c:	4249      	neglt	r1, r1
 800880e:	f803 2b02 	strb.w	r2, [r3], #2
 8008812:	bfb4      	ite	lt
 8008814:	222d      	movlt	r2, #45	; 0x2d
 8008816:	222b      	movge	r2, #43	; 0x2b
 8008818:	2909      	cmp	r1, #9
 800881a:	7042      	strb	r2, [r0, #1]
 800881c:	dd2a      	ble.n	8008874 <__exponent+0x70>
 800881e:	f10d 0207 	add.w	r2, sp, #7
 8008822:	4617      	mov	r7, r2
 8008824:	260a      	movs	r6, #10
 8008826:	4694      	mov	ip, r2
 8008828:	fb91 f5f6 	sdiv	r5, r1, r6
 800882c:	fb06 1415 	mls	r4, r6, r5, r1
 8008830:	3430      	adds	r4, #48	; 0x30
 8008832:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008836:	460c      	mov	r4, r1
 8008838:	2c63      	cmp	r4, #99	; 0x63
 800883a:	f102 32ff 	add.w	r2, r2, #4294967295
 800883e:	4629      	mov	r1, r5
 8008840:	dcf1      	bgt.n	8008826 <__exponent+0x22>
 8008842:	3130      	adds	r1, #48	; 0x30
 8008844:	f1ac 0402 	sub.w	r4, ip, #2
 8008848:	f802 1c01 	strb.w	r1, [r2, #-1]
 800884c:	1c41      	adds	r1, r0, #1
 800884e:	4622      	mov	r2, r4
 8008850:	42ba      	cmp	r2, r7
 8008852:	d30a      	bcc.n	800886a <__exponent+0x66>
 8008854:	f10d 0209 	add.w	r2, sp, #9
 8008858:	eba2 020c 	sub.w	r2, r2, ip
 800885c:	42bc      	cmp	r4, r7
 800885e:	bf88      	it	hi
 8008860:	2200      	movhi	r2, #0
 8008862:	4413      	add	r3, r2
 8008864:	1a18      	subs	r0, r3, r0
 8008866:	b003      	add	sp, #12
 8008868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800886a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800886e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008872:	e7ed      	b.n	8008850 <__exponent+0x4c>
 8008874:	2330      	movs	r3, #48	; 0x30
 8008876:	3130      	adds	r1, #48	; 0x30
 8008878:	7083      	strb	r3, [r0, #2]
 800887a:	70c1      	strb	r1, [r0, #3]
 800887c:	1d03      	adds	r3, r0, #4
 800887e:	e7f1      	b.n	8008864 <__exponent+0x60>

08008880 <_printf_float>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	ed2d 8b02 	vpush	{d8}
 8008888:	b08d      	sub	sp, #52	; 0x34
 800888a:	460c      	mov	r4, r1
 800888c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008890:	4616      	mov	r6, r2
 8008892:	461f      	mov	r7, r3
 8008894:	4605      	mov	r5, r0
 8008896:	f001 f82b 	bl	80098f0 <_localeconv_r>
 800889a:	f8d0 a000 	ldr.w	sl, [r0]
 800889e:	4650      	mov	r0, sl
 80088a0:	f7f7 fd06 	bl	80002b0 <strlen>
 80088a4:	2300      	movs	r3, #0
 80088a6:	930a      	str	r3, [sp, #40]	; 0x28
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	f8d8 3000 	ldr.w	r3, [r8]
 80088b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80088b4:	3307      	adds	r3, #7
 80088b6:	f023 0307 	bic.w	r3, r3, #7
 80088ba:	f103 0208 	add.w	r2, r3, #8
 80088be:	f8c8 2000 	str.w	r2, [r8]
 80088c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088ca:	9307      	str	r3, [sp, #28]
 80088cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80088d0:	ee08 0a10 	vmov	s16, r0
 80088d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80088d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088dc:	4b9e      	ldr	r3, [pc, #632]	; (8008b58 <_printf_float+0x2d8>)
 80088de:	f04f 32ff 	mov.w	r2, #4294967295
 80088e2:	f7f8 f943 	bl	8000b6c <__aeabi_dcmpun>
 80088e6:	bb88      	cbnz	r0, 800894c <_printf_float+0xcc>
 80088e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ec:	4b9a      	ldr	r3, [pc, #616]	; (8008b58 <_printf_float+0x2d8>)
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	f7f8 f91d 	bl	8000b30 <__aeabi_dcmple>
 80088f6:	bb48      	cbnz	r0, 800894c <_printf_float+0xcc>
 80088f8:	2200      	movs	r2, #0
 80088fa:	2300      	movs	r3, #0
 80088fc:	4640      	mov	r0, r8
 80088fe:	4649      	mov	r1, r9
 8008900:	f7f8 f90c 	bl	8000b1c <__aeabi_dcmplt>
 8008904:	b110      	cbz	r0, 800890c <_printf_float+0x8c>
 8008906:	232d      	movs	r3, #45	; 0x2d
 8008908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800890c:	4a93      	ldr	r2, [pc, #588]	; (8008b5c <_printf_float+0x2dc>)
 800890e:	4b94      	ldr	r3, [pc, #592]	; (8008b60 <_printf_float+0x2e0>)
 8008910:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008914:	bf94      	ite	ls
 8008916:	4690      	movls	r8, r2
 8008918:	4698      	movhi	r8, r3
 800891a:	2303      	movs	r3, #3
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	9b05      	ldr	r3, [sp, #20]
 8008920:	f023 0304 	bic.w	r3, r3, #4
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	f04f 0900 	mov.w	r9, #0
 800892a:	9700      	str	r7, [sp, #0]
 800892c:	4633      	mov	r3, r6
 800892e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008930:	4621      	mov	r1, r4
 8008932:	4628      	mov	r0, r5
 8008934:	f000 f9da 	bl	8008cec <_printf_common>
 8008938:	3001      	adds	r0, #1
 800893a:	f040 8090 	bne.w	8008a5e <_printf_float+0x1de>
 800893e:	f04f 30ff 	mov.w	r0, #4294967295
 8008942:	b00d      	add	sp, #52	; 0x34
 8008944:	ecbd 8b02 	vpop	{d8}
 8008948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894c:	4642      	mov	r2, r8
 800894e:	464b      	mov	r3, r9
 8008950:	4640      	mov	r0, r8
 8008952:	4649      	mov	r1, r9
 8008954:	f7f8 f90a 	bl	8000b6c <__aeabi_dcmpun>
 8008958:	b140      	cbz	r0, 800896c <_printf_float+0xec>
 800895a:	464b      	mov	r3, r9
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfbc      	itt	lt
 8008960:	232d      	movlt	r3, #45	; 0x2d
 8008962:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008966:	4a7f      	ldr	r2, [pc, #508]	; (8008b64 <_printf_float+0x2e4>)
 8008968:	4b7f      	ldr	r3, [pc, #508]	; (8008b68 <_printf_float+0x2e8>)
 800896a:	e7d1      	b.n	8008910 <_printf_float+0x90>
 800896c:	6863      	ldr	r3, [r4, #4]
 800896e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008972:	9206      	str	r2, [sp, #24]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	d13f      	bne.n	80089f8 <_printf_float+0x178>
 8008978:	2306      	movs	r3, #6
 800897a:	6063      	str	r3, [r4, #4]
 800897c:	9b05      	ldr	r3, [sp, #20]
 800897e:	6861      	ldr	r1, [r4, #4]
 8008980:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008984:	2300      	movs	r3, #0
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	ab0a      	add	r3, sp, #40	; 0x28
 800898a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800898e:	ab09      	add	r3, sp, #36	; 0x24
 8008990:	ec49 8b10 	vmov	d0, r8, r9
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	6022      	str	r2, [r4, #0]
 8008998:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800899c:	4628      	mov	r0, r5
 800899e:	f7ff fecf 	bl	8008740 <__cvt>
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089a6:	2b47      	cmp	r3, #71	; 0x47
 80089a8:	4680      	mov	r8, r0
 80089aa:	d108      	bne.n	80089be <_printf_float+0x13e>
 80089ac:	1cc8      	adds	r0, r1, #3
 80089ae:	db02      	blt.n	80089b6 <_printf_float+0x136>
 80089b0:	6863      	ldr	r3, [r4, #4]
 80089b2:	4299      	cmp	r1, r3
 80089b4:	dd41      	ble.n	8008a3a <_printf_float+0x1ba>
 80089b6:	f1ab 0302 	sub.w	r3, fp, #2
 80089ba:	fa5f fb83 	uxtb.w	fp, r3
 80089be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089c2:	d820      	bhi.n	8008a06 <_printf_float+0x186>
 80089c4:	3901      	subs	r1, #1
 80089c6:	465a      	mov	r2, fp
 80089c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089cc:	9109      	str	r1, [sp, #36]	; 0x24
 80089ce:	f7ff ff19 	bl	8008804 <__exponent>
 80089d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089d4:	1813      	adds	r3, r2, r0
 80089d6:	2a01      	cmp	r2, #1
 80089d8:	4681      	mov	r9, r0
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	dc02      	bgt.n	80089e4 <_printf_float+0x164>
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	07d2      	lsls	r2, r2, #31
 80089e2:	d501      	bpl.n	80089e8 <_printf_float+0x168>
 80089e4:	3301      	adds	r3, #1
 80089e6:	6123      	str	r3, [r4, #16]
 80089e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d09c      	beq.n	800892a <_printf_float+0xaa>
 80089f0:	232d      	movs	r3, #45	; 0x2d
 80089f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f6:	e798      	b.n	800892a <_printf_float+0xaa>
 80089f8:	9a06      	ldr	r2, [sp, #24]
 80089fa:	2a47      	cmp	r2, #71	; 0x47
 80089fc:	d1be      	bne.n	800897c <_printf_float+0xfc>
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1bc      	bne.n	800897c <_printf_float+0xfc>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e7b9      	b.n	800897a <_printf_float+0xfa>
 8008a06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a0a:	d118      	bne.n	8008a3e <_printf_float+0x1be>
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	6863      	ldr	r3, [r4, #4]
 8008a10:	dd0b      	ble.n	8008a2a <_printf_float+0x1aa>
 8008a12:	6121      	str	r1, [r4, #16]
 8008a14:	b913      	cbnz	r3, 8008a1c <_printf_float+0x19c>
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	07d0      	lsls	r0, r2, #31
 8008a1a:	d502      	bpl.n	8008a22 <_printf_float+0x1a2>
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	440b      	add	r3, r1
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a24:	f04f 0900 	mov.w	r9, #0
 8008a28:	e7de      	b.n	80089e8 <_printf_float+0x168>
 8008a2a:	b913      	cbnz	r3, 8008a32 <_printf_float+0x1b2>
 8008a2c:	6822      	ldr	r2, [r4, #0]
 8008a2e:	07d2      	lsls	r2, r2, #31
 8008a30:	d501      	bpl.n	8008a36 <_printf_float+0x1b6>
 8008a32:	3302      	adds	r3, #2
 8008a34:	e7f4      	b.n	8008a20 <_printf_float+0x1a0>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e7f2      	b.n	8008a20 <_printf_float+0x1a0>
 8008a3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a40:	4299      	cmp	r1, r3
 8008a42:	db05      	blt.n	8008a50 <_printf_float+0x1d0>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	6121      	str	r1, [r4, #16]
 8008a48:	07d8      	lsls	r0, r3, #31
 8008a4a:	d5ea      	bpl.n	8008a22 <_printf_float+0x1a2>
 8008a4c:	1c4b      	adds	r3, r1, #1
 8008a4e:	e7e7      	b.n	8008a20 <_printf_float+0x1a0>
 8008a50:	2900      	cmp	r1, #0
 8008a52:	bfd4      	ite	le
 8008a54:	f1c1 0202 	rsble	r2, r1, #2
 8008a58:	2201      	movgt	r2, #1
 8008a5a:	4413      	add	r3, r2
 8008a5c:	e7e0      	b.n	8008a20 <_printf_float+0x1a0>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	055a      	lsls	r2, r3, #21
 8008a62:	d407      	bmi.n	8008a74 <_printf_float+0x1f4>
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	4642      	mov	r2, r8
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b8      	blx	r7
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d12c      	bne.n	8008acc <_printf_float+0x24c>
 8008a72:	e764      	b.n	800893e <_printf_float+0xbe>
 8008a74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a78:	f240 80e0 	bls.w	8008c3c <_printf_float+0x3bc>
 8008a7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a80:	2200      	movs	r2, #0
 8008a82:	2300      	movs	r3, #0
 8008a84:	f7f8 f840 	bl	8000b08 <__aeabi_dcmpeq>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d034      	beq.n	8008af6 <_printf_float+0x276>
 8008a8c:	4a37      	ldr	r2, [pc, #220]	; (8008b6c <_printf_float+0x2ec>)
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4631      	mov	r1, r6
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	f43f af51 	beq.w	800893e <_printf_float+0xbe>
 8008a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	db02      	blt.n	8008aaa <_printf_float+0x22a>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	07d8      	lsls	r0, r3, #31
 8008aa8:	d510      	bpl.n	8008acc <_printf_float+0x24c>
 8008aaa:	ee18 3a10 	vmov	r3, s16
 8008aae:	4652      	mov	r2, sl
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	47b8      	blx	r7
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f43f af41 	beq.w	800893e <_printf_float+0xbe>
 8008abc:	f04f 0800 	mov.w	r8, #0
 8008ac0:	f104 091a 	add.w	r9, r4, #26
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	4543      	cmp	r3, r8
 8008aca:	dc09      	bgt.n	8008ae0 <_printf_float+0x260>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	079b      	lsls	r3, r3, #30
 8008ad0:	f100 8107 	bmi.w	8008ce2 <_printf_float+0x462>
 8008ad4:	68e0      	ldr	r0, [r4, #12]
 8008ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad8:	4298      	cmp	r0, r3
 8008ada:	bfb8      	it	lt
 8008adc:	4618      	movlt	r0, r3
 8008ade:	e730      	b.n	8008942 <_printf_float+0xc2>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	464a      	mov	r2, r9
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f af27 	beq.w	800893e <_printf_float+0xbe>
 8008af0:	f108 0801 	add.w	r8, r8, #1
 8008af4:	e7e6      	b.n	8008ac4 <_printf_float+0x244>
 8008af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dc39      	bgt.n	8008b70 <_printf_float+0x2f0>
 8008afc:	4a1b      	ldr	r2, [pc, #108]	; (8008b6c <_printf_float+0x2ec>)
 8008afe:	2301      	movs	r3, #1
 8008b00:	4631      	mov	r1, r6
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f af19 	beq.w	800893e <_printf_float+0xbe>
 8008b0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b10:	4313      	orrs	r3, r2
 8008b12:	d102      	bne.n	8008b1a <_printf_float+0x29a>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	07d9      	lsls	r1, r3, #31
 8008b18:	d5d8      	bpl.n	8008acc <_printf_float+0x24c>
 8008b1a:	ee18 3a10 	vmov	r3, s16
 8008b1e:	4652      	mov	r2, sl
 8008b20:	4631      	mov	r1, r6
 8008b22:	4628      	mov	r0, r5
 8008b24:	47b8      	blx	r7
 8008b26:	3001      	adds	r0, #1
 8008b28:	f43f af09 	beq.w	800893e <_printf_float+0xbe>
 8008b2c:	f04f 0900 	mov.w	r9, #0
 8008b30:	f104 0a1a 	add.w	sl, r4, #26
 8008b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b36:	425b      	negs	r3, r3
 8008b38:	454b      	cmp	r3, r9
 8008b3a:	dc01      	bgt.n	8008b40 <_printf_float+0x2c0>
 8008b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b3e:	e792      	b.n	8008a66 <_printf_float+0x1e6>
 8008b40:	2301      	movs	r3, #1
 8008b42:	4652      	mov	r2, sl
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f43f aef7 	beq.w	800893e <_printf_float+0xbe>
 8008b50:	f109 0901 	add.w	r9, r9, #1
 8008b54:	e7ee      	b.n	8008b34 <_printf_float+0x2b4>
 8008b56:	bf00      	nop
 8008b58:	7fefffff 	.word	0x7fefffff
 8008b5c:	0800dc2c 	.word	0x0800dc2c
 8008b60:	0800dc30 	.word	0x0800dc30
 8008b64:	0800dc34 	.word	0x0800dc34
 8008b68:	0800dc38 	.word	0x0800dc38
 8008b6c:	0800dfc8 	.word	0x0800dfc8
 8008b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b74:	429a      	cmp	r2, r3
 8008b76:	bfa8      	it	ge
 8008b78:	461a      	movge	r2, r3
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	4691      	mov	r9, r2
 8008b7e:	dc37      	bgt.n	8008bf0 <_printf_float+0x370>
 8008b80:	f04f 0b00 	mov.w	fp, #0
 8008b84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b88:	f104 021a 	add.w	r2, r4, #26
 8008b8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b8e:	9305      	str	r3, [sp, #20]
 8008b90:	eba3 0309 	sub.w	r3, r3, r9
 8008b94:	455b      	cmp	r3, fp
 8008b96:	dc33      	bgt.n	8008c00 <_printf_float+0x380>
 8008b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	db3b      	blt.n	8008c18 <_printf_float+0x398>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	07da      	lsls	r2, r3, #31
 8008ba4:	d438      	bmi.n	8008c18 <_printf_float+0x398>
 8008ba6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008baa:	eba2 0903 	sub.w	r9, r2, r3
 8008bae:	9b05      	ldr	r3, [sp, #20]
 8008bb0:	1ad2      	subs	r2, r2, r3
 8008bb2:	4591      	cmp	r9, r2
 8008bb4:	bfa8      	it	ge
 8008bb6:	4691      	movge	r9, r2
 8008bb8:	f1b9 0f00 	cmp.w	r9, #0
 8008bbc:	dc35      	bgt.n	8008c2a <_printf_float+0x3aa>
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bc6:	f104 0a1a 	add.w	sl, r4, #26
 8008bca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	eba3 0309 	sub.w	r3, r3, r9
 8008bd4:	4543      	cmp	r3, r8
 8008bd6:	f77f af79 	ble.w	8008acc <_printf_float+0x24c>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4652      	mov	r2, sl
 8008bde:	4631      	mov	r1, r6
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b8      	blx	r7
 8008be4:	3001      	adds	r0, #1
 8008be6:	f43f aeaa 	beq.w	800893e <_printf_float+0xbe>
 8008bea:	f108 0801 	add.w	r8, r8, #1
 8008bee:	e7ec      	b.n	8008bca <_printf_float+0x34a>
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4642      	mov	r2, r8
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b8      	blx	r7
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d1c0      	bne.n	8008b80 <_printf_float+0x300>
 8008bfe:	e69e      	b.n	800893e <_printf_float+0xbe>
 8008c00:	2301      	movs	r3, #1
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	9205      	str	r2, [sp, #20]
 8008c08:	47b8      	blx	r7
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	f43f ae97 	beq.w	800893e <_printf_float+0xbe>
 8008c10:	9a05      	ldr	r2, [sp, #20]
 8008c12:	f10b 0b01 	add.w	fp, fp, #1
 8008c16:	e7b9      	b.n	8008b8c <_printf_float+0x30c>
 8008c18:	ee18 3a10 	vmov	r3, s16
 8008c1c:	4652      	mov	r2, sl
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	d1be      	bne.n	8008ba6 <_printf_float+0x326>
 8008c28:	e689      	b.n	800893e <_printf_float+0xbe>
 8008c2a:	9a05      	ldr	r2, [sp, #20]
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	4442      	add	r2, r8
 8008c30:	4631      	mov	r1, r6
 8008c32:	4628      	mov	r0, r5
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	d1c1      	bne.n	8008bbe <_printf_float+0x33e>
 8008c3a:	e680      	b.n	800893e <_printf_float+0xbe>
 8008c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c3e:	2a01      	cmp	r2, #1
 8008c40:	dc01      	bgt.n	8008c46 <_printf_float+0x3c6>
 8008c42:	07db      	lsls	r3, r3, #31
 8008c44:	d53a      	bpl.n	8008cbc <_printf_float+0x43c>
 8008c46:	2301      	movs	r3, #1
 8008c48:	4642      	mov	r2, r8
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b8      	blx	r7
 8008c50:	3001      	adds	r0, #1
 8008c52:	f43f ae74 	beq.w	800893e <_printf_float+0xbe>
 8008c56:	ee18 3a10 	vmov	r3, s16
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4628      	mov	r0, r5
 8008c60:	47b8      	blx	r7
 8008c62:	3001      	adds	r0, #1
 8008c64:	f43f ae6b 	beq.w	800893e <_printf_float+0xbe>
 8008c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008c74:	f7f7 ff48 	bl	8000b08 <__aeabi_dcmpeq>
 8008c78:	b9d8      	cbnz	r0, 8008cb2 <_printf_float+0x432>
 8008c7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c7e:	f108 0201 	add.w	r2, r8, #1
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d10e      	bne.n	8008caa <_printf_float+0x42a>
 8008c8c:	e657      	b.n	800893e <_printf_float+0xbe>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	4652      	mov	r2, sl
 8008c92:	4631      	mov	r1, r6
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b8      	blx	r7
 8008c98:	3001      	adds	r0, #1
 8008c9a:	f43f ae50 	beq.w	800893e <_printf_float+0xbe>
 8008c9e:	f108 0801 	add.w	r8, r8, #1
 8008ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	4543      	cmp	r3, r8
 8008ca8:	dcf1      	bgt.n	8008c8e <_printf_float+0x40e>
 8008caa:	464b      	mov	r3, r9
 8008cac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cb0:	e6da      	b.n	8008a68 <_printf_float+0x1e8>
 8008cb2:	f04f 0800 	mov.w	r8, #0
 8008cb6:	f104 0a1a 	add.w	sl, r4, #26
 8008cba:	e7f2      	b.n	8008ca2 <_printf_float+0x422>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4642      	mov	r2, r8
 8008cc0:	e7df      	b.n	8008c82 <_printf_float+0x402>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	464a      	mov	r2, r9
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b8      	blx	r7
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f43f ae36 	beq.w	800893e <_printf_float+0xbe>
 8008cd2:	f108 0801 	add.w	r8, r8, #1
 8008cd6:	68e3      	ldr	r3, [r4, #12]
 8008cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cda:	1a5b      	subs	r3, r3, r1
 8008cdc:	4543      	cmp	r3, r8
 8008cde:	dcf0      	bgt.n	8008cc2 <_printf_float+0x442>
 8008ce0:	e6f8      	b.n	8008ad4 <_printf_float+0x254>
 8008ce2:	f04f 0800 	mov.w	r8, #0
 8008ce6:	f104 0919 	add.w	r9, r4, #25
 8008cea:	e7f4      	b.n	8008cd6 <_printf_float+0x456>

08008cec <_printf_common>:
 8008cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf0:	4616      	mov	r6, r2
 8008cf2:	4699      	mov	r9, r3
 8008cf4:	688a      	ldr	r2, [r1, #8]
 8008cf6:	690b      	ldr	r3, [r1, #16]
 8008cf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	bfb8      	it	lt
 8008d00:	4613      	movlt	r3, r2
 8008d02:	6033      	str	r3, [r6, #0]
 8008d04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d08:	4607      	mov	r7, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	b10a      	cbz	r2, 8008d12 <_printf_common+0x26>
 8008d0e:	3301      	adds	r3, #1
 8008d10:	6033      	str	r3, [r6, #0]
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	0699      	lsls	r1, r3, #26
 8008d16:	bf42      	ittt	mi
 8008d18:	6833      	ldrmi	r3, [r6, #0]
 8008d1a:	3302      	addmi	r3, #2
 8008d1c:	6033      	strmi	r3, [r6, #0]
 8008d1e:	6825      	ldr	r5, [r4, #0]
 8008d20:	f015 0506 	ands.w	r5, r5, #6
 8008d24:	d106      	bne.n	8008d34 <_printf_common+0x48>
 8008d26:	f104 0a19 	add.w	sl, r4, #25
 8008d2a:	68e3      	ldr	r3, [r4, #12]
 8008d2c:	6832      	ldr	r2, [r6, #0]
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	42ab      	cmp	r3, r5
 8008d32:	dc26      	bgt.n	8008d82 <_printf_common+0x96>
 8008d34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d38:	1e13      	subs	r3, r2, #0
 8008d3a:	6822      	ldr	r2, [r4, #0]
 8008d3c:	bf18      	it	ne
 8008d3e:	2301      	movne	r3, #1
 8008d40:	0692      	lsls	r2, r2, #26
 8008d42:	d42b      	bmi.n	8008d9c <_printf_common+0xb0>
 8008d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d48:	4649      	mov	r1, r9
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	47c0      	blx	r8
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d01e      	beq.n	8008d90 <_printf_common+0xa4>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	6922      	ldr	r2, [r4, #16]
 8008d56:	f003 0306 	and.w	r3, r3, #6
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	bf02      	ittt	eq
 8008d5e:	68e5      	ldreq	r5, [r4, #12]
 8008d60:	6833      	ldreq	r3, [r6, #0]
 8008d62:	1aed      	subeq	r5, r5, r3
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	bf0c      	ite	eq
 8008d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d6c:	2500      	movne	r5, #0
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	bfc4      	itt	gt
 8008d72:	1a9b      	subgt	r3, r3, r2
 8008d74:	18ed      	addgt	r5, r5, r3
 8008d76:	2600      	movs	r6, #0
 8008d78:	341a      	adds	r4, #26
 8008d7a:	42b5      	cmp	r5, r6
 8008d7c:	d11a      	bne.n	8008db4 <_printf_common+0xc8>
 8008d7e:	2000      	movs	r0, #0
 8008d80:	e008      	b.n	8008d94 <_printf_common+0xa8>
 8008d82:	2301      	movs	r3, #1
 8008d84:	4652      	mov	r2, sl
 8008d86:	4649      	mov	r1, r9
 8008d88:	4638      	mov	r0, r7
 8008d8a:	47c0      	blx	r8
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d103      	bne.n	8008d98 <_printf_common+0xac>
 8008d90:	f04f 30ff 	mov.w	r0, #4294967295
 8008d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d98:	3501      	adds	r5, #1
 8008d9a:	e7c6      	b.n	8008d2a <_printf_common+0x3e>
 8008d9c:	18e1      	adds	r1, r4, r3
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	2030      	movs	r0, #48	; 0x30
 8008da2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008da6:	4422      	add	r2, r4
 8008da8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008db0:	3302      	adds	r3, #2
 8008db2:	e7c7      	b.n	8008d44 <_printf_common+0x58>
 8008db4:	2301      	movs	r3, #1
 8008db6:	4622      	mov	r2, r4
 8008db8:	4649      	mov	r1, r9
 8008dba:	4638      	mov	r0, r7
 8008dbc:	47c0      	blx	r8
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d0e6      	beq.n	8008d90 <_printf_common+0xa4>
 8008dc2:	3601      	adds	r6, #1
 8008dc4:	e7d9      	b.n	8008d7a <_printf_common+0x8e>
	...

08008dc8 <_printf_i>:
 8008dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dcc:	7e0f      	ldrb	r7, [r1, #24]
 8008dce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd0:	2f78      	cmp	r7, #120	; 0x78
 8008dd2:	4691      	mov	r9, r2
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	469a      	mov	sl, r3
 8008dda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dde:	d807      	bhi.n	8008df0 <_printf_i+0x28>
 8008de0:	2f62      	cmp	r7, #98	; 0x62
 8008de2:	d80a      	bhi.n	8008dfa <_printf_i+0x32>
 8008de4:	2f00      	cmp	r7, #0
 8008de6:	f000 80d4 	beq.w	8008f92 <_printf_i+0x1ca>
 8008dea:	2f58      	cmp	r7, #88	; 0x58
 8008dec:	f000 80c0 	beq.w	8008f70 <_printf_i+0x1a8>
 8008df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008df8:	e03a      	b.n	8008e70 <_printf_i+0xa8>
 8008dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dfe:	2b15      	cmp	r3, #21
 8008e00:	d8f6      	bhi.n	8008df0 <_printf_i+0x28>
 8008e02:	a101      	add	r1, pc, #4	; (adr r1, 8008e08 <_printf_i+0x40>)
 8008e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e08:	08008e61 	.word	0x08008e61
 8008e0c:	08008e75 	.word	0x08008e75
 8008e10:	08008df1 	.word	0x08008df1
 8008e14:	08008df1 	.word	0x08008df1
 8008e18:	08008df1 	.word	0x08008df1
 8008e1c:	08008df1 	.word	0x08008df1
 8008e20:	08008e75 	.word	0x08008e75
 8008e24:	08008df1 	.word	0x08008df1
 8008e28:	08008df1 	.word	0x08008df1
 8008e2c:	08008df1 	.word	0x08008df1
 8008e30:	08008df1 	.word	0x08008df1
 8008e34:	08008f79 	.word	0x08008f79
 8008e38:	08008ea1 	.word	0x08008ea1
 8008e3c:	08008f33 	.word	0x08008f33
 8008e40:	08008df1 	.word	0x08008df1
 8008e44:	08008df1 	.word	0x08008df1
 8008e48:	08008f9b 	.word	0x08008f9b
 8008e4c:	08008df1 	.word	0x08008df1
 8008e50:	08008ea1 	.word	0x08008ea1
 8008e54:	08008df1 	.word	0x08008df1
 8008e58:	08008df1 	.word	0x08008df1
 8008e5c:	08008f3b 	.word	0x08008f3b
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	1d1a      	adds	r2, r3, #4
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	602a      	str	r2, [r5, #0]
 8008e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e70:	2301      	movs	r3, #1
 8008e72:	e09f      	b.n	8008fb4 <_printf_i+0x1ec>
 8008e74:	6820      	ldr	r0, [r4, #0]
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	0607      	lsls	r7, r0, #24
 8008e7a:	f103 0104 	add.w	r1, r3, #4
 8008e7e:	6029      	str	r1, [r5, #0]
 8008e80:	d501      	bpl.n	8008e86 <_printf_i+0xbe>
 8008e82:	681e      	ldr	r6, [r3, #0]
 8008e84:	e003      	b.n	8008e8e <_printf_i+0xc6>
 8008e86:	0646      	lsls	r6, r0, #25
 8008e88:	d5fb      	bpl.n	8008e82 <_printf_i+0xba>
 8008e8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	da03      	bge.n	8008e9a <_printf_i+0xd2>
 8008e92:	232d      	movs	r3, #45	; 0x2d
 8008e94:	4276      	negs	r6, r6
 8008e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e9a:	485a      	ldr	r0, [pc, #360]	; (8009004 <_printf_i+0x23c>)
 8008e9c:	230a      	movs	r3, #10
 8008e9e:	e012      	b.n	8008ec6 <_printf_i+0xfe>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	6820      	ldr	r0, [r4, #0]
 8008ea4:	1d19      	adds	r1, r3, #4
 8008ea6:	6029      	str	r1, [r5, #0]
 8008ea8:	0605      	lsls	r5, r0, #24
 8008eaa:	d501      	bpl.n	8008eb0 <_printf_i+0xe8>
 8008eac:	681e      	ldr	r6, [r3, #0]
 8008eae:	e002      	b.n	8008eb6 <_printf_i+0xee>
 8008eb0:	0641      	lsls	r1, r0, #25
 8008eb2:	d5fb      	bpl.n	8008eac <_printf_i+0xe4>
 8008eb4:	881e      	ldrh	r6, [r3, #0]
 8008eb6:	4853      	ldr	r0, [pc, #332]	; (8009004 <_printf_i+0x23c>)
 8008eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8008eba:	bf0c      	ite	eq
 8008ebc:	2308      	moveq	r3, #8
 8008ebe:	230a      	movne	r3, #10
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ec6:	6865      	ldr	r5, [r4, #4]
 8008ec8:	60a5      	str	r5, [r4, #8]
 8008eca:	2d00      	cmp	r5, #0
 8008ecc:	bfa2      	ittt	ge
 8008ece:	6821      	ldrge	r1, [r4, #0]
 8008ed0:	f021 0104 	bicge.w	r1, r1, #4
 8008ed4:	6021      	strge	r1, [r4, #0]
 8008ed6:	b90e      	cbnz	r6, 8008edc <_printf_i+0x114>
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	d04b      	beq.n	8008f74 <_printf_i+0x1ac>
 8008edc:	4615      	mov	r5, r2
 8008ede:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ee2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ee6:	5dc7      	ldrb	r7, [r0, r7]
 8008ee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008eec:	4637      	mov	r7, r6
 8008eee:	42bb      	cmp	r3, r7
 8008ef0:	460e      	mov	r6, r1
 8008ef2:	d9f4      	bls.n	8008ede <_printf_i+0x116>
 8008ef4:	2b08      	cmp	r3, #8
 8008ef6:	d10b      	bne.n	8008f10 <_printf_i+0x148>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	07de      	lsls	r6, r3, #31
 8008efc:	d508      	bpl.n	8008f10 <_printf_i+0x148>
 8008efe:	6923      	ldr	r3, [r4, #16]
 8008f00:	6861      	ldr	r1, [r4, #4]
 8008f02:	4299      	cmp	r1, r3
 8008f04:	bfde      	ittt	le
 8008f06:	2330      	movle	r3, #48	; 0x30
 8008f08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f10:	1b52      	subs	r2, r2, r5
 8008f12:	6122      	str	r2, [r4, #16]
 8008f14:	f8cd a000 	str.w	sl, [sp]
 8008f18:	464b      	mov	r3, r9
 8008f1a:	aa03      	add	r2, sp, #12
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4640      	mov	r0, r8
 8008f20:	f7ff fee4 	bl	8008cec <_printf_common>
 8008f24:	3001      	adds	r0, #1
 8008f26:	d14a      	bne.n	8008fbe <_printf_i+0x1f6>
 8008f28:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2c:	b004      	add	sp, #16
 8008f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	f043 0320 	orr.w	r3, r3, #32
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	4833      	ldr	r0, [pc, #204]	; (8009008 <_printf_i+0x240>)
 8008f3c:	2778      	movs	r7, #120	; 0x78
 8008f3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	6829      	ldr	r1, [r5, #0]
 8008f46:	061f      	lsls	r7, r3, #24
 8008f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f4c:	d402      	bmi.n	8008f54 <_printf_i+0x18c>
 8008f4e:	065f      	lsls	r7, r3, #25
 8008f50:	bf48      	it	mi
 8008f52:	b2b6      	uxthmi	r6, r6
 8008f54:	07df      	lsls	r7, r3, #31
 8008f56:	bf48      	it	mi
 8008f58:	f043 0320 	orrmi.w	r3, r3, #32
 8008f5c:	6029      	str	r1, [r5, #0]
 8008f5e:	bf48      	it	mi
 8008f60:	6023      	strmi	r3, [r4, #0]
 8008f62:	b91e      	cbnz	r6, 8008f6c <_printf_i+0x1a4>
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	f023 0320 	bic.w	r3, r3, #32
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	e7a7      	b.n	8008ec0 <_printf_i+0xf8>
 8008f70:	4824      	ldr	r0, [pc, #144]	; (8009004 <_printf_i+0x23c>)
 8008f72:	e7e4      	b.n	8008f3e <_printf_i+0x176>
 8008f74:	4615      	mov	r5, r2
 8008f76:	e7bd      	b.n	8008ef4 <_printf_i+0x12c>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	6826      	ldr	r6, [r4, #0]
 8008f7c:	6961      	ldr	r1, [r4, #20]
 8008f7e:	1d18      	adds	r0, r3, #4
 8008f80:	6028      	str	r0, [r5, #0]
 8008f82:	0635      	lsls	r5, r6, #24
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	d501      	bpl.n	8008f8c <_printf_i+0x1c4>
 8008f88:	6019      	str	r1, [r3, #0]
 8008f8a:	e002      	b.n	8008f92 <_printf_i+0x1ca>
 8008f8c:	0670      	lsls	r0, r6, #25
 8008f8e:	d5fb      	bpl.n	8008f88 <_printf_i+0x1c0>
 8008f90:	8019      	strh	r1, [r3, #0]
 8008f92:	2300      	movs	r3, #0
 8008f94:	6123      	str	r3, [r4, #16]
 8008f96:	4615      	mov	r5, r2
 8008f98:	e7bc      	b.n	8008f14 <_printf_i+0x14c>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	1d1a      	adds	r2, r3, #4
 8008f9e:	602a      	str	r2, [r5, #0]
 8008fa0:	681d      	ldr	r5, [r3, #0]
 8008fa2:	6862      	ldr	r2, [r4, #4]
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7f7 f932 	bl	8000210 <memchr>
 8008fac:	b108      	cbz	r0, 8008fb2 <_printf_i+0x1ea>
 8008fae:	1b40      	subs	r0, r0, r5
 8008fb0:	6060      	str	r0, [r4, #4]
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	6123      	str	r3, [r4, #16]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fbc:	e7aa      	b.n	8008f14 <_printf_i+0x14c>
 8008fbe:	6923      	ldr	r3, [r4, #16]
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	4649      	mov	r1, r9
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	47d0      	blx	sl
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d0ad      	beq.n	8008f28 <_printf_i+0x160>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	079b      	lsls	r3, r3, #30
 8008fd0:	d413      	bmi.n	8008ffa <_printf_i+0x232>
 8008fd2:	68e0      	ldr	r0, [r4, #12]
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	4298      	cmp	r0, r3
 8008fd8:	bfb8      	it	lt
 8008fda:	4618      	movlt	r0, r3
 8008fdc:	e7a6      	b.n	8008f2c <_printf_i+0x164>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	47d0      	blx	sl
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d09d      	beq.n	8008f28 <_printf_i+0x160>
 8008fec:	3501      	adds	r5, #1
 8008fee:	68e3      	ldr	r3, [r4, #12]
 8008ff0:	9903      	ldr	r1, [sp, #12]
 8008ff2:	1a5b      	subs	r3, r3, r1
 8008ff4:	42ab      	cmp	r3, r5
 8008ff6:	dcf2      	bgt.n	8008fde <_printf_i+0x216>
 8008ff8:	e7eb      	b.n	8008fd2 <_printf_i+0x20a>
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	f104 0619 	add.w	r6, r4, #25
 8009000:	e7f5      	b.n	8008fee <_printf_i+0x226>
 8009002:	bf00      	nop
 8009004:	0800dc3c 	.word	0x0800dc3c
 8009008:	0800dc4d 	.word	0x0800dc4d

0800900c <_scanf_float>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	b087      	sub	sp, #28
 8009012:	4617      	mov	r7, r2
 8009014:	9303      	str	r3, [sp, #12]
 8009016:	688b      	ldr	r3, [r1, #8]
 8009018:	1e5a      	subs	r2, r3, #1
 800901a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800901e:	bf83      	ittte	hi
 8009020:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009024:	195b      	addhi	r3, r3, r5
 8009026:	9302      	strhi	r3, [sp, #8]
 8009028:	2300      	movls	r3, #0
 800902a:	bf86      	itte	hi
 800902c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009030:	608b      	strhi	r3, [r1, #8]
 8009032:	9302      	strls	r3, [sp, #8]
 8009034:	680b      	ldr	r3, [r1, #0]
 8009036:	468b      	mov	fp, r1
 8009038:	2500      	movs	r5, #0
 800903a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800903e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009042:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009046:	4680      	mov	r8, r0
 8009048:	460c      	mov	r4, r1
 800904a:	465e      	mov	r6, fp
 800904c:	46aa      	mov	sl, r5
 800904e:	46a9      	mov	r9, r5
 8009050:	9501      	str	r5, [sp, #4]
 8009052:	68a2      	ldr	r2, [r4, #8]
 8009054:	b152      	cbz	r2, 800906c <_scanf_float+0x60>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b4e      	cmp	r3, #78	; 0x4e
 800905c:	d864      	bhi.n	8009128 <_scanf_float+0x11c>
 800905e:	2b40      	cmp	r3, #64	; 0x40
 8009060:	d83c      	bhi.n	80090dc <_scanf_float+0xd0>
 8009062:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009066:	b2c8      	uxtb	r0, r1
 8009068:	280e      	cmp	r0, #14
 800906a:	d93a      	bls.n	80090e2 <_scanf_float+0xd6>
 800906c:	f1b9 0f00 	cmp.w	r9, #0
 8009070:	d003      	beq.n	800907a <_scanf_float+0x6e>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800907e:	f1ba 0f01 	cmp.w	sl, #1
 8009082:	f200 8113 	bhi.w	80092ac <_scanf_float+0x2a0>
 8009086:	455e      	cmp	r6, fp
 8009088:	f200 8105 	bhi.w	8009296 <_scanf_float+0x28a>
 800908c:	2501      	movs	r5, #1
 800908e:	4628      	mov	r0, r5
 8009090:	b007      	add	sp, #28
 8009092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009096:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800909a:	2a0d      	cmp	r2, #13
 800909c:	d8e6      	bhi.n	800906c <_scanf_float+0x60>
 800909e:	a101      	add	r1, pc, #4	; (adr r1, 80090a4 <_scanf_float+0x98>)
 80090a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090a4:	080091e3 	.word	0x080091e3
 80090a8:	0800906d 	.word	0x0800906d
 80090ac:	0800906d 	.word	0x0800906d
 80090b0:	0800906d 	.word	0x0800906d
 80090b4:	08009243 	.word	0x08009243
 80090b8:	0800921b 	.word	0x0800921b
 80090bc:	0800906d 	.word	0x0800906d
 80090c0:	0800906d 	.word	0x0800906d
 80090c4:	080091f1 	.word	0x080091f1
 80090c8:	0800906d 	.word	0x0800906d
 80090cc:	0800906d 	.word	0x0800906d
 80090d0:	0800906d 	.word	0x0800906d
 80090d4:	0800906d 	.word	0x0800906d
 80090d8:	080091a9 	.word	0x080091a9
 80090dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80090e0:	e7db      	b.n	800909a <_scanf_float+0x8e>
 80090e2:	290e      	cmp	r1, #14
 80090e4:	d8c2      	bhi.n	800906c <_scanf_float+0x60>
 80090e6:	a001      	add	r0, pc, #4	; (adr r0, 80090ec <_scanf_float+0xe0>)
 80090e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80090ec:	0800919b 	.word	0x0800919b
 80090f0:	0800906d 	.word	0x0800906d
 80090f4:	0800919b 	.word	0x0800919b
 80090f8:	0800922f 	.word	0x0800922f
 80090fc:	0800906d 	.word	0x0800906d
 8009100:	08009149 	.word	0x08009149
 8009104:	08009185 	.word	0x08009185
 8009108:	08009185 	.word	0x08009185
 800910c:	08009185 	.word	0x08009185
 8009110:	08009185 	.word	0x08009185
 8009114:	08009185 	.word	0x08009185
 8009118:	08009185 	.word	0x08009185
 800911c:	08009185 	.word	0x08009185
 8009120:	08009185 	.word	0x08009185
 8009124:	08009185 	.word	0x08009185
 8009128:	2b6e      	cmp	r3, #110	; 0x6e
 800912a:	d809      	bhi.n	8009140 <_scanf_float+0x134>
 800912c:	2b60      	cmp	r3, #96	; 0x60
 800912e:	d8b2      	bhi.n	8009096 <_scanf_float+0x8a>
 8009130:	2b54      	cmp	r3, #84	; 0x54
 8009132:	d077      	beq.n	8009224 <_scanf_float+0x218>
 8009134:	2b59      	cmp	r3, #89	; 0x59
 8009136:	d199      	bne.n	800906c <_scanf_float+0x60>
 8009138:	2d07      	cmp	r5, #7
 800913a:	d197      	bne.n	800906c <_scanf_float+0x60>
 800913c:	2508      	movs	r5, #8
 800913e:	e029      	b.n	8009194 <_scanf_float+0x188>
 8009140:	2b74      	cmp	r3, #116	; 0x74
 8009142:	d06f      	beq.n	8009224 <_scanf_float+0x218>
 8009144:	2b79      	cmp	r3, #121	; 0x79
 8009146:	e7f6      	b.n	8009136 <_scanf_float+0x12a>
 8009148:	6821      	ldr	r1, [r4, #0]
 800914a:	05c8      	lsls	r0, r1, #23
 800914c:	d51a      	bpl.n	8009184 <_scanf_float+0x178>
 800914e:	9b02      	ldr	r3, [sp, #8]
 8009150:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009154:	6021      	str	r1, [r4, #0]
 8009156:	f109 0901 	add.w	r9, r9, #1
 800915a:	b11b      	cbz	r3, 8009164 <_scanf_float+0x158>
 800915c:	3b01      	subs	r3, #1
 800915e:	3201      	adds	r2, #1
 8009160:	9302      	str	r3, [sp, #8]
 8009162:	60a2      	str	r2, [r4, #8]
 8009164:	68a3      	ldr	r3, [r4, #8]
 8009166:	3b01      	subs	r3, #1
 8009168:	60a3      	str	r3, [r4, #8]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	3301      	adds	r3, #1
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3b01      	subs	r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	607b      	str	r3, [r7, #4]
 8009178:	f340 8084 	ble.w	8009284 <_scanf_float+0x278>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	3301      	adds	r3, #1
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	e766      	b.n	8009052 <_scanf_float+0x46>
 8009184:	eb1a 0f05 	cmn.w	sl, r5
 8009188:	f47f af70 	bne.w	800906c <_scanf_float+0x60>
 800918c:	6822      	ldr	r2, [r4, #0]
 800918e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009192:	6022      	str	r2, [r4, #0]
 8009194:	f806 3b01 	strb.w	r3, [r6], #1
 8009198:	e7e4      	b.n	8009164 <_scanf_float+0x158>
 800919a:	6822      	ldr	r2, [r4, #0]
 800919c:	0610      	lsls	r0, r2, #24
 800919e:	f57f af65 	bpl.w	800906c <_scanf_float+0x60>
 80091a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091a6:	e7f4      	b.n	8009192 <_scanf_float+0x186>
 80091a8:	f1ba 0f00 	cmp.w	sl, #0
 80091ac:	d10e      	bne.n	80091cc <_scanf_float+0x1c0>
 80091ae:	f1b9 0f00 	cmp.w	r9, #0
 80091b2:	d10e      	bne.n	80091d2 <_scanf_float+0x1c6>
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80091ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80091be:	d108      	bne.n	80091d2 <_scanf_float+0x1c6>
 80091c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091c4:	6022      	str	r2, [r4, #0]
 80091c6:	f04f 0a01 	mov.w	sl, #1
 80091ca:	e7e3      	b.n	8009194 <_scanf_float+0x188>
 80091cc:	f1ba 0f02 	cmp.w	sl, #2
 80091d0:	d055      	beq.n	800927e <_scanf_float+0x272>
 80091d2:	2d01      	cmp	r5, #1
 80091d4:	d002      	beq.n	80091dc <_scanf_float+0x1d0>
 80091d6:	2d04      	cmp	r5, #4
 80091d8:	f47f af48 	bne.w	800906c <_scanf_float+0x60>
 80091dc:	3501      	adds	r5, #1
 80091de:	b2ed      	uxtb	r5, r5
 80091e0:	e7d8      	b.n	8009194 <_scanf_float+0x188>
 80091e2:	f1ba 0f01 	cmp.w	sl, #1
 80091e6:	f47f af41 	bne.w	800906c <_scanf_float+0x60>
 80091ea:	f04f 0a02 	mov.w	sl, #2
 80091ee:	e7d1      	b.n	8009194 <_scanf_float+0x188>
 80091f0:	b97d      	cbnz	r5, 8009212 <_scanf_float+0x206>
 80091f2:	f1b9 0f00 	cmp.w	r9, #0
 80091f6:	f47f af3c 	bne.w	8009072 <_scanf_float+0x66>
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009200:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009204:	f47f af39 	bne.w	800907a <_scanf_float+0x6e>
 8009208:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800920c:	6022      	str	r2, [r4, #0]
 800920e:	2501      	movs	r5, #1
 8009210:	e7c0      	b.n	8009194 <_scanf_float+0x188>
 8009212:	2d03      	cmp	r5, #3
 8009214:	d0e2      	beq.n	80091dc <_scanf_float+0x1d0>
 8009216:	2d05      	cmp	r5, #5
 8009218:	e7de      	b.n	80091d8 <_scanf_float+0x1cc>
 800921a:	2d02      	cmp	r5, #2
 800921c:	f47f af26 	bne.w	800906c <_scanf_float+0x60>
 8009220:	2503      	movs	r5, #3
 8009222:	e7b7      	b.n	8009194 <_scanf_float+0x188>
 8009224:	2d06      	cmp	r5, #6
 8009226:	f47f af21 	bne.w	800906c <_scanf_float+0x60>
 800922a:	2507      	movs	r5, #7
 800922c:	e7b2      	b.n	8009194 <_scanf_float+0x188>
 800922e:	6822      	ldr	r2, [r4, #0]
 8009230:	0591      	lsls	r1, r2, #22
 8009232:	f57f af1b 	bpl.w	800906c <_scanf_float+0x60>
 8009236:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800923a:	6022      	str	r2, [r4, #0]
 800923c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009240:	e7a8      	b.n	8009194 <_scanf_float+0x188>
 8009242:	6822      	ldr	r2, [r4, #0]
 8009244:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009248:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800924c:	d006      	beq.n	800925c <_scanf_float+0x250>
 800924e:	0550      	lsls	r0, r2, #21
 8009250:	f57f af0c 	bpl.w	800906c <_scanf_float+0x60>
 8009254:	f1b9 0f00 	cmp.w	r9, #0
 8009258:	f43f af0f 	beq.w	800907a <_scanf_float+0x6e>
 800925c:	0591      	lsls	r1, r2, #22
 800925e:	bf58      	it	pl
 8009260:	9901      	ldrpl	r1, [sp, #4]
 8009262:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009266:	bf58      	it	pl
 8009268:	eba9 0101 	subpl.w	r1, r9, r1
 800926c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009270:	bf58      	it	pl
 8009272:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009276:	6022      	str	r2, [r4, #0]
 8009278:	f04f 0900 	mov.w	r9, #0
 800927c:	e78a      	b.n	8009194 <_scanf_float+0x188>
 800927e:	f04f 0a03 	mov.w	sl, #3
 8009282:	e787      	b.n	8009194 <_scanf_float+0x188>
 8009284:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009288:	4639      	mov	r1, r7
 800928a:	4640      	mov	r0, r8
 800928c:	4798      	blx	r3
 800928e:	2800      	cmp	r0, #0
 8009290:	f43f aedf 	beq.w	8009052 <_scanf_float+0x46>
 8009294:	e6ea      	b.n	800906c <_scanf_float+0x60>
 8009296:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800929a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800929e:	463a      	mov	r2, r7
 80092a0:	4640      	mov	r0, r8
 80092a2:	4798      	blx	r3
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	6123      	str	r3, [r4, #16]
 80092aa:	e6ec      	b.n	8009086 <_scanf_float+0x7a>
 80092ac:	1e6b      	subs	r3, r5, #1
 80092ae:	2b06      	cmp	r3, #6
 80092b0:	d825      	bhi.n	80092fe <_scanf_float+0x2f2>
 80092b2:	2d02      	cmp	r5, #2
 80092b4:	d836      	bhi.n	8009324 <_scanf_float+0x318>
 80092b6:	455e      	cmp	r6, fp
 80092b8:	f67f aee8 	bls.w	800908c <_scanf_float+0x80>
 80092bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092c4:	463a      	mov	r2, r7
 80092c6:	4640      	mov	r0, r8
 80092c8:	4798      	blx	r3
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	e7f1      	b.n	80092b6 <_scanf_float+0x2aa>
 80092d2:	9802      	ldr	r0, [sp, #8]
 80092d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80092dc:	9002      	str	r0, [sp, #8]
 80092de:	463a      	mov	r2, r7
 80092e0:	4640      	mov	r0, r8
 80092e2:	4798      	blx	r3
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	6123      	str	r3, [r4, #16]
 80092ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092ee:	fa5f fa8a 	uxtb.w	sl, sl
 80092f2:	f1ba 0f02 	cmp.w	sl, #2
 80092f6:	d1ec      	bne.n	80092d2 <_scanf_float+0x2c6>
 80092f8:	3d03      	subs	r5, #3
 80092fa:	b2ed      	uxtb	r5, r5
 80092fc:	1b76      	subs	r6, r6, r5
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	05da      	lsls	r2, r3, #23
 8009302:	d52f      	bpl.n	8009364 <_scanf_float+0x358>
 8009304:	055b      	lsls	r3, r3, #21
 8009306:	d510      	bpl.n	800932a <_scanf_float+0x31e>
 8009308:	455e      	cmp	r6, fp
 800930a:	f67f aebf 	bls.w	800908c <_scanf_float+0x80>
 800930e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009312:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009316:	463a      	mov	r2, r7
 8009318:	4640      	mov	r0, r8
 800931a:	4798      	blx	r3
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	3b01      	subs	r3, #1
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	e7f1      	b.n	8009308 <_scanf_float+0x2fc>
 8009324:	46aa      	mov	sl, r5
 8009326:	9602      	str	r6, [sp, #8]
 8009328:	e7df      	b.n	80092ea <_scanf_float+0x2de>
 800932a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	2965      	cmp	r1, #101	; 0x65
 8009332:	f103 33ff 	add.w	r3, r3, #4294967295
 8009336:	f106 35ff 	add.w	r5, r6, #4294967295
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	d00c      	beq.n	8009358 <_scanf_float+0x34c>
 800933e:	2945      	cmp	r1, #69	; 0x45
 8009340:	d00a      	beq.n	8009358 <_scanf_float+0x34c>
 8009342:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009346:	463a      	mov	r2, r7
 8009348:	4640      	mov	r0, r8
 800934a:	4798      	blx	r3
 800934c:	6923      	ldr	r3, [r4, #16]
 800934e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009352:	3b01      	subs	r3, #1
 8009354:	1eb5      	subs	r5, r6, #2
 8009356:	6123      	str	r3, [r4, #16]
 8009358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800935c:	463a      	mov	r2, r7
 800935e:	4640      	mov	r0, r8
 8009360:	4798      	blx	r3
 8009362:	462e      	mov	r6, r5
 8009364:	6825      	ldr	r5, [r4, #0]
 8009366:	f015 0510 	ands.w	r5, r5, #16
 800936a:	d158      	bne.n	800941e <_scanf_float+0x412>
 800936c:	7035      	strb	r5, [r6, #0]
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009378:	d11c      	bne.n	80093b4 <_scanf_float+0x3a8>
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	454b      	cmp	r3, r9
 800937e:	eba3 0209 	sub.w	r2, r3, r9
 8009382:	d124      	bne.n	80093ce <_scanf_float+0x3c2>
 8009384:	2200      	movs	r2, #0
 8009386:	4659      	mov	r1, fp
 8009388:	4640      	mov	r0, r8
 800938a:	f002 fd71 	bl	800be70 <_strtod_r>
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	6821      	ldr	r1, [r4, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f011 0f02 	tst.w	r1, #2
 8009398:	ec57 6b10 	vmov	r6, r7, d0
 800939c:	f103 0204 	add.w	r2, r3, #4
 80093a0:	d020      	beq.n	80093e4 <_scanf_float+0x3d8>
 80093a2:	9903      	ldr	r1, [sp, #12]
 80093a4:	600a      	str	r2, [r1, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	e9c3 6700 	strd	r6, r7, [r3]
 80093ac:	68e3      	ldr	r3, [r4, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60e3      	str	r3, [r4, #12]
 80093b2:	e66c      	b.n	800908e <_scanf_float+0x82>
 80093b4:	9b04      	ldr	r3, [sp, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0e4      	beq.n	8009384 <_scanf_float+0x378>
 80093ba:	9905      	ldr	r1, [sp, #20]
 80093bc:	230a      	movs	r3, #10
 80093be:	462a      	mov	r2, r5
 80093c0:	3101      	adds	r1, #1
 80093c2:	4640      	mov	r0, r8
 80093c4:	f002 fddc 	bl	800bf80 <_strtol_r>
 80093c8:	9b04      	ldr	r3, [sp, #16]
 80093ca:	9e05      	ldr	r6, [sp, #20]
 80093cc:	1ac2      	subs	r2, r0, r3
 80093ce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80093d2:	429e      	cmp	r6, r3
 80093d4:	bf28      	it	cs
 80093d6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80093da:	4912      	ldr	r1, [pc, #72]	; (8009424 <_scanf_float+0x418>)
 80093dc:	4630      	mov	r0, r6
 80093de:	f000 f943 	bl	8009668 <siprintf>
 80093e2:	e7cf      	b.n	8009384 <_scanf_float+0x378>
 80093e4:	f011 0f04 	tst.w	r1, #4
 80093e8:	9903      	ldr	r1, [sp, #12]
 80093ea:	600a      	str	r2, [r1, #0]
 80093ec:	d1db      	bne.n	80093a6 <_scanf_float+0x39a>
 80093ee:	f8d3 8000 	ldr.w	r8, [r3]
 80093f2:	ee10 2a10 	vmov	r2, s0
 80093f6:	ee10 0a10 	vmov	r0, s0
 80093fa:	463b      	mov	r3, r7
 80093fc:	4639      	mov	r1, r7
 80093fe:	f7f7 fbb5 	bl	8000b6c <__aeabi_dcmpun>
 8009402:	b128      	cbz	r0, 8009410 <_scanf_float+0x404>
 8009404:	4808      	ldr	r0, [pc, #32]	; (8009428 <_scanf_float+0x41c>)
 8009406:	f000 faf7 	bl	80099f8 <nanf>
 800940a:	ed88 0a00 	vstr	s0, [r8]
 800940e:	e7cd      	b.n	80093ac <_scanf_float+0x3a0>
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f7 fc08 	bl	8000c28 <__aeabi_d2f>
 8009418:	f8c8 0000 	str.w	r0, [r8]
 800941c:	e7c6      	b.n	80093ac <_scanf_float+0x3a0>
 800941e:	2500      	movs	r5, #0
 8009420:	e635      	b.n	800908e <_scanf_float+0x82>
 8009422:	bf00      	nop
 8009424:	0800dc5e 	.word	0x0800dc5e
 8009428:	0800e010 	.word	0x0800e010

0800942c <std>:
 800942c:	2300      	movs	r3, #0
 800942e:	b510      	push	{r4, lr}
 8009430:	4604      	mov	r4, r0
 8009432:	e9c0 3300 	strd	r3, r3, [r0]
 8009436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800943a:	6083      	str	r3, [r0, #8]
 800943c:	8181      	strh	r1, [r0, #12]
 800943e:	6643      	str	r3, [r0, #100]	; 0x64
 8009440:	81c2      	strh	r2, [r0, #14]
 8009442:	6183      	str	r3, [r0, #24]
 8009444:	4619      	mov	r1, r3
 8009446:	2208      	movs	r2, #8
 8009448:	305c      	adds	r0, #92	; 0x5c
 800944a:	f000 fa33 	bl	80098b4 <memset>
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <std+0x38>)
 8009450:	6263      	str	r3, [r4, #36]	; 0x24
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <std+0x3c>)
 8009454:	62a3      	str	r3, [r4, #40]	; 0x28
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <std+0x40>)
 8009458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <std+0x44>)
 800945c:	6224      	str	r4, [r4, #32]
 800945e:	6323      	str	r3, [r4, #48]	; 0x30
 8009460:	bd10      	pop	{r4, pc}
 8009462:	bf00      	nop
 8009464:	08009701 	.word	0x08009701
 8009468:	08009727 	.word	0x08009727
 800946c:	0800975f 	.word	0x0800975f
 8009470:	08009783 	.word	0x08009783

08009474 <stdio_exit_handler>:
 8009474:	4a02      	ldr	r2, [pc, #8]	; (8009480 <stdio_exit_handler+0xc>)
 8009476:	4903      	ldr	r1, [pc, #12]	; (8009484 <stdio_exit_handler+0x10>)
 8009478:	4803      	ldr	r0, [pc, #12]	; (8009488 <stdio_exit_handler+0x14>)
 800947a:	f000 b869 	b.w	8009550 <_fwalk_sglue>
 800947e:	bf00      	nop
 8009480:	20000054 	.word	0x20000054
 8009484:	0800cc09 	.word	0x0800cc09
 8009488:	20000060 	.word	0x20000060

0800948c <cleanup_stdio>:
 800948c:	6841      	ldr	r1, [r0, #4]
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <cleanup_stdio+0x34>)
 8009490:	4299      	cmp	r1, r3
 8009492:	b510      	push	{r4, lr}
 8009494:	4604      	mov	r4, r0
 8009496:	d001      	beq.n	800949c <cleanup_stdio+0x10>
 8009498:	f003 fbb6 	bl	800cc08 <_fflush_r>
 800949c:	68a1      	ldr	r1, [r4, #8]
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <cleanup_stdio+0x38>)
 80094a0:	4299      	cmp	r1, r3
 80094a2:	d002      	beq.n	80094aa <cleanup_stdio+0x1e>
 80094a4:	4620      	mov	r0, r4
 80094a6:	f003 fbaf 	bl	800cc08 <_fflush_r>
 80094aa:	68e1      	ldr	r1, [r4, #12]
 80094ac:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <cleanup_stdio+0x3c>)
 80094ae:	4299      	cmp	r1, r3
 80094b0:	d004      	beq.n	80094bc <cleanup_stdio+0x30>
 80094b2:	4620      	mov	r0, r4
 80094b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b8:	f003 bba6 	b.w	800cc08 <_fflush_r>
 80094bc:	bd10      	pop	{r4, pc}
 80094be:	bf00      	nop
 80094c0:	20005868 	.word	0x20005868
 80094c4:	200058d0 	.word	0x200058d0
 80094c8:	20005938 	.word	0x20005938

080094cc <global_stdio_init.part.0>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <global_stdio_init.part.0+0x30>)
 80094d0:	4c0b      	ldr	r4, [pc, #44]	; (8009500 <global_stdio_init.part.0+0x34>)
 80094d2:	4a0c      	ldr	r2, [pc, #48]	; (8009504 <global_stdio_init.part.0+0x38>)
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	4620      	mov	r0, r4
 80094d8:	2200      	movs	r2, #0
 80094da:	2104      	movs	r1, #4
 80094dc:	f7ff ffa6 	bl	800942c <std>
 80094e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80094e4:	2201      	movs	r2, #1
 80094e6:	2109      	movs	r1, #9
 80094e8:	f7ff ffa0 	bl	800942c <std>
 80094ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80094f0:	2202      	movs	r2, #2
 80094f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f6:	2112      	movs	r1, #18
 80094f8:	f7ff bf98 	b.w	800942c <std>
 80094fc:	200059a0 	.word	0x200059a0
 8009500:	20005868 	.word	0x20005868
 8009504:	08009475 	.word	0x08009475

08009508 <__sfp_lock_acquire>:
 8009508:	4801      	ldr	r0, [pc, #4]	; (8009510 <__sfp_lock_acquire+0x8>)
 800950a:	f000 ba65 	b.w	80099d8 <__retarget_lock_acquire_recursive>
 800950e:	bf00      	nop
 8009510:	200059a9 	.word	0x200059a9

08009514 <__sfp_lock_release>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__sfp_lock_release+0x8>)
 8009516:	f000 ba60 	b.w	80099da <__retarget_lock_release_recursive>
 800951a:	bf00      	nop
 800951c:	200059a9 	.word	0x200059a9

08009520 <__sinit>:
 8009520:	b510      	push	{r4, lr}
 8009522:	4604      	mov	r4, r0
 8009524:	f7ff fff0 	bl	8009508 <__sfp_lock_acquire>
 8009528:	6a23      	ldr	r3, [r4, #32]
 800952a:	b11b      	cbz	r3, 8009534 <__sinit+0x14>
 800952c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009530:	f7ff bff0 	b.w	8009514 <__sfp_lock_release>
 8009534:	4b04      	ldr	r3, [pc, #16]	; (8009548 <__sinit+0x28>)
 8009536:	6223      	str	r3, [r4, #32]
 8009538:	4b04      	ldr	r3, [pc, #16]	; (800954c <__sinit+0x2c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1f5      	bne.n	800952c <__sinit+0xc>
 8009540:	f7ff ffc4 	bl	80094cc <global_stdio_init.part.0>
 8009544:	e7f2      	b.n	800952c <__sinit+0xc>
 8009546:	bf00      	nop
 8009548:	0800948d 	.word	0x0800948d
 800954c:	200059a0 	.word	0x200059a0

08009550 <_fwalk_sglue>:
 8009550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009554:	4607      	mov	r7, r0
 8009556:	4688      	mov	r8, r1
 8009558:	4614      	mov	r4, r2
 800955a:	2600      	movs	r6, #0
 800955c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009560:	f1b9 0901 	subs.w	r9, r9, #1
 8009564:	d505      	bpl.n	8009572 <_fwalk_sglue+0x22>
 8009566:	6824      	ldr	r4, [r4, #0]
 8009568:	2c00      	cmp	r4, #0
 800956a:	d1f7      	bne.n	800955c <_fwalk_sglue+0xc>
 800956c:	4630      	mov	r0, r6
 800956e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009572:	89ab      	ldrh	r3, [r5, #12]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d907      	bls.n	8009588 <_fwalk_sglue+0x38>
 8009578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800957c:	3301      	adds	r3, #1
 800957e:	d003      	beq.n	8009588 <_fwalk_sglue+0x38>
 8009580:	4629      	mov	r1, r5
 8009582:	4638      	mov	r0, r7
 8009584:	47c0      	blx	r8
 8009586:	4306      	orrs	r6, r0
 8009588:	3568      	adds	r5, #104	; 0x68
 800958a:	e7e9      	b.n	8009560 <_fwalk_sglue+0x10>

0800958c <iprintf>:
 800958c:	b40f      	push	{r0, r1, r2, r3}
 800958e:	b507      	push	{r0, r1, r2, lr}
 8009590:	4906      	ldr	r1, [pc, #24]	; (80095ac <iprintf+0x20>)
 8009592:	ab04      	add	r3, sp, #16
 8009594:	6808      	ldr	r0, [r1, #0]
 8009596:	f853 2b04 	ldr.w	r2, [r3], #4
 800959a:	6881      	ldr	r1, [r0, #8]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	f003 f845 	bl	800c62c <_vfiprintf_r>
 80095a2:	b003      	add	sp, #12
 80095a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a8:	b004      	add	sp, #16
 80095aa:	4770      	bx	lr
 80095ac:	200000ac 	.word	0x200000ac

080095b0 <_puts_r>:
 80095b0:	6a03      	ldr	r3, [r0, #32]
 80095b2:	b570      	push	{r4, r5, r6, lr}
 80095b4:	6884      	ldr	r4, [r0, #8]
 80095b6:	4605      	mov	r5, r0
 80095b8:	460e      	mov	r6, r1
 80095ba:	b90b      	cbnz	r3, 80095c0 <_puts_r+0x10>
 80095bc:	f7ff ffb0 	bl	8009520 <__sinit>
 80095c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095c2:	07db      	lsls	r3, r3, #31
 80095c4:	d405      	bmi.n	80095d2 <_puts_r+0x22>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	0598      	lsls	r0, r3, #22
 80095ca:	d402      	bmi.n	80095d2 <_puts_r+0x22>
 80095cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ce:	f000 fa03 	bl	80099d8 <__retarget_lock_acquire_recursive>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	0719      	lsls	r1, r3, #28
 80095d6:	d513      	bpl.n	8009600 <_puts_r+0x50>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	b18b      	cbz	r3, 8009600 <_puts_r+0x50>
 80095dc:	3e01      	subs	r6, #1
 80095de:	68a3      	ldr	r3, [r4, #8]
 80095e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095e4:	3b01      	subs	r3, #1
 80095e6:	60a3      	str	r3, [r4, #8]
 80095e8:	b9e9      	cbnz	r1, 8009626 <_puts_r+0x76>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	da2e      	bge.n	800964c <_puts_r+0x9c>
 80095ee:	4622      	mov	r2, r4
 80095f0:	210a      	movs	r1, #10
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f8c9 	bl	800978a <__swbuf_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	d007      	beq.n	800960c <_puts_r+0x5c>
 80095fc:	250a      	movs	r5, #10
 80095fe:	e007      	b.n	8009610 <_puts_r+0x60>
 8009600:	4621      	mov	r1, r4
 8009602:	4628      	mov	r0, r5
 8009604:	f000 f8fe 	bl	8009804 <__swsetup_r>
 8009608:	2800      	cmp	r0, #0
 800960a:	d0e7      	beq.n	80095dc <_puts_r+0x2c>
 800960c:	f04f 35ff 	mov.w	r5, #4294967295
 8009610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009612:	07da      	lsls	r2, r3, #31
 8009614:	d405      	bmi.n	8009622 <_puts_r+0x72>
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	059b      	lsls	r3, r3, #22
 800961a:	d402      	bmi.n	8009622 <_puts_r+0x72>
 800961c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800961e:	f000 f9dc 	bl	80099da <__retarget_lock_release_recursive>
 8009622:	4628      	mov	r0, r5
 8009624:	bd70      	pop	{r4, r5, r6, pc}
 8009626:	2b00      	cmp	r3, #0
 8009628:	da04      	bge.n	8009634 <_puts_r+0x84>
 800962a:	69a2      	ldr	r2, [r4, #24]
 800962c:	429a      	cmp	r2, r3
 800962e:	dc06      	bgt.n	800963e <_puts_r+0x8e>
 8009630:	290a      	cmp	r1, #10
 8009632:	d004      	beq.n	800963e <_puts_r+0x8e>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	6022      	str	r2, [r4, #0]
 800963a:	7019      	strb	r1, [r3, #0]
 800963c:	e7cf      	b.n	80095de <_puts_r+0x2e>
 800963e:	4622      	mov	r2, r4
 8009640:	4628      	mov	r0, r5
 8009642:	f000 f8a2 	bl	800978a <__swbuf_r>
 8009646:	3001      	adds	r0, #1
 8009648:	d1c9      	bne.n	80095de <_puts_r+0x2e>
 800964a:	e7df      	b.n	800960c <_puts_r+0x5c>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	250a      	movs	r5, #10
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	6022      	str	r2, [r4, #0]
 8009654:	701d      	strb	r5, [r3, #0]
 8009656:	e7db      	b.n	8009610 <_puts_r+0x60>

08009658 <puts>:
 8009658:	4b02      	ldr	r3, [pc, #8]	; (8009664 <puts+0xc>)
 800965a:	4601      	mov	r1, r0
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	f7ff bfa7 	b.w	80095b0 <_puts_r>
 8009662:	bf00      	nop
 8009664:	200000ac 	.word	0x200000ac

08009668 <siprintf>:
 8009668:	b40e      	push	{r1, r2, r3}
 800966a:	b500      	push	{lr}
 800966c:	b09c      	sub	sp, #112	; 0x70
 800966e:	ab1d      	add	r3, sp, #116	; 0x74
 8009670:	9002      	str	r0, [sp, #8]
 8009672:	9006      	str	r0, [sp, #24]
 8009674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009678:	4809      	ldr	r0, [pc, #36]	; (80096a0 <siprintf+0x38>)
 800967a:	9107      	str	r1, [sp, #28]
 800967c:	9104      	str	r1, [sp, #16]
 800967e:	4909      	ldr	r1, [pc, #36]	; (80096a4 <siprintf+0x3c>)
 8009680:	f853 2b04 	ldr.w	r2, [r3], #4
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	6800      	ldr	r0, [r0, #0]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	a902      	add	r1, sp, #8
 800968c:	f002 fcd4 	bl	800c038 <_svfiprintf_r>
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	b01c      	add	sp, #112	; 0x70
 8009698:	f85d eb04 	ldr.w	lr, [sp], #4
 800969c:	b003      	add	sp, #12
 800969e:	4770      	bx	lr
 80096a0:	200000ac 	.word	0x200000ac
 80096a4:	ffff0208 	.word	0xffff0208

080096a8 <siscanf>:
 80096a8:	b40e      	push	{r1, r2, r3}
 80096aa:	b510      	push	{r4, lr}
 80096ac:	b09f      	sub	sp, #124	; 0x7c
 80096ae:	ac21      	add	r4, sp, #132	; 0x84
 80096b0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80096b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80096b8:	9201      	str	r2, [sp, #4]
 80096ba:	f8ad 101c 	strh.w	r1, [sp, #28]
 80096be:	9004      	str	r0, [sp, #16]
 80096c0:	9008      	str	r0, [sp, #32]
 80096c2:	f7f6 fdf5 	bl	80002b0 <strlen>
 80096c6:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <siscanf+0x50>)
 80096c8:	9005      	str	r0, [sp, #20]
 80096ca:	9009      	str	r0, [sp, #36]	; 0x24
 80096cc:	930d      	str	r3, [sp, #52]	; 0x34
 80096ce:	480b      	ldr	r0, [pc, #44]	; (80096fc <siscanf+0x54>)
 80096d0:	9a01      	ldr	r2, [sp, #4]
 80096d2:	6800      	ldr	r0, [r0, #0]
 80096d4:	9403      	str	r4, [sp, #12]
 80096d6:	2300      	movs	r3, #0
 80096d8:	9311      	str	r3, [sp, #68]	; 0x44
 80096da:	9316      	str	r3, [sp, #88]	; 0x58
 80096dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80096e4:	a904      	add	r1, sp, #16
 80096e6:	4623      	mov	r3, r4
 80096e8:	f002 fdfe 	bl	800c2e8 <__ssvfiscanf_r>
 80096ec:	b01f      	add	sp, #124	; 0x7c
 80096ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096f2:	b003      	add	sp, #12
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	08009723 	.word	0x08009723
 80096fc:	200000ac 	.word	0x200000ac

08009700 <__sread>:
 8009700:	b510      	push	{r4, lr}
 8009702:	460c      	mov	r4, r1
 8009704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009708:	f000 f918 	bl	800993c <_read_r>
 800970c:	2800      	cmp	r0, #0
 800970e:	bfab      	itete	ge
 8009710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009712:	89a3      	ldrhlt	r3, [r4, #12]
 8009714:	181b      	addge	r3, r3, r0
 8009716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800971a:	bfac      	ite	ge
 800971c:	6563      	strge	r3, [r4, #84]	; 0x54
 800971e:	81a3      	strhlt	r3, [r4, #12]
 8009720:	bd10      	pop	{r4, pc}

08009722 <__seofread>:
 8009722:	2000      	movs	r0, #0
 8009724:	4770      	bx	lr

08009726 <__swrite>:
 8009726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800972a:	461f      	mov	r7, r3
 800972c:	898b      	ldrh	r3, [r1, #12]
 800972e:	05db      	lsls	r3, r3, #23
 8009730:	4605      	mov	r5, r0
 8009732:	460c      	mov	r4, r1
 8009734:	4616      	mov	r6, r2
 8009736:	d505      	bpl.n	8009744 <__swrite+0x1e>
 8009738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973c:	2302      	movs	r3, #2
 800973e:	2200      	movs	r2, #0
 8009740:	f000 f8ea 	bl	8009918 <_lseek_r>
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800974a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800974e:	81a3      	strh	r3, [r4, #12]
 8009750:	4632      	mov	r2, r6
 8009752:	463b      	mov	r3, r7
 8009754:	4628      	mov	r0, r5
 8009756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800975a:	f000 b901 	b.w	8009960 <_write_r>

0800975e <__sseek>:
 800975e:	b510      	push	{r4, lr}
 8009760:	460c      	mov	r4, r1
 8009762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009766:	f000 f8d7 	bl	8009918 <_lseek_r>
 800976a:	1c43      	adds	r3, r0, #1
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	bf15      	itete	ne
 8009770:	6560      	strne	r0, [r4, #84]	; 0x54
 8009772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800977a:	81a3      	strheq	r3, [r4, #12]
 800977c:	bf18      	it	ne
 800977e:	81a3      	strhne	r3, [r4, #12]
 8009780:	bd10      	pop	{r4, pc}

08009782 <__sclose>:
 8009782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009786:	f000 b8b7 	b.w	80098f8 <_close_r>

0800978a <__swbuf_r>:
 800978a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978c:	460e      	mov	r6, r1
 800978e:	4614      	mov	r4, r2
 8009790:	4605      	mov	r5, r0
 8009792:	b118      	cbz	r0, 800979c <__swbuf_r+0x12>
 8009794:	6a03      	ldr	r3, [r0, #32]
 8009796:	b90b      	cbnz	r3, 800979c <__swbuf_r+0x12>
 8009798:	f7ff fec2 	bl	8009520 <__sinit>
 800979c:	69a3      	ldr	r3, [r4, #24]
 800979e:	60a3      	str	r3, [r4, #8]
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	071a      	lsls	r2, r3, #28
 80097a4:	d525      	bpl.n	80097f2 <__swbuf_r+0x68>
 80097a6:	6923      	ldr	r3, [r4, #16]
 80097a8:	b31b      	cbz	r3, 80097f2 <__swbuf_r+0x68>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	6922      	ldr	r2, [r4, #16]
 80097ae:	1a98      	subs	r0, r3, r2
 80097b0:	6963      	ldr	r3, [r4, #20]
 80097b2:	b2f6      	uxtb	r6, r6
 80097b4:	4283      	cmp	r3, r0
 80097b6:	4637      	mov	r7, r6
 80097b8:	dc04      	bgt.n	80097c4 <__swbuf_r+0x3a>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4628      	mov	r0, r5
 80097be:	f003 fa23 	bl	800cc08 <_fflush_r>
 80097c2:	b9e0      	cbnz	r0, 80097fe <__swbuf_r+0x74>
 80097c4:	68a3      	ldr	r3, [r4, #8]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	60a3      	str	r3, [r4, #8]
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	6022      	str	r2, [r4, #0]
 80097d0:	701e      	strb	r6, [r3, #0]
 80097d2:	6962      	ldr	r2, [r4, #20]
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d004      	beq.n	80097e4 <__swbuf_r+0x5a>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	07db      	lsls	r3, r3, #31
 80097de:	d506      	bpl.n	80097ee <__swbuf_r+0x64>
 80097e0:	2e0a      	cmp	r6, #10
 80097e2:	d104      	bne.n	80097ee <__swbuf_r+0x64>
 80097e4:	4621      	mov	r1, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	f003 fa0e 	bl	800cc08 <_fflush_r>
 80097ec:	b938      	cbnz	r0, 80097fe <__swbuf_r+0x74>
 80097ee:	4638      	mov	r0, r7
 80097f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f2:	4621      	mov	r1, r4
 80097f4:	4628      	mov	r0, r5
 80097f6:	f000 f805 	bl	8009804 <__swsetup_r>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d0d5      	beq.n	80097aa <__swbuf_r+0x20>
 80097fe:	f04f 37ff 	mov.w	r7, #4294967295
 8009802:	e7f4      	b.n	80097ee <__swbuf_r+0x64>

08009804 <__swsetup_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4b2a      	ldr	r3, [pc, #168]	; (80098b0 <__swsetup_r+0xac>)
 8009808:	4605      	mov	r5, r0
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	460c      	mov	r4, r1
 800980e:	b118      	cbz	r0, 8009818 <__swsetup_r+0x14>
 8009810:	6a03      	ldr	r3, [r0, #32]
 8009812:	b90b      	cbnz	r3, 8009818 <__swsetup_r+0x14>
 8009814:	f7ff fe84 	bl	8009520 <__sinit>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800981e:	0718      	lsls	r0, r3, #28
 8009820:	d422      	bmi.n	8009868 <__swsetup_r+0x64>
 8009822:	06d9      	lsls	r1, r3, #27
 8009824:	d407      	bmi.n	8009836 <__swsetup_r+0x32>
 8009826:	2309      	movs	r3, #9
 8009828:	602b      	str	r3, [r5, #0]
 800982a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	e034      	b.n	80098a0 <__swsetup_r+0x9c>
 8009836:	0758      	lsls	r0, r3, #29
 8009838:	d512      	bpl.n	8009860 <__swsetup_r+0x5c>
 800983a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800983c:	b141      	cbz	r1, 8009850 <__swsetup_r+0x4c>
 800983e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009842:	4299      	cmp	r1, r3
 8009844:	d002      	beq.n	800984c <__swsetup_r+0x48>
 8009846:	4628      	mov	r0, r5
 8009848:	f000 ff58 	bl	800a6fc <_free_r>
 800984c:	2300      	movs	r3, #0
 800984e:	6363      	str	r3, [r4, #52]	; 0x34
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009856:	81a3      	strh	r3, [r4, #12]
 8009858:	2300      	movs	r3, #0
 800985a:	6063      	str	r3, [r4, #4]
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f043 0308 	orr.w	r3, r3, #8
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	b94b      	cbnz	r3, 8009880 <__swsetup_r+0x7c>
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009876:	d003      	beq.n	8009880 <__swsetup_r+0x7c>
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f003 fa12 	bl	800cca4 <__smakebuf_r>
 8009880:	89a0      	ldrh	r0, [r4, #12]
 8009882:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009886:	f010 0301 	ands.w	r3, r0, #1
 800988a:	d00a      	beq.n	80098a2 <__swsetup_r+0x9e>
 800988c:	2300      	movs	r3, #0
 800988e:	60a3      	str	r3, [r4, #8]
 8009890:	6963      	ldr	r3, [r4, #20]
 8009892:	425b      	negs	r3, r3
 8009894:	61a3      	str	r3, [r4, #24]
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	b943      	cbnz	r3, 80098ac <__swsetup_r+0xa8>
 800989a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800989e:	d1c4      	bne.n	800982a <__swsetup_r+0x26>
 80098a0:	bd38      	pop	{r3, r4, r5, pc}
 80098a2:	0781      	lsls	r1, r0, #30
 80098a4:	bf58      	it	pl
 80098a6:	6963      	ldrpl	r3, [r4, #20]
 80098a8:	60a3      	str	r3, [r4, #8]
 80098aa:	e7f4      	b.n	8009896 <__swsetup_r+0x92>
 80098ac:	2000      	movs	r0, #0
 80098ae:	e7f7      	b.n	80098a0 <__swsetup_r+0x9c>
 80098b0:	200000ac 	.word	0x200000ac

080098b4 <memset>:
 80098b4:	4402      	add	r2, r0
 80098b6:	4603      	mov	r3, r0
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d100      	bne.n	80098be <memset+0xa>
 80098bc:	4770      	bx	lr
 80098be:	f803 1b01 	strb.w	r1, [r3], #1
 80098c2:	e7f9      	b.n	80098b8 <memset+0x4>

080098c4 <strstr>:
 80098c4:	780a      	ldrb	r2, [r1, #0]
 80098c6:	b570      	push	{r4, r5, r6, lr}
 80098c8:	b96a      	cbnz	r2, 80098e6 <strstr+0x22>
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d109      	bne.n	80098e4 <strstr+0x20>
 80098d0:	460c      	mov	r4, r1
 80098d2:	4605      	mov	r5, r0
 80098d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d0f6      	beq.n	80098ca <strstr+0x6>
 80098dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80098e0:	429e      	cmp	r6, r3
 80098e2:	d0f7      	beq.n	80098d4 <strstr+0x10>
 80098e4:	3001      	adds	r0, #1
 80098e6:	7803      	ldrb	r3, [r0, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1ef      	bne.n	80098cc <strstr+0x8>
 80098ec:	4618      	mov	r0, r3
 80098ee:	e7ec      	b.n	80098ca <strstr+0x6>

080098f0 <_localeconv_r>:
 80098f0:	4800      	ldr	r0, [pc, #0]	; (80098f4 <_localeconv_r+0x4>)
 80098f2:	4770      	bx	lr
 80098f4:	200001a0 	.word	0x200001a0

080098f8 <_close_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	; (8009914 <_close_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7fa fb27 	bl	8003f56 <_close>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_close_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_close_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	200059a4 	.word	0x200059a4

08009918 <_lseek_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d07      	ldr	r5, [pc, #28]	; (8009938 <_lseek_r+0x20>)
 800991c:	4604      	mov	r4, r0
 800991e:	4608      	mov	r0, r1
 8009920:	4611      	mov	r1, r2
 8009922:	2200      	movs	r2, #0
 8009924:	602a      	str	r2, [r5, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	f7fa fb3c 	bl	8003fa4 <_lseek>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_lseek_r+0x1e>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_lseek_r+0x1e>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	200059a4 	.word	0x200059a4

0800993c <_read_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_read_r+0x20>)
 8009940:	4604      	mov	r4, r0
 8009942:	4608      	mov	r0, r1
 8009944:	4611      	mov	r1, r2
 8009946:	2200      	movs	r2, #0
 8009948:	602a      	str	r2, [r5, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	f7fa faca 	bl	8003ee4 <_read>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d102      	bne.n	800995a <_read_r+0x1e>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b103      	cbz	r3, 800995a <_read_r+0x1e>
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	200059a4 	.word	0x200059a4

08009960 <_write_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d07      	ldr	r5, [pc, #28]	; (8009980 <_write_r+0x20>)
 8009964:	4604      	mov	r4, r0
 8009966:	4608      	mov	r0, r1
 8009968:	4611      	mov	r1, r2
 800996a:	2200      	movs	r2, #0
 800996c:	602a      	str	r2, [r5, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	f7fa fad5 	bl	8003f1e <_write>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_write_r+0x1e>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_write_r+0x1e>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	200059a4 	.word	0x200059a4

08009984 <__errno>:
 8009984:	4b01      	ldr	r3, [pc, #4]	; (800998c <__errno+0x8>)
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	200000ac 	.word	0x200000ac

08009990 <__libc_init_array>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	4d0d      	ldr	r5, [pc, #52]	; (80099c8 <__libc_init_array+0x38>)
 8009994:	4c0d      	ldr	r4, [pc, #52]	; (80099cc <__libc_init_array+0x3c>)
 8009996:	1b64      	subs	r4, r4, r5
 8009998:	10a4      	asrs	r4, r4, #2
 800999a:	2600      	movs	r6, #0
 800999c:	42a6      	cmp	r6, r4
 800999e:	d109      	bne.n	80099b4 <__libc_init_array+0x24>
 80099a0:	4d0b      	ldr	r5, [pc, #44]	; (80099d0 <__libc_init_array+0x40>)
 80099a2:	4c0c      	ldr	r4, [pc, #48]	; (80099d4 <__libc_init_array+0x44>)
 80099a4:	f003 ff48 	bl	800d838 <_init>
 80099a8:	1b64      	subs	r4, r4, r5
 80099aa:	10a4      	asrs	r4, r4, #2
 80099ac:	2600      	movs	r6, #0
 80099ae:	42a6      	cmp	r6, r4
 80099b0:	d105      	bne.n	80099be <__libc_init_array+0x2e>
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b8:	4798      	blx	r3
 80099ba:	3601      	adds	r6, #1
 80099bc:	e7ee      	b.n	800999c <__libc_init_array+0xc>
 80099be:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c2:	4798      	blx	r3
 80099c4:	3601      	adds	r6, #1
 80099c6:	e7f2      	b.n	80099ae <__libc_init_array+0x1e>
 80099c8:	0800e07c 	.word	0x0800e07c
 80099cc:	0800e07c 	.word	0x0800e07c
 80099d0:	0800e07c 	.word	0x0800e07c
 80099d4:	0800e080 	.word	0x0800e080

080099d8 <__retarget_lock_acquire_recursive>:
 80099d8:	4770      	bx	lr

080099da <__retarget_lock_release_recursive>:
 80099da:	4770      	bx	lr

080099dc <memcpy>:
 80099dc:	440a      	add	r2, r1
 80099de:	4291      	cmp	r1, r2
 80099e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099e4:	d100      	bne.n	80099e8 <memcpy+0xc>
 80099e6:	4770      	bx	lr
 80099e8:	b510      	push	{r4, lr}
 80099ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f2:	4291      	cmp	r1, r2
 80099f4:	d1f9      	bne.n	80099ea <memcpy+0xe>
 80099f6:	bd10      	pop	{r4, pc}

080099f8 <nanf>:
 80099f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a00 <nanf+0x8>
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	7fc00000 	.word	0x7fc00000

08009a04 <quorem>:
 8009a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	6903      	ldr	r3, [r0, #16]
 8009a0a:	690c      	ldr	r4, [r1, #16]
 8009a0c:	42a3      	cmp	r3, r4
 8009a0e:	4607      	mov	r7, r0
 8009a10:	db7e      	blt.n	8009b10 <quorem+0x10c>
 8009a12:	3c01      	subs	r4, #1
 8009a14:	f101 0814 	add.w	r8, r1, #20
 8009a18:	f100 0514 	add.w	r5, r0, #20
 8009a1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a36:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a3a:	d331      	bcc.n	8009aa0 <quorem+0x9c>
 8009a3c:	f04f 0e00 	mov.w	lr, #0
 8009a40:	4640      	mov	r0, r8
 8009a42:	46ac      	mov	ip, r5
 8009a44:	46f2      	mov	sl, lr
 8009a46:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a4a:	b293      	uxth	r3, r2
 8009a4c:	fb06 e303 	mla	r3, r6, r3, lr
 8009a50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a54:	0c1a      	lsrs	r2, r3, #16
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	ebaa 0303 	sub.w	r3, sl, r3
 8009a5c:	f8dc a000 	ldr.w	sl, [ip]
 8009a60:	fa13 f38a 	uxtah	r3, r3, sl
 8009a64:	fb06 220e 	mla	r2, r6, lr, r2
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	9b00      	ldr	r3, [sp, #0]
 8009a6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a70:	b292      	uxth	r2, r2
 8009a72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a7a:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a7e:	4581      	cmp	r9, r0
 8009a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a84:	f84c 3b04 	str.w	r3, [ip], #4
 8009a88:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a8c:	d2db      	bcs.n	8009a46 <quorem+0x42>
 8009a8e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a92:	b92b      	cbnz	r3, 8009aa0 <quorem+0x9c>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	3b04      	subs	r3, #4
 8009a98:	429d      	cmp	r5, r3
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	d32c      	bcc.n	8009af8 <quorem+0xf4>
 8009a9e:	613c      	str	r4, [r7, #16]
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f001 f9f1 	bl	800ae88 <__mcmp>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	db22      	blt.n	8009af0 <quorem+0xec>
 8009aaa:	3601      	adds	r6, #1
 8009aac:	4629      	mov	r1, r5
 8009aae:	2000      	movs	r0, #0
 8009ab0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ab4:	f8d1 c000 	ldr.w	ip, [r1]
 8009ab8:	b293      	uxth	r3, r2
 8009aba:	1ac3      	subs	r3, r0, r3
 8009abc:	0c12      	lsrs	r2, r2, #16
 8009abe:	fa13 f38c 	uxtah	r3, r3, ip
 8009ac2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009ac6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ad0:	45c1      	cmp	r9, r8
 8009ad2:	f841 3b04 	str.w	r3, [r1], #4
 8009ad6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ada:	d2e9      	bcs.n	8009ab0 <quorem+0xac>
 8009adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ae0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ae4:	b922      	cbnz	r2, 8009af0 <quorem+0xec>
 8009ae6:	3b04      	subs	r3, #4
 8009ae8:	429d      	cmp	r5, r3
 8009aea:	461a      	mov	r2, r3
 8009aec:	d30a      	bcc.n	8009b04 <quorem+0x100>
 8009aee:	613c      	str	r4, [r7, #16]
 8009af0:	4630      	mov	r0, r6
 8009af2:	b003      	add	sp, #12
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af8:	6812      	ldr	r2, [r2, #0]
 8009afa:	3b04      	subs	r3, #4
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	d1ce      	bne.n	8009a9e <quorem+0x9a>
 8009b00:	3c01      	subs	r4, #1
 8009b02:	e7c9      	b.n	8009a98 <quorem+0x94>
 8009b04:	6812      	ldr	r2, [r2, #0]
 8009b06:	3b04      	subs	r3, #4
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	d1f0      	bne.n	8009aee <quorem+0xea>
 8009b0c:	3c01      	subs	r4, #1
 8009b0e:	e7eb      	b.n	8009ae8 <quorem+0xe4>
 8009b10:	2000      	movs	r0, #0
 8009b12:	e7ee      	b.n	8009af2 <quorem+0xee>
 8009b14:	0000      	movs	r0, r0
	...

08009b18 <_dtoa_r>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	ed2d 8b04 	vpush	{d8-d9}
 8009b20:	69c5      	ldr	r5, [r0, #28]
 8009b22:	b093      	sub	sp, #76	; 0x4c
 8009b24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b28:	ec57 6b10 	vmov	r6, r7, d0
 8009b2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b30:	9107      	str	r1, [sp, #28]
 8009b32:	4604      	mov	r4, r0
 8009b34:	920a      	str	r2, [sp, #40]	; 0x28
 8009b36:	930d      	str	r3, [sp, #52]	; 0x34
 8009b38:	b975      	cbnz	r5, 8009b58 <_dtoa_r+0x40>
 8009b3a:	2010      	movs	r0, #16
 8009b3c:	f000 fe2a 	bl	800a794 <malloc>
 8009b40:	4602      	mov	r2, r0
 8009b42:	61e0      	str	r0, [r4, #28]
 8009b44:	b920      	cbnz	r0, 8009b50 <_dtoa_r+0x38>
 8009b46:	4bae      	ldr	r3, [pc, #696]	; (8009e00 <_dtoa_r+0x2e8>)
 8009b48:	21ef      	movs	r1, #239	; 0xef
 8009b4a:	48ae      	ldr	r0, [pc, #696]	; (8009e04 <_dtoa_r+0x2ec>)
 8009b4c:	f003 f9c0 	bl	800ced0 <__assert_func>
 8009b50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b54:	6005      	str	r5, [r0, #0]
 8009b56:	60c5      	str	r5, [r0, #12]
 8009b58:	69e3      	ldr	r3, [r4, #28]
 8009b5a:	6819      	ldr	r1, [r3, #0]
 8009b5c:	b151      	cbz	r1, 8009b74 <_dtoa_r+0x5c>
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	604a      	str	r2, [r1, #4]
 8009b62:	2301      	movs	r3, #1
 8009b64:	4093      	lsls	r3, r2
 8009b66:	608b      	str	r3, [r1, #8]
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f000 ff07 	bl	800a97c <_Bfree>
 8009b6e:	69e3      	ldr	r3, [r4, #28]
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	1e3b      	subs	r3, r7, #0
 8009b76:	bfbb      	ittet	lt
 8009b78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b7c:	9303      	strlt	r3, [sp, #12]
 8009b7e:	2300      	movge	r3, #0
 8009b80:	2201      	movlt	r2, #1
 8009b82:	bfac      	ite	ge
 8009b84:	f8c8 3000 	strge.w	r3, [r8]
 8009b88:	f8c8 2000 	strlt.w	r2, [r8]
 8009b8c:	4b9e      	ldr	r3, [pc, #632]	; (8009e08 <_dtoa_r+0x2f0>)
 8009b8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009b92:	ea33 0308 	bics.w	r3, r3, r8
 8009b96:	d11b      	bne.n	8009bd0 <_dtoa_r+0xb8>
 8009b98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009ba4:	4333      	orrs	r3, r6
 8009ba6:	f000 8593 	beq.w	800a6d0 <_dtoa_r+0xbb8>
 8009baa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bac:	b963      	cbnz	r3, 8009bc8 <_dtoa_r+0xb0>
 8009bae:	4b97      	ldr	r3, [pc, #604]	; (8009e0c <_dtoa_r+0x2f4>)
 8009bb0:	e027      	b.n	8009c02 <_dtoa_r+0xea>
 8009bb2:	4b97      	ldr	r3, [pc, #604]	; (8009e10 <_dtoa_r+0x2f8>)
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	9800      	ldr	r0, [sp, #0]
 8009bbe:	b013      	add	sp, #76	; 0x4c
 8009bc0:	ecbd 8b04 	vpop	{d8-d9}
 8009bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	4b90      	ldr	r3, [pc, #576]	; (8009e0c <_dtoa_r+0x2f4>)
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	3303      	adds	r3, #3
 8009bce:	e7f3      	b.n	8009bb8 <_dtoa_r+0xa0>
 8009bd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	ec51 0b17 	vmov	r0, r1, d7
 8009bda:	eeb0 8a47 	vmov.f32	s16, s14
 8009bde:	eef0 8a67 	vmov.f32	s17, s15
 8009be2:	2300      	movs	r3, #0
 8009be4:	f7f6 ff90 	bl	8000b08 <__aeabi_dcmpeq>
 8009be8:	4681      	mov	r9, r0
 8009bea:	b160      	cbz	r0, 8009c06 <_dtoa_r+0xee>
 8009bec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bee:	2301      	movs	r3, #1
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 8568 	beq.w	800a6ca <_dtoa_r+0xbb2>
 8009bfa:	4b86      	ldr	r3, [pc, #536]	; (8009e14 <_dtoa_r+0x2fc>)
 8009bfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	e7da      	b.n	8009bbc <_dtoa_r+0xa4>
 8009c06:	aa10      	add	r2, sp, #64	; 0x40
 8009c08:	a911      	add	r1, sp, #68	; 0x44
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	eeb0 0a48 	vmov.f32	s0, s16
 8009c10:	eef0 0a68 	vmov.f32	s1, s17
 8009c14:	f001 fa4e 	bl	800b0b4 <__d2b>
 8009c18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	2d00      	cmp	r5, #0
 8009c20:	d07f      	beq.n	8009d22 <_dtoa_r+0x20a>
 8009c22:	ee18 3a90 	vmov	r3, s17
 8009c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009c2e:	ec51 0b18 	vmov	r0, r1, d8
 8009c32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009c3e:	4619      	mov	r1, r3
 8009c40:	2200      	movs	r2, #0
 8009c42:	4b75      	ldr	r3, [pc, #468]	; (8009e18 <_dtoa_r+0x300>)
 8009c44:	f7f6 fb40 	bl	80002c8 <__aeabi_dsub>
 8009c48:	a367      	add	r3, pc, #412	; (adr r3, 8009de8 <_dtoa_r+0x2d0>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fcf3 	bl	8000638 <__aeabi_dmul>
 8009c52:	a367      	add	r3, pc, #412	; (adr r3, 8009df0 <_dtoa_r+0x2d8>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fb38 	bl	80002cc <__adddf3>
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	4628      	mov	r0, r5
 8009c60:	460f      	mov	r7, r1
 8009c62:	f7f6 fc7f 	bl	8000564 <__aeabi_i2d>
 8009c66:	a364      	add	r3, pc, #400	; (adr r3, 8009df8 <_dtoa_r+0x2e0>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f7f6 fce4 	bl	8000638 <__aeabi_dmul>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4630      	mov	r0, r6
 8009c76:	4639      	mov	r1, r7
 8009c78:	f7f6 fb28 	bl	80002cc <__adddf3>
 8009c7c:	4606      	mov	r6, r0
 8009c7e:	460f      	mov	r7, r1
 8009c80:	f7f6 ff8a 	bl	8000b98 <__aeabi_d2iz>
 8009c84:	2200      	movs	r2, #0
 8009c86:	4683      	mov	fp, r0
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	f7f6 ff45 	bl	8000b1c <__aeabi_dcmplt>
 8009c92:	b148      	cbz	r0, 8009ca8 <_dtoa_r+0x190>
 8009c94:	4658      	mov	r0, fp
 8009c96:	f7f6 fc65 	bl	8000564 <__aeabi_i2d>
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	f7f6 ff33 	bl	8000b08 <__aeabi_dcmpeq>
 8009ca2:	b908      	cbnz	r0, 8009ca8 <_dtoa_r+0x190>
 8009ca4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ca8:	f1bb 0f16 	cmp.w	fp, #22
 8009cac:	d857      	bhi.n	8009d5e <_dtoa_r+0x246>
 8009cae:	4b5b      	ldr	r3, [pc, #364]	; (8009e1c <_dtoa_r+0x304>)
 8009cb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	ec51 0b18 	vmov	r0, r1, d8
 8009cbc:	f7f6 ff2e 	bl	8000b1c <__aeabi_dcmplt>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d04e      	beq.n	8009d62 <_dtoa_r+0x24a>
 8009cc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cc8:	2300      	movs	r3, #0
 8009cca:	930c      	str	r3, [sp, #48]	; 0x30
 8009ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cce:	1b5b      	subs	r3, r3, r5
 8009cd0:	1e5a      	subs	r2, r3, #1
 8009cd2:	bf45      	ittet	mi
 8009cd4:	f1c3 0301 	rsbmi	r3, r3, #1
 8009cd8:	9305      	strmi	r3, [sp, #20]
 8009cda:	2300      	movpl	r3, #0
 8009cdc:	2300      	movmi	r3, #0
 8009cde:	9206      	str	r2, [sp, #24]
 8009ce0:	bf54      	ite	pl
 8009ce2:	9305      	strpl	r3, [sp, #20]
 8009ce4:	9306      	strmi	r3, [sp, #24]
 8009ce6:	f1bb 0f00 	cmp.w	fp, #0
 8009cea:	db3c      	blt.n	8009d66 <_dtoa_r+0x24e>
 8009cec:	9b06      	ldr	r3, [sp, #24]
 8009cee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009cf2:	445b      	add	r3, fp
 8009cf4:	9306      	str	r3, [sp, #24]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	9308      	str	r3, [sp, #32]
 8009cfa:	9b07      	ldr	r3, [sp, #28]
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	d868      	bhi.n	8009dd2 <_dtoa_r+0x2ba>
 8009d00:	2b05      	cmp	r3, #5
 8009d02:	bfc4      	itt	gt
 8009d04:	3b04      	subgt	r3, #4
 8009d06:	9307      	strgt	r3, [sp, #28]
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	f1a3 0302 	sub.w	r3, r3, #2
 8009d0e:	bfcc      	ite	gt
 8009d10:	2500      	movgt	r5, #0
 8009d12:	2501      	movle	r5, #1
 8009d14:	2b03      	cmp	r3, #3
 8009d16:	f200 8085 	bhi.w	8009e24 <_dtoa_r+0x30c>
 8009d1a:	e8df f003 	tbb	[pc, r3]
 8009d1e:	3b2e      	.short	0x3b2e
 8009d20:	5839      	.short	0x5839
 8009d22:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d26:	441d      	add	r5, r3
 8009d28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	bfc1      	itttt	gt
 8009d30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d34:	fa08 f803 	lslgt.w	r8, r8, r3
 8009d38:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009d3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009d40:	bfd6      	itet	le
 8009d42:	f1c3 0320 	rsble	r3, r3, #32
 8009d46:	ea48 0003 	orrgt.w	r0, r8, r3
 8009d4a:	fa06 f003 	lslle.w	r0, r6, r3
 8009d4e:	f7f6 fbf9 	bl	8000544 <__aeabi_ui2d>
 8009d52:	2201      	movs	r2, #1
 8009d54:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009d58:	3d01      	subs	r5, #1
 8009d5a:	920e      	str	r2, [sp, #56]	; 0x38
 8009d5c:	e76f      	b.n	8009c3e <_dtoa_r+0x126>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e7b3      	b.n	8009cca <_dtoa_r+0x1b2>
 8009d62:	900c      	str	r0, [sp, #48]	; 0x30
 8009d64:	e7b2      	b.n	8009ccc <_dtoa_r+0x1b4>
 8009d66:	9b05      	ldr	r3, [sp, #20]
 8009d68:	eba3 030b 	sub.w	r3, r3, fp
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	f1cb 0300 	rsb	r3, fp, #0
 8009d72:	9308      	str	r3, [sp, #32]
 8009d74:	2300      	movs	r3, #0
 8009d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d78:	e7bf      	b.n	8009cfa <_dtoa_r+0x1e2>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	dc52      	bgt.n	8009e2a <_dtoa_r+0x312>
 8009d84:	2301      	movs	r3, #1
 8009d86:	9301      	str	r3, [sp, #4]
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d8e:	e00b      	b.n	8009da8 <_dtoa_r+0x290>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e7f3      	b.n	8009d7c <_dtoa_r+0x264>
 8009d94:	2300      	movs	r3, #0
 8009d96:	9309      	str	r3, [sp, #36]	; 0x24
 8009d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d9a:	445b      	add	r3, fp
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	bfb8      	it	lt
 8009da6:	2301      	movlt	r3, #1
 8009da8:	69e0      	ldr	r0, [r4, #28]
 8009daa:	2100      	movs	r1, #0
 8009dac:	2204      	movs	r2, #4
 8009dae:	f102 0614 	add.w	r6, r2, #20
 8009db2:	429e      	cmp	r6, r3
 8009db4:	d93d      	bls.n	8009e32 <_dtoa_r+0x31a>
 8009db6:	6041      	str	r1, [r0, #4]
 8009db8:	4620      	mov	r0, r4
 8009dba:	f000 fd9f 	bl	800a8fc <_Balloc>
 8009dbe:	9000      	str	r0, [sp, #0]
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d139      	bne.n	8009e38 <_dtoa_r+0x320>
 8009dc4:	4b16      	ldr	r3, [pc, #88]	; (8009e20 <_dtoa_r+0x308>)
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	f240 11af 	movw	r1, #431	; 0x1af
 8009dcc:	e6bd      	b.n	8009b4a <_dtoa_r+0x32>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e7e1      	b.n	8009d96 <_dtoa_r+0x27e>
 8009dd2:	2501      	movs	r5, #1
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9307      	str	r3, [sp, #28]
 8009dd8:	9509      	str	r5, [sp, #36]	; 0x24
 8009dda:	f04f 33ff 	mov.w	r3, #4294967295
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	9304      	str	r3, [sp, #16]
 8009de2:	2200      	movs	r2, #0
 8009de4:	2312      	movs	r3, #18
 8009de6:	e7d1      	b.n	8009d8c <_dtoa_r+0x274>
 8009de8:	636f4361 	.word	0x636f4361
 8009dec:	3fd287a7 	.word	0x3fd287a7
 8009df0:	8b60c8b3 	.word	0x8b60c8b3
 8009df4:	3fc68a28 	.word	0x3fc68a28
 8009df8:	509f79fb 	.word	0x509f79fb
 8009dfc:	3fd34413 	.word	0x3fd34413
 8009e00:	0800dc70 	.word	0x0800dc70
 8009e04:	0800dc87 	.word	0x0800dc87
 8009e08:	7ff00000 	.word	0x7ff00000
 8009e0c:	0800dc6c 	.word	0x0800dc6c
 8009e10:	0800dc63 	.word	0x0800dc63
 8009e14:	0800dfc9 	.word	0x0800dfc9
 8009e18:	3ff80000 	.word	0x3ff80000
 8009e1c:	0800dd78 	.word	0x0800dd78
 8009e20:	0800dcdf 	.word	0x0800dcdf
 8009e24:	2301      	movs	r3, #1
 8009e26:	9309      	str	r3, [sp, #36]	; 0x24
 8009e28:	e7d7      	b.n	8009dda <_dtoa_r+0x2c2>
 8009e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	9304      	str	r3, [sp, #16]
 8009e30:	e7ba      	b.n	8009da8 <_dtoa_r+0x290>
 8009e32:	3101      	adds	r1, #1
 8009e34:	0052      	lsls	r2, r2, #1
 8009e36:	e7ba      	b.n	8009dae <_dtoa_r+0x296>
 8009e38:	69e3      	ldr	r3, [r4, #28]
 8009e3a:	9a00      	ldr	r2, [sp, #0]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	9b04      	ldr	r3, [sp, #16]
 8009e40:	2b0e      	cmp	r3, #14
 8009e42:	f200 80a8 	bhi.w	8009f96 <_dtoa_r+0x47e>
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	f000 80a5 	beq.w	8009f96 <_dtoa_r+0x47e>
 8009e4c:	f1bb 0f00 	cmp.w	fp, #0
 8009e50:	dd38      	ble.n	8009ec4 <_dtoa_r+0x3ac>
 8009e52:	4bc0      	ldr	r3, [pc, #768]	; (800a154 <_dtoa_r+0x63c>)
 8009e54:	f00b 020f 	and.w	r2, fp, #15
 8009e58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009e60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009e64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009e68:	d019      	beq.n	8009e9e <_dtoa_r+0x386>
 8009e6a:	4bbb      	ldr	r3, [pc, #748]	; (800a158 <_dtoa_r+0x640>)
 8009e6c:	ec51 0b18 	vmov	r0, r1, d8
 8009e70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e74:	f7f6 fd0a 	bl	800088c <__aeabi_ddiv>
 8009e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e7c:	f008 080f 	and.w	r8, r8, #15
 8009e80:	2503      	movs	r5, #3
 8009e82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a158 <_dtoa_r+0x640>
 8009e86:	f1b8 0f00 	cmp.w	r8, #0
 8009e8a:	d10a      	bne.n	8009ea2 <_dtoa_r+0x38a>
 8009e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e90:	4632      	mov	r2, r6
 8009e92:	463b      	mov	r3, r7
 8009e94:	f7f6 fcfa 	bl	800088c <__aeabi_ddiv>
 8009e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e9c:	e02b      	b.n	8009ef6 <_dtoa_r+0x3de>
 8009e9e:	2502      	movs	r5, #2
 8009ea0:	e7ef      	b.n	8009e82 <_dtoa_r+0x36a>
 8009ea2:	f018 0f01 	tst.w	r8, #1
 8009ea6:	d008      	beq.n	8009eba <_dtoa_r+0x3a2>
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	4639      	mov	r1, r7
 8009eac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009eb0:	f7f6 fbc2 	bl	8000638 <__aeabi_dmul>
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	460f      	mov	r7, r1
 8009eba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009ebe:	f109 0908 	add.w	r9, r9, #8
 8009ec2:	e7e0      	b.n	8009e86 <_dtoa_r+0x36e>
 8009ec4:	f000 809f 	beq.w	800a006 <_dtoa_r+0x4ee>
 8009ec8:	f1cb 0600 	rsb	r6, fp, #0
 8009ecc:	4ba1      	ldr	r3, [pc, #644]	; (800a154 <_dtoa_r+0x63c>)
 8009ece:	4fa2      	ldr	r7, [pc, #648]	; (800a158 <_dtoa_r+0x640>)
 8009ed0:	f006 020f 	and.w	r2, r6, #15
 8009ed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	ec51 0b18 	vmov	r0, r1, d8
 8009ee0:	f7f6 fbaa 	bl	8000638 <__aeabi_dmul>
 8009ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ee8:	1136      	asrs	r6, r6, #4
 8009eea:	2300      	movs	r3, #0
 8009eec:	2502      	movs	r5, #2
 8009eee:	2e00      	cmp	r6, #0
 8009ef0:	d17e      	bne.n	8009ff0 <_dtoa_r+0x4d8>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1d0      	bne.n	8009e98 <_dtoa_r+0x380>
 8009ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ef8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8084 	beq.w	800a00a <_dtoa_r+0x4f2>
 8009f02:	4b96      	ldr	r3, [pc, #600]	; (800a15c <_dtoa_r+0x644>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	4640      	mov	r0, r8
 8009f08:	4649      	mov	r1, r9
 8009f0a:	f7f6 fe07 	bl	8000b1c <__aeabi_dcmplt>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d07b      	beq.n	800a00a <_dtoa_r+0x4f2>
 8009f12:	9b04      	ldr	r3, [sp, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d078      	beq.n	800a00a <_dtoa_r+0x4f2>
 8009f18:	9b01      	ldr	r3, [sp, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	dd39      	ble.n	8009f92 <_dtoa_r+0x47a>
 8009f1e:	4b90      	ldr	r3, [pc, #576]	; (800a160 <_dtoa_r+0x648>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	4640      	mov	r0, r8
 8009f24:	4649      	mov	r1, r9
 8009f26:	f7f6 fb87 	bl	8000638 <__aeabi_dmul>
 8009f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f2e:	9e01      	ldr	r6, [sp, #4]
 8009f30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009f34:	3501      	adds	r5, #1
 8009f36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f7f6 fb12 	bl	8000564 <__aeabi_i2d>
 8009f40:	4642      	mov	r2, r8
 8009f42:	464b      	mov	r3, r9
 8009f44:	f7f6 fb78 	bl	8000638 <__aeabi_dmul>
 8009f48:	4b86      	ldr	r3, [pc, #536]	; (800a164 <_dtoa_r+0x64c>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f7f6 f9be 	bl	80002cc <__adddf3>
 8009f50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f58:	9303      	str	r3, [sp, #12]
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	d158      	bne.n	800a010 <_dtoa_r+0x4f8>
 8009f5e:	4b82      	ldr	r3, [pc, #520]	; (800a168 <_dtoa_r+0x650>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	f7f6 f9af 	bl	80002c8 <__aeabi_dsub>
 8009f6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f6e:	4680      	mov	r8, r0
 8009f70:	4689      	mov	r9, r1
 8009f72:	f7f6 fdf1 	bl	8000b58 <__aeabi_dcmpgt>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f040 8296 	bne.w	800a4a8 <_dtoa_r+0x990>
 8009f7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009f80:	4640      	mov	r0, r8
 8009f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f86:	4649      	mov	r1, r9
 8009f88:	f7f6 fdc8 	bl	8000b1c <__aeabi_dcmplt>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	f040 8289 	bne.w	800a4a4 <_dtoa_r+0x98c>
 8009f92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009f96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f2c0 814e 	blt.w	800a23a <_dtoa_r+0x722>
 8009f9e:	f1bb 0f0e 	cmp.w	fp, #14
 8009fa2:	f300 814a 	bgt.w	800a23a <_dtoa_r+0x722>
 8009fa6:	4b6b      	ldr	r3, [pc, #428]	; (800a154 <_dtoa_r+0x63c>)
 8009fa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f280 80dc 	bge.w	800a170 <_dtoa_r+0x658>
 8009fb8:	9b04      	ldr	r3, [sp, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f300 80d8 	bgt.w	800a170 <_dtoa_r+0x658>
 8009fc0:	f040 826f 	bne.w	800a4a2 <_dtoa_r+0x98a>
 8009fc4:	4b68      	ldr	r3, [pc, #416]	; (800a168 <_dtoa_r+0x650>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4640      	mov	r0, r8
 8009fca:	4649      	mov	r1, r9
 8009fcc:	f7f6 fb34 	bl	8000638 <__aeabi_dmul>
 8009fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fd4:	f7f6 fdb6 	bl	8000b44 <__aeabi_dcmpge>
 8009fd8:	9e04      	ldr	r6, [sp, #16]
 8009fda:	4637      	mov	r7, r6
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f040 8245 	bne.w	800a46c <_dtoa_r+0x954>
 8009fe2:	9d00      	ldr	r5, [sp, #0]
 8009fe4:	2331      	movs	r3, #49	; 0x31
 8009fe6:	f805 3b01 	strb.w	r3, [r5], #1
 8009fea:	f10b 0b01 	add.w	fp, fp, #1
 8009fee:	e241      	b.n	800a474 <_dtoa_r+0x95c>
 8009ff0:	07f2      	lsls	r2, r6, #31
 8009ff2:	d505      	bpl.n	800a000 <_dtoa_r+0x4e8>
 8009ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff8:	f7f6 fb1e 	bl	8000638 <__aeabi_dmul>
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	2301      	movs	r3, #1
 800a000:	1076      	asrs	r6, r6, #1
 800a002:	3708      	adds	r7, #8
 800a004:	e773      	b.n	8009eee <_dtoa_r+0x3d6>
 800a006:	2502      	movs	r5, #2
 800a008:	e775      	b.n	8009ef6 <_dtoa_r+0x3de>
 800a00a:	9e04      	ldr	r6, [sp, #16]
 800a00c:	465f      	mov	r7, fp
 800a00e:	e792      	b.n	8009f36 <_dtoa_r+0x41e>
 800a010:	9900      	ldr	r1, [sp, #0]
 800a012:	4b50      	ldr	r3, [pc, #320]	; (800a154 <_dtoa_r+0x63c>)
 800a014:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a018:	4431      	add	r1, r6
 800a01a:	9102      	str	r1, [sp, #8]
 800a01c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a01e:	eeb0 9a47 	vmov.f32	s18, s14
 800a022:	eef0 9a67 	vmov.f32	s19, s15
 800a026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a02a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a02e:	2900      	cmp	r1, #0
 800a030:	d044      	beq.n	800a0bc <_dtoa_r+0x5a4>
 800a032:	494e      	ldr	r1, [pc, #312]	; (800a16c <_dtoa_r+0x654>)
 800a034:	2000      	movs	r0, #0
 800a036:	f7f6 fc29 	bl	800088c <__aeabi_ddiv>
 800a03a:	ec53 2b19 	vmov	r2, r3, d9
 800a03e:	f7f6 f943 	bl	80002c8 <__aeabi_dsub>
 800a042:	9d00      	ldr	r5, [sp, #0]
 800a044:	ec41 0b19 	vmov	d9, r0, r1
 800a048:	4649      	mov	r1, r9
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7f6 fda4 	bl	8000b98 <__aeabi_d2iz>
 800a050:	4606      	mov	r6, r0
 800a052:	f7f6 fa87 	bl	8000564 <__aeabi_i2d>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	4640      	mov	r0, r8
 800a05c:	4649      	mov	r1, r9
 800a05e:	f7f6 f933 	bl	80002c8 <__aeabi_dsub>
 800a062:	3630      	adds	r6, #48	; 0x30
 800a064:	f805 6b01 	strb.w	r6, [r5], #1
 800a068:	ec53 2b19 	vmov	r2, r3, d9
 800a06c:	4680      	mov	r8, r0
 800a06e:	4689      	mov	r9, r1
 800a070:	f7f6 fd54 	bl	8000b1c <__aeabi_dcmplt>
 800a074:	2800      	cmp	r0, #0
 800a076:	d164      	bne.n	800a142 <_dtoa_r+0x62a>
 800a078:	4642      	mov	r2, r8
 800a07a:	464b      	mov	r3, r9
 800a07c:	4937      	ldr	r1, [pc, #220]	; (800a15c <_dtoa_r+0x644>)
 800a07e:	2000      	movs	r0, #0
 800a080:	f7f6 f922 	bl	80002c8 <__aeabi_dsub>
 800a084:	ec53 2b19 	vmov	r2, r3, d9
 800a088:	f7f6 fd48 	bl	8000b1c <__aeabi_dcmplt>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	f040 80b6 	bne.w	800a1fe <_dtoa_r+0x6e6>
 800a092:	9b02      	ldr	r3, [sp, #8]
 800a094:	429d      	cmp	r5, r3
 800a096:	f43f af7c 	beq.w	8009f92 <_dtoa_r+0x47a>
 800a09a:	4b31      	ldr	r3, [pc, #196]	; (800a160 <_dtoa_r+0x648>)
 800a09c:	ec51 0b19 	vmov	r0, r1, d9
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f7f6 fac9 	bl	8000638 <__aeabi_dmul>
 800a0a6:	4b2e      	ldr	r3, [pc, #184]	; (800a160 <_dtoa_r+0x648>)
 800a0a8:	ec41 0b19 	vmov	d9, r0, r1
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	f7f6 fac1 	bl	8000638 <__aeabi_dmul>
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	4689      	mov	r9, r1
 800a0ba:	e7c5      	b.n	800a048 <_dtoa_r+0x530>
 800a0bc:	ec51 0b17 	vmov	r0, r1, d7
 800a0c0:	f7f6 faba 	bl	8000638 <__aeabi_dmul>
 800a0c4:	9b02      	ldr	r3, [sp, #8]
 800a0c6:	9d00      	ldr	r5, [sp, #0]
 800a0c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0ca:	ec41 0b19 	vmov	d9, r0, r1
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	f7f6 fd61 	bl	8000b98 <__aeabi_d2iz>
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	f7f6 fa44 	bl	8000564 <__aeabi_i2d>
 800a0dc:	3630      	adds	r6, #48	; 0x30
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 f8ef 	bl	80002c8 <__aeabi_dsub>
 800a0ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a0ee:	9b02      	ldr	r3, [sp, #8]
 800a0f0:	429d      	cmp	r5, r3
 800a0f2:	4680      	mov	r8, r0
 800a0f4:	4689      	mov	r9, r1
 800a0f6:	f04f 0200 	mov.w	r2, #0
 800a0fa:	d124      	bne.n	800a146 <_dtoa_r+0x62e>
 800a0fc:	4b1b      	ldr	r3, [pc, #108]	; (800a16c <_dtoa_r+0x654>)
 800a0fe:	ec51 0b19 	vmov	r0, r1, d9
 800a102:	f7f6 f8e3 	bl	80002cc <__adddf3>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4640      	mov	r0, r8
 800a10c:	4649      	mov	r1, r9
 800a10e:	f7f6 fd23 	bl	8000b58 <__aeabi_dcmpgt>
 800a112:	2800      	cmp	r0, #0
 800a114:	d173      	bne.n	800a1fe <_dtoa_r+0x6e6>
 800a116:	ec53 2b19 	vmov	r2, r3, d9
 800a11a:	4914      	ldr	r1, [pc, #80]	; (800a16c <_dtoa_r+0x654>)
 800a11c:	2000      	movs	r0, #0
 800a11e:	f7f6 f8d3 	bl	80002c8 <__aeabi_dsub>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4640      	mov	r0, r8
 800a128:	4649      	mov	r1, r9
 800a12a:	f7f6 fcf7 	bl	8000b1c <__aeabi_dcmplt>
 800a12e:	2800      	cmp	r0, #0
 800a130:	f43f af2f 	beq.w	8009f92 <_dtoa_r+0x47a>
 800a134:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a136:	1e6b      	subs	r3, r5, #1
 800a138:	930f      	str	r3, [sp, #60]	; 0x3c
 800a13a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a13e:	2b30      	cmp	r3, #48	; 0x30
 800a140:	d0f8      	beq.n	800a134 <_dtoa_r+0x61c>
 800a142:	46bb      	mov	fp, r7
 800a144:	e04a      	b.n	800a1dc <_dtoa_r+0x6c4>
 800a146:	4b06      	ldr	r3, [pc, #24]	; (800a160 <_dtoa_r+0x648>)
 800a148:	f7f6 fa76 	bl	8000638 <__aeabi_dmul>
 800a14c:	4680      	mov	r8, r0
 800a14e:	4689      	mov	r9, r1
 800a150:	e7bd      	b.n	800a0ce <_dtoa_r+0x5b6>
 800a152:	bf00      	nop
 800a154:	0800dd78 	.word	0x0800dd78
 800a158:	0800dd50 	.word	0x0800dd50
 800a15c:	3ff00000 	.word	0x3ff00000
 800a160:	40240000 	.word	0x40240000
 800a164:	401c0000 	.word	0x401c0000
 800a168:	40140000 	.word	0x40140000
 800a16c:	3fe00000 	.word	0x3fe00000
 800a170:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a174:	9d00      	ldr	r5, [sp, #0]
 800a176:	4642      	mov	r2, r8
 800a178:	464b      	mov	r3, r9
 800a17a:	4630      	mov	r0, r6
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 fb85 	bl	800088c <__aeabi_ddiv>
 800a182:	f7f6 fd09 	bl	8000b98 <__aeabi_d2iz>
 800a186:	9001      	str	r0, [sp, #4]
 800a188:	f7f6 f9ec 	bl	8000564 <__aeabi_i2d>
 800a18c:	4642      	mov	r2, r8
 800a18e:	464b      	mov	r3, r9
 800a190:	f7f6 fa52 	bl	8000638 <__aeabi_dmul>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f6 f894 	bl	80002c8 <__aeabi_dsub>
 800a1a0:	9e01      	ldr	r6, [sp, #4]
 800a1a2:	9f04      	ldr	r7, [sp, #16]
 800a1a4:	3630      	adds	r6, #48	; 0x30
 800a1a6:	f805 6b01 	strb.w	r6, [r5], #1
 800a1aa:	9e00      	ldr	r6, [sp, #0]
 800a1ac:	1bae      	subs	r6, r5, r6
 800a1ae:	42b7      	cmp	r7, r6
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	d134      	bne.n	800a220 <_dtoa_r+0x708>
 800a1b6:	f7f6 f889 	bl	80002cc <__adddf3>
 800a1ba:	4642      	mov	r2, r8
 800a1bc:	464b      	mov	r3, r9
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	f7f6 fcc9 	bl	8000b58 <__aeabi_dcmpgt>
 800a1c6:	b9c8      	cbnz	r0, 800a1fc <_dtoa_r+0x6e4>
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	464b      	mov	r3, r9
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 800a1d4:	b110      	cbz	r0, 800a1dc <_dtoa_r+0x6c4>
 800a1d6:	9b01      	ldr	r3, [sp, #4]
 800a1d8:	07db      	lsls	r3, r3, #31
 800a1da:	d40f      	bmi.n	800a1fc <_dtoa_r+0x6e4>
 800a1dc:	4651      	mov	r1, sl
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f000 fbcc 	bl	800a97c <_Bfree>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1e8:	702b      	strb	r3, [r5, #0]
 800a1ea:	f10b 0301 	add.w	r3, fp, #1
 800a1ee:	6013      	str	r3, [r2, #0]
 800a1f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f43f ace2 	beq.w	8009bbc <_dtoa_r+0xa4>
 800a1f8:	601d      	str	r5, [r3, #0]
 800a1fa:	e4df      	b.n	8009bbc <_dtoa_r+0xa4>
 800a1fc:	465f      	mov	r7, fp
 800a1fe:	462b      	mov	r3, r5
 800a200:	461d      	mov	r5, r3
 800a202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a206:	2a39      	cmp	r2, #57	; 0x39
 800a208:	d106      	bne.n	800a218 <_dtoa_r+0x700>
 800a20a:	9a00      	ldr	r2, [sp, #0]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d1f7      	bne.n	800a200 <_dtoa_r+0x6e8>
 800a210:	9900      	ldr	r1, [sp, #0]
 800a212:	2230      	movs	r2, #48	; 0x30
 800a214:	3701      	adds	r7, #1
 800a216:	700a      	strb	r2, [r1, #0]
 800a218:	781a      	ldrb	r2, [r3, #0]
 800a21a:	3201      	adds	r2, #1
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	e790      	b.n	800a142 <_dtoa_r+0x62a>
 800a220:	4ba3      	ldr	r3, [pc, #652]	; (800a4b0 <_dtoa_r+0x998>)
 800a222:	2200      	movs	r2, #0
 800a224:	f7f6 fa08 	bl	8000638 <__aeabi_dmul>
 800a228:	2200      	movs	r2, #0
 800a22a:	2300      	movs	r3, #0
 800a22c:	4606      	mov	r6, r0
 800a22e:	460f      	mov	r7, r1
 800a230:	f7f6 fc6a 	bl	8000b08 <__aeabi_dcmpeq>
 800a234:	2800      	cmp	r0, #0
 800a236:	d09e      	beq.n	800a176 <_dtoa_r+0x65e>
 800a238:	e7d0      	b.n	800a1dc <_dtoa_r+0x6c4>
 800a23a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a23c:	2a00      	cmp	r2, #0
 800a23e:	f000 80ca 	beq.w	800a3d6 <_dtoa_r+0x8be>
 800a242:	9a07      	ldr	r2, [sp, #28]
 800a244:	2a01      	cmp	r2, #1
 800a246:	f300 80ad 	bgt.w	800a3a4 <_dtoa_r+0x88c>
 800a24a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	f000 80a5 	beq.w	800a39c <_dtoa_r+0x884>
 800a252:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a256:	9e08      	ldr	r6, [sp, #32]
 800a258:	9d05      	ldr	r5, [sp, #20]
 800a25a:	9a05      	ldr	r2, [sp, #20]
 800a25c:	441a      	add	r2, r3
 800a25e:	9205      	str	r2, [sp, #20]
 800a260:	9a06      	ldr	r2, [sp, #24]
 800a262:	2101      	movs	r1, #1
 800a264:	441a      	add	r2, r3
 800a266:	4620      	mov	r0, r4
 800a268:	9206      	str	r2, [sp, #24]
 800a26a:	f000 fc87 	bl	800ab7c <__i2b>
 800a26e:	4607      	mov	r7, r0
 800a270:	b165      	cbz	r5, 800a28c <_dtoa_r+0x774>
 800a272:	9b06      	ldr	r3, [sp, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	dd09      	ble.n	800a28c <_dtoa_r+0x774>
 800a278:	42ab      	cmp	r3, r5
 800a27a:	9a05      	ldr	r2, [sp, #20]
 800a27c:	bfa8      	it	ge
 800a27e:	462b      	movge	r3, r5
 800a280:	1ad2      	subs	r2, r2, r3
 800a282:	9205      	str	r2, [sp, #20]
 800a284:	9a06      	ldr	r2, [sp, #24]
 800a286:	1aed      	subs	r5, r5, r3
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	9306      	str	r3, [sp, #24]
 800a28c:	9b08      	ldr	r3, [sp, #32]
 800a28e:	b1f3      	cbz	r3, 800a2ce <_dtoa_r+0x7b6>
 800a290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 80a3 	beq.w	800a3de <_dtoa_r+0x8c6>
 800a298:	2e00      	cmp	r6, #0
 800a29a:	dd10      	ble.n	800a2be <_dtoa_r+0x7a6>
 800a29c:	4639      	mov	r1, r7
 800a29e:	4632      	mov	r2, r6
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fd2b 	bl	800acfc <__pow5mult>
 800a2a6:	4652      	mov	r2, sl
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	4607      	mov	r7, r0
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fc7b 	bl	800aba8 <__multiply>
 800a2b2:	4651      	mov	r1, sl
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 fb60 	bl	800a97c <_Bfree>
 800a2bc:	46c2      	mov	sl, r8
 800a2be:	9b08      	ldr	r3, [sp, #32]
 800a2c0:	1b9a      	subs	r2, r3, r6
 800a2c2:	d004      	beq.n	800a2ce <_dtoa_r+0x7b6>
 800a2c4:	4651      	mov	r1, sl
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 fd18 	bl	800acfc <__pow5mult>
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 fc53 	bl	800ab7c <__i2b>
 800a2d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	4606      	mov	r6, r0
 800a2dc:	f340 8081 	ble.w	800a3e2 <_dtoa_r+0x8ca>
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f000 fd09 	bl	800acfc <__pow5mult>
 800a2ea:	9b07      	ldr	r3, [sp, #28]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	dd7a      	ble.n	800a3e8 <_dtoa_r+0x8d0>
 800a2f2:	f04f 0800 	mov.w	r8, #0
 800a2f6:	6933      	ldr	r3, [r6, #16]
 800a2f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2fc:	6918      	ldr	r0, [r3, #16]
 800a2fe:	f000 fbef 	bl	800aae0 <__hi0bits>
 800a302:	f1c0 0020 	rsb	r0, r0, #32
 800a306:	9b06      	ldr	r3, [sp, #24]
 800a308:	4418      	add	r0, r3
 800a30a:	f010 001f 	ands.w	r0, r0, #31
 800a30e:	f000 8094 	beq.w	800a43a <_dtoa_r+0x922>
 800a312:	f1c0 0320 	rsb	r3, r0, #32
 800a316:	2b04      	cmp	r3, #4
 800a318:	f340 8085 	ble.w	800a426 <_dtoa_r+0x90e>
 800a31c:	9b05      	ldr	r3, [sp, #20]
 800a31e:	f1c0 001c 	rsb	r0, r0, #28
 800a322:	4403      	add	r3, r0
 800a324:	9305      	str	r3, [sp, #20]
 800a326:	9b06      	ldr	r3, [sp, #24]
 800a328:	4403      	add	r3, r0
 800a32a:	4405      	add	r5, r0
 800a32c:	9306      	str	r3, [sp, #24]
 800a32e:	9b05      	ldr	r3, [sp, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	dd05      	ble.n	800a340 <_dtoa_r+0x828>
 800a334:	4651      	mov	r1, sl
 800a336:	461a      	mov	r2, r3
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fd39 	bl	800adb0 <__lshift>
 800a33e:	4682      	mov	sl, r0
 800a340:	9b06      	ldr	r3, [sp, #24]
 800a342:	2b00      	cmp	r3, #0
 800a344:	dd05      	ble.n	800a352 <_dtoa_r+0x83a>
 800a346:	4631      	mov	r1, r6
 800a348:	461a      	mov	r2, r3
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 fd30 	bl	800adb0 <__lshift>
 800a350:	4606      	mov	r6, r0
 800a352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a354:	2b00      	cmp	r3, #0
 800a356:	d072      	beq.n	800a43e <_dtoa_r+0x926>
 800a358:	4631      	mov	r1, r6
 800a35a:	4650      	mov	r0, sl
 800a35c:	f000 fd94 	bl	800ae88 <__mcmp>
 800a360:	2800      	cmp	r0, #0
 800a362:	da6c      	bge.n	800a43e <_dtoa_r+0x926>
 800a364:	2300      	movs	r3, #0
 800a366:	4651      	mov	r1, sl
 800a368:	220a      	movs	r2, #10
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 fb28 	bl	800a9c0 <__multadd>
 800a370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a372:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a376:	4682      	mov	sl, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 81b0 	beq.w	800a6de <_dtoa_r+0xbc6>
 800a37e:	2300      	movs	r3, #0
 800a380:	4639      	mov	r1, r7
 800a382:	220a      	movs	r2, #10
 800a384:	4620      	mov	r0, r4
 800a386:	f000 fb1b 	bl	800a9c0 <__multadd>
 800a38a:	9b01      	ldr	r3, [sp, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	4607      	mov	r7, r0
 800a390:	f300 8096 	bgt.w	800a4c0 <_dtoa_r+0x9a8>
 800a394:	9b07      	ldr	r3, [sp, #28]
 800a396:	2b02      	cmp	r3, #2
 800a398:	dc59      	bgt.n	800a44e <_dtoa_r+0x936>
 800a39a:	e091      	b.n	800a4c0 <_dtoa_r+0x9a8>
 800a39c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a39e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3a2:	e758      	b.n	800a256 <_dtoa_r+0x73e>
 800a3a4:	9b04      	ldr	r3, [sp, #16]
 800a3a6:	1e5e      	subs	r6, r3, #1
 800a3a8:	9b08      	ldr	r3, [sp, #32]
 800a3aa:	42b3      	cmp	r3, r6
 800a3ac:	bfbf      	itttt	lt
 800a3ae:	9b08      	ldrlt	r3, [sp, #32]
 800a3b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a3b2:	9608      	strlt	r6, [sp, #32]
 800a3b4:	1af3      	sublt	r3, r6, r3
 800a3b6:	bfb4      	ite	lt
 800a3b8:	18d2      	addlt	r2, r2, r3
 800a3ba:	1b9e      	subge	r6, r3, r6
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	bfbc      	itt	lt
 800a3c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a3c2:	2600      	movlt	r6, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	bfb7      	itett	lt
 800a3c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a3cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a3d0:	1a9d      	sublt	r5, r3, r2
 800a3d2:	2300      	movlt	r3, #0
 800a3d4:	e741      	b.n	800a25a <_dtoa_r+0x742>
 800a3d6:	9e08      	ldr	r6, [sp, #32]
 800a3d8:	9d05      	ldr	r5, [sp, #20]
 800a3da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3dc:	e748      	b.n	800a270 <_dtoa_r+0x758>
 800a3de:	9a08      	ldr	r2, [sp, #32]
 800a3e0:	e770      	b.n	800a2c4 <_dtoa_r+0x7ac>
 800a3e2:	9b07      	ldr	r3, [sp, #28]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	dc19      	bgt.n	800a41c <_dtoa_r+0x904>
 800a3e8:	9b02      	ldr	r3, [sp, #8]
 800a3ea:	b9bb      	cbnz	r3, 800a41c <_dtoa_r+0x904>
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3f2:	b99b      	cbnz	r3, 800a41c <_dtoa_r+0x904>
 800a3f4:	9b03      	ldr	r3, [sp, #12]
 800a3f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3fa:	0d1b      	lsrs	r3, r3, #20
 800a3fc:	051b      	lsls	r3, r3, #20
 800a3fe:	b183      	cbz	r3, 800a422 <_dtoa_r+0x90a>
 800a400:	9b05      	ldr	r3, [sp, #20]
 800a402:	3301      	adds	r3, #1
 800a404:	9305      	str	r3, [sp, #20]
 800a406:	9b06      	ldr	r3, [sp, #24]
 800a408:	3301      	adds	r3, #1
 800a40a:	9306      	str	r3, [sp, #24]
 800a40c:	f04f 0801 	mov.w	r8, #1
 800a410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a412:	2b00      	cmp	r3, #0
 800a414:	f47f af6f 	bne.w	800a2f6 <_dtoa_r+0x7de>
 800a418:	2001      	movs	r0, #1
 800a41a:	e774      	b.n	800a306 <_dtoa_r+0x7ee>
 800a41c:	f04f 0800 	mov.w	r8, #0
 800a420:	e7f6      	b.n	800a410 <_dtoa_r+0x8f8>
 800a422:	4698      	mov	r8, r3
 800a424:	e7f4      	b.n	800a410 <_dtoa_r+0x8f8>
 800a426:	d082      	beq.n	800a32e <_dtoa_r+0x816>
 800a428:	9a05      	ldr	r2, [sp, #20]
 800a42a:	331c      	adds	r3, #28
 800a42c:	441a      	add	r2, r3
 800a42e:	9205      	str	r2, [sp, #20]
 800a430:	9a06      	ldr	r2, [sp, #24]
 800a432:	441a      	add	r2, r3
 800a434:	441d      	add	r5, r3
 800a436:	9206      	str	r2, [sp, #24]
 800a438:	e779      	b.n	800a32e <_dtoa_r+0x816>
 800a43a:	4603      	mov	r3, r0
 800a43c:	e7f4      	b.n	800a428 <_dtoa_r+0x910>
 800a43e:	9b04      	ldr	r3, [sp, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	dc37      	bgt.n	800a4b4 <_dtoa_r+0x99c>
 800a444:	9b07      	ldr	r3, [sp, #28]
 800a446:	2b02      	cmp	r3, #2
 800a448:	dd34      	ble.n	800a4b4 <_dtoa_r+0x99c>
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	9301      	str	r3, [sp, #4]
 800a44e:	9b01      	ldr	r3, [sp, #4]
 800a450:	b963      	cbnz	r3, 800a46c <_dtoa_r+0x954>
 800a452:	4631      	mov	r1, r6
 800a454:	2205      	movs	r2, #5
 800a456:	4620      	mov	r0, r4
 800a458:	f000 fab2 	bl	800a9c0 <__multadd>
 800a45c:	4601      	mov	r1, r0
 800a45e:	4606      	mov	r6, r0
 800a460:	4650      	mov	r0, sl
 800a462:	f000 fd11 	bl	800ae88 <__mcmp>
 800a466:	2800      	cmp	r0, #0
 800a468:	f73f adbb 	bgt.w	8009fe2 <_dtoa_r+0x4ca>
 800a46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46e:	9d00      	ldr	r5, [sp, #0]
 800a470:	ea6f 0b03 	mvn.w	fp, r3
 800a474:	f04f 0800 	mov.w	r8, #0
 800a478:	4631      	mov	r1, r6
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 fa7e 	bl	800a97c <_Bfree>
 800a480:	2f00      	cmp	r7, #0
 800a482:	f43f aeab 	beq.w	800a1dc <_dtoa_r+0x6c4>
 800a486:	f1b8 0f00 	cmp.w	r8, #0
 800a48a:	d005      	beq.n	800a498 <_dtoa_r+0x980>
 800a48c:	45b8      	cmp	r8, r7
 800a48e:	d003      	beq.n	800a498 <_dtoa_r+0x980>
 800a490:	4641      	mov	r1, r8
 800a492:	4620      	mov	r0, r4
 800a494:	f000 fa72 	bl	800a97c <_Bfree>
 800a498:	4639      	mov	r1, r7
 800a49a:	4620      	mov	r0, r4
 800a49c:	f000 fa6e 	bl	800a97c <_Bfree>
 800a4a0:	e69c      	b.n	800a1dc <_dtoa_r+0x6c4>
 800a4a2:	2600      	movs	r6, #0
 800a4a4:	4637      	mov	r7, r6
 800a4a6:	e7e1      	b.n	800a46c <_dtoa_r+0x954>
 800a4a8:	46bb      	mov	fp, r7
 800a4aa:	4637      	mov	r7, r6
 800a4ac:	e599      	b.n	8009fe2 <_dtoa_r+0x4ca>
 800a4ae:	bf00      	nop
 800a4b0:	40240000 	.word	0x40240000
 800a4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 80c8 	beq.w	800a64c <_dtoa_r+0xb34>
 800a4bc:	9b04      	ldr	r3, [sp, #16]
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	2d00      	cmp	r5, #0
 800a4c2:	dd05      	ble.n	800a4d0 <_dtoa_r+0x9b8>
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fc71 	bl	800adb0 <__lshift>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	f1b8 0f00 	cmp.w	r8, #0
 800a4d4:	d05b      	beq.n	800a58e <_dtoa_r+0xa76>
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 fa0f 	bl	800a8fc <_Balloc>
 800a4de:	4605      	mov	r5, r0
 800a4e0:	b928      	cbnz	r0, 800a4ee <_dtoa_r+0x9d6>
 800a4e2:	4b83      	ldr	r3, [pc, #524]	; (800a6f0 <_dtoa_r+0xbd8>)
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a4ea:	f7ff bb2e 	b.w	8009b4a <_dtoa_r+0x32>
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	3202      	adds	r2, #2
 800a4f2:	0092      	lsls	r2, r2, #2
 800a4f4:	f107 010c 	add.w	r1, r7, #12
 800a4f8:	300c      	adds	r0, #12
 800a4fa:	f7ff fa6f 	bl	80099dc <memcpy>
 800a4fe:	2201      	movs	r2, #1
 800a500:	4629      	mov	r1, r5
 800a502:	4620      	mov	r0, r4
 800a504:	f000 fc54 	bl	800adb0 <__lshift>
 800a508:	9b00      	ldr	r3, [sp, #0]
 800a50a:	3301      	adds	r3, #1
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a512:	4413      	add	r3, r2
 800a514:	9308      	str	r3, [sp, #32]
 800a516:	9b02      	ldr	r3, [sp, #8]
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	46b8      	mov	r8, r7
 800a51e:	9306      	str	r3, [sp, #24]
 800a520:	4607      	mov	r7, r0
 800a522:	9b04      	ldr	r3, [sp, #16]
 800a524:	4631      	mov	r1, r6
 800a526:	3b01      	subs	r3, #1
 800a528:	4650      	mov	r0, sl
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	f7ff fa6a 	bl	8009a04 <quorem>
 800a530:	4641      	mov	r1, r8
 800a532:	9002      	str	r0, [sp, #8]
 800a534:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a538:	4650      	mov	r0, sl
 800a53a:	f000 fca5 	bl	800ae88 <__mcmp>
 800a53e:	463a      	mov	r2, r7
 800a540:	9005      	str	r0, [sp, #20]
 800a542:	4631      	mov	r1, r6
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fcbb 	bl	800aec0 <__mdiff>
 800a54a:	68c2      	ldr	r2, [r0, #12]
 800a54c:	4605      	mov	r5, r0
 800a54e:	bb02      	cbnz	r2, 800a592 <_dtoa_r+0xa7a>
 800a550:	4601      	mov	r1, r0
 800a552:	4650      	mov	r0, sl
 800a554:	f000 fc98 	bl	800ae88 <__mcmp>
 800a558:	4602      	mov	r2, r0
 800a55a:	4629      	mov	r1, r5
 800a55c:	4620      	mov	r0, r4
 800a55e:	9209      	str	r2, [sp, #36]	; 0x24
 800a560:	f000 fa0c 	bl	800a97c <_Bfree>
 800a564:	9b07      	ldr	r3, [sp, #28]
 800a566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a568:	9d04      	ldr	r5, [sp, #16]
 800a56a:	ea43 0102 	orr.w	r1, r3, r2
 800a56e:	9b06      	ldr	r3, [sp, #24]
 800a570:	4319      	orrs	r1, r3
 800a572:	d110      	bne.n	800a596 <_dtoa_r+0xa7e>
 800a574:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a578:	d029      	beq.n	800a5ce <_dtoa_r+0xab6>
 800a57a:	9b05      	ldr	r3, [sp, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	dd02      	ble.n	800a586 <_dtoa_r+0xa6e>
 800a580:	9b02      	ldr	r3, [sp, #8]
 800a582:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	f883 9000 	strb.w	r9, [r3]
 800a58c:	e774      	b.n	800a478 <_dtoa_r+0x960>
 800a58e:	4638      	mov	r0, r7
 800a590:	e7ba      	b.n	800a508 <_dtoa_r+0x9f0>
 800a592:	2201      	movs	r2, #1
 800a594:	e7e1      	b.n	800a55a <_dtoa_r+0xa42>
 800a596:	9b05      	ldr	r3, [sp, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	db04      	blt.n	800a5a6 <_dtoa_r+0xa8e>
 800a59c:	9907      	ldr	r1, [sp, #28]
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	9906      	ldr	r1, [sp, #24]
 800a5a2:	430b      	orrs	r3, r1
 800a5a4:	d120      	bne.n	800a5e8 <_dtoa_r+0xad0>
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	dded      	ble.n	800a586 <_dtoa_r+0xa6e>
 800a5aa:	4651      	mov	r1, sl
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f000 fbfe 	bl	800adb0 <__lshift>
 800a5b4:	4631      	mov	r1, r6
 800a5b6:	4682      	mov	sl, r0
 800a5b8:	f000 fc66 	bl	800ae88 <__mcmp>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	dc03      	bgt.n	800a5c8 <_dtoa_r+0xab0>
 800a5c0:	d1e1      	bne.n	800a586 <_dtoa_r+0xa6e>
 800a5c2:	f019 0f01 	tst.w	r9, #1
 800a5c6:	d0de      	beq.n	800a586 <_dtoa_r+0xa6e>
 800a5c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a5cc:	d1d8      	bne.n	800a580 <_dtoa_r+0xa68>
 800a5ce:	9a01      	ldr	r2, [sp, #4]
 800a5d0:	2339      	movs	r3, #57	; 0x39
 800a5d2:	7013      	strb	r3, [r2, #0]
 800a5d4:	462b      	mov	r3, r5
 800a5d6:	461d      	mov	r5, r3
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5de:	2a39      	cmp	r2, #57	; 0x39
 800a5e0:	d06c      	beq.n	800a6bc <_dtoa_r+0xba4>
 800a5e2:	3201      	adds	r2, #1
 800a5e4:	701a      	strb	r2, [r3, #0]
 800a5e6:	e747      	b.n	800a478 <_dtoa_r+0x960>
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	dd07      	ble.n	800a5fc <_dtoa_r+0xae4>
 800a5ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a5f0:	d0ed      	beq.n	800a5ce <_dtoa_r+0xab6>
 800a5f2:	9a01      	ldr	r2, [sp, #4]
 800a5f4:	f109 0301 	add.w	r3, r9, #1
 800a5f8:	7013      	strb	r3, [r2, #0]
 800a5fa:	e73d      	b.n	800a478 <_dtoa_r+0x960>
 800a5fc:	9b04      	ldr	r3, [sp, #16]
 800a5fe:	9a08      	ldr	r2, [sp, #32]
 800a600:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a604:	4293      	cmp	r3, r2
 800a606:	d043      	beq.n	800a690 <_dtoa_r+0xb78>
 800a608:	4651      	mov	r1, sl
 800a60a:	2300      	movs	r3, #0
 800a60c:	220a      	movs	r2, #10
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 f9d6 	bl	800a9c0 <__multadd>
 800a614:	45b8      	cmp	r8, r7
 800a616:	4682      	mov	sl, r0
 800a618:	f04f 0300 	mov.w	r3, #0
 800a61c:	f04f 020a 	mov.w	r2, #10
 800a620:	4641      	mov	r1, r8
 800a622:	4620      	mov	r0, r4
 800a624:	d107      	bne.n	800a636 <_dtoa_r+0xb1e>
 800a626:	f000 f9cb 	bl	800a9c0 <__multadd>
 800a62a:	4680      	mov	r8, r0
 800a62c:	4607      	mov	r7, r0
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	3301      	adds	r3, #1
 800a632:	9304      	str	r3, [sp, #16]
 800a634:	e775      	b.n	800a522 <_dtoa_r+0xa0a>
 800a636:	f000 f9c3 	bl	800a9c0 <__multadd>
 800a63a:	4639      	mov	r1, r7
 800a63c:	4680      	mov	r8, r0
 800a63e:	2300      	movs	r3, #0
 800a640:	220a      	movs	r2, #10
 800a642:	4620      	mov	r0, r4
 800a644:	f000 f9bc 	bl	800a9c0 <__multadd>
 800a648:	4607      	mov	r7, r0
 800a64a:	e7f0      	b.n	800a62e <_dtoa_r+0xb16>
 800a64c:	9b04      	ldr	r3, [sp, #16]
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	9d00      	ldr	r5, [sp, #0]
 800a652:	4631      	mov	r1, r6
 800a654:	4650      	mov	r0, sl
 800a656:	f7ff f9d5 	bl	8009a04 <quorem>
 800a65a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a65e:	9b00      	ldr	r3, [sp, #0]
 800a660:	f805 9b01 	strb.w	r9, [r5], #1
 800a664:	1aea      	subs	r2, r5, r3
 800a666:	9b01      	ldr	r3, [sp, #4]
 800a668:	4293      	cmp	r3, r2
 800a66a:	dd07      	ble.n	800a67c <_dtoa_r+0xb64>
 800a66c:	4651      	mov	r1, sl
 800a66e:	2300      	movs	r3, #0
 800a670:	220a      	movs	r2, #10
 800a672:	4620      	mov	r0, r4
 800a674:	f000 f9a4 	bl	800a9c0 <__multadd>
 800a678:	4682      	mov	sl, r0
 800a67a:	e7ea      	b.n	800a652 <_dtoa_r+0xb3a>
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfc8      	it	gt
 800a682:	461d      	movgt	r5, r3
 800a684:	9b00      	ldr	r3, [sp, #0]
 800a686:	bfd8      	it	le
 800a688:	2501      	movle	r5, #1
 800a68a:	441d      	add	r5, r3
 800a68c:	f04f 0800 	mov.w	r8, #0
 800a690:	4651      	mov	r1, sl
 800a692:	2201      	movs	r2, #1
 800a694:	4620      	mov	r0, r4
 800a696:	f000 fb8b 	bl	800adb0 <__lshift>
 800a69a:	4631      	mov	r1, r6
 800a69c:	4682      	mov	sl, r0
 800a69e:	f000 fbf3 	bl	800ae88 <__mcmp>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	dc96      	bgt.n	800a5d4 <_dtoa_r+0xabc>
 800a6a6:	d102      	bne.n	800a6ae <_dtoa_r+0xb96>
 800a6a8:	f019 0f01 	tst.w	r9, #1
 800a6ac:	d192      	bne.n	800a5d4 <_dtoa_r+0xabc>
 800a6ae:	462b      	mov	r3, r5
 800a6b0:	461d      	mov	r5, r3
 800a6b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6b6:	2a30      	cmp	r2, #48	; 0x30
 800a6b8:	d0fa      	beq.n	800a6b0 <_dtoa_r+0xb98>
 800a6ba:	e6dd      	b.n	800a478 <_dtoa_r+0x960>
 800a6bc:	9a00      	ldr	r2, [sp, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d189      	bne.n	800a5d6 <_dtoa_r+0xabe>
 800a6c2:	f10b 0b01 	add.w	fp, fp, #1
 800a6c6:	2331      	movs	r3, #49	; 0x31
 800a6c8:	e796      	b.n	800a5f8 <_dtoa_r+0xae0>
 800a6ca:	4b0a      	ldr	r3, [pc, #40]	; (800a6f4 <_dtoa_r+0xbdc>)
 800a6cc:	f7ff ba99 	b.w	8009c02 <_dtoa_r+0xea>
 800a6d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f47f aa6d 	bne.w	8009bb2 <_dtoa_r+0x9a>
 800a6d8:	4b07      	ldr	r3, [pc, #28]	; (800a6f8 <_dtoa_r+0xbe0>)
 800a6da:	f7ff ba92 	b.w	8009c02 <_dtoa_r+0xea>
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dcb5      	bgt.n	800a650 <_dtoa_r+0xb38>
 800a6e4:	9b07      	ldr	r3, [sp, #28]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	f73f aeb1 	bgt.w	800a44e <_dtoa_r+0x936>
 800a6ec:	e7b0      	b.n	800a650 <_dtoa_r+0xb38>
 800a6ee:	bf00      	nop
 800a6f0:	0800dcdf 	.word	0x0800dcdf
 800a6f4:	0800dfc8 	.word	0x0800dfc8
 800a6f8:	0800dc63 	.word	0x0800dc63

0800a6fc <_free_r>:
 800a6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6fe:	2900      	cmp	r1, #0
 800a700:	d044      	beq.n	800a78c <_free_r+0x90>
 800a702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a706:	9001      	str	r0, [sp, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f1a1 0404 	sub.w	r4, r1, #4
 800a70e:	bfb8      	it	lt
 800a710:	18e4      	addlt	r4, r4, r3
 800a712:	f000 f8e7 	bl	800a8e4 <__malloc_lock>
 800a716:	4a1e      	ldr	r2, [pc, #120]	; (800a790 <_free_r+0x94>)
 800a718:	9801      	ldr	r0, [sp, #4]
 800a71a:	6813      	ldr	r3, [r2, #0]
 800a71c:	b933      	cbnz	r3, 800a72c <_free_r+0x30>
 800a71e:	6063      	str	r3, [r4, #4]
 800a720:	6014      	str	r4, [r2, #0]
 800a722:	b003      	add	sp, #12
 800a724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a728:	f000 b8e2 	b.w	800a8f0 <__malloc_unlock>
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	d908      	bls.n	800a742 <_free_r+0x46>
 800a730:	6825      	ldr	r5, [r4, #0]
 800a732:	1961      	adds	r1, r4, r5
 800a734:	428b      	cmp	r3, r1
 800a736:	bf01      	itttt	eq
 800a738:	6819      	ldreq	r1, [r3, #0]
 800a73a:	685b      	ldreq	r3, [r3, #4]
 800a73c:	1949      	addeq	r1, r1, r5
 800a73e:	6021      	streq	r1, [r4, #0]
 800a740:	e7ed      	b.n	800a71e <_free_r+0x22>
 800a742:	461a      	mov	r2, r3
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	b10b      	cbz	r3, 800a74c <_free_r+0x50>
 800a748:	42a3      	cmp	r3, r4
 800a74a:	d9fa      	bls.n	800a742 <_free_r+0x46>
 800a74c:	6811      	ldr	r1, [r2, #0]
 800a74e:	1855      	adds	r5, r2, r1
 800a750:	42a5      	cmp	r5, r4
 800a752:	d10b      	bne.n	800a76c <_free_r+0x70>
 800a754:	6824      	ldr	r4, [r4, #0]
 800a756:	4421      	add	r1, r4
 800a758:	1854      	adds	r4, r2, r1
 800a75a:	42a3      	cmp	r3, r4
 800a75c:	6011      	str	r1, [r2, #0]
 800a75e:	d1e0      	bne.n	800a722 <_free_r+0x26>
 800a760:	681c      	ldr	r4, [r3, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	6053      	str	r3, [r2, #4]
 800a766:	440c      	add	r4, r1
 800a768:	6014      	str	r4, [r2, #0]
 800a76a:	e7da      	b.n	800a722 <_free_r+0x26>
 800a76c:	d902      	bls.n	800a774 <_free_r+0x78>
 800a76e:	230c      	movs	r3, #12
 800a770:	6003      	str	r3, [r0, #0]
 800a772:	e7d6      	b.n	800a722 <_free_r+0x26>
 800a774:	6825      	ldr	r5, [r4, #0]
 800a776:	1961      	adds	r1, r4, r5
 800a778:	428b      	cmp	r3, r1
 800a77a:	bf04      	itt	eq
 800a77c:	6819      	ldreq	r1, [r3, #0]
 800a77e:	685b      	ldreq	r3, [r3, #4]
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	bf04      	itt	eq
 800a784:	1949      	addeq	r1, r1, r5
 800a786:	6021      	streq	r1, [r4, #0]
 800a788:	6054      	str	r4, [r2, #4]
 800a78a:	e7ca      	b.n	800a722 <_free_r+0x26>
 800a78c:	b003      	add	sp, #12
 800a78e:	bd30      	pop	{r4, r5, pc}
 800a790:	200059ac 	.word	0x200059ac

0800a794 <malloc>:
 800a794:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <malloc+0xc>)
 800a796:	4601      	mov	r1, r0
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f000 b823 	b.w	800a7e4 <_malloc_r>
 800a79e:	bf00      	nop
 800a7a0:	200000ac 	.word	0x200000ac

0800a7a4 <sbrk_aligned>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	4e0e      	ldr	r6, [pc, #56]	; (800a7e0 <sbrk_aligned+0x3c>)
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	6831      	ldr	r1, [r6, #0]
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	b911      	cbnz	r1, 800a7b6 <sbrk_aligned+0x12>
 800a7b0:	f002 fb76 	bl	800cea0 <_sbrk_r>
 800a7b4:	6030      	str	r0, [r6, #0]
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	f002 fb71 	bl	800cea0 <_sbrk_r>
 800a7be:	1c43      	adds	r3, r0, #1
 800a7c0:	d00a      	beq.n	800a7d8 <sbrk_aligned+0x34>
 800a7c2:	1cc4      	adds	r4, r0, #3
 800a7c4:	f024 0403 	bic.w	r4, r4, #3
 800a7c8:	42a0      	cmp	r0, r4
 800a7ca:	d007      	beq.n	800a7dc <sbrk_aligned+0x38>
 800a7cc:	1a21      	subs	r1, r4, r0
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f002 fb66 	bl	800cea0 <_sbrk_r>
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d101      	bne.n	800a7dc <sbrk_aligned+0x38>
 800a7d8:	f04f 34ff 	mov.w	r4, #4294967295
 800a7dc:	4620      	mov	r0, r4
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
 800a7e0:	200059b0 	.word	0x200059b0

0800a7e4 <_malloc_r>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	1ccd      	adds	r5, r1, #3
 800a7ea:	f025 0503 	bic.w	r5, r5, #3
 800a7ee:	3508      	adds	r5, #8
 800a7f0:	2d0c      	cmp	r5, #12
 800a7f2:	bf38      	it	cc
 800a7f4:	250c      	movcc	r5, #12
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	db01      	blt.n	800a800 <_malloc_r+0x1c>
 800a7fc:	42a9      	cmp	r1, r5
 800a7fe:	d905      	bls.n	800a80c <_malloc_r+0x28>
 800a800:	230c      	movs	r3, #12
 800a802:	603b      	str	r3, [r7, #0]
 800a804:	2600      	movs	r6, #0
 800a806:	4630      	mov	r0, r6
 800a808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a80c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a8e0 <_malloc_r+0xfc>
 800a810:	f000 f868 	bl	800a8e4 <__malloc_lock>
 800a814:	f8d8 3000 	ldr.w	r3, [r8]
 800a818:	461c      	mov	r4, r3
 800a81a:	bb5c      	cbnz	r4, 800a874 <_malloc_r+0x90>
 800a81c:	4629      	mov	r1, r5
 800a81e:	4638      	mov	r0, r7
 800a820:	f7ff ffc0 	bl	800a7a4 <sbrk_aligned>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	4604      	mov	r4, r0
 800a828:	d155      	bne.n	800a8d6 <_malloc_r+0xf2>
 800a82a:	f8d8 4000 	ldr.w	r4, [r8]
 800a82e:	4626      	mov	r6, r4
 800a830:	2e00      	cmp	r6, #0
 800a832:	d145      	bne.n	800a8c0 <_malloc_r+0xdc>
 800a834:	2c00      	cmp	r4, #0
 800a836:	d048      	beq.n	800a8ca <_malloc_r+0xe6>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	4631      	mov	r1, r6
 800a83c:	4638      	mov	r0, r7
 800a83e:	eb04 0903 	add.w	r9, r4, r3
 800a842:	f002 fb2d 	bl	800cea0 <_sbrk_r>
 800a846:	4581      	cmp	r9, r0
 800a848:	d13f      	bne.n	800a8ca <_malloc_r+0xe6>
 800a84a:	6821      	ldr	r1, [r4, #0]
 800a84c:	1a6d      	subs	r5, r5, r1
 800a84e:	4629      	mov	r1, r5
 800a850:	4638      	mov	r0, r7
 800a852:	f7ff ffa7 	bl	800a7a4 <sbrk_aligned>
 800a856:	3001      	adds	r0, #1
 800a858:	d037      	beq.n	800a8ca <_malloc_r+0xe6>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	442b      	add	r3, r5
 800a85e:	6023      	str	r3, [r4, #0]
 800a860:	f8d8 3000 	ldr.w	r3, [r8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d038      	beq.n	800a8da <_malloc_r+0xf6>
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	42a2      	cmp	r2, r4
 800a86c:	d12b      	bne.n	800a8c6 <_malloc_r+0xe2>
 800a86e:	2200      	movs	r2, #0
 800a870:	605a      	str	r2, [r3, #4]
 800a872:	e00f      	b.n	800a894 <_malloc_r+0xb0>
 800a874:	6822      	ldr	r2, [r4, #0]
 800a876:	1b52      	subs	r2, r2, r5
 800a878:	d41f      	bmi.n	800a8ba <_malloc_r+0xd6>
 800a87a:	2a0b      	cmp	r2, #11
 800a87c:	d917      	bls.n	800a8ae <_malloc_r+0xca>
 800a87e:	1961      	adds	r1, r4, r5
 800a880:	42a3      	cmp	r3, r4
 800a882:	6025      	str	r5, [r4, #0]
 800a884:	bf18      	it	ne
 800a886:	6059      	strne	r1, [r3, #4]
 800a888:	6863      	ldr	r3, [r4, #4]
 800a88a:	bf08      	it	eq
 800a88c:	f8c8 1000 	streq.w	r1, [r8]
 800a890:	5162      	str	r2, [r4, r5]
 800a892:	604b      	str	r3, [r1, #4]
 800a894:	4638      	mov	r0, r7
 800a896:	f104 060b 	add.w	r6, r4, #11
 800a89a:	f000 f829 	bl	800a8f0 <__malloc_unlock>
 800a89e:	f026 0607 	bic.w	r6, r6, #7
 800a8a2:	1d23      	adds	r3, r4, #4
 800a8a4:	1af2      	subs	r2, r6, r3
 800a8a6:	d0ae      	beq.n	800a806 <_malloc_r+0x22>
 800a8a8:	1b9b      	subs	r3, r3, r6
 800a8aa:	50a3      	str	r3, [r4, r2]
 800a8ac:	e7ab      	b.n	800a806 <_malloc_r+0x22>
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	6862      	ldr	r2, [r4, #4]
 800a8b2:	d1dd      	bne.n	800a870 <_malloc_r+0x8c>
 800a8b4:	f8c8 2000 	str.w	r2, [r8]
 800a8b8:	e7ec      	b.n	800a894 <_malloc_r+0xb0>
 800a8ba:	4623      	mov	r3, r4
 800a8bc:	6864      	ldr	r4, [r4, #4]
 800a8be:	e7ac      	b.n	800a81a <_malloc_r+0x36>
 800a8c0:	4634      	mov	r4, r6
 800a8c2:	6876      	ldr	r6, [r6, #4]
 800a8c4:	e7b4      	b.n	800a830 <_malloc_r+0x4c>
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	e7cc      	b.n	800a864 <_malloc_r+0x80>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	603b      	str	r3, [r7, #0]
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	f000 f80e 	bl	800a8f0 <__malloc_unlock>
 800a8d4:	e797      	b.n	800a806 <_malloc_r+0x22>
 800a8d6:	6025      	str	r5, [r4, #0]
 800a8d8:	e7dc      	b.n	800a894 <_malloc_r+0xb0>
 800a8da:	605b      	str	r3, [r3, #4]
 800a8dc:	deff      	udf	#255	; 0xff
 800a8de:	bf00      	nop
 800a8e0:	200059ac 	.word	0x200059ac

0800a8e4 <__malloc_lock>:
 800a8e4:	4801      	ldr	r0, [pc, #4]	; (800a8ec <__malloc_lock+0x8>)
 800a8e6:	f7ff b877 	b.w	80099d8 <__retarget_lock_acquire_recursive>
 800a8ea:	bf00      	nop
 800a8ec:	200059a8 	.word	0x200059a8

0800a8f0 <__malloc_unlock>:
 800a8f0:	4801      	ldr	r0, [pc, #4]	; (800a8f8 <__malloc_unlock+0x8>)
 800a8f2:	f7ff b872 	b.w	80099da <__retarget_lock_release_recursive>
 800a8f6:	bf00      	nop
 800a8f8:	200059a8 	.word	0x200059a8

0800a8fc <_Balloc>:
 800a8fc:	b570      	push	{r4, r5, r6, lr}
 800a8fe:	69c6      	ldr	r6, [r0, #28]
 800a900:	4604      	mov	r4, r0
 800a902:	460d      	mov	r5, r1
 800a904:	b976      	cbnz	r6, 800a924 <_Balloc+0x28>
 800a906:	2010      	movs	r0, #16
 800a908:	f7ff ff44 	bl	800a794 <malloc>
 800a90c:	4602      	mov	r2, r0
 800a90e:	61e0      	str	r0, [r4, #28]
 800a910:	b920      	cbnz	r0, 800a91c <_Balloc+0x20>
 800a912:	4b18      	ldr	r3, [pc, #96]	; (800a974 <_Balloc+0x78>)
 800a914:	4818      	ldr	r0, [pc, #96]	; (800a978 <_Balloc+0x7c>)
 800a916:	216b      	movs	r1, #107	; 0x6b
 800a918:	f002 fada 	bl	800ced0 <__assert_func>
 800a91c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a920:	6006      	str	r6, [r0, #0]
 800a922:	60c6      	str	r6, [r0, #12]
 800a924:	69e6      	ldr	r6, [r4, #28]
 800a926:	68f3      	ldr	r3, [r6, #12]
 800a928:	b183      	cbz	r3, 800a94c <_Balloc+0x50>
 800a92a:	69e3      	ldr	r3, [r4, #28]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a932:	b9b8      	cbnz	r0, 800a964 <_Balloc+0x68>
 800a934:	2101      	movs	r1, #1
 800a936:	fa01 f605 	lsl.w	r6, r1, r5
 800a93a:	1d72      	adds	r2, r6, #5
 800a93c:	0092      	lsls	r2, r2, #2
 800a93e:	4620      	mov	r0, r4
 800a940:	f002 fae4 	bl	800cf0c <_calloc_r>
 800a944:	b160      	cbz	r0, 800a960 <_Balloc+0x64>
 800a946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a94a:	e00e      	b.n	800a96a <_Balloc+0x6e>
 800a94c:	2221      	movs	r2, #33	; 0x21
 800a94e:	2104      	movs	r1, #4
 800a950:	4620      	mov	r0, r4
 800a952:	f002 fadb 	bl	800cf0c <_calloc_r>
 800a956:	69e3      	ldr	r3, [r4, #28]
 800a958:	60f0      	str	r0, [r6, #12]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1e4      	bne.n	800a92a <_Balloc+0x2e>
 800a960:	2000      	movs	r0, #0
 800a962:	bd70      	pop	{r4, r5, r6, pc}
 800a964:	6802      	ldr	r2, [r0, #0]
 800a966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a96a:	2300      	movs	r3, #0
 800a96c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a970:	e7f7      	b.n	800a962 <_Balloc+0x66>
 800a972:	bf00      	nop
 800a974:	0800dc70 	.word	0x0800dc70
 800a978:	0800dcf0 	.word	0x0800dcf0

0800a97c <_Bfree>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	69c6      	ldr	r6, [r0, #28]
 800a980:	4605      	mov	r5, r0
 800a982:	460c      	mov	r4, r1
 800a984:	b976      	cbnz	r6, 800a9a4 <_Bfree+0x28>
 800a986:	2010      	movs	r0, #16
 800a988:	f7ff ff04 	bl	800a794 <malloc>
 800a98c:	4602      	mov	r2, r0
 800a98e:	61e8      	str	r0, [r5, #28]
 800a990:	b920      	cbnz	r0, 800a99c <_Bfree+0x20>
 800a992:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <_Bfree+0x3c>)
 800a994:	4809      	ldr	r0, [pc, #36]	; (800a9bc <_Bfree+0x40>)
 800a996:	218f      	movs	r1, #143	; 0x8f
 800a998:	f002 fa9a 	bl	800ced0 <__assert_func>
 800a99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9a0:	6006      	str	r6, [r0, #0]
 800a9a2:	60c6      	str	r6, [r0, #12]
 800a9a4:	b13c      	cbz	r4, 800a9b6 <_Bfree+0x3a>
 800a9a6:	69eb      	ldr	r3, [r5, #28]
 800a9a8:	6862      	ldr	r2, [r4, #4]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9b0:	6021      	str	r1, [r4, #0]
 800a9b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	0800dc70 	.word	0x0800dc70
 800a9bc:	0800dcf0 	.word	0x0800dcf0

0800a9c0 <__multadd>:
 800a9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c4:	690d      	ldr	r5, [r1, #16]
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	461e      	mov	r6, r3
 800a9cc:	f101 0c14 	add.w	ip, r1, #20
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f8dc 3000 	ldr.w	r3, [ip]
 800a9d6:	b299      	uxth	r1, r3
 800a9d8:	fb02 6101 	mla	r1, r2, r1, r6
 800a9dc:	0c1e      	lsrs	r6, r3, #16
 800a9de:	0c0b      	lsrs	r3, r1, #16
 800a9e0:	fb02 3306 	mla	r3, r2, r6, r3
 800a9e4:	b289      	uxth	r1, r1
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9ec:	4285      	cmp	r5, r0
 800a9ee:	f84c 1b04 	str.w	r1, [ip], #4
 800a9f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9f6:	dcec      	bgt.n	800a9d2 <__multadd+0x12>
 800a9f8:	b30e      	cbz	r6, 800aa3e <__multadd+0x7e>
 800a9fa:	68a3      	ldr	r3, [r4, #8]
 800a9fc:	42ab      	cmp	r3, r5
 800a9fe:	dc19      	bgt.n	800aa34 <__multadd+0x74>
 800aa00:	6861      	ldr	r1, [r4, #4]
 800aa02:	4638      	mov	r0, r7
 800aa04:	3101      	adds	r1, #1
 800aa06:	f7ff ff79 	bl	800a8fc <_Balloc>
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	b928      	cbnz	r0, 800aa1a <__multadd+0x5a>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <__multadd+0x84>)
 800aa12:	480d      	ldr	r0, [pc, #52]	; (800aa48 <__multadd+0x88>)
 800aa14:	21ba      	movs	r1, #186	; 0xba
 800aa16:	f002 fa5b 	bl	800ced0 <__assert_func>
 800aa1a:	6922      	ldr	r2, [r4, #16]
 800aa1c:	3202      	adds	r2, #2
 800aa1e:	f104 010c 	add.w	r1, r4, #12
 800aa22:	0092      	lsls	r2, r2, #2
 800aa24:	300c      	adds	r0, #12
 800aa26:	f7fe ffd9 	bl	80099dc <memcpy>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	f7ff ffa5 	bl	800a97c <_Bfree>
 800aa32:	4644      	mov	r4, r8
 800aa34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa38:	3501      	adds	r5, #1
 800aa3a:	615e      	str	r6, [r3, #20]
 800aa3c:	6125      	str	r5, [r4, #16]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa44:	0800dcdf 	.word	0x0800dcdf
 800aa48:	0800dcf0 	.word	0x0800dcf0

0800aa4c <__s2b>:
 800aa4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa50:	460c      	mov	r4, r1
 800aa52:	4615      	mov	r5, r2
 800aa54:	461f      	mov	r7, r3
 800aa56:	2209      	movs	r2, #9
 800aa58:	3308      	adds	r3, #8
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa60:	2100      	movs	r1, #0
 800aa62:	2201      	movs	r2, #1
 800aa64:	429a      	cmp	r2, r3
 800aa66:	db09      	blt.n	800aa7c <__s2b+0x30>
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7ff ff47 	bl	800a8fc <_Balloc>
 800aa6e:	b940      	cbnz	r0, 800aa82 <__s2b+0x36>
 800aa70:	4602      	mov	r2, r0
 800aa72:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <__s2b+0x8c>)
 800aa74:	4819      	ldr	r0, [pc, #100]	; (800aadc <__s2b+0x90>)
 800aa76:	21d3      	movs	r1, #211	; 0xd3
 800aa78:	f002 fa2a 	bl	800ced0 <__assert_func>
 800aa7c:	0052      	lsls	r2, r2, #1
 800aa7e:	3101      	adds	r1, #1
 800aa80:	e7f0      	b.n	800aa64 <__s2b+0x18>
 800aa82:	9b08      	ldr	r3, [sp, #32]
 800aa84:	6143      	str	r3, [r0, #20]
 800aa86:	2d09      	cmp	r5, #9
 800aa88:	f04f 0301 	mov.w	r3, #1
 800aa8c:	6103      	str	r3, [r0, #16]
 800aa8e:	dd16      	ble.n	800aabe <__s2b+0x72>
 800aa90:	f104 0909 	add.w	r9, r4, #9
 800aa94:	46c8      	mov	r8, r9
 800aa96:	442c      	add	r4, r5
 800aa98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	3b30      	subs	r3, #48	; 0x30
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7ff ff8c 	bl	800a9c0 <__multadd>
 800aaa8:	45a0      	cmp	r8, r4
 800aaaa:	d1f5      	bne.n	800aa98 <__s2b+0x4c>
 800aaac:	f1a5 0408 	sub.w	r4, r5, #8
 800aab0:	444c      	add	r4, r9
 800aab2:	1b2d      	subs	r5, r5, r4
 800aab4:	1963      	adds	r3, r4, r5
 800aab6:	42bb      	cmp	r3, r7
 800aab8:	db04      	blt.n	800aac4 <__s2b+0x78>
 800aaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aabe:	340a      	adds	r4, #10
 800aac0:	2509      	movs	r5, #9
 800aac2:	e7f6      	b.n	800aab2 <__s2b+0x66>
 800aac4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aac8:	4601      	mov	r1, r0
 800aaca:	3b30      	subs	r3, #48	; 0x30
 800aacc:	220a      	movs	r2, #10
 800aace:	4630      	mov	r0, r6
 800aad0:	f7ff ff76 	bl	800a9c0 <__multadd>
 800aad4:	e7ee      	b.n	800aab4 <__s2b+0x68>
 800aad6:	bf00      	nop
 800aad8:	0800dcdf 	.word	0x0800dcdf
 800aadc:	0800dcf0 	.word	0x0800dcf0

0800aae0 <__hi0bits>:
 800aae0:	0c03      	lsrs	r3, r0, #16
 800aae2:	041b      	lsls	r3, r3, #16
 800aae4:	b9d3      	cbnz	r3, 800ab1c <__hi0bits+0x3c>
 800aae6:	0400      	lsls	r0, r0, #16
 800aae8:	2310      	movs	r3, #16
 800aaea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aaee:	bf04      	itt	eq
 800aaf0:	0200      	lsleq	r0, r0, #8
 800aaf2:	3308      	addeq	r3, #8
 800aaf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aaf8:	bf04      	itt	eq
 800aafa:	0100      	lsleq	r0, r0, #4
 800aafc:	3304      	addeq	r3, #4
 800aafe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab02:	bf04      	itt	eq
 800ab04:	0080      	lsleq	r0, r0, #2
 800ab06:	3302      	addeq	r3, #2
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	db05      	blt.n	800ab18 <__hi0bits+0x38>
 800ab0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab10:	f103 0301 	add.w	r3, r3, #1
 800ab14:	bf08      	it	eq
 800ab16:	2320      	moveq	r3, #32
 800ab18:	4618      	mov	r0, r3
 800ab1a:	4770      	bx	lr
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	e7e4      	b.n	800aaea <__hi0bits+0xa>

0800ab20 <__lo0bits>:
 800ab20:	6803      	ldr	r3, [r0, #0]
 800ab22:	f013 0207 	ands.w	r2, r3, #7
 800ab26:	d00c      	beq.n	800ab42 <__lo0bits+0x22>
 800ab28:	07d9      	lsls	r1, r3, #31
 800ab2a:	d422      	bmi.n	800ab72 <__lo0bits+0x52>
 800ab2c:	079a      	lsls	r2, r3, #30
 800ab2e:	bf49      	itett	mi
 800ab30:	085b      	lsrmi	r3, r3, #1
 800ab32:	089b      	lsrpl	r3, r3, #2
 800ab34:	6003      	strmi	r3, [r0, #0]
 800ab36:	2201      	movmi	r2, #1
 800ab38:	bf5c      	itt	pl
 800ab3a:	6003      	strpl	r3, [r0, #0]
 800ab3c:	2202      	movpl	r2, #2
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4770      	bx	lr
 800ab42:	b299      	uxth	r1, r3
 800ab44:	b909      	cbnz	r1, 800ab4a <__lo0bits+0x2a>
 800ab46:	0c1b      	lsrs	r3, r3, #16
 800ab48:	2210      	movs	r2, #16
 800ab4a:	b2d9      	uxtb	r1, r3
 800ab4c:	b909      	cbnz	r1, 800ab52 <__lo0bits+0x32>
 800ab4e:	3208      	adds	r2, #8
 800ab50:	0a1b      	lsrs	r3, r3, #8
 800ab52:	0719      	lsls	r1, r3, #28
 800ab54:	bf04      	itt	eq
 800ab56:	091b      	lsreq	r3, r3, #4
 800ab58:	3204      	addeq	r2, #4
 800ab5a:	0799      	lsls	r1, r3, #30
 800ab5c:	bf04      	itt	eq
 800ab5e:	089b      	lsreq	r3, r3, #2
 800ab60:	3202      	addeq	r2, #2
 800ab62:	07d9      	lsls	r1, r3, #31
 800ab64:	d403      	bmi.n	800ab6e <__lo0bits+0x4e>
 800ab66:	085b      	lsrs	r3, r3, #1
 800ab68:	f102 0201 	add.w	r2, r2, #1
 800ab6c:	d003      	beq.n	800ab76 <__lo0bits+0x56>
 800ab6e:	6003      	str	r3, [r0, #0]
 800ab70:	e7e5      	b.n	800ab3e <__lo0bits+0x1e>
 800ab72:	2200      	movs	r2, #0
 800ab74:	e7e3      	b.n	800ab3e <__lo0bits+0x1e>
 800ab76:	2220      	movs	r2, #32
 800ab78:	e7e1      	b.n	800ab3e <__lo0bits+0x1e>
	...

0800ab7c <__i2b>:
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	460c      	mov	r4, r1
 800ab80:	2101      	movs	r1, #1
 800ab82:	f7ff febb 	bl	800a8fc <_Balloc>
 800ab86:	4602      	mov	r2, r0
 800ab88:	b928      	cbnz	r0, 800ab96 <__i2b+0x1a>
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <__i2b+0x24>)
 800ab8c:	4805      	ldr	r0, [pc, #20]	; (800aba4 <__i2b+0x28>)
 800ab8e:	f240 1145 	movw	r1, #325	; 0x145
 800ab92:	f002 f99d 	bl	800ced0 <__assert_func>
 800ab96:	2301      	movs	r3, #1
 800ab98:	6144      	str	r4, [r0, #20]
 800ab9a:	6103      	str	r3, [r0, #16]
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	bf00      	nop
 800aba0:	0800dcdf 	.word	0x0800dcdf
 800aba4:	0800dcf0 	.word	0x0800dcf0

0800aba8 <__multiply>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	4691      	mov	r9, r2
 800abae:	690a      	ldr	r2, [r1, #16]
 800abb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	bfb8      	it	lt
 800abb8:	460b      	movlt	r3, r1
 800abba:	460c      	mov	r4, r1
 800abbc:	bfbc      	itt	lt
 800abbe:	464c      	movlt	r4, r9
 800abc0:	4699      	movlt	r9, r3
 800abc2:	6927      	ldr	r7, [r4, #16]
 800abc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abc8:	68a3      	ldr	r3, [r4, #8]
 800abca:	6861      	ldr	r1, [r4, #4]
 800abcc:	eb07 060a 	add.w	r6, r7, sl
 800abd0:	42b3      	cmp	r3, r6
 800abd2:	b085      	sub	sp, #20
 800abd4:	bfb8      	it	lt
 800abd6:	3101      	addlt	r1, #1
 800abd8:	f7ff fe90 	bl	800a8fc <_Balloc>
 800abdc:	b930      	cbnz	r0, 800abec <__multiply+0x44>
 800abde:	4602      	mov	r2, r0
 800abe0:	4b44      	ldr	r3, [pc, #272]	; (800acf4 <__multiply+0x14c>)
 800abe2:	4845      	ldr	r0, [pc, #276]	; (800acf8 <__multiply+0x150>)
 800abe4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800abe8:	f002 f972 	bl	800ced0 <__assert_func>
 800abec:	f100 0514 	add.w	r5, r0, #20
 800abf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abf4:	462b      	mov	r3, r5
 800abf6:	2200      	movs	r2, #0
 800abf8:	4543      	cmp	r3, r8
 800abfa:	d321      	bcc.n	800ac40 <__multiply+0x98>
 800abfc:	f104 0314 	add.w	r3, r4, #20
 800ac00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac04:	f109 0314 	add.w	r3, r9, #20
 800ac08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac0c:	9202      	str	r2, [sp, #8]
 800ac0e:	1b3a      	subs	r2, r7, r4
 800ac10:	3a15      	subs	r2, #21
 800ac12:	f022 0203 	bic.w	r2, r2, #3
 800ac16:	3204      	adds	r2, #4
 800ac18:	f104 0115 	add.w	r1, r4, #21
 800ac1c:	428f      	cmp	r7, r1
 800ac1e:	bf38      	it	cc
 800ac20:	2204      	movcc	r2, #4
 800ac22:	9201      	str	r2, [sp, #4]
 800ac24:	9a02      	ldr	r2, [sp, #8]
 800ac26:	9303      	str	r3, [sp, #12]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d80c      	bhi.n	800ac46 <__multiply+0x9e>
 800ac2c:	2e00      	cmp	r6, #0
 800ac2e:	dd03      	ble.n	800ac38 <__multiply+0x90>
 800ac30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d05b      	beq.n	800acf0 <__multiply+0x148>
 800ac38:	6106      	str	r6, [r0, #16]
 800ac3a:	b005      	add	sp, #20
 800ac3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac40:	f843 2b04 	str.w	r2, [r3], #4
 800ac44:	e7d8      	b.n	800abf8 <__multiply+0x50>
 800ac46:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac4a:	f1ba 0f00 	cmp.w	sl, #0
 800ac4e:	d024      	beq.n	800ac9a <__multiply+0xf2>
 800ac50:	f104 0e14 	add.w	lr, r4, #20
 800ac54:	46a9      	mov	r9, r5
 800ac56:	f04f 0c00 	mov.w	ip, #0
 800ac5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac5e:	f8d9 1000 	ldr.w	r1, [r9]
 800ac62:	fa1f fb82 	uxth.w	fp, r2
 800ac66:	b289      	uxth	r1, r1
 800ac68:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac70:	f8d9 2000 	ldr.w	r2, [r9]
 800ac74:	4461      	add	r1, ip
 800ac76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac82:	b289      	uxth	r1, r1
 800ac84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac88:	4577      	cmp	r7, lr
 800ac8a:	f849 1b04 	str.w	r1, [r9], #4
 800ac8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac92:	d8e2      	bhi.n	800ac5a <__multiply+0xb2>
 800ac94:	9a01      	ldr	r2, [sp, #4]
 800ac96:	f845 c002 	str.w	ip, [r5, r2]
 800ac9a:	9a03      	ldr	r2, [sp, #12]
 800ac9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aca0:	3304      	adds	r3, #4
 800aca2:	f1b9 0f00 	cmp.w	r9, #0
 800aca6:	d021      	beq.n	800acec <__multiply+0x144>
 800aca8:	6829      	ldr	r1, [r5, #0]
 800acaa:	f104 0c14 	add.w	ip, r4, #20
 800acae:	46ae      	mov	lr, r5
 800acb0:	f04f 0a00 	mov.w	sl, #0
 800acb4:	f8bc b000 	ldrh.w	fp, [ip]
 800acb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800acbc:	fb09 220b 	mla	r2, r9, fp, r2
 800acc0:	4452      	add	r2, sl
 800acc2:	b289      	uxth	r1, r1
 800acc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acc8:	f84e 1b04 	str.w	r1, [lr], #4
 800accc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800acd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800acd4:	f8be 1000 	ldrh.w	r1, [lr]
 800acd8:	fb09 110a 	mla	r1, r9, sl, r1
 800acdc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ace0:	4567      	cmp	r7, ip
 800ace2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ace6:	d8e5      	bhi.n	800acb4 <__multiply+0x10c>
 800ace8:	9a01      	ldr	r2, [sp, #4]
 800acea:	50a9      	str	r1, [r5, r2]
 800acec:	3504      	adds	r5, #4
 800acee:	e799      	b.n	800ac24 <__multiply+0x7c>
 800acf0:	3e01      	subs	r6, #1
 800acf2:	e79b      	b.n	800ac2c <__multiply+0x84>
 800acf4:	0800dcdf 	.word	0x0800dcdf
 800acf8:	0800dcf0 	.word	0x0800dcf0

0800acfc <__pow5mult>:
 800acfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad00:	4615      	mov	r5, r2
 800ad02:	f012 0203 	ands.w	r2, r2, #3
 800ad06:	4606      	mov	r6, r0
 800ad08:	460f      	mov	r7, r1
 800ad0a:	d007      	beq.n	800ad1c <__pow5mult+0x20>
 800ad0c:	4c25      	ldr	r4, [pc, #148]	; (800ada4 <__pow5mult+0xa8>)
 800ad0e:	3a01      	subs	r2, #1
 800ad10:	2300      	movs	r3, #0
 800ad12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad16:	f7ff fe53 	bl	800a9c0 <__multadd>
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	10ad      	asrs	r5, r5, #2
 800ad1e:	d03d      	beq.n	800ad9c <__pow5mult+0xa0>
 800ad20:	69f4      	ldr	r4, [r6, #28]
 800ad22:	b97c      	cbnz	r4, 800ad44 <__pow5mult+0x48>
 800ad24:	2010      	movs	r0, #16
 800ad26:	f7ff fd35 	bl	800a794 <malloc>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	61f0      	str	r0, [r6, #28]
 800ad2e:	b928      	cbnz	r0, 800ad3c <__pow5mult+0x40>
 800ad30:	4b1d      	ldr	r3, [pc, #116]	; (800ada8 <__pow5mult+0xac>)
 800ad32:	481e      	ldr	r0, [pc, #120]	; (800adac <__pow5mult+0xb0>)
 800ad34:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ad38:	f002 f8ca 	bl	800ced0 <__assert_func>
 800ad3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad40:	6004      	str	r4, [r0, #0]
 800ad42:	60c4      	str	r4, [r0, #12]
 800ad44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ad48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad4c:	b94c      	cbnz	r4, 800ad62 <__pow5mult+0x66>
 800ad4e:	f240 2171 	movw	r1, #625	; 0x271
 800ad52:	4630      	mov	r0, r6
 800ad54:	f7ff ff12 	bl	800ab7c <__i2b>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad5e:	4604      	mov	r4, r0
 800ad60:	6003      	str	r3, [r0, #0]
 800ad62:	f04f 0900 	mov.w	r9, #0
 800ad66:	07eb      	lsls	r3, r5, #31
 800ad68:	d50a      	bpl.n	800ad80 <__pow5mult+0x84>
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	4630      	mov	r0, r6
 800ad70:	f7ff ff1a 	bl	800aba8 <__multiply>
 800ad74:	4639      	mov	r1, r7
 800ad76:	4680      	mov	r8, r0
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff fdff 	bl	800a97c <_Bfree>
 800ad7e:	4647      	mov	r7, r8
 800ad80:	106d      	asrs	r5, r5, #1
 800ad82:	d00b      	beq.n	800ad9c <__pow5mult+0xa0>
 800ad84:	6820      	ldr	r0, [r4, #0]
 800ad86:	b938      	cbnz	r0, 800ad98 <__pow5mult+0x9c>
 800ad88:	4622      	mov	r2, r4
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7ff ff0b 	bl	800aba8 <__multiply>
 800ad92:	6020      	str	r0, [r4, #0]
 800ad94:	f8c0 9000 	str.w	r9, [r0]
 800ad98:	4604      	mov	r4, r0
 800ad9a:	e7e4      	b.n	800ad66 <__pow5mult+0x6a>
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada2:	bf00      	nop
 800ada4:	0800de40 	.word	0x0800de40
 800ada8:	0800dc70 	.word	0x0800dc70
 800adac:	0800dcf0 	.word	0x0800dcf0

0800adb0 <__lshift>:
 800adb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb4:	460c      	mov	r4, r1
 800adb6:	6849      	ldr	r1, [r1, #4]
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adbe:	68a3      	ldr	r3, [r4, #8]
 800adc0:	4607      	mov	r7, r0
 800adc2:	4691      	mov	r9, r2
 800adc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adc8:	f108 0601 	add.w	r6, r8, #1
 800adcc:	42b3      	cmp	r3, r6
 800adce:	db0b      	blt.n	800ade8 <__lshift+0x38>
 800add0:	4638      	mov	r0, r7
 800add2:	f7ff fd93 	bl	800a8fc <_Balloc>
 800add6:	4605      	mov	r5, r0
 800add8:	b948      	cbnz	r0, 800adee <__lshift+0x3e>
 800adda:	4602      	mov	r2, r0
 800addc:	4b28      	ldr	r3, [pc, #160]	; (800ae80 <__lshift+0xd0>)
 800adde:	4829      	ldr	r0, [pc, #164]	; (800ae84 <__lshift+0xd4>)
 800ade0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ade4:	f002 f874 	bl	800ced0 <__assert_func>
 800ade8:	3101      	adds	r1, #1
 800adea:	005b      	lsls	r3, r3, #1
 800adec:	e7ee      	b.n	800adcc <__lshift+0x1c>
 800adee:	2300      	movs	r3, #0
 800adf0:	f100 0114 	add.w	r1, r0, #20
 800adf4:	f100 0210 	add.w	r2, r0, #16
 800adf8:	4618      	mov	r0, r3
 800adfa:	4553      	cmp	r3, sl
 800adfc:	db33      	blt.n	800ae66 <__lshift+0xb6>
 800adfe:	6920      	ldr	r0, [r4, #16]
 800ae00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae04:	f104 0314 	add.w	r3, r4, #20
 800ae08:	f019 091f 	ands.w	r9, r9, #31
 800ae0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae14:	d02b      	beq.n	800ae6e <__lshift+0xbe>
 800ae16:	f1c9 0e20 	rsb	lr, r9, #32
 800ae1a:	468a      	mov	sl, r1
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	fa00 f009 	lsl.w	r0, r0, r9
 800ae24:	4310      	orrs	r0, r2
 800ae26:	f84a 0b04 	str.w	r0, [sl], #4
 800ae2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae2e:	459c      	cmp	ip, r3
 800ae30:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae34:	d8f3      	bhi.n	800ae1e <__lshift+0x6e>
 800ae36:	ebac 0304 	sub.w	r3, ip, r4
 800ae3a:	3b15      	subs	r3, #21
 800ae3c:	f023 0303 	bic.w	r3, r3, #3
 800ae40:	3304      	adds	r3, #4
 800ae42:	f104 0015 	add.w	r0, r4, #21
 800ae46:	4584      	cmp	ip, r0
 800ae48:	bf38      	it	cc
 800ae4a:	2304      	movcc	r3, #4
 800ae4c:	50ca      	str	r2, [r1, r3]
 800ae4e:	b10a      	cbz	r2, 800ae54 <__lshift+0xa4>
 800ae50:	f108 0602 	add.w	r6, r8, #2
 800ae54:	3e01      	subs	r6, #1
 800ae56:	4638      	mov	r0, r7
 800ae58:	612e      	str	r6, [r5, #16]
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	f7ff fd8e 	bl	800a97c <_Bfree>
 800ae60:	4628      	mov	r0, r5
 800ae62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae66:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	e7c5      	b.n	800adfa <__lshift+0x4a>
 800ae6e:	3904      	subs	r1, #4
 800ae70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae74:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae78:	459c      	cmp	ip, r3
 800ae7a:	d8f9      	bhi.n	800ae70 <__lshift+0xc0>
 800ae7c:	e7ea      	b.n	800ae54 <__lshift+0xa4>
 800ae7e:	bf00      	nop
 800ae80:	0800dcdf 	.word	0x0800dcdf
 800ae84:	0800dcf0 	.word	0x0800dcf0

0800ae88 <__mcmp>:
 800ae88:	b530      	push	{r4, r5, lr}
 800ae8a:	6902      	ldr	r2, [r0, #16]
 800ae8c:	690c      	ldr	r4, [r1, #16]
 800ae8e:	1b12      	subs	r2, r2, r4
 800ae90:	d10e      	bne.n	800aeb0 <__mcmp+0x28>
 800ae92:	f100 0314 	add.w	r3, r0, #20
 800ae96:	3114      	adds	r1, #20
 800ae98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aea0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aea4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aea8:	42a5      	cmp	r5, r4
 800aeaa:	d003      	beq.n	800aeb4 <__mcmp+0x2c>
 800aeac:	d305      	bcc.n	800aeba <__mcmp+0x32>
 800aeae:	2201      	movs	r2, #1
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	bd30      	pop	{r4, r5, pc}
 800aeb4:	4283      	cmp	r3, r0
 800aeb6:	d3f3      	bcc.n	800aea0 <__mcmp+0x18>
 800aeb8:	e7fa      	b.n	800aeb0 <__mcmp+0x28>
 800aeba:	f04f 32ff 	mov.w	r2, #4294967295
 800aebe:	e7f7      	b.n	800aeb0 <__mcmp+0x28>

0800aec0 <__mdiff>:
 800aec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	460c      	mov	r4, r1
 800aec6:	4606      	mov	r6, r0
 800aec8:	4611      	mov	r1, r2
 800aeca:	4620      	mov	r0, r4
 800aecc:	4690      	mov	r8, r2
 800aece:	f7ff ffdb 	bl	800ae88 <__mcmp>
 800aed2:	1e05      	subs	r5, r0, #0
 800aed4:	d110      	bne.n	800aef8 <__mdiff+0x38>
 800aed6:	4629      	mov	r1, r5
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff fd0f 	bl	800a8fc <_Balloc>
 800aede:	b930      	cbnz	r0, 800aeee <__mdiff+0x2e>
 800aee0:	4b3a      	ldr	r3, [pc, #232]	; (800afcc <__mdiff+0x10c>)
 800aee2:	4602      	mov	r2, r0
 800aee4:	f240 2137 	movw	r1, #567	; 0x237
 800aee8:	4839      	ldr	r0, [pc, #228]	; (800afd0 <__mdiff+0x110>)
 800aeea:	f001 fff1 	bl	800ced0 <__assert_func>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	bfa4      	itt	ge
 800aefa:	4643      	movge	r3, r8
 800aefc:	46a0      	movge	r8, r4
 800aefe:	4630      	mov	r0, r6
 800af00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af04:	bfa6      	itte	ge
 800af06:	461c      	movge	r4, r3
 800af08:	2500      	movge	r5, #0
 800af0a:	2501      	movlt	r5, #1
 800af0c:	f7ff fcf6 	bl	800a8fc <_Balloc>
 800af10:	b920      	cbnz	r0, 800af1c <__mdiff+0x5c>
 800af12:	4b2e      	ldr	r3, [pc, #184]	; (800afcc <__mdiff+0x10c>)
 800af14:	4602      	mov	r2, r0
 800af16:	f240 2145 	movw	r1, #581	; 0x245
 800af1a:	e7e5      	b.n	800aee8 <__mdiff+0x28>
 800af1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af20:	6926      	ldr	r6, [r4, #16]
 800af22:	60c5      	str	r5, [r0, #12]
 800af24:	f104 0914 	add.w	r9, r4, #20
 800af28:	f108 0514 	add.w	r5, r8, #20
 800af2c:	f100 0e14 	add.w	lr, r0, #20
 800af30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af38:	f108 0210 	add.w	r2, r8, #16
 800af3c:	46f2      	mov	sl, lr
 800af3e:	2100      	movs	r1, #0
 800af40:	f859 3b04 	ldr.w	r3, [r9], #4
 800af44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af48:	fa11 f88b 	uxtah	r8, r1, fp
 800af4c:	b299      	uxth	r1, r3
 800af4e:	0c1b      	lsrs	r3, r3, #16
 800af50:	eba8 0801 	sub.w	r8, r8, r1
 800af54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af5c:	fa1f f888 	uxth.w	r8, r8
 800af60:	1419      	asrs	r1, r3, #16
 800af62:	454e      	cmp	r6, r9
 800af64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af68:	f84a 3b04 	str.w	r3, [sl], #4
 800af6c:	d8e8      	bhi.n	800af40 <__mdiff+0x80>
 800af6e:	1b33      	subs	r3, r6, r4
 800af70:	3b15      	subs	r3, #21
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	3304      	adds	r3, #4
 800af78:	3415      	adds	r4, #21
 800af7a:	42a6      	cmp	r6, r4
 800af7c:	bf38      	it	cc
 800af7e:	2304      	movcc	r3, #4
 800af80:	441d      	add	r5, r3
 800af82:	4473      	add	r3, lr
 800af84:	469e      	mov	lr, r3
 800af86:	462e      	mov	r6, r5
 800af88:	4566      	cmp	r6, ip
 800af8a:	d30e      	bcc.n	800afaa <__mdiff+0xea>
 800af8c:	f10c 0203 	add.w	r2, ip, #3
 800af90:	1b52      	subs	r2, r2, r5
 800af92:	f022 0203 	bic.w	r2, r2, #3
 800af96:	3d03      	subs	r5, #3
 800af98:	45ac      	cmp	ip, r5
 800af9a:	bf38      	it	cc
 800af9c:	2200      	movcc	r2, #0
 800af9e:	4413      	add	r3, r2
 800afa0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800afa4:	b17a      	cbz	r2, 800afc6 <__mdiff+0x106>
 800afa6:	6107      	str	r7, [r0, #16]
 800afa8:	e7a4      	b.n	800aef4 <__mdiff+0x34>
 800afaa:	f856 8b04 	ldr.w	r8, [r6], #4
 800afae:	fa11 f288 	uxtah	r2, r1, r8
 800afb2:	1414      	asrs	r4, r2, #16
 800afb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800afb8:	b292      	uxth	r2, r2
 800afba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800afbe:	f84e 2b04 	str.w	r2, [lr], #4
 800afc2:	1421      	asrs	r1, r4, #16
 800afc4:	e7e0      	b.n	800af88 <__mdiff+0xc8>
 800afc6:	3f01      	subs	r7, #1
 800afc8:	e7ea      	b.n	800afa0 <__mdiff+0xe0>
 800afca:	bf00      	nop
 800afcc:	0800dcdf 	.word	0x0800dcdf
 800afd0:	0800dcf0 	.word	0x0800dcf0

0800afd4 <__ulp>:
 800afd4:	b082      	sub	sp, #8
 800afd6:	ed8d 0b00 	vstr	d0, [sp]
 800afda:	9a01      	ldr	r2, [sp, #4]
 800afdc:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <__ulp+0x48>)
 800afde:	4013      	ands	r3, r2
 800afe0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc08      	bgt.n	800affa <__ulp+0x26>
 800afe8:	425b      	negs	r3, r3
 800afea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800afee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aff2:	da04      	bge.n	800affe <__ulp+0x2a>
 800aff4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aff8:	4113      	asrs	r3, r2
 800affa:	2200      	movs	r2, #0
 800affc:	e008      	b.n	800b010 <__ulp+0x3c>
 800affe:	f1a2 0314 	sub.w	r3, r2, #20
 800b002:	2b1e      	cmp	r3, #30
 800b004:	bfda      	itte	le
 800b006:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b00a:	40da      	lsrle	r2, r3
 800b00c:	2201      	movgt	r2, #1
 800b00e:	2300      	movs	r3, #0
 800b010:	4619      	mov	r1, r3
 800b012:	4610      	mov	r0, r2
 800b014:	ec41 0b10 	vmov	d0, r0, r1
 800b018:	b002      	add	sp, #8
 800b01a:	4770      	bx	lr
 800b01c:	7ff00000 	.word	0x7ff00000

0800b020 <__b2d>:
 800b020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b024:	6906      	ldr	r6, [r0, #16]
 800b026:	f100 0814 	add.w	r8, r0, #20
 800b02a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b02e:	1f37      	subs	r7, r6, #4
 800b030:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b034:	4610      	mov	r0, r2
 800b036:	f7ff fd53 	bl	800aae0 <__hi0bits>
 800b03a:	f1c0 0320 	rsb	r3, r0, #32
 800b03e:	280a      	cmp	r0, #10
 800b040:	600b      	str	r3, [r1, #0]
 800b042:	491b      	ldr	r1, [pc, #108]	; (800b0b0 <__b2d+0x90>)
 800b044:	dc15      	bgt.n	800b072 <__b2d+0x52>
 800b046:	f1c0 0c0b 	rsb	ip, r0, #11
 800b04a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b04e:	45b8      	cmp	r8, r7
 800b050:	ea43 0501 	orr.w	r5, r3, r1
 800b054:	bf34      	ite	cc
 800b056:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b05a:	2300      	movcs	r3, #0
 800b05c:	3015      	adds	r0, #21
 800b05e:	fa02 f000 	lsl.w	r0, r2, r0
 800b062:	fa23 f30c 	lsr.w	r3, r3, ip
 800b066:	4303      	orrs	r3, r0
 800b068:	461c      	mov	r4, r3
 800b06a:	ec45 4b10 	vmov	d0, r4, r5
 800b06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b072:	45b8      	cmp	r8, r7
 800b074:	bf3a      	itte	cc
 800b076:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b07a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b07e:	2300      	movcs	r3, #0
 800b080:	380b      	subs	r0, #11
 800b082:	d012      	beq.n	800b0aa <__b2d+0x8a>
 800b084:	f1c0 0120 	rsb	r1, r0, #32
 800b088:	fa23 f401 	lsr.w	r4, r3, r1
 800b08c:	4082      	lsls	r2, r0
 800b08e:	4322      	orrs	r2, r4
 800b090:	4547      	cmp	r7, r8
 800b092:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b096:	bf8c      	ite	hi
 800b098:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b09c:	2200      	movls	r2, #0
 800b09e:	4083      	lsls	r3, r0
 800b0a0:	40ca      	lsrs	r2, r1
 800b0a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	e7de      	b.n	800b068 <__b2d+0x48>
 800b0aa:	ea42 0501 	orr.w	r5, r2, r1
 800b0ae:	e7db      	b.n	800b068 <__b2d+0x48>
 800b0b0:	3ff00000 	.word	0x3ff00000

0800b0b4 <__d2b>:
 800b0b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0b8:	460f      	mov	r7, r1
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	ec59 8b10 	vmov	r8, r9, d0
 800b0c0:	4616      	mov	r6, r2
 800b0c2:	f7ff fc1b 	bl	800a8fc <_Balloc>
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	b930      	cbnz	r0, 800b0d8 <__d2b+0x24>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	4b24      	ldr	r3, [pc, #144]	; (800b160 <__d2b+0xac>)
 800b0ce:	4825      	ldr	r0, [pc, #148]	; (800b164 <__d2b+0xb0>)
 800b0d0:	f240 310f 	movw	r1, #783	; 0x30f
 800b0d4:	f001 fefc 	bl	800ced0 <__assert_func>
 800b0d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0e0:	bb2d      	cbnz	r5, 800b12e <__d2b+0x7a>
 800b0e2:	9301      	str	r3, [sp, #4]
 800b0e4:	f1b8 0300 	subs.w	r3, r8, #0
 800b0e8:	d026      	beq.n	800b138 <__d2b+0x84>
 800b0ea:	4668      	mov	r0, sp
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	f7ff fd17 	bl	800ab20 <__lo0bits>
 800b0f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0f6:	b1e8      	cbz	r0, 800b134 <__d2b+0x80>
 800b0f8:	f1c0 0320 	rsb	r3, r0, #32
 800b0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b100:	430b      	orrs	r3, r1
 800b102:	40c2      	lsrs	r2, r0
 800b104:	6163      	str	r3, [r4, #20]
 800b106:	9201      	str	r2, [sp, #4]
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	61a3      	str	r3, [r4, #24]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bf14      	ite	ne
 800b110:	2202      	movne	r2, #2
 800b112:	2201      	moveq	r2, #1
 800b114:	6122      	str	r2, [r4, #16]
 800b116:	b1bd      	cbz	r5, 800b148 <__d2b+0x94>
 800b118:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b11c:	4405      	add	r5, r0
 800b11e:	603d      	str	r5, [r7, #0]
 800b120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b124:	6030      	str	r0, [r6, #0]
 800b126:	4620      	mov	r0, r4
 800b128:	b003      	add	sp, #12
 800b12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b12e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b132:	e7d6      	b.n	800b0e2 <__d2b+0x2e>
 800b134:	6161      	str	r1, [r4, #20]
 800b136:	e7e7      	b.n	800b108 <__d2b+0x54>
 800b138:	a801      	add	r0, sp, #4
 800b13a:	f7ff fcf1 	bl	800ab20 <__lo0bits>
 800b13e:	9b01      	ldr	r3, [sp, #4]
 800b140:	6163      	str	r3, [r4, #20]
 800b142:	3020      	adds	r0, #32
 800b144:	2201      	movs	r2, #1
 800b146:	e7e5      	b.n	800b114 <__d2b+0x60>
 800b148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b14c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b150:	6038      	str	r0, [r7, #0]
 800b152:	6918      	ldr	r0, [r3, #16]
 800b154:	f7ff fcc4 	bl	800aae0 <__hi0bits>
 800b158:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b15c:	e7e2      	b.n	800b124 <__d2b+0x70>
 800b15e:	bf00      	nop
 800b160:	0800dcdf 	.word	0x0800dcdf
 800b164:	0800dcf0 	.word	0x0800dcf0

0800b168 <__ratio>:
 800b168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	4688      	mov	r8, r1
 800b16e:	4669      	mov	r1, sp
 800b170:	4681      	mov	r9, r0
 800b172:	f7ff ff55 	bl	800b020 <__b2d>
 800b176:	a901      	add	r1, sp, #4
 800b178:	4640      	mov	r0, r8
 800b17a:	ec55 4b10 	vmov	r4, r5, d0
 800b17e:	f7ff ff4f 	bl	800b020 <__b2d>
 800b182:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b186:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b18a:	eba3 0c02 	sub.w	ip, r3, r2
 800b18e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b192:	1a9b      	subs	r3, r3, r2
 800b194:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b198:	ec51 0b10 	vmov	r0, r1, d0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bfd6      	itet	le
 800b1a0:	460a      	movle	r2, r1
 800b1a2:	462a      	movgt	r2, r5
 800b1a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1a8:	468b      	mov	fp, r1
 800b1aa:	462f      	mov	r7, r5
 800b1ac:	bfd4      	ite	le
 800b1ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b1b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	ee10 2a10 	vmov	r2, s0
 800b1bc:	465b      	mov	r3, fp
 800b1be:	4639      	mov	r1, r7
 800b1c0:	f7f5 fb64 	bl	800088c <__aeabi_ddiv>
 800b1c4:	ec41 0b10 	vmov	d0, r0, r1
 800b1c8:	b003      	add	sp, #12
 800b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1ce <__copybits>:
 800b1ce:	3901      	subs	r1, #1
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	1149      	asrs	r1, r1, #5
 800b1d4:	6914      	ldr	r4, [r2, #16]
 800b1d6:	3101      	adds	r1, #1
 800b1d8:	f102 0314 	add.w	r3, r2, #20
 800b1dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1e4:	1f05      	subs	r5, r0, #4
 800b1e6:	42a3      	cmp	r3, r4
 800b1e8:	d30c      	bcc.n	800b204 <__copybits+0x36>
 800b1ea:	1aa3      	subs	r3, r4, r2
 800b1ec:	3b11      	subs	r3, #17
 800b1ee:	f023 0303 	bic.w	r3, r3, #3
 800b1f2:	3211      	adds	r2, #17
 800b1f4:	42a2      	cmp	r2, r4
 800b1f6:	bf88      	it	hi
 800b1f8:	2300      	movhi	r3, #0
 800b1fa:	4418      	add	r0, r3
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4288      	cmp	r0, r1
 800b200:	d305      	bcc.n	800b20e <__copybits+0x40>
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	f853 6b04 	ldr.w	r6, [r3], #4
 800b208:	f845 6f04 	str.w	r6, [r5, #4]!
 800b20c:	e7eb      	b.n	800b1e6 <__copybits+0x18>
 800b20e:	f840 3b04 	str.w	r3, [r0], #4
 800b212:	e7f4      	b.n	800b1fe <__copybits+0x30>

0800b214 <__any_on>:
 800b214:	f100 0214 	add.w	r2, r0, #20
 800b218:	6900      	ldr	r0, [r0, #16]
 800b21a:	114b      	asrs	r3, r1, #5
 800b21c:	4298      	cmp	r0, r3
 800b21e:	b510      	push	{r4, lr}
 800b220:	db11      	blt.n	800b246 <__any_on+0x32>
 800b222:	dd0a      	ble.n	800b23a <__any_on+0x26>
 800b224:	f011 011f 	ands.w	r1, r1, #31
 800b228:	d007      	beq.n	800b23a <__any_on+0x26>
 800b22a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b22e:	fa24 f001 	lsr.w	r0, r4, r1
 800b232:	fa00 f101 	lsl.w	r1, r0, r1
 800b236:	428c      	cmp	r4, r1
 800b238:	d10b      	bne.n	800b252 <__any_on+0x3e>
 800b23a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b23e:	4293      	cmp	r3, r2
 800b240:	d803      	bhi.n	800b24a <__any_on+0x36>
 800b242:	2000      	movs	r0, #0
 800b244:	bd10      	pop	{r4, pc}
 800b246:	4603      	mov	r3, r0
 800b248:	e7f7      	b.n	800b23a <__any_on+0x26>
 800b24a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b24e:	2900      	cmp	r1, #0
 800b250:	d0f5      	beq.n	800b23e <__any_on+0x2a>
 800b252:	2001      	movs	r0, #1
 800b254:	e7f6      	b.n	800b244 <__any_on+0x30>

0800b256 <sulp>:
 800b256:	b570      	push	{r4, r5, r6, lr}
 800b258:	4604      	mov	r4, r0
 800b25a:	460d      	mov	r5, r1
 800b25c:	ec45 4b10 	vmov	d0, r4, r5
 800b260:	4616      	mov	r6, r2
 800b262:	f7ff feb7 	bl	800afd4 <__ulp>
 800b266:	ec51 0b10 	vmov	r0, r1, d0
 800b26a:	b17e      	cbz	r6, 800b28c <sulp+0x36>
 800b26c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b270:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b274:	2b00      	cmp	r3, #0
 800b276:	dd09      	ble.n	800b28c <sulp+0x36>
 800b278:	051b      	lsls	r3, r3, #20
 800b27a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b27e:	2400      	movs	r4, #0
 800b280:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b284:	4622      	mov	r2, r4
 800b286:	462b      	mov	r3, r5
 800b288:	f7f5 f9d6 	bl	8000638 <__aeabi_dmul>
 800b28c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b290 <_strtod_l>:
 800b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b294:	ed2d 8b02 	vpush	{d8}
 800b298:	b09b      	sub	sp, #108	; 0x6c
 800b29a:	4604      	mov	r4, r0
 800b29c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b29e:	2200      	movs	r2, #0
 800b2a0:	9216      	str	r2, [sp, #88]	; 0x58
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	f04f 0800 	mov.w	r8, #0
 800b2a8:	f04f 0900 	mov.w	r9, #0
 800b2ac:	460a      	mov	r2, r1
 800b2ae:	9215      	str	r2, [sp, #84]	; 0x54
 800b2b0:	7811      	ldrb	r1, [r2, #0]
 800b2b2:	292b      	cmp	r1, #43	; 0x2b
 800b2b4:	d04c      	beq.n	800b350 <_strtod_l+0xc0>
 800b2b6:	d83a      	bhi.n	800b32e <_strtod_l+0x9e>
 800b2b8:	290d      	cmp	r1, #13
 800b2ba:	d834      	bhi.n	800b326 <_strtod_l+0x96>
 800b2bc:	2908      	cmp	r1, #8
 800b2be:	d834      	bhi.n	800b32a <_strtod_l+0x9a>
 800b2c0:	2900      	cmp	r1, #0
 800b2c2:	d03d      	beq.n	800b340 <_strtod_l+0xb0>
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	920a      	str	r2, [sp, #40]	; 0x28
 800b2c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b2ca:	7832      	ldrb	r2, [r6, #0]
 800b2cc:	2a30      	cmp	r2, #48	; 0x30
 800b2ce:	f040 80b4 	bne.w	800b43a <_strtod_l+0x1aa>
 800b2d2:	7872      	ldrb	r2, [r6, #1]
 800b2d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b2d8:	2a58      	cmp	r2, #88	; 0x58
 800b2da:	d170      	bne.n	800b3be <_strtod_l+0x12e>
 800b2dc:	9302      	str	r3, [sp, #8]
 800b2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2e0:	9301      	str	r3, [sp, #4]
 800b2e2:	ab16      	add	r3, sp, #88	; 0x58
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	4a8e      	ldr	r2, [pc, #568]	; (800b520 <_strtod_l+0x290>)
 800b2e8:	ab17      	add	r3, sp, #92	; 0x5c
 800b2ea:	a915      	add	r1, sp, #84	; 0x54
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f001 fe8b 	bl	800d008 <__gethex>
 800b2f2:	f010 070f 	ands.w	r7, r0, #15
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	d005      	beq.n	800b306 <_strtod_l+0x76>
 800b2fa:	2f06      	cmp	r7, #6
 800b2fc:	d12a      	bne.n	800b354 <_strtod_l+0xc4>
 800b2fe:	3601      	adds	r6, #1
 800b300:	2300      	movs	r3, #0
 800b302:	9615      	str	r6, [sp, #84]	; 0x54
 800b304:	930a      	str	r3, [sp, #40]	; 0x28
 800b306:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f040 857f 	bne.w	800be0c <_strtod_l+0xb7c>
 800b30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b310:	b1db      	cbz	r3, 800b34a <_strtod_l+0xba>
 800b312:	4642      	mov	r2, r8
 800b314:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b318:	ec43 2b10 	vmov	d0, r2, r3
 800b31c:	b01b      	add	sp, #108	; 0x6c
 800b31e:	ecbd 8b02 	vpop	{d8}
 800b322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b326:	2920      	cmp	r1, #32
 800b328:	d1cc      	bne.n	800b2c4 <_strtod_l+0x34>
 800b32a:	3201      	adds	r2, #1
 800b32c:	e7bf      	b.n	800b2ae <_strtod_l+0x1e>
 800b32e:	292d      	cmp	r1, #45	; 0x2d
 800b330:	d1c8      	bne.n	800b2c4 <_strtod_l+0x34>
 800b332:	2101      	movs	r1, #1
 800b334:	910a      	str	r1, [sp, #40]	; 0x28
 800b336:	1c51      	adds	r1, r2, #1
 800b338:	9115      	str	r1, [sp, #84]	; 0x54
 800b33a:	7852      	ldrb	r2, [r2, #1]
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	d1c3      	bne.n	800b2c8 <_strtod_l+0x38>
 800b340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b342:	9515      	str	r5, [sp, #84]	; 0x54
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 855f 	bne.w	800be08 <_strtod_l+0xb78>
 800b34a:	4642      	mov	r2, r8
 800b34c:	464b      	mov	r3, r9
 800b34e:	e7e3      	b.n	800b318 <_strtod_l+0x88>
 800b350:	2100      	movs	r1, #0
 800b352:	e7ef      	b.n	800b334 <_strtod_l+0xa4>
 800b354:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b356:	b13a      	cbz	r2, 800b368 <_strtod_l+0xd8>
 800b358:	2135      	movs	r1, #53	; 0x35
 800b35a:	a818      	add	r0, sp, #96	; 0x60
 800b35c:	f7ff ff37 	bl	800b1ce <__copybits>
 800b360:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b362:	4620      	mov	r0, r4
 800b364:	f7ff fb0a 	bl	800a97c <_Bfree>
 800b368:	3f01      	subs	r7, #1
 800b36a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b36c:	2f04      	cmp	r7, #4
 800b36e:	d806      	bhi.n	800b37e <_strtod_l+0xee>
 800b370:	e8df f007 	tbb	[pc, r7]
 800b374:	201d0314 	.word	0x201d0314
 800b378:	14          	.byte	0x14
 800b379:	00          	.byte	0x00
 800b37a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b37e:	05e9      	lsls	r1, r5, #23
 800b380:	bf48      	it	mi
 800b382:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b386:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b38a:	0d1b      	lsrs	r3, r3, #20
 800b38c:	051b      	lsls	r3, r3, #20
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1b9      	bne.n	800b306 <_strtod_l+0x76>
 800b392:	f7fe faf7 	bl	8009984 <__errno>
 800b396:	2322      	movs	r3, #34	; 0x22
 800b398:	6003      	str	r3, [r0, #0]
 800b39a:	e7b4      	b.n	800b306 <_strtod_l+0x76>
 800b39c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b3a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b3a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b3a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b3ac:	e7e7      	b.n	800b37e <_strtod_l+0xee>
 800b3ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b528 <_strtod_l+0x298>
 800b3b2:	e7e4      	b.n	800b37e <_strtod_l+0xee>
 800b3b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b3b8:	f04f 38ff 	mov.w	r8, #4294967295
 800b3bc:	e7df      	b.n	800b37e <_strtod_l+0xee>
 800b3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	9215      	str	r2, [sp, #84]	; 0x54
 800b3c4:	785b      	ldrb	r3, [r3, #1]
 800b3c6:	2b30      	cmp	r3, #48	; 0x30
 800b3c8:	d0f9      	beq.n	800b3be <_strtod_l+0x12e>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d09b      	beq.n	800b306 <_strtod_l+0x76>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	f04f 0a00 	mov.w	sl, #0
 800b3d4:	9304      	str	r3, [sp, #16]
 800b3d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b3de:	46d3      	mov	fp, sl
 800b3e0:	220a      	movs	r2, #10
 800b3e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b3e4:	7806      	ldrb	r6, [r0, #0]
 800b3e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b3ea:	b2d9      	uxtb	r1, r3
 800b3ec:	2909      	cmp	r1, #9
 800b3ee:	d926      	bls.n	800b43e <_strtod_l+0x1ae>
 800b3f0:	494c      	ldr	r1, [pc, #304]	; (800b524 <_strtod_l+0x294>)
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f001 fd1f 	bl	800ce36 <strncmp>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d030      	beq.n	800b45e <_strtod_l+0x1ce>
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	4632      	mov	r2, r6
 800b400:	9005      	str	r0, [sp, #20]
 800b402:	465e      	mov	r6, fp
 800b404:	4603      	mov	r3, r0
 800b406:	2a65      	cmp	r2, #101	; 0x65
 800b408:	d001      	beq.n	800b40e <_strtod_l+0x17e>
 800b40a:	2a45      	cmp	r2, #69	; 0x45
 800b40c:	d113      	bne.n	800b436 <_strtod_l+0x1a6>
 800b40e:	b91e      	cbnz	r6, 800b418 <_strtod_l+0x188>
 800b410:	9a04      	ldr	r2, [sp, #16]
 800b412:	4302      	orrs	r2, r0
 800b414:	d094      	beq.n	800b340 <_strtod_l+0xb0>
 800b416:	2600      	movs	r6, #0
 800b418:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b41a:	1c6a      	adds	r2, r5, #1
 800b41c:	9215      	str	r2, [sp, #84]	; 0x54
 800b41e:	786a      	ldrb	r2, [r5, #1]
 800b420:	2a2b      	cmp	r2, #43	; 0x2b
 800b422:	d074      	beq.n	800b50e <_strtod_l+0x27e>
 800b424:	2a2d      	cmp	r2, #45	; 0x2d
 800b426:	d078      	beq.n	800b51a <_strtod_l+0x28a>
 800b428:	f04f 0c00 	mov.w	ip, #0
 800b42c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b430:	2909      	cmp	r1, #9
 800b432:	d97f      	bls.n	800b534 <_strtod_l+0x2a4>
 800b434:	9515      	str	r5, [sp, #84]	; 0x54
 800b436:	2700      	movs	r7, #0
 800b438:	e09e      	b.n	800b578 <_strtod_l+0x2e8>
 800b43a:	2300      	movs	r3, #0
 800b43c:	e7c8      	b.n	800b3d0 <_strtod_l+0x140>
 800b43e:	f1bb 0f08 	cmp.w	fp, #8
 800b442:	bfd8      	it	le
 800b444:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b446:	f100 0001 	add.w	r0, r0, #1
 800b44a:	bfda      	itte	le
 800b44c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b450:	9309      	strle	r3, [sp, #36]	; 0x24
 800b452:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b456:	f10b 0b01 	add.w	fp, fp, #1
 800b45a:	9015      	str	r0, [sp, #84]	; 0x54
 800b45c:	e7c1      	b.n	800b3e2 <_strtod_l+0x152>
 800b45e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	9215      	str	r2, [sp, #84]	; 0x54
 800b464:	785a      	ldrb	r2, [r3, #1]
 800b466:	f1bb 0f00 	cmp.w	fp, #0
 800b46a:	d037      	beq.n	800b4dc <_strtod_l+0x24c>
 800b46c:	9005      	str	r0, [sp, #20]
 800b46e:	465e      	mov	r6, fp
 800b470:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b474:	2b09      	cmp	r3, #9
 800b476:	d912      	bls.n	800b49e <_strtod_l+0x20e>
 800b478:	2301      	movs	r3, #1
 800b47a:	e7c4      	b.n	800b406 <_strtod_l+0x176>
 800b47c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	9215      	str	r2, [sp, #84]	; 0x54
 800b482:	785a      	ldrb	r2, [r3, #1]
 800b484:	3001      	adds	r0, #1
 800b486:	2a30      	cmp	r2, #48	; 0x30
 800b488:	d0f8      	beq.n	800b47c <_strtod_l+0x1ec>
 800b48a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b48e:	2b08      	cmp	r3, #8
 800b490:	f200 84c1 	bhi.w	800be16 <_strtod_l+0xb86>
 800b494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b496:	9005      	str	r0, [sp, #20]
 800b498:	2000      	movs	r0, #0
 800b49a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b49c:	4606      	mov	r6, r0
 800b49e:	3a30      	subs	r2, #48	; 0x30
 800b4a0:	f100 0301 	add.w	r3, r0, #1
 800b4a4:	d014      	beq.n	800b4d0 <_strtod_l+0x240>
 800b4a6:	9905      	ldr	r1, [sp, #20]
 800b4a8:	4419      	add	r1, r3
 800b4aa:	9105      	str	r1, [sp, #20]
 800b4ac:	4633      	mov	r3, r6
 800b4ae:	eb00 0c06 	add.w	ip, r0, r6
 800b4b2:	210a      	movs	r1, #10
 800b4b4:	4563      	cmp	r3, ip
 800b4b6:	d113      	bne.n	800b4e0 <_strtod_l+0x250>
 800b4b8:	1833      	adds	r3, r6, r0
 800b4ba:	2b08      	cmp	r3, #8
 800b4bc:	f106 0601 	add.w	r6, r6, #1
 800b4c0:	4406      	add	r6, r0
 800b4c2:	dc1a      	bgt.n	800b4fa <_strtod_l+0x26a>
 800b4c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4c6:	230a      	movs	r3, #10
 800b4c8:	fb03 2301 	mla	r3, r3, r1, r2
 800b4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b4d2:	1c51      	adds	r1, r2, #1
 800b4d4:	9115      	str	r1, [sp, #84]	; 0x54
 800b4d6:	7852      	ldrb	r2, [r2, #1]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	e7c9      	b.n	800b470 <_strtod_l+0x1e0>
 800b4dc:	4658      	mov	r0, fp
 800b4de:	e7d2      	b.n	800b486 <_strtod_l+0x1f6>
 800b4e0:	2b08      	cmp	r3, #8
 800b4e2:	f103 0301 	add.w	r3, r3, #1
 800b4e6:	dc03      	bgt.n	800b4f0 <_strtod_l+0x260>
 800b4e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b4ea:	434f      	muls	r7, r1
 800b4ec:	9709      	str	r7, [sp, #36]	; 0x24
 800b4ee:	e7e1      	b.n	800b4b4 <_strtod_l+0x224>
 800b4f0:	2b10      	cmp	r3, #16
 800b4f2:	bfd8      	it	le
 800b4f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b4f8:	e7dc      	b.n	800b4b4 <_strtod_l+0x224>
 800b4fa:	2e10      	cmp	r6, #16
 800b4fc:	bfdc      	itt	le
 800b4fe:	230a      	movle	r3, #10
 800b500:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b504:	e7e3      	b.n	800b4ce <_strtod_l+0x23e>
 800b506:	2300      	movs	r3, #0
 800b508:	9305      	str	r3, [sp, #20]
 800b50a:	2301      	movs	r3, #1
 800b50c:	e780      	b.n	800b410 <_strtod_l+0x180>
 800b50e:	f04f 0c00 	mov.w	ip, #0
 800b512:	1caa      	adds	r2, r5, #2
 800b514:	9215      	str	r2, [sp, #84]	; 0x54
 800b516:	78aa      	ldrb	r2, [r5, #2]
 800b518:	e788      	b.n	800b42c <_strtod_l+0x19c>
 800b51a:	f04f 0c01 	mov.w	ip, #1
 800b51e:	e7f8      	b.n	800b512 <_strtod_l+0x282>
 800b520:	0800de50 	.word	0x0800de50
 800b524:	0800de4c 	.word	0x0800de4c
 800b528:	7ff00000 	.word	0x7ff00000
 800b52c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b52e:	1c51      	adds	r1, r2, #1
 800b530:	9115      	str	r1, [sp, #84]	; 0x54
 800b532:	7852      	ldrb	r2, [r2, #1]
 800b534:	2a30      	cmp	r2, #48	; 0x30
 800b536:	d0f9      	beq.n	800b52c <_strtod_l+0x29c>
 800b538:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b53c:	2908      	cmp	r1, #8
 800b53e:	f63f af7a 	bhi.w	800b436 <_strtod_l+0x1a6>
 800b542:	3a30      	subs	r2, #48	; 0x30
 800b544:	9208      	str	r2, [sp, #32]
 800b546:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b548:	920c      	str	r2, [sp, #48]	; 0x30
 800b54a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b54c:	1c57      	adds	r7, r2, #1
 800b54e:	9715      	str	r7, [sp, #84]	; 0x54
 800b550:	7852      	ldrb	r2, [r2, #1]
 800b552:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b556:	f1be 0f09 	cmp.w	lr, #9
 800b55a:	d938      	bls.n	800b5ce <_strtod_l+0x33e>
 800b55c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b55e:	1a7f      	subs	r7, r7, r1
 800b560:	2f08      	cmp	r7, #8
 800b562:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b566:	dc03      	bgt.n	800b570 <_strtod_l+0x2e0>
 800b568:	9908      	ldr	r1, [sp, #32]
 800b56a:	428f      	cmp	r7, r1
 800b56c:	bfa8      	it	ge
 800b56e:	460f      	movge	r7, r1
 800b570:	f1bc 0f00 	cmp.w	ip, #0
 800b574:	d000      	beq.n	800b578 <_strtod_l+0x2e8>
 800b576:	427f      	negs	r7, r7
 800b578:	2e00      	cmp	r6, #0
 800b57a:	d14f      	bne.n	800b61c <_strtod_l+0x38c>
 800b57c:	9904      	ldr	r1, [sp, #16]
 800b57e:	4301      	orrs	r1, r0
 800b580:	f47f aec1 	bne.w	800b306 <_strtod_l+0x76>
 800b584:	2b00      	cmp	r3, #0
 800b586:	f47f aedb 	bne.w	800b340 <_strtod_l+0xb0>
 800b58a:	2a69      	cmp	r2, #105	; 0x69
 800b58c:	d029      	beq.n	800b5e2 <_strtod_l+0x352>
 800b58e:	dc26      	bgt.n	800b5de <_strtod_l+0x34e>
 800b590:	2a49      	cmp	r2, #73	; 0x49
 800b592:	d026      	beq.n	800b5e2 <_strtod_l+0x352>
 800b594:	2a4e      	cmp	r2, #78	; 0x4e
 800b596:	f47f aed3 	bne.w	800b340 <_strtod_l+0xb0>
 800b59a:	499b      	ldr	r1, [pc, #620]	; (800b808 <_strtod_l+0x578>)
 800b59c:	a815      	add	r0, sp, #84	; 0x54
 800b59e:	f001 ff73 	bl	800d488 <__match>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	f43f aecc 	beq.w	800b340 <_strtod_l+0xb0>
 800b5a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	2b28      	cmp	r3, #40	; 0x28
 800b5ae:	d12f      	bne.n	800b610 <_strtod_l+0x380>
 800b5b0:	4996      	ldr	r1, [pc, #600]	; (800b80c <_strtod_l+0x57c>)
 800b5b2:	aa18      	add	r2, sp, #96	; 0x60
 800b5b4:	a815      	add	r0, sp, #84	; 0x54
 800b5b6:	f001 ff7b 	bl	800d4b0 <__hexnan>
 800b5ba:	2805      	cmp	r0, #5
 800b5bc:	d128      	bne.n	800b610 <_strtod_l+0x380>
 800b5be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b5c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b5c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b5cc:	e69b      	b.n	800b306 <_strtod_l+0x76>
 800b5ce:	9f08      	ldr	r7, [sp, #32]
 800b5d0:	210a      	movs	r1, #10
 800b5d2:	fb01 2107 	mla	r1, r1, r7, r2
 800b5d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b5da:	9208      	str	r2, [sp, #32]
 800b5dc:	e7b5      	b.n	800b54a <_strtod_l+0x2ba>
 800b5de:	2a6e      	cmp	r2, #110	; 0x6e
 800b5e0:	e7d9      	b.n	800b596 <_strtod_l+0x306>
 800b5e2:	498b      	ldr	r1, [pc, #556]	; (800b810 <_strtod_l+0x580>)
 800b5e4:	a815      	add	r0, sp, #84	; 0x54
 800b5e6:	f001 ff4f 	bl	800d488 <__match>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	f43f aea8 	beq.w	800b340 <_strtod_l+0xb0>
 800b5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5f2:	4988      	ldr	r1, [pc, #544]	; (800b814 <_strtod_l+0x584>)
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	a815      	add	r0, sp, #84	; 0x54
 800b5f8:	9315      	str	r3, [sp, #84]	; 0x54
 800b5fa:	f001 ff45 	bl	800d488 <__match>
 800b5fe:	b910      	cbnz	r0, 800b606 <_strtod_l+0x376>
 800b600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b602:	3301      	adds	r3, #1
 800b604:	9315      	str	r3, [sp, #84]	; 0x54
 800b606:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b824 <_strtod_l+0x594>
 800b60a:	f04f 0800 	mov.w	r8, #0
 800b60e:	e67a      	b.n	800b306 <_strtod_l+0x76>
 800b610:	4881      	ldr	r0, [pc, #516]	; (800b818 <_strtod_l+0x588>)
 800b612:	f001 fc55 	bl	800cec0 <nan>
 800b616:	ec59 8b10 	vmov	r8, r9, d0
 800b61a:	e674      	b.n	800b306 <_strtod_l+0x76>
 800b61c:	9b05      	ldr	r3, [sp, #20]
 800b61e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b620:	1afb      	subs	r3, r7, r3
 800b622:	f1bb 0f00 	cmp.w	fp, #0
 800b626:	bf08      	it	eq
 800b628:	46b3      	moveq	fp, r6
 800b62a:	2e10      	cmp	r6, #16
 800b62c:	9308      	str	r3, [sp, #32]
 800b62e:	4635      	mov	r5, r6
 800b630:	bfa8      	it	ge
 800b632:	2510      	movge	r5, #16
 800b634:	f7f4 ff86 	bl	8000544 <__aeabi_ui2d>
 800b638:	2e09      	cmp	r6, #9
 800b63a:	4680      	mov	r8, r0
 800b63c:	4689      	mov	r9, r1
 800b63e:	dd13      	ble.n	800b668 <_strtod_l+0x3d8>
 800b640:	4b76      	ldr	r3, [pc, #472]	; (800b81c <_strtod_l+0x58c>)
 800b642:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b646:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b64a:	f7f4 fff5 	bl	8000638 <__aeabi_dmul>
 800b64e:	4680      	mov	r8, r0
 800b650:	4650      	mov	r0, sl
 800b652:	4689      	mov	r9, r1
 800b654:	f7f4 ff76 	bl	8000544 <__aeabi_ui2d>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4640      	mov	r0, r8
 800b65e:	4649      	mov	r1, r9
 800b660:	f7f4 fe34 	bl	80002cc <__adddf3>
 800b664:	4680      	mov	r8, r0
 800b666:	4689      	mov	r9, r1
 800b668:	2e0f      	cmp	r6, #15
 800b66a:	dc38      	bgt.n	800b6de <_strtod_l+0x44e>
 800b66c:	9b08      	ldr	r3, [sp, #32]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f43f ae49 	beq.w	800b306 <_strtod_l+0x76>
 800b674:	dd24      	ble.n	800b6c0 <_strtod_l+0x430>
 800b676:	2b16      	cmp	r3, #22
 800b678:	dc0b      	bgt.n	800b692 <_strtod_l+0x402>
 800b67a:	4968      	ldr	r1, [pc, #416]	; (800b81c <_strtod_l+0x58c>)
 800b67c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b684:	4642      	mov	r2, r8
 800b686:	464b      	mov	r3, r9
 800b688:	f7f4 ffd6 	bl	8000638 <__aeabi_dmul>
 800b68c:	4680      	mov	r8, r0
 800b68e:	4689      	mov	r9, r1
 800b690:	e639      	b.n	800b306 <_strtod_l+0x76>
 800b692:	9a08      	ldr	r2, [sp, #32]
 800b694:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b698:	4293      	cmp	r3, r2
 800b69a:	db20      	blt.n	800b6de <_strtod_l+0x44e>
 800b69c:	4c5f      	ldr	r4, [pc, #380]	; (800b81c <_strtod_l+0x58c>)
 800b69e:	f1c6 060f 	rsb	r6, r6, #15
 800b6a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b6a6:	4642      	mov	r2, r8
 800b6a8:	464b      	mov	r3, r9
 800b6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6ae:	f7f4 ffc3 	bl	8000638 <__aeabi_dmul>
 800b6b2:	9b08      	ldr	r3, [sp, #32]
 800b6b4:	1b9e      	subs	r6, r3, r6
 800b6b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b6ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b6be:	e7e3      	b.n	800b688 <_strtod_l+0x3f8>
 800b6c0:	9b08      	ldr	r3, [sp, #32]
 800b6c2:	3316      	adds	r3, #22
 800b6c4:	db0b      	blt.n	800b6de <_strtod_l+0x44e>
 800b6c6:	9b05      	ldr	r3, [sp, #20]
 800b6c8:	1bdf      	subs	r7, r3, r7
 800b6ca:	4b54      	ldr	r3, [pc, #336]	; (800b81c <_strtod_l+0x58c>)
 800b6cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b6d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	f7f5 f8d8 	bl	800088c <__aeabi_ddiv>
 800b6dc:	e7d6      	b.n	800b68c <_strtod_l+0x3fc>
 800b6de:	9b08      	ldr	r3, [sp, #32]
 800b6e0:	1b75      	subs	r5, r6, r5
 800b6e2:	441d      	add	r5, r3
 800b6e4:	2d00      	cmp	r5, #0
 800b6e6:	dd70      	ble.n	800b7ca <_strtod_l+0x53a>
 800b6e8:	f015 030f 	ands.w	r3, r5, #15
 800b6ec:	d00a      	beq.n	800b704 <_strtod_l+0x474>
 800b6ee:	494b      	ldr	r1, [pc, #300]	; (800b81c <_strtod_l+0x58c>)
 800b6f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6f4:	4642      	mov	r2, r8
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6fc:	f7f4 ff9c 	bl	8000638 <__aeabi_dmul>
 800b700:	4680      	mov	r8, r0
 800b702:	4689      	mov	r9, r1
 800b704:	f035 050f 	bics.w	r5, r5, #15
 800b708:	d04d      	beq.n	800b7a6 <_strtod_l+0x516>
 800b70a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b70e:	dd22      	ble.n	800b756 <_strtod_l+0x4c6>
 800b710:	2500      	movs	r5, #0
 800b712:	46ab      	mov	fp, r5
 800b714:	9509      	str	r5, [sp, #36]	; 0x24
 800b716:	9505      	str	r5, [sp, #20]
 800b718:	2322      	movs	r3, #34	; 0x22
 800b71a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b824 <_strtod_l+0x594>
 800b71e:	6023      	str	r3, [r4, #0]
 800b720:	f04f 0800 	mov.w	r8, #0
 800b724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	f43f aded 	beq.w	800b306 <_strtod_l+0x76>
 800b72c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b72e:	4620      	mov	r0, r4
 800b730:	f7ff f924 	bl	800a97c <_Bfree>
 800b734:	9905      	ldr	r1, [sp, #20]
 800b736:	4620      	mov	r0, r4
 800b738:	f7ff f920 	bl	800a97c <_Bfree>
 800b73c:	4659      	mov	r1, fp
 800b73e:	4620      	mov	r0, r4
 800b740:	f7ff f91c 	bl	800a97c <_Bfree>
 800b744:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff f918 	bl	800a97c <_Bfree>
 800b74c:	4629      	mov	r1, r5
 800b74e:	4620      	mov	r0, r4
 800b750:	f7ff f914 	bl	800a97c <_Bfree>
 800b754:	e5d7      	b.n	800b306 <_strtod_l+0x76>
 800b756:	4b32      	ldr	r3, [pc, #200]	; (800b820 <_strtod_l+0x590>)
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	2300      	movs	r3, #0
 800b75c:	112d      	asrs	r5, r5, #4
 800b75e:	4640      	mov	r0, r8
 800b760:	4649      	mov	r1, r9
 800b762:	469a      	mov	sl, r3
 800b764:	2d01      	cmp	r5, #1
 800b766:	dc21      	bgt.n	800b7ac <_strtod_l+0x51c>
 800b768:	b10b      	cbz	r3, 800b76e <_strtod_l+0x4de>
 800b76a:	4680      	mov	r8, r0
 800b76c:	4689      	mov	r9, r1
 800b76e:	492c      	ldr	r1, [pc, #176]	; (800b820 <_strtod_l+0x590>)
 800b770:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b774:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b778:	4642      	mov	r2, r8
 800b77a:	464b      	mov	r3, r9
 800b77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b780:	f7f4 ff5a 	bl	8000638 <__aeabi_dmul>
 800b784:	4b27      	ldr	r3, [pc, #156]	; (800b824 <_strtod_l+0x594>)
 800b786:	460a      	mov	r2, r1
 800b788:	400b      	ands	r3, r1
 800b78a:	4927      	ldr	r1, [pc, #156]	; (800b828 <_strtod_l+0x598>)
 800b78c:	428b      	cmp	r3, r1
 800b78e:	4680      	mov	r8, r0
 800b790:	d8be      	bhi.n	800b710 <_strtod_l+0x480>
 800b792:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b796:	428b      	cmp	r3, r1
 800b798:	bf86      	itte	hi
 800b79a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b82c <_strtod_l+0x59c>
 800b79e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b7a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9304      	str	r3, [sp, #16]
 800b7aa:	e07b      	b.n	800b8a4 <_strtod_l+0x614>
 800b7ac:	07ea      	lsls	r2, r5, #31
 800b7ae:	d505      	bpl.n	800b7bc <_strtod_l+0x52c>
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b6:	f7f4 ff3f 	bl	8000638 <__aeabi_dmul>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	9a04      	ldr	r2, [sp, #16]
 800b7be:	3208      	adds	r2, #8
 800b7c0:	f10a 0a01 	add.w	sl, sl, #1
 800b7c4:	106d      	asrs	r5, r5, #1
 800b7c6:	9204      	str	r2, [sp, #16]
 800b7c8:	e7cc      	b.n	800b764 <_strtod_l+0x4d4>
 800b7ca:	d0ec      	beq.n	800b7a6 <_strtod_l+0x516>
 800b7cc:	426d      	negs	r5, r5
 800b7ce:	f015 020f 	ands.w	r2, r5, #15
 800b7d2:	d00a      	beq.n	800b7ea <_strtod_l+0x55a>
 800b7d4:	4b11      	ldr	r3, [pc, #68]	; (800b81c <_strtod_l+0x58c>)
 800b7d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7da:	4640      	mov	r0, r8
 800b7dc:	4649      	mov	r1, r9
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f5 f853 	bl	800088c <__aeabi_ddiv>
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4689      	mov	r9, r1
 800b7ea:	112d      	asrs	r5, r5, #4
 800b7ec:	d0db      	beq.n	800b7a6 <_strtod_l+0x516>
 800b7ee:	2d1f      	cmp	r5, #31
 800b7f0:	dd1e      	ble.n	800b830 <_strtod_l+0x5a0>
 800b7f2:	2500      	movs	r5, #0
 800b7f4:	46ab      	mov	fp, r5
 800b7f6:	9509      	str	r5, [sp, #36]	; 0x24
 800b7f8:	9505      	str	r5, [sp, #20]
 800b7fa:	2322      	movs	r3, #34	; 0x22
 800b7fc:	f04f 0800 	mov.w	r8, #0
 800b800:	f04f 0900 	mov.w	r9, #0
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	e78d      	b.n	800b724 <_strtod_l+0x494>
 800b808:	0800dc39 	.word	0x0800dc39
 800b80c:	0800de64 	.word	0x0800de64
 800b810:	0800dc31 	.word	0x0800dc31
 800b814:	0800dc66 	.word	0x0800dc66
 800b818:	0800e010 	.word	0x0800e010
 800b81c:	0800dd78 	.word	0x0800dd78
 800b820:	0800dd50 	.word	0x0800dd50
 800b824:	7ff00000 	.word	0x7ff00000
 800b828:	7ca00000 	.word	0x7ca00000
 800b82c:	7fefffff 	.word	0x7fefffff
 800b830:	f015 0310 	ands.w	r3, r5, #16
 800b834:	bf18      	it	ne
 800b836:	236a      	movne	r3, #106	; 0x6a
 800b838:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bbdc <_strtod_l+0x94c>
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	4640      	mov	r0, r8
 800b840:	4649      	mov	r1, r9
 800b842:	2300      	movs	r3, #0
 800b844:	07ea      	lsls	r2, r5, #31
 800b846:	d504      	bpl.n	800b852 <_strtod_l+0x5c2>
 800b848:	e9da 2300 	ldrd	r2, r3, [sl]
 800b84c:	f7f4 fef4 	bl	8000638 <__aeabi_dmul>
 800b850:	2301      	movs	r3, #1
 800b852:	106d      	asrs	r5, r5, #1
 800b854:	f10a 0a08 	add.w	sl, sl, #8
 800b858:	d1f4      	bne.n	800b844 <_strtod_l+0x5b4>
 800b85a:	b10b      	cbz	r3, 800b860 <_strtod_l+0x5d0>
 800b85c:	4680      	mov	r8, r0
 800b85e:	4689      	mov	r9, r1
 800b860:	9b04      	ldr	r3, [sp, #16]
 800b862:	b1bb      	cbz	r3, 800b894 <_strtod_l+0x604>
 800b864:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b868:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	4649      	mov	r1, r9
 800b870:	dd10      	ble.n	800b894 <_strtod_l+0x604>
 800b872:	2b1f      	cmp	r3, #31
 800b874:	f340 811e 	ble.w	800bab4 <_strtod_l+0x824>
 800b878:	2b34      	cmp	r3, #52	; 0x34
 800b87a:	bfde      	ittt	le
 800b87c:	f04f 33ff 	movle.w	r3, #4294967295
 800b880:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b884:	4093      	lslle	r3, r2
 800b886:	f04f 0800 	mov.w	r8, #0
 800b88a:	bfcc      	ite	gt
 800b88c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b890:	ea03 0901 	andle.w	r9, r3, r1
 800b894:	2200      	movs	r2, #0
 800b896:	2300      	movs	r3, #0
 800b898:	4640      	mov	r0, r8
 800b89a:	4649      	mov	r1, r9
 800b89c:	f7f5 f934 	bl	8000b08 <__aeabi_dcmpeq>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d1a6      	bne.n	800b7f2 <_strtod_l+0x562>
 800b8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8aa:	4633      	mov	r3, r6
 800b8ac:	465a      	mov	r2, fp
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f7ff f8cc 	bl	800aa4c <__s2b>
 800b8b4:	9009      	str	r0, [sp, #36]	; 0x24
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	f43f af2a 	beq.w	800b710 <_strtod_l+0x480>
 800b8bc:	9a08      	ldr	r2, [sp, #32]
 800b8be:	9b05      	ldr	r3, [sp, #20]
 800b8c0:	2a00      	cmp	r2, #0
 800b8c2:	eba3 0307 	sub.w	r3, r3, r7
 800b8c6:	bfa8      	it	ge
 800b8c8:	2300      	movge	r3, #0
 800b8ca:	930c      	str	r3, [sp, #48]	; 0x30
 800b8cc:	2500      	movs	r5, #0
 800b8ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b8d2:	9312      	str	r3, [sp, #72]	; 0x48
 800b8d4:	46ab      	mov	fp, r5
 800b8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d8:	4620      	mov	r0, r4
 800b8da:	6859      	ldr	r1, [r3, #4]
 800b8dc:	f7ff f80e 	bl	800a8fc <_Balloc>
 800b8e0:	9005      	str	r0, [sp, #20]
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	f43f af18 	beq.w	800b718 <_strtod_l+0x488>
 800b8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ea:	691a      	ldr	r2, [r3, #16]
 800b8ec:	3202      	adds	r2, #2
 800b8ee:	f103 010c 	add.w	r1, r3, #12
 800b8f2:	0092      	lsls	r2, r2, #2
 800b8f4:	300c      	adds	r0, #12
 800b8f6:	f7fe f871 	bl	80099dc <memcpy>
 800b8fa:	ec49 8b10 	vmov	d0, r8, r9
 800b8fe:	aa18      	add	r2, sp, #96	; 0x60
 800b900:	a917      	add	r1, sp, #92	; 0x5c
 800b902:	4620      	mov	r0, r4
 800b904:	f7ff fbd6 	bl	800b0b4 <__d2b>
 800b908:	ec49 8b18 	vmov	d8, r8, r9
 800b90c:	9016      	str	r0, [sp, #88]	; 0x58
 800b90e:	2800      	cmp	r0, #0
 800b910:	f43f af02 	beq.w	800b718 <_strtod_l+0x488>
 800b914:	2101      	movs	r1, #1
 800b916:	4620      	mov	r0, r4
 800b918:	f7ff f930 	bl	800ab7c <__i2b>
 800b91c:	4683      	mov	fp, r0
 800b91e:	2800      	cmp	r0, #0
 800b920:	f43f aefa 	beq.w	800b718 <_strtod_l+0x488>
 800b924:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b926:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b928:	2e00      	cmp	r6, #0
 800b92a:	bfab      	itete	ge
 800b92c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b92e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b930:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b932:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b936:	bfac      	ite	ge
 800b938:	eb06 0a03 	addge.w	sl, r6, r3
 800b93c:	1b9f      	sublt	r7, r3, r6
 800b93e:	9b04      	ldr	r3, [sp, #16]
 800b940:	1af6      	subs	r6, r6, r3
 800b942:	4416      	add	r6, r2
 800b944:	4ba0      	ldr	r3, [pc, #640]	; (800bbc8 <_strtod_l+0x938>)
 800b946:	3e01      	subs	r6, #1
 800b948:	429e      	cmp	r6, r3
 800b94a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b94e:	f280 80c4 	bge.w	800bada <_strtod_l+0x84a>
 800b952:	1b9b      	subs	r3, r3, r6
 800b954:	2b1f      	cmp	r3, #31
 800b956:	eba2 0203 	sub.w	r2, r2, r3
 800b95a:	f04f 0101 	mov.w	r1, #1
 800b95e:	f300 80b0 	bgt.w	800bac2 <_strtod_l+0x832>
 800b962:	fa01 f303 	lsl.w	r3, r1, r3
 800b966:	930e      	str	r3, [sp, #56]	; 0x38
 800b968:	2300      	movs	r3, #0
 800b96a:	930d      	str	r3, [sp, #52]	; 0x34
 800b96c:	eb0a 0602 	add.w	r6, sl, r2
 800b970:	9b04      	ldr	r3, [sp, #16]
 800b972:	45b2      	cmp	sl, r6
 800b974:	4417      	add	r7, r2
 800b976:	441f      	add	r7, r3
 800b978:	4653      	mov	r3, sl
 800b97a:	bfa8      	it	ge
 800b97c:	4633      	movge	r3, r6
 800b97e:	42bb      	cmp	r3, r7
 800b980:	bfa8      	it	ge
 800b982:	463b      	movge	r3, r7
 800b984:	2b00      	cmp	r3, #0
 800b986:	bfc2      	ittt	gt
 800b988:	1af6      	subgt	r6, r6, r3
 800b98a:	1aff      	subgt	r7, r7, r3
 800b98c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b992:	2b00      	cmp	r3, #0
 800b994:	dd17      	ble.n	800b9c6 <_strtod_l+0x736>
 800b996:	4659      	mov	r1, fp
 800b998:	461a      	mov	r2, r3
 800b99a:	4620      	mov	r0, r4
 800b99c:	f7ff f9ae 	bl	800acfc <__pow5mult>
 800b9a0:	4683      	mov	fp, r0
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	f43f aeb8 	beq.w	800b718 <_strtod_l+0x488>
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f7ff f8fb 	bl	800aba8 <__multiply>
 800b9b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	f43f aeaf 	beq.w	800b718 <_strtod_l+0x488>
 800b9ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f7fe ffdd 	bl	800a97c <_Bfree>
 800b9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9c4:	9316      	str	r3, [sp, #88]	; 0x58
 800b9c6:	2e00      	cmp	r6, #0
 800b9c8:	f300 808c 	bgt.w	800bae4 <_strtod_l+0x854>
 800b9cc:	9b08      	ldr	r3, [sp, #32]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dd08      	ble.n	800b9e4 <_strtod_l+0x754>
 800b9d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9d4:	9905      	ldr	r1, [sp, #20]
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f7ff f990 	bl	800acfc <__pow5mult>
 800b9dc:	9005      	str	r0, [sp, #20]
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f43f ae9a 	beq.w	800b718 <_strtod_l+0x488>
 800b9e4:	2f00      	cmp	r7, #0
 800b9e6:	dd08      	ble.n	800b9fa <_strtod_l+0x76a>
 800b9e8:	9905      	ldr	r1, [sp, #20]
 800b9ea:	463a      	mov	r2, r7
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f7ff f9df 	bl	800adb0 <__lshift>
 800b9f2:	9005      	str	r0, [sp, #20]
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f43f ae8f 	beq.w	800b718 <_strtod_l+0x488>
 800b9fa:	f1ba 0f00 	cmp.w	sl, #0
 800b9fe:	dd08      	ble.n	800ba12 <_strtod_l+0x782>
 800ba00:	4659      	mov	r1, fp
 800ba02:	4652      	mov	r2, sl
 800ba04:	4620      	mov	r0, r4
 800ba06:	f7ff f9d3 	bl	800adb0 <__lshift>
 800ba0a:	4683      	mov	fp, r0
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	f43f ae83 	beq.w	800b718 <_strtod_l+0x488>
 800ba12:	9a05      	ldr	r2, [sp, #20]
 800ba14:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ba16:	4620      	mov	r0, r4
 800ba18:	f7ff fa52 	bl	800aec0 <__mdiff>
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	f43f ae7a 	beq.w	800b718 <_strtod_l+0x488>
 800ba24:	68c3      	ldr	r3, [r0, #12]
 800ba26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba28:	2300      	movs	r3, #0
 800ba2a:	60c3      	str	r3, [r0, #12]
 800ba2c:	4659      	mov	r1, fp
 800ba2e:	f7ff fa2b 	bl	800ae88 <__mcmp>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	da60      	bge.n	800baf8 <_strtod_l+0x868>
 800ba36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba38:	ea53 0308 	orrs.w	r3, r3, r8
 800ba3c:	f040 8084 	bne.w	800bb48 <_strtod_l+0x8b8>
 800ba40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d17f      	bne.n	800bb48 <_strtod_l+0x8b8>
 800ba48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba4c:	0d1b      	lsrs	r3, r3, #20
 800ba4e:	051b      	lsls	r3, r3, #20
 800ba50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ba54:	d978      	bls.n	800bb48 <_strtod_l+0x8b8>
 800ba56:	696b      	ldr	r3, [r5, #20]
 800ba58:	b913      	cbnz	r3, 800ba60 <_strtod_l+0x7d0>
 800ba5a:	692b      	ldr	r3, [r5, #16]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	dd73      	ble.n	800bb48 <_strtod_l+0x8b8>
 800ba60:	4629      	mov	r1, r5
 800ba62:	2201      	movs	r2, #1
 800ba64:	4620      	mov	r0, r4
 800ba66:	f7ff f9a3 	bl	800adb0 <__lshift>
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	4605      	mov	r5, r0
 800ba6e:	f7ff fa0b 	bl	800ae88 <__mcmp>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	dd68      	ble.n	800bb48 <_strtod_l+0x8b8>
 800ba76:	9904      	ldr	r1, [sp, #16]
 800ba78:	4a54      	ldr	r2, [pc, #336]	; (800bbcc <_strtod_l+0x93c>)
 800ba7a:	464b      	mov	r3, r9
 800ba7c:	2900      	cmp	r1, #0
 800ba7e:	f000 8084 	beq.w	800bb8a <_strtod_l+0x8fa>
 800ba82:	ea02 0109 	and.w	r1, r2, r9
 800ba86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba8a:	dc7e      	bgt.n	800bb8a <_strtod_l+0x8fa>
 800ba8c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba90:	f77f aeb3 	ble.w	800b7fa <_strtod_l+0x56a>
 800ba94:	4b4e      	ldr	r3, [pc, #312]	; (800bbd0 <_strtod_l+0x940>)
 800ba96:	4640      	mov	r0, r8
 800ba98:	4649      	mov	r1, r9
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f7f4 fdcc 	bl	8000638 <__aeabi_dmul>
 800baa0:	4b4a      	ldr	r3, [pc, #296]	; (800bbcc <_strtod_l+0x93c>)
 800baa2:	400b      	ands	r3, r1
 800baa4:	4680      	mov	r8, r0
 800baa6:	4689      	mov	r9, r1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f47f ae3f 	bne.w	800b72c <_strtod_l+0x49c>
 800baae:	2322      	movs	r3, #34	; 0x22
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	e63b      	b.n	800b72c <_strtod_l+0x49c>
 800bab4:	f04f 32ff 	mov.w	r2, #4294967295
 800bab8:	fa02 f303 	lsl.w	r3, r2, r3
 800babc:	ea03 0808 	and.w	r8, r3, r8
 800bac0:	e6e8      	b.n	800b894 <_strtod_l+0x604>
 800bac2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bac6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800baca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bace:	36e2      	adds	r6, #226	; 0xe2
 800bad0:	fa01 f306 	lsl.w	r3, r1, r6
 800bad4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bad8:	e748      	b.n	800b96c <_strtod_l+0x6dc>
 800bada:	2100      	movs	r1, #0
 800badc:	2301      	movs	r3, #1
 800bade:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bae2:	e743      	b.n	800b96c <_strtod_l+0x6dc>
 800bae4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bae6:	4632      	mov	r2, r6
 800bae8:	4620      	mov	r0, r4
 800baea:	f7ff f961 	bl	800adb0 <__lshift>
 800baee:	9016      	str	r0, [sp, #88]	; 0x58
 800baf0:	2800      	cmp	r0, #0
 800baf2:	f47f af6b 	bne.w	800b9cc <_strtod_l+0x73c>
 800baf6:	e60f      	b.n	800b718 <_strtod_l+0x488>
 800baf8:	46ca      	mov	sl, r9
 800bafa:	d171      	bne.n	800bbe0 <_strtod_l+0x950>
 800bafc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bafe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb02:	b352      	cbz	r2, 800bb5a <_strtod_l+0x8ca>
 800bb04:	4a33      	ldr	r2, [pc, #204]	; (800bbd4 <_strtod_l+0x944>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d12a      	bne.n	800bb60 <_strtod_l+0x8d0>
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	4641      	mov	r1, r8
 800bb0e:	b1fb      	cbz	r3, 800bb50 <_strtod_l+0x8c0>
 800bb10:	4b2e      	ldr	r3, [pc, #184]	; (800bbcc <_strtod_l+0x93c>)
 800bb12:	ea09 0303 	and.w	r3, r9, r3
 800bb16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1e:	d81a      	bhi.n	800bb56 <_strtod_l+0x8c6>
 800bb20:	0d1b      	lsrs	r3, r3, #20
 800bb22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb26:	fa02 f303 	lsl.w	r3, r2, r3
 800bb2a:	4299      	cmp	r1, r3
 800bb2c:	d118      	bne.n	800bb60 <_strtod_l+0x8d0>
 800bb2e:	4b2a      	ldr	r3, [pc, #168]	; (800bbd8 <_strtod_l+0x948>)
 800bb30:	459a      	cmp	sl, r3
 800bb32:	d102      	bne.n	800bb3a <_strtod_l+0x8aa>
 800bb34:	3101      	adds	r1, #1
 800bb36:	f43f adef 	beq.w	800b718 <_strtod_l+0x488>
 800bb3a:	4b24      	ldr	r3, [pc, #144]	; (800bbcc <_strtod_l+0x93c>)
 800bb3c:	ea0a 0303 	and.w	r3, sl, r3
 800bb40:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bb44:	f04f 0800 	mov.w	r8, #0
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1a2      	bne.n	800ba94 <_strtod_l+0x804>
 800bb4e:	e5ed      	b.n	800b72c <_strtod_l+0x49c>
 800bb50:	f04f 33ff 	mov.w	r3, #4294967295
 800bb54:	e7e9      	b.n	800bb2a <_strtod_l+0x89a>
 800bb56:	4613      	mov	r3, r2
 800bb58:	e7e7      	b.n	800bb2a <_strtod_l+0x89a>
 800bb5a:	ea53 0308 	orrs.w	r3, r3, r8
 800bb5e:	d08a      	beq.n	800ba76 <_strtod_l+0x7e6>
 800bb60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb62:	b1e3      	cbz	r3, 800bb9e <_strtod_l+0x90e>
 800bb64:	ea13 0f0a 	tst.w	r3, sl
 800bb68:	d0ee      	beq.n	800bb48 <_strtod_l+0x8b8>
 800bb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb6c:	9a04      	ldr	r2, [sp, #16]
 800bb6e:	4640      	mov	r0, r8
 800bb70:	4649      	mov	r1, r9
 800bb72:	b1c3      	cbz	r3, 800bba6 <_strtod_l+0x916>
 800bb74:	f7ff fb6f 	bl	800b256 <sulp>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	ec51 0b18 	vmov	r0, r1, d8
 800bb80:	f7f4 fba4 	bl	80002cc <__adddf3>
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	e7de      	b.n	800bb48 <_strtod_l+0x8b8>
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bb94:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bb98:	f04f 38ff 	mov.w	r8, #4294967295
 800bb9c:	e7d4      	b.n	800bb48 <_strtod_l+0x8b8>
 800bb9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bba0:	ea13 0f08 	tst.w	r3, r8
 800bba4:	e7e0      	b.n	800bb68 <_strtod_l+0x8d8>
 800bba6:	f7ff fb56 	bl	800b256 <sulp>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	ec51 0b18 	vmov	r0, r1, d8
 800bbb2:	f7f4 fb89 	bl	80002c8 <__aeabi_dsub>
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4680      	mov	r8, r0
 800bbbc:	4689      	mov	r9, r1
 800bbbe:	f7f4 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d0c0      	beq.n	800bb48 <_strtod_l+0x8b8>
 800bbc6:	e618      	b.n	800b7fa <_strtod_l+0x56a>
 800bbc8:	fffffc02 	.word	0xfffffc02
 800bbcc:	7ff00000 	.word	0x7ff00000
 800bbd0:	39500000 	.word	0x39500000
 800bbd4:	000fffff 	.word	0x000fffff
 800bbd8:	7fefffff 	.word	0x7fefffff
 800bbdc:	0800de78 	.word	0x0800de78
 800bbe0:	4659      	mov	r1, fp
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	f7ff fac0 	bl	800b168 <__ratio>
 800bbe8:	ec57 6b10 	vmov	r6, r7, d0
 800bbec:	ee10 0a10 	vmov	r0, s0
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 ff9a 	bl	8000b30 <__aeabi_dcmple>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d071      	beq.n	800bce4 <_strtod_l+0xa54>
 800bc00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d17c      	bne.n	800bd00 <_strtod_l+0xa70>
 800bc06:	f1b8 0f00 	cmp.w	r8, #0
 800bc0a:	d15a      	bne.n	800bcc2 <_strtod_l+0xa32>
 800bc0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d15d      	bne.n	800bcd0 <_strtod_l+0xa40>
 800bc14:	4b90      	ldr	r3, [pc, #576]	; (800be58 <_strtod_l+0xbc8>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	4630      	mov	r0, r6
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	f7f4 ff7e 	bl	8000b1c <__aeabi_dcmplt>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d15c      	bne.n	800bcde <_strtod_l+0xa4e>
 800bc24:	4630      	mov	r0, r6
 800bc26:	4639      	mov	r1, r7
 800bc28:	4b8c      	ldr	r3, [pc, #560]	; (800be5c <_strtod_l+0xbcc>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f7f4 fd04 	bl	8000638 <__aeabi_dmul>
 800bc30:	4606      	mov	r6, r0
 800bc32:	460f      	mov	r7, r1
 800bc34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bc38:	9606      	str	r6, [sp, #24]
 800bc3a:	9307      	str	r3, [sp, #28]
 800bc3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bc44:	4b86      	ldr	r3, [pc, #536]	; (800be60 <_strtod_l+0xbd0>)
 800bc46:	ea0a 0303 	and.w	r3, sl, r3
 800bc4a:	930d      	str	r3, [sp, #52]	; 0x34
 800bc4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc4e:	4b85      	ldr	r3, [pc, #532]	; (800be64 <_strtod_l+0xbd4>)
 800bc50:	429a      	cmp	r2, r3
 800bc52:	f040 8090 	bne.w	800bd76 <_strtod_l+0xae6>
 800bc56:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bc5a:	ec49 8b10 	vmov	d0, r8, r9
 800bc5e:	f7ff f9b9 	bl	800afd4 <__ulp>
 800bc62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc66:	ec51 0b10 	vmov	r0, r1, d0
 800bc6a:	f7f4 fce5 	bl	8000638 <__aeabi_dmul>
 800bc6e:	4642      	mov	r2, r8
 800bc70:	464b      	mov	r3, r9
 800bc72:	f7f4 fb2b 	bl	80002cc <__adddf3>
 800bc76:	460b      	mov	r3, r1
 800bc78:	4979      	ldr	r1, [pc, #484]	; (800be60 <_strtod_l+0xbd0>)
 800bc7a:	4a7b      	ldr	r2, [pc, #492]	; (800be68 <_strtod_l+0xbd8>)
 800bc7c:	4019      	ands	r1, r3
 800bc7e:	4291      	cmp	r1, r2
 800bc80:	4680      	mov	r8, r0
 800bc82:	d944      	bls.n	800bd0e <_strtod_l+0xa7e>
 800bc84:	ee18 2a90 	vmov	r2, s17
 800bc88:	4b78      	ldr	r3, [pc, #480]	; (800be6c <_strtod_l+0xbdc>)
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d104      	bne.n	800bc98 <_strtod_l+0xa08>
 800bc8e:	ee18 3a10 	vmov	r3, s16
 800bc92:	3301      	adds	r3, #1
 800bc94:	f43f ad40 	beq.w	800b718 <_strtod_l+0x488>
 800bc98:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800be6c <_strtod_l+0xbdc>
 800bc9c:	f04f 38ff 	mov.w	r8, #4294967295
 800bca0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bca2:	4620      	mov	r0, r4
 800bca4:	f7fe fe6a 	bl	800a97c <_Bfree>
 800bca8:	9905      	ldr	r1, [sp, #20]
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f7fe fe66 	bl	800a97c <_Bfree>
 800bcb0:	4659      	mov	r1, fp
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f7fe fe62 	bl	800a97c <_Bfree>
 800bcb8:	4629      	mov	r1, r5
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f7fe fe5e 	bl	800a97c <_Bfree>
 800bcc0:	e609      	b.n	800b8d6 <_strtod_l+0x646>
 800bcc2:	f1b8 0f01 	cmp.w	r8, #1
 800bcc6:	d103      	bne.n	800bcd0 <_strtod_l+0xa40>
 800bcc8:	f1b9 0f00 	cmp.w	r9, #0
 800bccc:	f43f ad95 	beq.w	800b7fa <_strtod_l+0x56a>
 800bcd0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800be28 <_strtod_l+0xb98>
 800bcd4:	4f60      	ldr	r7, [pc, #384]	; (800be58 <_strtod_l+0xbc8>)
 800bcd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcda:	2600      	movs	r6, #0
 800bcdc:	e7ae      	b.n	800bc3c <_strtod_l+0x9ac>
 800bcde:	4f5f      	ldr	r7, [pc, #380]	; (800be5c <_strtod_l+0xbcc>)
 800bce0:	2600      	movs	r6, #0
 800bce2:	e7a7      	b.n	800bc34 <_strtod_l+0x9a4>
 800bce4:	4b5d      	ldr	r3, [pc, #372]	; (800be5c <_strtod_l+0xbcc>)
 800bce6:	4630      	mov	r0, r6
 800bce8:	4639      	mov	r1, r7
 800bcea:	2200      	movs	r2, #0
 800bcec:	f7f4 fca4 	bl	8000638 <__aeabi_dmul>
 800bcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	460f      	mov	r7, r1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d09c      	beq.n	800bc34 <_strtod_l+0x9a4>
 800bcfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bcfe:	e79d      	b.n	800bc3c <_strtod_l+0x9ac>
 800bd00:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800be30 <_strtod_l+0xba0>
 800bd04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd08:	ec57 6b17 	vmov	r6, r7, d7
 800bd0c:	e796      	b.n	800bc3c <_strtod_l+0x9ac>
 800bd0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bd12:	9b04      	ldr	r3, [sp, #16]
 800bd14:	46ca      	mov	sl, r9
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1c2      	bne.n	800bca0 <_strtod_l+0xa10>
 800bd1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd20:	0d1b      	lsrs	r3, r3, #20
 800bd22:	051b      	lsls	r3, r3, #20
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d1bb      	bne.n	800bca0 <_strtod_l+0xa10>
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 ffe4 	bl	8000cf8 <__aeabi_d2lz>
 800bd30:	f7f4 fc54 	bl	80005dc <__aeabi_l2d>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4630      	mov	r0, r6
 800bd3a:	4639      	mov	r1, r7
 800bd3c:	f7f4 fac4 	bl	80002c8 <__aeabi_dsub>
 800bd40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd46:	ea43 0308 	orr.w	r3, r3, r8
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	d054      	beq.n	800bdfc <_strtod_l+0xb6c>
 800bd52:	a339      	add	r3, pc, #228	; (adr r3, 800be38 <_strtod_l+0xba8>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fee0 	bl	8000b1c <__aeabi_dcmplt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f47f ace5 	bne.w	800b72c <_strtod_l+0x49c>
 800bd62:	a337      	add	r3, pc, #220	; (adr r3, 800be40 <_strtod_l+0xbb0>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f7f4 fef4 	bl	8000b58 <__aeabi_dcmpgt>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d095      	beq.n	800bca0 <_strtod_l+0xa10>
 800bd74:	e4da      	b.n	800b72c <_strtod_l+0x49c>
 800bd76:	9b04      	ldr	r3, [sp, #16]
 800bd78:	b333      	cbz	r3, 800bdc8 <_strtod_l+0xb38>
 800bd7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd80:	d822      	bhi.n	800bdc8 <_strtod_l+0xb38>
 800bd82:	a331      	add	r3, pc, #196	; (adr r3, 800be48 <_strtod_l+0xbb8>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	f7f4 fed0 	bl	8000b30 <__aeabi_dcmple>
 800bd90:	b1a0      	cbz	r0, 800bdbc <_strtod_l+0xb2c>
 800bd92:	4639      	mov	r1, r7
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7f4 ff27 	bl	8000be8 <__aeabi_d2uiz>
 800bd9a:	2801      	cmp	r0, #1
 800bd9c:	bf38      	it	cc
 800bd9e:	2001      	movcc	r0, #1
 800bda0:	f7f4 fbd0 	bl	8000544 <__aeabi_ui2d>
 800bda4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bda6:	4606      	mov	r6, r0
 800bda8:	460f      	mov	r7, r1
 800bdaa:	bb23      	cbnz	r3, 800bdf6 <_strtod_l+0xb66>
 800bdac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdb0:	9010      	str	r0, [sp, #64]	; 0x40
 800bdb2:	9311      	str	r3, [sp, #68]	; 0x44
 800bdb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bdb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bdbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bdc4:	1a9b      	subs	r3, r3, r2
 800bdc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bdcc:	eeb0 0a48 	vmov.f32	s0, s16
 800bdd0:	eef0 0a68 	vmov.f32	s1, s17
 800bdd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bdd8:	f7ff f8fc 	bl	800afd4 <__ulp>
 800bddc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bde0:	ec53 2b10 	vmov	r2, r3, d0
 800bde4:	f7f4 fc28 	bl	8000638 <__aeabi_dmul>
 800bde8:	ec53 2b18 	vmov	r2, r3, d8
 800bdec:	f7f4 fa6e 	bl	80002cc <__adddf3>
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	4689      	mov	r9, r1
 800bdf4:	e78d      	b.n	800bd12 <_strtod_l+0xa82>
 800bdf6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bdfa:	e7db      	b.n	800bdb4 <_strtod_l+0xb24>
 800bdfc:	a314      	add	r3, pc, #80	; (adr r3, 800be50 <_strtod_l+0xbc0>)
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f7f4 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 800be06:	e7b3      	b.n	800bd70 <_strtod_l+0xae0>
 800be08:	2300      	movs	r3, #0
 800be0a:	930a      	str	r3, [sp, #40]	; 0x28
 800be0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be10:	6013      	str	r3, [r2, #0]
 800be12:	f7ff ba7c 	b.w	800b30e <_strtod_l+0x7e>
 800be16:	2a65      	cmp	r2, #101	; 0x65
 800be18:	f43f ab75 	beq.w	800b506 <_strtod_l+0x276>
 800be1c:	2a45      	cmp	r2, #69	; 0x45
 800be1e:	f43f ab72 	beq.w	800b506 <_strtod_l+0x276>
 800be22:	2301      	movs	r3, #1
 800be24:	f7ff bbaa 	b.w	800b57c <_strtod_l+0x2ec>
 800be28:	00000000 	.word	0x00000000
 800be2c:	bff00000 	.word	0xbff00000
 800be30:	00000000 	.word	0x00000000
 800be34:	3ff00000 	.word	0x3ff00000
 800be38:	94a03595 	.word	0x94a03595
 800be3c:	3fdfffff 	.word	0x3fdfffff
 800be40:	35afe535 	.word	0x35afe535
 800be44:	3fe00000 	.word	0x3fe00000
 800be48:	ffc00000 	.word	0xffc00000
 800be4c:	41dfffff 	.word	0x41dfffff
 800be50:	94a03595 	.word	0x94a03595
 800be54:	3fcfffff 	.word	0x3fcfffff
 800be58:	3ff00000 	.word	0x3ff00000
 800be5c:	3fe00000 	.word	0x3fe00000
 800be60:	7ff00000 	.word	0x7ff00000
 800be64:	7fe00000 	.word	0x7fe00000
 800be68:	7c9fffff 	.word	0x7c9fffff
 800be6c:	7fefffff 	.word	0x7fefffff

0800be70 <_strtod_r>:
 800be70:	4b01      	ldr	r3, [pc, #4]	; (800be78 <_strtod_r+0x8>)
 800be72:	f7ff ba0d 	b.w	800b290 <_strtod_l>
 800be76:	bf00      	nop
 800be78:	200000b0 	.word	0x200000b0

0800be7c <_strtol_l.constprop.0>:
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be82:	d001      	beq.n	800be88 <_strtol_l.constprop.0+0xc>
 800be84:	2b24      	cmp	r3, #36	; 0x24
 800be86:	d906      	bls.n	800be96 <_strtol_l.constprop.0+0x1a>
 800be88:	f7fd fd7c 	bl	8009984 <__errno>
 800be8c:	2316      	movs	r3, #22
 800be8e:	6003      	str	r3, [r0, #0]
 800be90:	2000      	movs	r0, #0
 800be92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf7c <_strtol_l.constprop.0+0x100>
 800be9a:	460d      	mov	r5, r1
 800be9c:	462e      	mov	r6, r5
 800be9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bea2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bea6:	f017 0708 	ands.w	r7, r7, #8
 800beaa:	d1f7      	bne.n	800be9c <_strtol_l.constprop.0+0x20>
 800beac:	2c2d      	cmp	r4, #45	; 0x2d
 800beae:	d132      	bne.n	800bf16 <_strtol_l.constprop.0+0x9a>
 800beb0:	782c      	ldrb	r4, [r5, #0]
 800beb2:	2701      	movs	r7, #1
 800beb4:	1cb5      	adds	r5, r6, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d05b      	beq.n	800bf72 <_strtol_l.constprop.0+0xf6>
 800beba:	2b10      	cmp	r3, #16
 800bebc:	d109      	bne.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bebe:	2c30      	cmp	r4, #48	; 0x30
 800bec0:	d107      	bne.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bec2:	782c      	ldrb	r4, [r5, #0]
 800bec4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bec8:	2c58      	cmp	r4, #88	; 0x58
 800beca:	d14d      	bne.n	800bf68 <_strtol_l.constprop.0+0xec>
 800becc:	786c      	ldrb	r4, [r5, #1]
 800bece:	2310      	movs	r3, #16
 800bed0:	3502      	adds	r5, #2
 800bed2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bed6:	f108 38ff 	add.w	r8, r8, #4294967295
 800beda:	f04f 0e00 	mov.w	lr, #0
 800bede:	fbb8 f9f3 	udiv	r9, r8, r3
 800bee2:	4676      	mov	r6, lr
 800bee4:	fb03 8a19 	mls	sl, r3, r9, r8
 800bee8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800beec:	f1bc 0f09 	cmp.w	ip, #9
 800bef0:	d816      	bhi.n	800bf20 <_strtol_l.constprop.0+0xa4>
 800bef2:	4664      	mov	r4, ip
 800bef4:	42a3      	cmp	r3, r4
 800bef6:	dd24      	ble.n	800bf42 <_strtol_l.constprop.0+0xc6>
 800bef8:	f1be 3fff 	cmp.w	lr, #4294967295
 800befc:	d008      	beq.n	800bf10 <_strtol_l.constprop.0+0x94>
 800befe:	45b1      	cmp	r9, r6
 800bf00:	d31c      	bcc.n	800bf3c <_strtol_l.constprop.0+0xc0>
 800bf02:	d101      	bne.n	800bf08 <_strtol_l.constprop.0+0x8c>
 800bf04:	45a2      	cmp	sl, r4
 800bf06:	db19      	blt.n	800bf3c <_strtol_l.constprop.0+0xc0>
 800bf08:	fb06 4603 	mla	r6, r6, r3, r4
 800bf0c:	f04f 0e01 	mov.w	lr, #1
 800bf10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf14:	e7e8      	b.n	800bee8 <_strtol_l.constprop.0+0x6c>
 800bf16:	2c2b      	cmp	r4, #43	; 0x2b
 800bf18:	bf04      	itt	eq
 800bf1a:	782c      	ldrbeq	r4, [r5, #0]
 800bf1c:	1cb5      	addeq	r5, r6, #2
 800bf1e:	e7ca      	b.n	800beb6 <_strtol_l.constprop.0+0x3a>
 800bf20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bf24:	f1bc 0f19 	cmp.w	ip, #25
 800bf28:	d801      	bhi.n	800bf2e <_strtol_l.constprop.0+0xb2>
 800bf2a:	3c37      	subs	r4, #55	; 0x37
 800bf2c:	e7e2      	b.n	800bef4 <_strtol_l.constprop.0+0x78>
 800bf2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bf32:	f1bc 0f19 	cmp.w	ip, #25
 800bf36:	d804      	bhi.n	800bf42 <_strtol_l.constprop.0+0xc6>
 800bf38:	3c57      	subs	r4, #87	; 0x57
 800bf3a:	e7db      	b.n	800bef4 <_strtol_l.constprop.0+0x78>
 800bf3c:	f04f 3eff 	mov.w	lr, #4294967295
 800bf40:	e7e6      	b.n	800bf10 <_strtol_l.constprop.0+0x94>
 800bf42:	f1be 3fff 	cmp.w	lr, #4294967295
 800bf46:	d105      	bne.n	800bf54 <_strtol_l.constprop.0+0xd8>
 800bf48:	2322      	movs	r3, #34	; 0x22
 800bf4a:	6003      	str	r3, [r0, #0]
 800bf4c:	4646      	mov	r6, r8
 800bf4e:	b942      	cbnz	r2, 800bf62 <_strtol_l.constprop.0+0xe6>
 800bf50:	4630      	mov	r0, r6
 800bf52:	e79e      	b.n	800be92 <_strtol_l.constprop.0+0x16>
 800bf54:	b107      	cbz	r7, 800bf58 <_strtol_l.constprop.0+0xdc>
 800bf56:	4276      	negs	r6, r6
 800bf58:	2a00      	cmp	r2, #0
 800bf5a:	d0f9      	beq.n	800bf50 <_strtol_l.constprop.0+0xd4>
 800bf5c:	f1be 0f00 	cmp.w	lr, #0
 800bf60:	d000      	beq.n	800bf64 <_strtol_l.constprop.0+0xe8>
 800bf62:	1e69      	subs	r1, r5, #1
 800bf64:	6011      	str	r1, [r2, #0]
 800bf66:	e7f3      	b.n	800bf50 <_strtol_l.constprop.0+0xd4>
 800bf68:	2430      	movs	r4, #48	; 0x30
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1b1      	bne.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bf6e:	2308      	movs	r3, #8
 800bf70:	e7af      	b.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bf72:	2c30      	cmp	r4, #48	; 0x30
 800bf74:	d0a5      	beq.n	800bec2 <_strtol_l.constprop.0+0x46>
 800bf76:	230a      	movs	r3, #10
 800bf78:	e7ab      	b.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bf7a:	bf00      	nop
 800bf7c:	0800dea1 	.word	0x0800dea1

0800bf80 <_strtol_r>:
 800bf80:	f7ff bf7c 	b.w	800be7c <_strtol_l.constprop.0>

0800bf84 <__ssputs_r>:
 800bf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf88:	688e      	ldr	r6, [r1, #8]
 800bf8a:	461f      	mov	r7, r3
 800bf8c:	42be      	cmp	r6, r7
 800bf8e:	680b      	ldr	r3, [r1, #0]
 800bf90:	4682      	mov	sl, r0
 800bf92:	460c      	mov	r4, r1
 800bf94:	4690      	mov	r8, r2
 800bf96:	d82c      	bhi.n	800bff2 <__ssputs_r+0x6e>
 800bf98:	898a      	ldrh	r2, [r1, #12]
 800bf9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf9e:	d026      	beq.n	800bfee <__ssputs_r+0x6a>
 800bfa0:	6965      	ldr	r5, [r4, #20]
 800bfa2:	6909      	ldr	r1, [r1, #16]
 800bfa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfa8:	eba3 0901 	sub.w	r9, r3, r1
 800bfac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfb0:	1c7b      	adds	r3, r7, #1
 800bfb2:	444b      	add	r3, r9
 800bfb4:	106d      	asrs	r5, r5, #1
 800bfb6:	429d      	cmp	r5, r3
 800bfb8:	bf38      	it	cc
 800bfba:	461d      	movcc	r5, r3
 800bfbc:	0553      	lsls	r3, r2, #21
 800bfbe:	d527      	bpl.n	800c010 <__ssputs_r+0x8c>
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	f7fe fc0f 	bl	800a7e4 <_malloc_r>
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	b360      	cbz	r0, 800c024 <__ssputs_r+0xa0>
 800bfca:	6921      	ldr	r1, [r4, #16]
 800bfcc:	464a      	mov	r2, r9
 800bfce:	f7fd fd05 	bl	80099dc <memcpy>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfdc:	81a3      	strh	r3, [r4, #12]
 800bfde:	6126      	str	r6, [r4, #16]
 800bfe0:	6165      	str	r5, [r4, #20]
 800bfe2:	444e      	add	r6, r9
 800bfe4:	eba5 0509 	sub.w	r5, r5, r9
 800bfe8:	6026      	str	r6, [r4, #0]
 800bfea:	60a5      	str	r5, [r4, #8]
 800bfec:	463e      	mov	r6, r7
 800bfee:	42be      	cmp	r6, r7
 800bff0:	d900      	bls.n	800bff4 <__ssputs_r+0x70>
 800bff2:	463e      	mov	r6, r7
 800bff4:	6820      	ldr	r0, [r4, #0]
 800bff6:	4632      	mov	r2, r6
 800bff8:	4641      	mov	r1, r8
 800bffa:	f000 ff02 	bl	800ce02 <memmove>
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	1b9b      	subs	r3, r3, r6
 800c002:	60a3      	str	r3, [r4, #8]
 800c004:	6823      	ldr	r3, [r4, #0]
 800c006:	4433      	add	r3, r6
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	2000      	movs	r0, #0
 800c00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c010:	462a      	mov	r2, r5
 800c012:	f001 fafa 	bl	800d60a <_realloc_r>
 800c016:	4606      	mov	r6, r0
 800c018:	2800      	cmp	r0, #0
 800c01a:	d1e0      	bne.n	800bfde <__ssputs_r+0x5a>
 800c01c:	6921      	ldr	r1, [r4, #16]
 800c01e:	4650      	mov	r0, sl
 800c020:	f7fe fb6c 	bl	800a6fc <_free_r>
 800c024:	230c      	movs	r3, #12
 800c026:	f8ca 3000 	str.w	r3, [sl]
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	f04f 30ff 	mov.w	r0, #4294967295
 800c036:	e7e9      	b.n	800c00c <__ssputs_r+0x88>

0800c038 <_svfiprintf_r>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	4698      	mov	r8, r3
 800c03e:	898b      	ldrh	r3, [r1, #12]
 800c040:	061b      	lsls	r3, r3, #24
 800c042:	b09d      	sub	sp, #116	; 0x74
 800c044:	4607      	mov	r7, r0
 800c046:	460d      	mov	r5, r1
 800c048:	4614      	mov	r4, r2
 800c04a:	d50e      	bpl.n	800c06a <_svfiprintf_r+0x32>
 800c04c:	690b      	ldr	r3, [r1, #16]
 800c04e:	b963      	cbnz	r3, 800c06a <_svfiprintf_r+0x32>
 800c050:	2140      	movs	r1, #64	; 0x40
 800c052:	f7fe fbc7 	bl	800a7e4 <_malloc_r>
 800c056:	6028      	str	r0, [r5, #0]
 800c058:	6128      	str	r0, [r5, #16]
 800c05a:	b920      	cbnz	r0, 800c066 <_svfiprintf_r+0x2e>
 800c05c:	230c      	movs	r3, #12
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	f04f 30ff 	mov.w	r0, #4294967295
 800c064:	e0d0      	b.n	800c208 <_svfiprintf_r+0x1d0>
 800c066:	2340      	movs	r3, #64	; 0x40
 800c068:	616b      	str	r3, [r5, #20]
 800c06a:	2300      	movs	r3, #0
 800c06c:	9309      	str	r3, [sp, #36]	; 0x24
 800c06e:	2320      	movs	r3, #32
 800c070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c074:	f8cd 800c 	str.w	r8, [sp, #12]
 800c078:	2330      	movs	r3, #48	; 0x30
 800c07a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c220 <_svfiprintf_r+0x1e8>
 800c07e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c082:	f04f 0901 	mov.w	r9, #1
 800c086:	4623      	mov	r3, r4
 800c088:	469a      	mov	sl, r3
 800c08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c08e:	b10a      	cbz	r2, 800c094 <_svfiprintf_r+0x5c>
 800c090:	2a25      	cmp	r2, #37	; 0x25
 800c092:	d1f9      	bne.n	800c088 <_svfiprintf_r+0x50>
 800c094:	ebba 0b04 	subs.w	fp, sl, r4
 800c098:	d00b      	beq.n	800c0b2 <_svfiprintf_r+0x7a>
 800c09a:	465b      	mov	r3, fp
 800c09c:	4622      	mov	r2, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ff6f 	bl	800bf84 <__ssputs_r>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f000 80a9 	beq.w	800c1fe <_svfiprintf_r+0x1c6>
 800c0ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0ae:	445a      	add	r2, fp
 800c0b0:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 80a1 	beq.w	800c1fe <_svfiprintf_r+0x1c6>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c6:	f10a 0a01 	add.w	sl, sl, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	9307      	str	r3, [sp, #28]
 800c0ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0d2:	931a      	str	r3, [sp, #104]	; 0x68
 800c0d4:	4654      	mov	r4, sl
 800c0d6:	2205      	movs	r2, #5
 800c0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0dc:	4850      	ldr	r0, [pc, #320]	; (800c220 <_svfiprintf_r+0x1e8>)
 800c0de:	f7f4 f897 	bl	8000210 <memchr>
 800c0e2:	9a04      	ldr	r2, [sp, #16]
 800c0e4:	b9d8      	cbnz	r0, 800c11e <_svfiprintf_r+0xe6>
 800c0e6:	06d0      	lsls	r0, r2, #27
 800c0e8:	bf44      	itt	mi
 800c0ea:	2320      	movmi	r3, #32
 800c0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f0:	0711      	lsls	r1, r2, #28
 800c0f2:	bf44      	itt	mi
 800c0f4:	232b      	movmi	r3, #43	; 0x2b
 800c0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800c100:	d015      	beq.n	800c12e <_svfiprintf_r+0xf6>
 800c102:	9a07      	ldr	r2, [sp, #28]
 800c104:	4654      	mov	r4, sl
 800c106:	2000      	movs	r0, #0
 800c108:	f04f 0c0a 	mov.w	ip, #10
 800c10c:	4621      	mov	r1, r4
 800c10e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c112:	3b30      	subs	r3, #48	; 0x30
 800c114:	2b09      	cmp	r3, #9
 800c116:	d94d      	bls.n	800c1b4 <_svfiprintf_r+0x17c>
 800c118:	b1b0      	cbz	r0, 800c148 <_svfiprintf_r+0x110>
 800c11a:	9207      	str	r2, [sp, #28]
 800c11c:	e014      	b.n	800c148 <_svfiprintf_r+0x110>
 800c11e:	eba0 0308 	sub.w	r3, r0, r8
 800c122:	fa09 f303 	lsl.w	r3, r9, r3
 800c126:	4313      	orrs	r3, r2
 800c128:	9304      	str	r3, [sp, #16]
 800c12a:	46a2      	mov	sl, r4
 800c12c:	e7d2      	b.n	800c0d4 <_svfiprintf_r+0x9c>
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	1d19      	adds	r1, r3, #4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	9103      	str	r1, [sp, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	bfbb      	ittet	lt
 800c13a:	425b      	neglt	r3, r3
 800c13c:	f042 0202 	orrlt.w	r2, r2, #2
 800c140:	9307      	strge	r3, [sp, #28]
 800c142:	9307      	strlt	r3, [sp, #28]
 800c144:	bfb8      	it	lt
 800c146:	9204      	strlt	r2, [sp, #16]
 800c148:	7823      	ldrb	r3, [r4, #0]
 800c14a:	2b2e      	cmp	r3, #46	; 0x2e
 800c14c:	d10c      	bne.n	800c168 <_svfiprintf_r+0x130>
 800c14e:	7863      	ldrb	r3, [r4, #1]
 800c150:	2b2a      	cmp	r3, #42	; 0x2a
 800c152:	d134      	bne.n	800c1be <_svfiprintf_r+0x186>
 800c154:	9b03      	ldr	r3, [sp, #12]
 800c156:	1d1a      	adds	r2, r3, #4
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	9203      	str	r2, [sp, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	bfb8      	it	lt
 800c160:	f04f 33ff 	movlt.w	r3, #4294967295
 800c164:	3402      	adds	r4, #2
 800c166:	9305      	str	r3, [sp, #20]
 800c168:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c230 <_svfiprintf_r+0x1f8>
 800c16c:	7821      	ldrb	r1, [r4, #0]
 800c16e:	2203      	movs	r2, #3
 800c170:	4650      	mov	r0, sl
 800c172:	f7f4 f84d 	bl	8000210 <memchr>
 800c176:	b138      	cbz	r0, 800c188 <_svfiprintf_r+0x150>
 800c178:	9b04      	ldr	r3, [sp, #16]
 800c17a:	eba0 000a 	sub.w	r0, r0, sl
 800c17e:	2240      	movs	r2, #64	; 0x40
 800c180:	4082      	lsls	r2, r0
 800c182:	4313      	orrs	r3, r2
 800c184:	3401      	adds	r4, #1
 800c186:	9304      	str	r3, [sp, #16]
 800c188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18c:	4825      	ldr	r0, [pc, #148]	; (800c224 <_svfiprintf_r+0x1ec>)
 800c18e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c192:	2206      	movs	r2, #6
 800c194:	f7f4 f83c 	bl	8000210 <memchr>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d038      	beq.n	800c20e <_svfiprintf_r+0x1d6>
 800c19c:	4b22      	ldr	r3, [pc, #136]	; (800c228 <_svfiprintf_r+0x1f0>)
 800c19e:	bb1b      	cbnz	r3, 800c1e8 <_svfiprintf_r+0x1b0>
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	3307      	adds	r3, #7
 800c1a4:	f023 0307 	bic.w	r3, r3, #7
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	9303      	str	r3, [sp, #12]
 800c1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ae:	4433      	add	r3, r6
 800c1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b2:	e768      	b.n	800c086 <_svfiprintf_r+0x4e>
 800c1b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	e7a6      	b.n	800c10c <_svfiprintf_r+0xd4>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	3401      	adds	r4, #1
 800c1c2:	9305      	str	r3, [sp, #20]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	f04f 0c0a 	mov.w	ip, #10
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d0:	3a30      	subs	r2, #48	; 0x30
 800c1d2:	2a09      	cmp	r2, #9
 800c1d4:	d903      	bls.n	800c1de <_svfiprintf_r+0x1a6>
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d0c6      	beq.n	800c168 <_svfiprintf_r+0x130>
 800c1da:	9105      	str	r1, [sp, #20]
 800c1dc:	e7c4      	b.n	800c168 <_svfiprintf_r+0x130>
 800c1de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e7f0      	b.n	800c1ca <_svfiprintf_r+0x192>
 800c1e8:	ab03      	add	r3, sp, #12
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	4b0f      	ldr	r3, [pc, #60]	; (800c22c <_svfiprintf_r+0x1f4>)
 800c1f0:	a904      	add	r1, sp, #16
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	f7fc fb44 	bl	8008880 <_printf_float>
 800c1f8:	1c42      	adds	r2, r0, #1
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	d1d6      	bne.n	800c1ac <_svfiprintf_r+0x174>
 800c1fe:	89ab      	ldrh	r3, [r5, #12]
 800c200:	065b      	lsls	r3, r3, #25
 800c202:	f53f af2d 	bmi.w	800c060 <_svfiprintf_r+0x28>
 800c206:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c208:	b01d      	add	sp, #116	; 0x74
 800c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20e:	ab03      	add	r3, sp, #12
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	462a      	mov	r2, r5
 800c214:	4b05      	ldr	r3, [pc, #20]	; (800c22c <_svfiprintf_r+0x1f4>)
 800c216:	a904      	add	r1, sp, #16
 800c218:	4638      	mov	r0, r7
 800c21a:	f7fc fdd5 	bl	8008dc8 <_printf_i>
 800c21e:	e7eb      	b.n	800c1f8 <_svfiprintf_r+0x1c0>
 800c220:	0800dfa1 	.word	0x0800dfa1
 800c224:	0800dfab 	.word	0x0800dfab
 800c228:	08008881 	.word	0x08008881
 800c22c:	0800bf85 	.word	0x0800bf85
 800c230:	0800dfa7 	.word	0x0800dfa7

0800c234 <_sungetc_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	1c4b      	adds	r3, r1, #1
 800c238:	4614      	mov	r4, r2
 800c23a:	d103      	bne.n	800c244 <_sungetc_r+0x10>
 800c23c:	f04f 35ff 	mov.w	r5, #4294967295
 800c240:	4628      	mov	r0, r5
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	8993      	ldrh	r3, [r2, #12]
 800c246:	f023 0320 	bic.w	r3, r3, #32
 800c24a:	8193      	strh	r3, [r2, #12]
 800c24c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c24e:	6852      	ldr	r2, [r2, #4]
 800c250:	b2cd      	uxtb	r5, r1
 800c252:	b18b      	cbz	r3, 800c278 <_sungetc_r+0x44>
 800c254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c256:	4293      	cmp	r3, r2
 800c258:	dd08      	ble.n	800c26c <_sungetc_r+0x38>
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	1e5a      	subs	r2, r3, #1
 800c25e:	6022      	str	r2, [r4, #0]
 800c260:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c264:	6863      	ldr	r3, [r4, #4]
 800c266:	3301      	adds	r3, #1
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	e7e9      	b.n	800c240 <_sungetc_r+0xc>
 800c26c:	4621      	mov	r1, r4
 800c26e:	f000 fd8e 	bl	800cd8e <__submore>
 800c272:	2800      	cmp	r0, #0
 800c274:	d0f1      	beq.n	800c25a <_sungetc_r+0x26>
 800c276:	e7e1      	b.n	800c23c <_sungetc_r+0x8>
 800c278:	6921      	ldr	r1, [r4, #16]
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	b151      	cbz	r1, 800c294 <_sungetc_r+0x60>
 800c27e:	4299      	cmp	r1, r3
 800c280:	d208      	bcs.n	800c294 <_sungetc_r+0x60>
 800c282:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c286:	42a9      	cmp	r1, r5
 800c288:	d104      	bne.n	800c294 <_sungetc_r+0x60>
 800c28a:	3b01      	subs	r3, #1
 800c28c:	3201      	adds	r2, #1
 800c28e:	6023      	str	r3, [r4, #0]
 800c290:	6062      	str	r2, [r4, #4]
 800c292:	e7d5      	b.n	800c240 <_sungetc_r+0xc>
 800c294:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c29c:	6363      	str	r3, [r4, #52]	; 0x34
 800c29e:	2303      	movs	r3, #3
 800c2a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800c2a2:	4623      	mov	r3, r4
 800c2a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e7dc      	b.n	800c268 <_sungetc_r+0x34>

0800c2ae <__ssrefill_r>:
 800c2ae:	b510      	push	{r4, lr}
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c2b4:	b169      	cbz	r1, 800c2d2 <__ssrefill_r+0x24>
 800c2b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2ba:	4299      	cmp	r1, r3
 800c2bc:	d001      	beq.n	800c2c2 <__ssrefill_r+0x14>
 800c2be:	f7fe fa1d 	bl	800a6fc <_free_r>
 800c2c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2c4:	6063      	str	r3, [r4, #4]
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	6360      	str	r0, [r4, #52]	; 0x34
 800c2ca:	b113      	cbz	r3, 800c2d2 <__ssrefill_r+0x24>
 800c2cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c2ce:	6023      	str	r3, [r4, #0]
 800c2d0:	bd10      	pop	{r4, pc}
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	6063      	str	r3, [r4, #4]
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	f043 0320 	orr.w	r3, r3, #32
 800c2e0:	81a3      	strh	r3, [r4, #12]
 800c2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e6:	e7f3      	b.n	800c2d0 <__ssrefill_r+0x22>

0800c2e8 <__ssvfiscanf_r>:
 800c2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ec:	460c      	mov	r4, r1
 800c2ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c2f8:	49a6      	ldr	r1, [pc, #664]	; (800c594 <__ssvfiscanf_r+0x2ac>)
 800c2fa:	91a0      	str	r1, [sp, #640]	; 0x280
 800c2fc:	f10d 0804 	add.w	r8, sp, #4
 800c300:	49a5      	ldr	r1, [pc, #660]	; (800c598 <__ssvfiscanf_r+0x2b0>)
 800c302:	4fa6      	ldr	r7, [pc, #664]	; (800c59c <__ssvfiscanf_r+0x2b4>)
 800c304:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c5a0 <__ssvfiscanf_r+0x2b8>
 800c308:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c30c:	4606      	mov	r6, r0
 800c30e:	91a1      	str	r1, [sp, #644]	; 0x284
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	7813      	ldrb	r3, [r2, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	f000 815a 	beq.w	800c5ce <__ssvfiscanf_r+0x2e6>
 800c31a:	5cf9      	ldrb	r1, [r7, r3]
 800c31c:	f011 0108 	ands.w	r1, r1, #8
 800c320:	f102 0501 	add.w	r5, r2, #1
 800c324:	d019      	beq.n	800c35a <__ssvfiscanf_r+0x72>
 800c326:	6863      	ldr	r3, [r4, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	dd0f      	ble.n	800c34c <__ssvfiscanf_r+0x64>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	781a      	ldrb	r2, [r3, #0]
 800c330:	5cba      	ldrb	r2, [r7, r2]
 800c332:	0712      	lsls	r2, r2, #28
 800c334:	d401      	bmi.n	800c33a <__ssvfiscanf_r+0x52>
 800c336:	462a      	mov	r2, r5
 800c338:	e7eb      	b.n	800c312 <__ssvfiscanf_r+0x2a>
 800c33a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c33c:	3201      	adds	r2, #1
 800c33e:	9245      	str	r2, [sp, #276]	; 0x114
 800c340:	6862      	ldr	r2, [r4, #4]
 800c342:	3301      	adds	r3, #1
 800c344:	3a01      	subs	r2, #1
 800c346:	6062      	str	r2, [r4, #4]
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	e7ec      	b.n	800c326 <__ssvfiscanf_r+0x3e>
 800c34c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c34e:	4621      	mov	r1, r4
 800c350:	4630      	mov	r0, r6
 800c352:	4798      	blx	r3
 800c354:	2800      	cmp	r0, #0
 800c356:	d0e9      	beq.n	800c32c <__ssvfiscanf_r+0x44>
 800c358:	e7ed      	b.n	800c336 <__ssvfiscanf_r+0x4e>
 800c35a:	2b25      	cmp	r3, #37	; 0x25
 800c35c:	d012      	beq.n	800c384 <__ssvfiscanf_r+0x9c>
 800c35e:	469a      	mov	sl, r3
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	f340 8091 	ble.w	800c48a <__ssvfiscanf_r+0x1a2>
 800c368:	6822      	ldr	r2, [r4, #0]
 800c36a:	7813      	ldrb	r3, [r2, #0]
 800c36c:	4553      	cmp	r3, sl
 800c36e:	f040 812e 	bne.w	800c5ce <__ssvfiscanf_r+0x2e6>
 800c372:	6863      	ldr	r3, [r4, #4]
 800c374:	3b01      	subs	r3, #1
 800c376:	6063      	str	r3, [r4, #4]
 800c378:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c37a:	3201      	adds	r2, #1
 800c37c:	3301      	adds	r3, #1
 800c37e:	6022      	str	r2, [r4, #0]
 800c380:	9345      	str	r3, [sp, #276]	; 0x114
 800c382:	e7d8      	b.n	800c336 <__ssvfiscanf_r+0x4e>
 800c384:	9141      	str	r1, [sp, #260]	; 0x104
 800c386:	9143      	str	r1, [sp, #268]	; 0x10c
 800c388:	7853      	ldrb	r3, [r2, #1]
 800c38a:	2b2a      	cmp	r3, #42	; 0x2a
 800c38c:	bf02      	ittt	eq
 800c38e:	2310      	moveq	r3, #16
 800c390:	1c95      	addeq	r5, r2, #2
 800c392:	9341      	streq	r3, [sp, #260]	; 0x104
 800c394:	220a      	movs	r2, #10
 800c396:	46aa      	mov	sl, r5
 800c398:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c39c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c3a0:	2b09      	cmp	r3, #9
 800c3a2:	d91c      	bls.n	800c3de <__ssvfiscanf_r+0xf6>
 800c3a4:	487e      	ldr	r0, [pc, #504]	; (800c5a0 <__ssvfiscanf_r+0x2b8>)
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	f7f3 ff32 	bl	8000210 <memchr>
 800c3ac:	b138      	cbz	r0, 800c3be <__ssvfiscanf_r+0xd6>
 800c3ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c3b0:	eba0 0009 	sub.w	r0, r0, r9
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	4083      	lsls	r3, r0
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	9341      	str	r3, [sp, #260]	; 0x104
 800c3bc:	4655      	mov	r5, sl
 800c3be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3c2:	2b78      	cmp	r3, #120	; 0x78
 800c3c4:	d806      	bhi.n	800c3d4 <__ssvfiscanf_r+0xec>
 800c3c6:	2b57      	cmp	r3, #87	; 0x57
 800c3c8:	d810      	bhi.n	800c3ec <__ssvfiscanf_r+0x104>
 800c3ca:	2b25      	cmp	r3, #37	; 0x25
 800c3cc:	d0c7      	beq.n	800c35e <__ssvfiscanf_r+0x76>
 800c3ce:	d857      	bhi.n	800c480 <__ssvfiscanf_r+0x198>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d065      	beq.n	800c4a0 <__ssvfiscanf_r+0x1b8>
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800c3d8:	230a      	movs	r3, #10
 800c3da:	9342      	str	r3, [sp, #264]	; 0x108
 800c3dc:	e076      	b.n	800c4cc <__ssvfiscanf_r+0x1e4>
 800c3de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c3e0:	fb02 1103 	mla	r1, r2, r3, r1
 800c3e4:	3930      	subs	r1, #48	; 0x30
 800c3e6:	9143      	str	r1, [sp, #268]	; 0x10c
 800c3e8:	4655      	mov	r5, sl
 800c3ea:	e7d4      	b.n	800c396 <__ssvfiscanf_r+0xae>
 800c3ec:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c3f0:	2a20      	cmp	r2, #32
 800c3f2:	d8ef      	bhi.n	800c3d4 <__ssvfiscanf_r+0xec>
 800c3f4:	a101      	add	r1, pc, #4	; (adr r1, 800c3fc <__ssvfiscanf_r+0x114>)
 800c3f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c3fa:	bf00      	nop
 800c3fc:	0800c4af 	.word	0x0800c4af
 800c400:	0800c3d5 	.word	0x0800c3d5
 800c404:	0800c3d5 	.word	0x0800c3d5
 800c408:	0800c50d 	.word	0x0800c50d
 800c40c:	0800c3d5 	.word	0x0800c3d5
 800c410:	0800c3d5 	.word	0x0800c3d5
 800c414:	0800c3d5 	.word	0x0800c3d5
 800c418:	0800c3d5 	.word	0x0800c3d5
 800c41c:	0800c3d5 	.word	0x0800c3d5
 800c420:	0800c3d5 	.word	0x0800c3d5
 800c424:	0800c3d5 	.word	0x0800c3d5
 800c428:	0800c523 	.word	0x0800c523
 800c42c:	0800c509 	.word	0x0800c509
 800c430:	0800c487 	.word	0x0800c487
 800c434:	0800c487 	.word	0x0800c487
 800c438:	0800c487 	.word	0x0800c487
 800c43c:	0800c3d5 	.word	0x0800c3d5
 800c440:	0800c4c5 	.word	0x0800c4c5
 800c444:	0800c3d5 	.word	0x0800c3d5
 800c448:	0800c3d5 	.word	0x0800c3d5
 800c44c:	0800c3d5 	.word	0x0800c3d5
 800c450:	0800c3d5 	.word	0x0800c3d5
 800c454:	0800c533 	.word	0x0800c533
 800c458:	0800c501 	.word	0x0800c501
 800c45c:	0800c4a7 	.word	0x0800c4a7
 800c460:	0800c3d5 	.word	0x0800c3d5
 800c464:	0800c3d5 	.word	0x0800c3d5
 800c468:	0800c52f 	.word	0x0800c52f
 800c46c:	0800c3d5 	.word	0x0800c3d5
 800c470:	0800c509 	.word	0x0800c509
 800c474:	0800c3d5 	.word	0x0800c3d5
 800c478:	0800c3d5 	.word	0x0800c3d5
 800c47c:	0800c4af 	.word	0x0800c4af
 800c480:	3b45      	subs	r3, #69	; 0x45
 800c482:	2b02      	cmp	r3, #2
 800c484:	d8a6      	bhi.n	800c3d4 <__ssvfiscanf_r+0xec>
 800c486:	2305      	movs	r3, #5
 800c488:	e01f      	b.n	800c4ca <__ssvfiscanf_r+0x1e2>
 800c48a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c48c:	4621      	mov	r1, r4
 800c48e:	4630      	mov	r0, r6
 800c490:	4798      	blx	r3
 800c492:	2800      	cmp	r0, #0
 800c494:	f43f af68 	beq.w	800c368 <__ssvfiscanf_r+0x80>
 800c498:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c49a:	2800      	cmp	r0, #0
 800c49c:	f040 808d 	bne.w	800c5ba <__ssvfiscanf_r+0x2d2>
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a4:	e08f      	b.n	800c5c6 <__ssvfiscanf_r+0x2de>
 800c4a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c4a8:	f042 0220 	orr.w	r2, r2, #32
 800c4ac:	9241      	str	r2, [sp, #260]	; 0x104
 800c4ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c4b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4b4:	9241      	str	r2, [sp, #260]	; 0x104
 800c4b6:	2210      	movs	r2, #16
 800c4b8:	2b6f      	cmp	r3, #111	; 0x6f
 800c4ba:	9242      	str	r2, [sp, #264]	; 0x108
 800c4bc:	bf34      	ite	cc
 800c4be:	2303      	movcc	r3, #3
 800c4c0:	2304      	movcs	r3, #4
 800c4c2:	e002      	b.n	800c4ca <__ssvfiscanf_r+0x1e2>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	9342      	str	r3, [sp, #264]	; 0x108
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	9347      	str	r3, [sp, #284]	; 0x11c
 800c4cc:	6863      	ldr	r3, [r4, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	dd3d      	ble.n	800c54e <__ssvfiscanf_r+0x266>
 800c4d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c4d4:	0659      	lsls	r1, r3, #25
 800c4d6:	d404      	bmi.n	800c4e2 <__ssvfiscanf_r+0x1fa>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	781a      	ldrb	r2, [r3, #0]
 800c4dc:	5cba      	ldrb	r2, [r7, r2]
 800c4de:	0712      	lsls	r2, r2, #28
 800c4e0:	d43c      	bmi.n	800c55c <__ssvfiscanf_r+0x274>
 800c4e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	dc4b      	bgt.n	800c580 <__ssvfiscanf_r+0x298>
 800c4e8:	466b      	mov	r3, sp
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	a941      	add	r1, sp, #260	; 0x104
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f000 f9b6 	bl	800c860 <_scanf_chars>
 800c4f4:	2801      	cmp	r0, #1
 800c4f6:	d06a      	beq.n	800c5ce <__ssvfiscanf_r+0x2e6>
 800c4f8:	2802      	cmp	r0, #2
 800c4fa:	f47f af1c 	bne.w	800c336 <__ssvfiscanf_r+0x4e>
 800c4fe:	e7cb      	b.n	800c498 <__ssvfiscanf_r+0x1b0>
 800c500:	2308      	movs	r3, #8
 800c502:	9342      	str	r3, [sp, #264]	; 0x108
 800c504:	2304      	movs	r3, #4
 800c506:	e7e0      	b.n	800c4ca <__ssvfiscanf_r+0x1e2>
 800c508:	220a      	movs	r2, #10
 800c50a:	e7d5      	b.n	800c4b8 <__ssvfiscanf_r+0x1d0>
 800c50c:	4629      	mov	r1, r5
 800c50e:	4640      	mov	r0, r8
 800c510:	f000 fc04 	bl	800cd1c <__sccl>
 800c514:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c51a:	9341      	str	r3, [sp, #260]	; 0x104
 800c51c:	4605      	mov	r5, r0
 800c51e:	2301      	movs	r3, #1
 800c520:	e7d3      	b.n	800c4ca <__ssvfiscanf_r+0x1e2>
 800c522:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c528:	9341      	str	r3, [sp, #260]	; 0x104
 800c52a:	2300      	movs	r3, #0
 800c52c:	e7cd      	b.n	800c4ca <__ssvfiscanf_r+0x1e2>
 800c52e:	2302      	movs	r3, #2
 800c530:	e7cb      	b.n	800c4ca <__ssvfiscanf_r+0x1e2>
 800c532:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c534:	06c3      	lsls	r3, r0, #27
 800c536:	f53f aefe 	bmi.w	800c336 <__ssvfiscanf_r+0x4e>
 800c53a:	9b00      	ldr	r3, [sp, #0]
 800c53c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c53e:	1d19      	adds	r1, r3, #4
 800c540:	9100      	str	r1, [sp, #0]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	07c0      	lsls	r0, r0, #31
 800c546:	bf4c      	ite	mi
 800c548:	801a      	strhmi	r2, [r3, #0]
 800c54a:	601a      	strpl	r2, [r3, #0]
 800c54c:	e6f3      	b.n	800c336 <__ssvfiscanf_r+0x4e>
 800c54e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c550:	4621      	mov	r1, r4
 800c552:	4630      	mov	r0, r6
 800c554:	4798      	blx	r3
 800c556:	2800      	cmp	r0, #0
 800c558:	d0bb      	beq.n	800c4d2 <__ssvfiscanf_r+0x1ea>
 800c55a:	e79d      	b.n	800c498 <__ssvfiscanf_r+0x1b0>
 800c55c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c55e:	3201      	adds	r2, #1
 800c560:	9245      	str	r2, [sp, #276]	; 0x114
 800c562:	6862      	ldr	r2, [r4, #4]
 800c564:	3a01      	subs	r2, #1
 800c566:	2a00      	cmp	r2, #0
 800c568:	6062      	str	r2, [r4, #4]
 800c56a:	dd02      	ble.n	800c572 <__ssvfiscanf_r+0x28a>
 800c56c:	3301      	adds	r3, #1
 800c56e:	6023      	str	r3, [r4, #0]
 800c570:	e7b2      	b.n	800c4d8 <__ssvfiscanf_r+0x1f0>
 800c572:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c574:	4621      	mov	r1, r4
 800c576:	4630      	mov	r0, r6
 800c578:	4798      	blx	r3
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d0ac      	beq.n	800c4d8 <__ssvfiscanf_r+0x1f0>
 800c57e:	e78b      	b.n	800c498 <__ssvfiscanf_r+0x1b0>
 800c580:	2b04      	cmp	r3, #4
 800c582:	dc0f      	bgt.n	800c5a4 <__ssvfiscanf_r+0x2bc>
 800c584:	466b      	mov	r3, sp
 800c586:	4622      	mov	r2, r4
 800c588:	a941      	add	r1, sp, #260	; 0x104
 800c58a:	4630      	mov	r0, r6
 800c58c:	f000 f9c2 	bl	800c914 <_scanf_i>
 800c590:	e7b0      	b.n	800c4f4 <__ssvfiscanf_r+0x20c>
 800c592:	bf00      	nop
 800c594:	0800c235 	.word	0x0800c235
 800c598:	0800c2af 	.word	0x0800c2af
 800c59c:	0800dea1 	.word	0x0800dea1
 800c5a0:	0800dfa7 	.word	0x0800dfa7
 800c5a4:	4b0b      	ldr	r3, [pc, #44]	; (800c5d4 <__ssvfiscanf_r+0x2ec>)
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f43f aec5 	beq.w	800c336 <__ssvfiscanf_r+0x4e>
 800c5ac:	466b      	mov	r3, sp
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	a941      	add	r1, sp, #260	; 0x104
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7fc fd2a 	bl	800900c <_scanf_float>
 800c5b8:	e79c      	b.n	800c4f4 <__ssvfiscanf_r+0x20c>
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c5c0:	bf18      	it	ne
 800c5c2:	f04f 30ff 	movne.w	r0, #4294967295
 800c5c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c5d0:	e7f9      	b.n	800c5c6 <__ssvfiscanf_r+0x2de>
 800c5d2:	bf00      	nop
 800c5d4:	0800900d 	.word	0x0800900d

0800c5d8 <__sfputc_r>:
 800c5d8:	6893      	ldr	r3, [r2, #8]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	b410      	push	{r4}
 800c5e0:	6093      	str	r3, [r2, #8]
 800c5e2:	da08      	bge.n	800c5f6 <__sfputc_r+0x1e>
 800c5e4:	6994      	ldr	r4, [r2, #24]
 800c5e6:	42a3      	cmp	r3, r4
 800c5e8:	db01      	blt.n	800c5ee <__sfputc_r+0x16>
 800c5ea:	290a      	cmp	r1, #10
 800c5ec:	d103      	bne.n	800c5f6 <__sfputc_r+0x1e>
 800c5ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5f2:	f7fd b8ca 	b.w	800978a <__swbuf_r>
 800c5f6:	6813      	ldr	r3, [r2, #0]
 800c5f8:	1c58      	adds	r0, r3, #1
 800c5fa:	6010      	str	r0, [r2, #0]
 800c5fc:	7019      	strb	r1, [r3, #0]
 800c5fe:	4608      	mov	r0, r1
 800c600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <__sfputs_r>:
 800c606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c608:	4606      	mov	r6, r0
 800c60a:	460f      	mov	r7, r1
 800c60c:	4614      	mov	r4, r2
 800c60e:	18d5      	adds	r5, r2, r3
 800c610:	42ac      	cmp	r4, r5
 800c612:	d101      	bne.n	800c618 <__sfputs_r+0x12>
 800c614:	2000      	movs	r0, #0
 800c616:	e007      	b.n	800c628 <__sfputs_r+0x22>
 800c618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61c:	463a      	mov	r2, r7
 800c61e:	4630      	mov	r0, r6
 800c620:	f7ff ffda 	bl	800c5d8 <__sfputc_r>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	d1f3      	bne.n	800c610 <__sfputs_r+0xa>
 800c628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c62c <_vfiprintf_r>:
 800c62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c630:	460d      	mov	r5, r1
 800c632:	b09d      	sub	sp, #116	; 0x74
 800c634:	4614      	mov	r4, r2
 800c636:	4698      	mov	r8, r3
 800c638:	4606      	mov	r6, r0
 800c63a:	b118      	cbz	r0, 800c644 <_vfiprintf_r+0x18>
 800c63c:	6a03      	ldr	r3, [r0, #32]
 800c63e:	b90b      	cbnz	r3, 800c644 <_vfiprintf_r+0x18>
 800c640:	f7fc ff6e 	bl	8009520 <__sinit>
 800c644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c646:	07d9      	lsls	r1, r3, #31
 800c648:	d405      	bmi.n	800c656 <_vfiprintf_r+0x2a>
 800c64a:	89ab      	ldrh	r3, [r5, #12]
 800c64c:	059a      	lsls	r2, r3, #22
 800c64e:	d402      	bmi.n	800c656 <_vfiprintf_r+0x2a>
 800c650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c652:	f7fd f9c1 	bl	80099d8 <__retarget_lock_acquire_recursive>
 800c656:	89ab      	ldrh	r3, [r5, #12]
 800c658:	071b      	lsls	r3, r3, #28
 800c65a:	d501      	bpl.n	800c660 <_vfiprintf_r+0x34>
 800c65c:	692b      	ldr	r3, [r5, #16]
 800c65e:	b99b      	cbnz	r3, 800c688 <_vfiprintf_r+0x5c>
 800c660:	4629      	mov	r1, r5
 800c662:	4630      	mov	r0, r6
 800c664:	f7fd f8ce 	bl	8009804 <__swsetup_r>
 800c668:	b170      	cbz	r0, 800c688 <_vfiprintf_r+0x5c>
 800c66a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c66c:	07dc      	lsls	r4, r3, #31
 800c66e:	d504      	bpl.n	800c67a <_vfiprintf_r+0x4e>
 800c670:	f04f 30ff 	mov.w	r0, #4294967295
 800c674:	b01d      	add	sp, #116	; 0x74
 800c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67a:	89ab      	ldrh	r3, [r5, #12]
 800c67c:	0598      	lsls	r0, r3, #22
 800c67e:	d4f7      	bmi.n	800c670 <_vfiprintf_r+0x44>
 800c680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c682:	f7fd f9aa 	bl	80099da <__retarget_lock_release_recursive>
 800c686:	e7f3      	b.n	800c670 <_vfiprintf_r+0x44>
 800c688:	2300      	movs	r3, #0
 800c68a:	9309      	str	r3, [sp, #36]	; 0x24
 800c68c:	2320      	movs	r3, #32
 800c68e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c692:	f8cd 800c 	str.w	r8, [sp, #12]
 800c696:	2330      	movs	r3, #48	; 0x30
 800c698:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c84c <_vfiprintf_r+0x220>
 800c69c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6a0:	f04f 0901 	mov.w	r9, #1
 800c6a4:	4623      	mov	r3, r4
 800c6a6:	469a      	mov	sl, r3
 800c6a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ac:	b10a      	cbz	r2, 800c6b2 <_vfiprintf_r+0x86>
 800c6ae:	2a25      	cmp	r2, #37	; 0x25
 800c6b0:	d1f9      	bne.n	800c6a6 <_vfiprintf_r+0x7a>
 800c6b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c6b6:	d00b      	beq.n	800c6d0 <_vfiprintf_r+0xa4>
 800c6b8:	465b      	mov	r3, fp
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	4629      	mov	r1, r5
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f7ff ffa1 	bl	800c606 <__sfputs_r>
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	f000 80a9 	beq.w	800c81c <_vfiprintf_r+0x1f0>
 800c6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6cc:	445a      	add	r2, fp
 800c6ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 80a1 	beq.w	800c81c <_vfiprintf_r+0x1f0>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6e4:	f10a 0a01 	add.w	sl, sl, #1
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	9307      	str	r3, [sp, #28]
 800c6ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c6f2:	4654      	mov	r4, sl
 800c6f4:	2205      	movs	r2, #5
 800c6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6fa:	4854      	ldr	r0, [pc, #336]	; (800c84c <_vfiprintf_r+0x220>)
 800c6fc:	f7f3 fd88 	bl	8000210 <memchr>
 800c700:	9a04      	ldr	r2, [sp, #16]
 800c702:	b9d8      	cbnz	r0, 800c73c <_vfiprintf_r+0x110>
 800c704:	06d1      	lsls	r1, r2, #27
 800c706:	bf44      	itt	mi
 800c708:	2320      	movmi	r3, #32
 800c70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c70e:	0713      	lsls	r3, r2, #28
 800c710:	bf44      	itt	mi
 800c712:	232b      	movmi	r3, #43	; 0x2b
 800c714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c718:	f89a 3000 	ldrb.w	r3, [sl]
 800c71c:	2b2a      	cmp	r3, #42	; 0x2a
 800c71e:	d015      	beq.n	800c74c <_vfiprintf_r+0x120>
 800c720:	9a07      	ldr	r2, [sp, #28]
 800c722:	4654      	mov	r4, sl
 800c724:	2000      	movs	r0, #0
 800c726:	f04f 0c0a 	mov.w	ip, #10
 800c72a:	4621      	mov	r1, r4
 800c72c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c730:	3b30      	subs	r3, #48	; 0x30
 800c732:	2b09      	cmp	r3, #9
 800c734:	d94d      	bls.n	800c7d2 <_vfiprintf_r+0x1a6>
 800c736:	b1b0      	cbz	r0, 800c766 <_vfiprintf_r+0x13a>
 800c738:	9207      	str	r2, [sp, #28]
 800c73a:	e014      	b.n	800c766 <_vfiprintf_r+0x13a>
 800c73c:	eba0 0308 	sub.w	r3, r0, r8
 800c740:	fa09 f303 	lsl.w	r3, r9, r3
 800c744:	4313      	orrs	r3, r2
 800c746:	9304      	str	r3, [sp, #16]
 800c748:	46a2      	mov	sl, r4
 800c74a:	e7d2      	b.n	800c6f2 <_vfiprintf_r+0xc6>
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	1d19      	adds	r1, r3, #4
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	9103      	str	r1, [sp, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	bfbb      	ittet	lt
 800c758:	425b      	neglt	r3, r3
 800c75a:	f042 0202 	orrlt.w	r2, r2, #2
 800c75e:	9307      	strge	r3, [sp, #28]
 800c760:	9307      	strlt	r3, [sp, #28]
 800c762:	bfb8      	it	lt
 800c764:	9204      	strlt	r2, [sp, #16]
 800c766:	7823      	ldrb	r3, [r4, #0]
 800c768:	2b2e      	cmp	r3, #46	; 0x2e
 800c76a:	d10c      	bne.n	800c786 <_vfiprintf_r+0x15a>
 800c76c:	7863      	ldrb	r3, [r4, #1]
 800c76e:	2b2a      	cmp	r3, #42	; 0x2a
 800c770:	d134      	bne.n	800c7dc <_vfiprintf_r+0x1b0>
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	1d1a      	adds	r2, r3, #4
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	9203      	str	r2, [sp, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	bfb8      	it	lt
 800c77e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c782:	3402      	adds	r4, #2
 800c784:	9305      	str	r3, [sp, #20]
 800c786:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c85c <_vfiprintf_r+0x230>
 800c78a:	7821      	ldrb	r1, [r4, #0]
 800c78c:	2203      	movs	r2, #3
 800c78e:	4650      	mov	r0, sl
 800c790:	f7f3 fd3e 	bl	8000210 <memchr>
 800c794:	b138      	cbz	r0, 800c7a6 <_vfiprintf_r+0x17a>
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	eba0 000a 	sub.w	r0, r0, sl
 800c79c:	2240      	movs	r2, #64	; 0x40
 800c79e:	4082      	lsls	r2, r0
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	3401      	adds	r4, #1
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7aa:	4829      	ldr	r0, [pc, #164]	; (800c850 <_vfiprintf_r+0x224>)
 800c7ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7b0:	2206      	movs	r2, #6
 800c7b2:	f7f3 fd2d 	bl	8000210 <memchr>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d03f      	beq.n	800c83a <_vfiprintf_r+0x20e>
 800c7ba:	4b26      	ldr	r3, [pc, #152]	; (800c854 <_vfiprintf_r+0x228>)
 800c7bc:	bb1b      	cbnz	r3, 800c806 <_vfiprintf_r+0x1da>
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	3307      	adds	r3, #7
 800c7c2:	f023 0307 	bic.w	r3, r3, #7
 800c7c6:	3308      	adds	r3, #8
 800c7c8:	9303      	str	r3, [sp, #12]
 800c7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7cc:	443b      	add	r3, r7
 800c7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d0:	e768      	b.n	800c6a4 <_vfiprintf_r+0x78>
 800c7d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	2001      	movs	r0, #1
 800c7da:	e7a6      	b.n	800c72a <_vfiprintf_r+0xfe>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	3401      	adds	r4, #1
 800c7e0:	9305      	str	r3, [sp, #20]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	f04f 0c0a 	mov.w	ip, #10
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ee:	3a30      	subs	r2, #48	; 0x30
 800c7f0:	2a09      	cmp	r2, #9
 800c7f2:	d903      	bls.n	800c7fc <_vfiprintf_r+0x1d0>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d0c6      	beq.n	800c786 <_vfiprintf_r+0x15a>
 800c7f8:	9105      	str	r1, [sp, #20]
 800c7fa:	e7c4      	b.n	800c786 <_vfiprintf_r+0x15a>
 800c7fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c800:	4604      	mov	r4, r0
 800c802:	2301      	movs	r3, #1
 800c804:	e7f0      	b.n	800c7e8 <_vfiprintf_r+0x1bc>
 800c806:	ab03      	add	r3, sp, #12
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	462a      	mov	r2, r5
 800c80c:	4b12      	ldr	r3, [pc, #72]	; (800c858 <_vfiprintf_r+0x22c>)
 800c80e:	a904      	add	r1, sp, #16
 800c810:	4630      	mov	r0, r6
 800c812:	f7fc f835 	bl	8008880 <_printf_float>
 800c816:	4607      	mov	r7, r0
 800c818:	1c78      	adds	r0, r7, #1
 800c81a:	d1d6      	bne.n	800c7ca <_vfiprintf_r+0x19e>
 800c81c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c81e:	07d9      	lsls	r1, r3, #31
 800c820:	d405      	bmi.n	800c82e <_vfiprintf_r+0x202>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	059a      	lsls	r2, r3, #22
 800c826:	d402      	bmi.n	800c82e <_vfiprintf_r+0x202>
 800c828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c82a:	f7fd f8d6 	bl	80099da <__retarget_lock_release_recursive>
 800c82e:	89ab      	ldrh	r3, [r5, #12]
 800c830:	065b      	lsls	r3, r3, #25
 800c832:	f53f af1d 	bmi.w	800c670 <_vfiprintf_r+0x44>
 800c836:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c838:	e71c      	b.n	800c674 <_vfiprintf_r+0x48>
 800c83a:	ab03      	add	r3, sp, #12
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	462a      	mov	r2, r5
 800c840:	4b05      	ldr	r3, [pc, #20]	; (800c858 <_vfiprintf_r+0x22c>)
 800c842:	a904      	add	r1, sp, #16
 800c844:	4630      	mov	r0, r6
 800c846:	f7fc fabf 	bl	8008dc8 <_printf_i>
 800c84a:	e7e4      	b.n	800c816 <_vfiprintf_r+0x1ea>
 800c84c:	0800dfa1 	.word	0x0800dfa1
 800c850:	0800dfab 	.word	0x0800dfab
 800c854:	08008881 	.word	0x08008881
 800c858:	0800c607 	.word	0x0800c607
 800c85c:	0800dfa7 	.word	0x0800dfa7

0800c860 <_scanf_chars>:
 800c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c864:	4615      	mov	r5, r2
 800c866:	688a      	ldr	r2, [r1, #8]
 800c868:	4680      	mov	r8, r0
 800c86a:	460c      	mov	r4, r1
 800c86c:	b932      	cbnz	r2, 800c87c <_scanf_chars+0x1c>
 800c86e:	698a      	ldr	r2, [r1, #24]
 800c870:	2a00      	cmp	r2, #0
 800c872:	bf0c      	ite	eq
 800c874:	2201      	moveq	r2, #1
 800c876:	f04f 32ff 	movne.w	r2, #4294967295
 800c87a:	608a      	str	r2, [r1, #8]
 800c87c:	6822      	ldr	r2, [r4, #0]
 800c87e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c910 <_scanf_chars+0xb0>
 800c882:	06d1      	lsls	r1, r2, #27
 800c884:	bf5f      	itttt	pl
 800c886:	681a      	ldrpl	r2, [r3, #0]
 800c888:	1d11      	addpl	r1, r2, #4
 800c88a:	6019      	strpl	r1, [r3, #0]
 800c88c:	6816      	ldrpl	r6, [r2, #0]
 800c88e:	2700      	movs	r7, #0
 800c890:	69a0      	ldr	r0, [r4, #24]
 800c892:	b188      	cbz	r0, 800c8b8 <_scanf_chars+0x58>
 800c894:	2801      	cmp	r0, #1
 800c896:	d107      	bne.n	800c8a8 <_scanf_chars+0x48>
 800c898:	682a      	ldr	r2, [r5, #0]
 800c89a:	7811      	ldrb	r1, [r2, #0]
 800c89c:	6962      	ldr	r2, [r4, #20]
 800c89e:	5c52      	ldrb	r2, [r2, r1]
 800c8a0:	b952      	cbnz	r2, 800c8b8 <_scanf_chars+0x58>
 800c8a2:	2f00      	cmp	r7, #0
 800c8a4:	d031      	beq.n	800c90a <_scanf_chars+0xaa>
 800c8a6:	e022      	b.n	800c8ee <_scanf_chars+0x8e>
 800c8a8:	2802      	cmp	r0, #2
 800c8aa:	d120      	bne.n	800c8ee <_scanf_chars+0x8e>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c8b4:	071b      	lsls	r3, r3, #28
 800c8b6:	d41a      	bmi.n	800c8ee <_scanf_chars+0x8e>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	06da      	lsls	r2, r3, #27
 800c8bc:	bf5e      	ittt	pl
 800c8be:	682b      	ldrpl	r3, [r5, #0]
 800c8c0:	781b      	ldrbpl	r3, [r3, #0]
 800c8c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c8c6:	682a      	ldr	r2, [r5, #0]
 800c8c8:	686b      	ldr	r3, [r5, #4]
 800c8ca:	3201      	adds	r2, #1
 800c8cc:	602a      	str	r2, [r5, #0]
 800c8ce:	68a2      	ldr	r2, [r4, #8]
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	3a01      	subs	r2, #1
 800c8d4:	606b      	str	r3, [r5, #4]
 800c8d6:	3701      	adds	r7, #1
 800c8d8:	60a2      	str	r2, [r4, #8]
 800c8da:	b142      	cbz	r2, 800c8ee <_scanf_chars+0x8e>
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	dcd7      	bgt.n	800c890 <_scanf_chars+0x30>
 800c8e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	4798      	blx	r3
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d0d0      	beq.n	800c890 <_scanf_chars+0x30>
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	f013 0310 	ands.w	r3, r3, #16
 800c8f4:	d105      	bne.n	800c902 <_scanf_chars+0xa2>
 800c8f6:	68e2      	ldr	r2, [r4, #12]
 800c8f8:	3201      	adds	r2, #1
 800c8fa:	60e2      	str	r2, [r4, #12]
 800c8fc:	69a2      	ldr	r2, [r4, #24]
 800c8fe:	b102      	cbz	r2, 800c902 <_scanf_chars+0xa2>
 800c900:	7033      	strb	r3, [r6, #0]
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	443b      	add	r3, r7
 800c906:	6123      	str	r3, [r4, #16]
 800c908:	2000      	movs	r0, #0
 800c90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c90e:	bf00      	nop
 800c910:	0800dea1 	.word	0x0800dea1

0800c914 <_scanf_i>:
 800c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c918:	4698      	mov	r8, r3
 800c91a:	4b74      	ldr	r3, [pc, #464]	; (800caec <_scanf_i+0x1d8>)
 800c91c:	460c      	mov	r4, r1
 800c91e:	4682      	mov	sl, r0
 800c920:	4616      	mov	r6, r2
 800c922:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c926:	b087      	sub	sp, #28
 800c928:	ab03      	add	r3, sp, #12
 800c92a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c92e:	4b70      	ldr	r3, [pc, #448]	; (800caf0 <_scanf_i+0x1dc>)
 800c930:	69a1      	ldr	r1, [r4, #24]
 800c932:	4a70      	ldr	r2, [pc, #448]	; (800caf4 <_scanf_i+0x1e0>)
 800c934:	2903      	cmp	r1, #3
 800c936:	bf18      	it	ne
 800c938:	461a      	movne	r2, r3
 800c93a:	68a3      	ldr	r3, [r4, #8]
 800c93c:	9201      	str	r2, [sp, #4]
 800c93e:	1e5a      	subs	r2, r3, #1
 800c940:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c944:	bf88      	it	hi
 800c946:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c94a:	4627      	mov	r7, r4
 800c94c:	bf82      	ittt	hi
 800c94e:	eb03 0905 	addhi.w	r9, r3, r5
 800c952:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c956:	60a3      	strhi	r3, [r4, #8]
 800c958:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c95c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c960:	bf98      	it	ls
 800c962:	f04f 0900 	movls.w	r9, #0
 800c966:	6023      	str	r3, [r4, #0]
 800c968:	463d      	mov	r5, r7
 800c96a:	f04f 0b00 	mov.w	fp, #0
 800c96e:	6831      	ldr	r1, [r6, #0]
 800c970:	ab03      	add	r3, sp, #12
 800c972:	7809      	ldrb	r1, [r1, #0]
 800c974:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c978:	2202      	movs	r2, #2
 800c97a:	f7f3 fc49 	bl	8000210 <memchr>
 800c97e:	b328      	cbz	r0, 800c9cc <_scanf_i+0xb8>
 800c980:	f1bb 0f01 	cmp.w	fp, #1
 800c984:	d159      	bne.n	800ca3a <_scanf_i+0x126>
 800c986:	6862      	ldr	r2, [r4, #4]
 800c988:	b92a      	cbnz	r2, 800c996 <_scanf_i+0x82>
 800c98a:	6822      	ldr	r2, [r4, #0]
 800c98c:	2308      	movs	r3, #8
 800c98e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c992:	6063      	str	r3, [r4, #4]
 800c994:	6022      	str	r2, [r4, #0]
 800c996:	6822      	ldr	r2, [r4, #0]
 800c998:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c99c:	6022      	str	r2, [r4, #0]
 800c99e:	68a2      	ldr	r2, [r4, #8]
 800c9a0:	1e51      	subs	r1, r2, #1
 800c9a2:	60a1      	str	r1, [r4, #8]
 800c9a4:	b192      	cbz	r2, 800c9cc <_scanf_i+0xb8>
 800c9a6:	6832      	ldr	r2, [r6, #0]
 800c9a8:	1c51      	adds	r1, r2, #1
 800c9aa:	6031      	str	r1, [r6, #0]
 800c9ac:	7812      	ldrb	r2, [r2, #0]
 800c9ae:	f805 2b01 	strb.w	r2, [r5], #1
 800c9b2:	6872      	ldr	r2, [r6, #4]
 800c9b4:	3a01      	subs	r2, #1
 800c9b6:	2a00      	cmp	r2, #0
 800c9b8:	6072      	str	r2, [r6, #4]
 800c9ba:	dc07      	bgt.n	800c9cc <_scanf_i+0xb8>
 800c9bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	4650      	mov	r0, sl
 800c9c4:	4790      	blx	r2
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	f040 8085 	bne.w	800cad6 <_scanf_i+0x1c2>
 800c9cc:	f10b 0b01 	add.w	fp, fp, #1
 800c9d0:	f1bb 0f03 	cmp.w	fp, #3
 800c9d4:	d1cb      	bne.n	800c96e <_scanf_i+0x5a>
 800c9d6:	6863      	ldr	r3, [r4, #4]
 800c9d8:	b90b      	cbnz	r3, 800c9de <_scanf_i+0xca>
 800c9da:	230a      	movs	r3, #10
 800c9dc:	6063      	str	r3, [r4, #4]
 800c9de:	6863      	ldr	r3, [r4, #4]
 800c9e0:	4945      	ldr	r1, [pc, #276]	; (800caf8 <_scanf_i+0x1e4>)
 800c9e2:	6960      	ldr	r0, [r4, #20]
 800c9e4:	1ac9      	subs	r1, r1, r3
 800c9e6:	f000 f999 	bl	800cd1c <__sccl>
 800c9ea:	f04f 0b00 	mov.w	fp, #0
 800c9ee:	68a3      	ldr	r3, [r4, #8]
 800c9f0:	6822      	ldr	r2, [r4, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d03d      	beq.n	800ca72 <_scanf_i+0x15e>
 800c9f6:	6831      	ldr	r1, [r6, #0]
 800c9f8:	6960      	ldr	r0, [r4, #20]
 800c9fa:	f891 c000 	ldrb.w	ip, [r1]
 800c9fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d035      	beq.n	800ca72 <_scanf_i+0x15e>
 800ca06:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ca0a:	d124      	bne.n	800ca56 <_scanf_i+0x142>
 800ca0c:	0510      	lsls	r0, r2, #20
 800ca0e:	d522      	bpl.n	800ca56 <_scanf_i+0x142>
 800ca10:	f10b 0b01 	add.w	fp, fp, #1
 800ca14:	f1b9 0f00 	cmp.w	r9, #0
 800ca18:	d003      	beq.n	800ca22 <_scanf_i+0x10e>
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca20:	60a3      	str	r3, [r4, #8]
 800ca22:	6873      	ldr	r3, [r6, #4]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	6073      	str	r3, [r6, #4]
 800ca2a:	dd1b      	ble.n	800ca64 <_scanf_i+0x150>
 800ca2c:	6833      	ldr	r3, [r6, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	6033      	str	r3, [r6, #0]
 800ca32:	68a3      	ldr	r3, [r4, #8]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	60a3      	str	r3, [r4, #8]
 800ca38:	e7d9      	b.n	800c9ee <_scanf_i+0xda>
 800ca3a:	f1bb 0f02 	cmp.w	fp, #2
 800ca3e:	d1ae      	bne.n	800c99e <_scanf_i+0x8a>
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ca46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ca4a:	d1bf      	bne.n	800c9cc <_scanf_i+0xb8>
 800ca4c:	2310      	movs	r3, #16
 800ca4e:	6063      	str	r3, [r4, #4]
 800ca50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca54:	e7a2      	b.n	800c99c <_scanf_i+0x88>
 800ca56:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ca5a:	6022      	str	r2, [r4, #0]
 800ca5c:	780b      	ldrb	r3, [r1, #0]
 800ca5e:	f805 3b01 	strb.w	r3, [r5], #1
 800ca62:	e7de      	b.n	800ca22 <_scanf_i+0x10e>
 800ca64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca68:	4631      	mov	r1, r6
 800ca6a:	4650      	mov	r0, sl
 800ca6c:	4798      	blx	r3
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d0df      	beq.n	800ca32 <_scanf_i+0x11e>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	05d9      	lsls	r1, r3, #23
 800ca76:	d50d      	bpl.n	800ca94 <_scanf_i+0x180>
 800ca78:	42bd      	cmp	r5, r7
 800ca7a:	d909      	bls.n	800ca90 <_scanf_i+0x17c>
 800ca7c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ca80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca84:	4632      	mov	r2, r6
 800ca86:	4650      	mov	r0, sl
 800ca88:	4798      	blx	r3
 800ca8a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ca8e:	464d      	mov	r5, r9
 800ca90:	42bd      	cmp	r5, r7
 800ca92:	d028      	beq.n	800cae6 <_scanf_i+0x1d2>
 800ca94:	6822      	ldr	r2, [r4, #0]
 800ca96:	f012 0210 	ands.w	r2, r2, #16
 800ca9a:	d113      	bne.n	800cac4 <_scanf_i+0x1b0>
 800ca9c:	702a      	strb	r2, [r5, #0]
 800ca9e:	6863      	ldr	r3, [r4, #4]
 800caa0:	9e01      	ldr	r6, [sp, #4]
 800caa2:	4639      	mov	r1, r7
 800caa4:	4650      	mov	r0, sl
 800caa6:	47b0      	blx	r6
 800caa8:	f8d8 3000 	ldr.w	r3, [r8]
 800caac:	6821      	ldr	r1, [r4, #0]
 800caae:	1d1a      	adds	r2, r3, #4
 800cab0:	f8c8 2000 	str.w	r2, [r8]
 800cab4:	f011 0f20 	tst.w	r1, #32
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	d00f      	beq.n	800cadc <_scanf_i+0x1c8>
 800cabc:	6018      	str	r0, [r3, #0]
 800cabe:	68e3      	ldr	r3, [r4, #12]
 800cac0:	3301      	adds	r3, #1
 800cac2:	60e3      	str	r3, [r4, #12]
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	1bed      	subs	r5, r5, r7
 800cac8:	445d      	add	r5, fp
 800caca:	442b      	add	r3, r5
 800cacc:	6123      	str	r3, [r4, #16]
 800cace:	2000      	movs	r0, #0
 800cad0:	b007      	add	sp, #28
 800cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad6:	f04f 0b00 	mov.w	fp, #0
 800cada:	e7ca      	b.n	800ca72 <_scanf_i+0x15e>
 800cadc:	07ca      	lsls	r2, r1, #31
 800cade:	bf4c      	ite	mi
 800cae0:	8018      	strhmi	r0, [r3, #0]
 800cae2:	6018      	strpl	r0, [r3, #0]
 800cae4:	e7eb      	b.n	800cabe <_scanf_i+0x1aa>
 800cae6:	2001      	movs	r0, #1
 800cae8:	e7f2      	b.n	800cad0 <_scanf_i+0x1bc>
 800caea:	bf00      	nop
 800caec:	0800dc00 	.word	0x0800dc00
 800caf0:	0800d74d 	.word	0x0800d74d
 800caf4:	0800bf81 	.word	0x0800bf81
 800caf8:	0800dfc2 	.word	0x0800dfc2

0800cafc <__sflush_r>:
 800cafc:	898a      	ldrh	r2, [r1, #12]
 800cafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb02:	4605      	mov	r5, r0
 800cb04:	0710      	lsls	r0, r2, #28
 800cb06:	460c      	mov	r4, r1
 800cb08:	d458      	bmi.n	800cbbc <__sflush_r+0xc0>
 800cb0a:	684b      	ldr	r3, [r1, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dc05      	bgt.n	800cb1c <__sflush_r+0x20>
 800cb10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	dc02      	bgt.n	800cb1c <__sflush_r+0x20>
 800cb16:	2000      	movs	r0, #0
 800cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb1e:	2e00      	cmp	r6, #0
 800cb20:	d0f9      	beq.n	800cb16 <__sflush_r+0x1a>
 800cb22:	2300      	movs	r3, #0
 800cb24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb28:	682f      	ldr	r7, [r5, #0]
 800cb2a:	6a21      	ldr	r1, [r4, #32]
 800cb2c:	602b      	str	r3, [r5, #0]
 800cb2e:	d032      	beq.n	800cb96 <__sflush_r+0x9a>
 800cb30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	075a      	lsls	r2, r3, #29
 800cb36:	d505      	bpl.n	800cb44 <__sflush_r+0x48>
 800cb38:	6863      	ldr	r3, [r4, #4]
 800cb3a:	1ac0      	subs	r0, r0, r3
 800cb3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb3e:	b10b      	cbz	r3, 800cb44 <__sflush_r+0x48>
 800cb40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb42:	1ac0      	subs	r0, r0, r3
 800cb44:	2300      	movs	r3, #0
 800cb46:	4602      	mov	r2, r0
 800cb48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb4a:	6a21      	ldr	r1, [r4, #32]
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	47b0      	blx	r6
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	d106      	bne.n	800cb64 <__sflush_r+0x68>
 800cb56:	6829      	ldr	r1, [r5, #0]
 800cb58:	291d      	cmp	r1, #29
 800cb5a:	d82b      	bhi.n	800cbb4 <__sflush_r+0xb8>
 800cb5c:	4a29      	ldr	r2, [pc, #164]	; (800cc04 <__sflush_r+0x108>)
 800cb5e:	410a      	asrs	r2, r1
 800cb60:	07d6      	lsls	r6, r2, #31
 800cb62:	d427      	bmi.n	800cbb4 <__sflush_r+0xb8>
 800cb64:	2200      	movs	r2, #0
 800cb66:	6062      	str	r2, [r4, #4]
 800cb68:	04d9      	lsls	r1, r3, #19
 800cb6a:	6922      	ldr	r2, [r4, #16]
 800cb6c:	6022      	str	r2, [r4, #0]
 800cb6e:	d504      	bpl.n	800cb7a <__sflush_r+0x7e>
 800cb70:	1c42      	adds	r2, r0, #1
 800cb72:	d101      	bne.n	800cb78 <__sflush_r+0x7c>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	b903      	cbnz	r3, 800cb7a <__sflush_r+0x7e>
 800cb78:	6560      	str	r0, [r4, #84]	; 0x54
 800cb7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb7c:	602f      	str	r7, [r5, #0]
 800cb7e:	2900      	cmp	r1, #0
 800cb80:	d0c9      	beq.n	800cb16 <__sflush_r+0x1a>
 800cb82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb86:	4299      	cmp	r1, r3
 800cb88:	d002      	beq.n	800cb90 <__sflush_r+0x94>
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f7fd fdb6 	bl	800a6fc <_free_r>
 800cb90:	2000      	movs	r0, #0
 800cb92:	6360      	str	r0, [r4, #52]	; 0x34
 800cb94:	e7c0      	b.n	800cb18 <__sflush_r+0x1c>
 800cb96:	2301      	movs	r3, #1
 800cb98:	4628      	mov	r0, r5
 800cb9a:	47b0      	blx	r6
 800cb9c:	1c41      	adds	r1, r0, #1
 800cb9e:	d1c8      	bne.n	800cb32 <__sflush_r+0x36>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d0c5      	beq.n	800cb32 <__sflush_r+0x36>
 800cba6:	2b1d      	cmp	r3, #29
 800cba8:	d001      	beq.n	800cbae <__sflush_r+0xb2>
 800cbaa:	2b16      	cmp	r3, #22
 800cbac:	d101      	bne.n	800cbb2 <__sflush_r+0xb6>
 800cbae:	602f      	str	r7, [r5, #0]
 800cbb0:	e7b1      	b.n	800cb16 <__sflush_r+0x1a>
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbb8:	81a3      	strh	r3, [r4, #12]
 800cbba:	e7ad      	b.n	800cb18 <__sflush_r+0x1c>
 800cbbc:	690f      	ldr	r7, [r1, #16]
 800cbbe:	2f00      	cmp	r7, #0
 800cbc0:	d0a9      	beq.n	800cb16 <__sflush_r+0x1a>
 800cbc2:	0793      	lsls	r3, r2, #30
 800cbc4:	680e      	ldr	r6, [r1, #0]
 800cbc6:	bf08      	it	eq
 800cbc8:	694b      	ldreq	r3, [r1, #20]
 800cbca:	600f      	str	r7, [r1, #0]
 800cbcc:	bf18      	it	ne
 800cbce:	2300      	movne	r3, #0
 800cbd0:	eba6 0807 	sub.w	r8, r6, r7
 800cbd4:	608b      	str	r3, [r1, #8]
 800cbd6:	f1b8 0f00 	cmp.w	r8, #0
 800cbda:	dd9c      	ble.n	800cb16 <__sflush_r+0x1a>
 800cbdc:	6a21      	ldr	r1, [r4, #32]
 800cbde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbe0:	4643      	mov	r3, r8
 800cbe2:	463a      	mov	r2, r7
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	47b0      	blx	r6
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	dc06      	bgt.n	800cbfa <__sflush_r+0xfe>
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbf2:	81a3      	strh	r3, [r4, #12]
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf8:	e78e      	b.n	800cb18 <__sflush_r+0x1c>
 800cbfa:	4407      	add	r7, r0
 800cbfc:	eba8 0800 	sub.w	r8, r8, r0
 800cc00:	e7e9      	b.n	800cbd6 <__sflush_r+0xda>
 800cc02:	bf00      	nop
 800cc04:	dfbffffe 	.word	0xdfbffffe

0800cc08 <_fflush_r>:
 800cc08:	b538      	push	{r3, r4, r5, lr}
 800cc0a:	690b      	ldr	r3, [r1, #16]
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	460c      	mov	r4, r1
 800cc10:	b913      	cbnz	r3, 800cc18 <_fflush_r+0x10>
 800cc12:	2500      	movs	r5, #0
 800cc14:	4628      	mov	r0, r5
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	b118      	cbz	r0, 800cc22 <_fflush_r+0x1a>
 800cc1a:	6a03      	ldr	r3, [r0, #32]
 800cc1c:	b90b      	cbnz	r3, 800cc22 <_fflush_r+0x1a>
 800cc1e:	f7fc fc7f 	bl	8009520 <__sinit>
 800cc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0f3      	beq.n	800cc12 <_fflush_r+0xa>
 800cc2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc2c:	07d0      	lsls	r0, r2, #31
 800cc2e:	d404      	bmi.n	800cc3a <_fflush_r+0x32>
 800cc30:	0599      	lsls	r1, r3, #22
 800cc32:	d402      	bmi.n	800cc3a <_fflush_r+0x32>
 800cc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc36:	f7fc fecf 	bl	80099d8 <__retarget_lock_acquire_recursive>
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	f7ff ff5d 	bl	800cafc <__sflush_r>
 800cc42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc44:	07da      	lsls	r2, r3, #31
 800cc46:	4605      	mov	r5, r0
 800cc48:	d4e4      	bmi.n	800cc14 <_fflush_r+0xc>
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	059b      	lsls	r3, r3, #22
 800cc4e:	d4e1      	bmi.n	800cc14 <_fflush_r+0xc>
 800cc50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc52:	f7fc fec2 	bl	80099da <__retarget_lock_release_recursive>
 800cc56:	e7dd      	b.n	800cc14 <_fflush_r+0xc>

0800cc58 <__swhatbuf_r>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	b096      	sub	sp, #88	; 0x58
 800cc64:	4615      	mov	r5, r2
 800cc66:	461e      	mov	r6, r3
 800cc68:	da0d      	bge.n	800cc86 <__swhatbuf_r+0x2e>
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cc70:	f04f 0100 	mov.w	r1, #0
 800cc74:	bf0c      	ite	eq
 800cc76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cc7a:	2340      	movne	r3, #64	; 0x40
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	6031      	str	r1, [r6, #0]
 800cc80:	602b      	str	r3, [r5, #0]
 800cc82:	b016      	add	sp, #88	; 0x58
 800cc84:	bd70      	pop	{r4, r5, r6, pc}
 800cc86:	466a      	mov	r2, sp
 800cc88:	f000 f8e8 	bl	800ce5c <_fstat_r>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	dbec      	blt.n	800cc6a <__swhatbuf_r+0x12>
 800cc90:	9901      	ldr	r1, [sp, #4]
 800cc92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cc96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cc9a:	4259      	negs	r1, r3
 800cc9c:	4159      	adcs	r1, r3
 800cc9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cca2:	e7eb      	b.n	800cc7c <__swhatbuf_r+0x24>

0800cca4 <__smakebuf_r>:
 800cca4:	898b      	ldrh	r3, [r1, #12]
 800cca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cca8:	079d      	lsls	r5, r3, #30
 800ccaa:	4606      	mov	r6, r0
 800ccac:	460c      	mov	r4, r1
 800ccae:	d507      	bpl.n	800ccc0 <__smakebuf_r+0x1c>
 800ccb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccb4:	6023      	str	r3, [r4, #0]
 800ccb6:	6123      	str	r3, [r4, #16]
 800ccb8:	2301      	movs	r3, #1
 800ccba:	6163      	str	r3, [r4, #20]
 800ccbc:	b002      	add	sp, #8
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	ab01      	add	r3, sp, #4
 800ccc2:	466a      	mov	r2, sp
 800ccc4:	f7ff ffc8 	bl	800cc58 <__swhatbuf_r>
 800ccc8:	9900      	ldr	r1, [sp, #0]
 800ccca:	4605      	mov	r5, r0
 800cccc:	4630      	mov	r0, r6
 800ccce:	f7fd fd89 	bl	800a7e4 <_malloc_r>
 800ccd2:	b948      	cbnz	r0, 800cce8 <__smakebuf_r+0x44>
 800ccd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccd8:	059a      	lsls	r2, r3, #22
 800ccda:	d4ef      	bmi.n	800ccbc <__smakebuf_r+0x18>
 800ccdc:	f023 0303 	bic.w	r3, r3, #3
 800cce0:	f043 0302 	orr.w	r3, r3, #2
 800cce4:	81a3      	strh	r3, [r4, #12]
 800cce6:	e7e3      	b.n	800ccb0 <__smakebuf_r+0xc>
 800cce8:	89a3      	ldrh	r3, [r4, #12]
 800ccea:	6020      	str	r0, [r4, #0]
 800ccec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	9b00      	ldr	r3, [sp, #0]
 800ccf4:	6163      	str	r3, [r4, #20]
 800ccf6:	9b01      	ldr	r3, [sp, #4]
 800ccf8:	6120      	str	r0, [r4, #16]
 800ccfa:	b15b      	cbz	r3, 800cd14 <__smakebuf_r+0x70>
 800ccfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd00:	4630      	mov	r0, r6
 800cd02:	f000 f8bd 	bl	800ce80 <_isatty_r>
 800cd06:	b128      	cbz	r0, 800cd14 <__smakebuf_r+0x70>
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	f023 0303 	bic.w	r3, r3, #3
 800cd0e:	f043 0301 	orr.w	r3, r3, #1
 800cd12:	81a3      	strh	r3, [r4, #12]
 800cd14:	89a3      	ldrh	r3, [r4, #12]
 800cd16:	431d      	orrs	r5, r3
 800cd18:	81a5      	strh	r5, [r4, #12]
 800cd1a:	e7cf      	b.n	800ccbc <__smakebuf_r+0x18>

0800cd1c <__sccl>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	780b      	ldrb	r3, [r1, #0]
 800cd20:	4604      	mov	r4, r0
 800cd22:	2b5e      	cmp	r3, #94	; 0x5e
 800cd24:	bf0b      	itete	eq
 800cd26:	784b      	ldrbeq	r3, [r1, #1]
 800cd28:	1c4a      	addne	r2, r1, #1
 800cd2a:	1c8a      	addeq	r2, r1, #2
 800cd2c:	2100      	movne	r1, #0
 800cd2e:	bf08      	it	eq
 800cd30:	2101      	moveq	r1, #1
 800cd32:	3801      	subs	r0, #1
 800cd34:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cd38:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cd3c:	42a8      	cmp	r0, r5
 800cd3e:	d1fb      	bne.n	800cd38 <__sccl+0x1c>
 800cd40:	b90b      	cbnz	r3, 800cd46 <__sccl+0x2a>
 800cd42:	1e50      	subs	r0, r2, #1
 800cd44:	bd70      	pop	{r4, r5, r6, pc}
 800cd46:	f081 0101 	eor.w	r1, r1, #1
 800cd4a:	54e1      	strb	r1, [r4, r3]
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4602      	mov	r2, r0
 800cd50:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cd54:	2d2d      	cmp	r5, #45	; 0x2d
 800cd56:	d005      	beq.n	800cd64 <__sccl+0x48>
 800cd58:	2d5d      	cmp	r5, #93	; 0x5d
 800cd5a:	d016      	beq.n	800cd8a <__sccl+0x6e>
 800cd5c:	2d00      	cmp	r5, #0
 800cd5e:	d0f1      	beq.n	800cd44 <__sccl+0x28>
 800cd60:	462b      	mov	r3, r5
 800cd62:	e7f2      	b.n	800cd4a <__sccl+0x2e>
 800cd64:	7846      	ldrb	r6, [r0, #1]
 800cd66:	2e5d      	cmp	r6, #93	; 0x5d
 800cd68:	d0fa      	beq.n	800cd60 <__sccl+0x44>
 800cd6a:	42b3      	cmp	r3, r6
 800cd6c:	dcf8      	bgt.n	800cd60 <__sccl+0x44>
 800cd6e:	3002      	adds	r0, #2
 800cd70:	461a      	mov	r2, r3
 800cd72:	3201      	adds	r2, #1
 800cd74:	4296      	cmp	r6, r2
 800cd76:	54a1      	strb	r1, [r4, r2]
 800cd78:	dcfb      	bgt.n	800cd72 <__sccl+0x56>
 800cd7a:	1af2      	subs	r2, r6, r3
 800cd7c:	3a01      	subs	r2, #1
 800cd7e:	1c5d      	adds	r5, r3, #1
 800cd80:	42b3      	cmp	r3, r6
 800cd82:	bfa8      	it	ge
 800cd84:	2200      	movge	r2, #0
 800cd86:	18ab      	adds	r3, r5, r2
 800cd88:	e7e1      	b.n	800cd4e <__sccl+0x32>
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	e7da      	b.n	800cd44 <__sccl+0x28>

0800cd8e <__submore>:
 800cd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd92:	460c      	mov	r4, r1
 800cd94:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd9a:	4299      	cmp	r1, r3
 800cd9c:	d11d      	bne.n	800cdda <__submore+0x4c>
 800cd9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cda2:	f7fd fd1f 	bl	800a7e4 <_malloc_r>
 800cda6:	b918      	cbnz	r0, 800cdb0 <__submore+0x22>
 800cda8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdb4:	63a3      	str	r3, [r4, #56]	; 0x38
 800cdb6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cdba:	6360      	str	r0, [r4, #52]	; 0x34
 800cdbc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cdc0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cdc4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cdc8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cdcc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cdd0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cdd4:	6020      	str	r0, [r4, #0]
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	e7e8      	b.n	800cdac <__submore+0x1e>
 800cdda:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cddc:	0077      	lsls	r7, r6, #1
 800cdde:	463a      	mov	r2, r7
 800cde0:	f000 fc13 	bl	800d60a <_realloc_r>
 800cde4:	4605      	mov	r5, r0
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d0de      	beq.n	800cda8 <__submore+0x1a>
 800cdea:	eb00 0806 	add.w	r8, r0, r6
 800cdee:	4601      	mov	r1, r0
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	f7fc fdf2 	bl	80099dc <memcpy>
 800cdf8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cdfc:	f8c4 8000 	str.w	r8, [r4]
 800ce00:	e7e9      	b.n	800cdd6 <__submore+0x48>

0800ce02 <memmove>:
 800ce02:	4288      	cmp	r0, r1
 800ce04:	b510      	push	{r4, lr}
 800ce06:	eb01 0402 	add.w	r4, r1, r2
 800ce0a:	d902      	bls.n	800ce12 <memmove+0x10>
 800ce0c:	4284      	cmp	r4, r0
 800ce0e:	4623      	mov	r3, r4
 800ce10:	d807      	bhi.n	800ce22 <memmove+0x20>
 800ce12:	1e43      	subs	r3, r0, #1
 800ce14:	42a1      	cmp	r1, r4
 800ce16:	d008      	beq.n	800ce2a <memmove+0x28>
 800ce18:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce20:	e7f8      	b.n	800ce14 <memmove+0x12>
 800ce22:	4402      	add	r2, r0
 800ce24:	4601      	mov	r1, r0
 800ce26:	428a      	cmp	r2, r1
 800ce28:	d100      	bne.n	800ce2c <memmove+0x2a>
 800ce2a:	bd10      	pop	{r4, pc}
 800ce2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce34:	e7f7      	b.n	800ce26 <memmove+0x24>

0800ce36 <strncmp>:
 800ce36:	b510      	push	{r4, lr}
 800ce38:	b16a      	cbz	r2, 800ce56 <strncmp+0x20>
 800ce3a:	3901      	subs	r1, #1
 800ce3c:	1884      	adds	r4, r0, r2
 800ce3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d103      	bne.n	800ce52 <strncmp+0x1c>
 800ce4a:	42a0      	cmp	r0, r4
 800ce4c:	d001      	beq.n	800ce52 <strncmp+0x1c>
 800ce4e:	2a00      	cmp	r2, #0
 800ce50:	d1f5      	bne.n	800ce3e <strncmp+0x8>
 800ce52:	1ad0      	subs	r0, r2, r3
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	4610      	mov	r0, r2
 800ce58:	e7fc      	b.n	800ce54 <strncmp+0x1e>
	...

0800ce5c <_fstat_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d07      	ldr	r5, [pc, #28]	; (800ce7c <_fstat_r+0x20>)
 800ce60:	2300      	movs	r3, #0
 800ce62:	4604      	mov	r4, r0
 800ce64:	4608      	mov	r0, r1
 800ce66:	4611      	mov	r1, r2
 800ce68:	602b      	str	r3, [r5, #0]
 800ce6a:	f7f7 f880 	bl	8003f6e <_fstat>
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	d102      	bne.n	800ce78 <_fstat_r+0x1c>
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	b103      	cbz	r3, 800ce78 <_fstat_r+0x1c>
 800ce76:	6023      	str	r3, [r4, #0]
 800ce78:	bd38      	pop	{r3, r4, r5, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200059a4 	.word	0x200059a4

0800ce80 <_isatty_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d06      	ldr	r5, [pc, #24]	; (800ce9c <_isatty_r+0x1c>)
 800ce84:	2300      	movs	r3, #0
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	602b      	str	r3, [r5, #0]
 800ce8c:	f7f7 f87f 	bl	8003f8e <_isatty>
 800ce90:	1c43      	adds	r3, r0, #1
 800ce92:	d102      	bne.n	800ce9a <_isatty_r+0x1a>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	b103      	cbz	r3, 800ce9a <_isatty_r+0x1a>
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	200059a4 	.word	0x200059a4

0800cea0 <_sbrk_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4d06      	ldr	r5, [pc, #24]	; (800cebc <_sbrk_r+0x1c>)
 800cea4:	2300      	movs	r3, #0
 800cea6:	4604      	mov	r4, r0
 800cea8:	4608      	mov	r0, r1
 800ceaa:	602b      	str	r3, [r5, #0]
 800ceac:	f7f7 f888 	bl	8003fc0 <_sbrk>
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	d102      	bne.n	800ceba <_sbrk_r+0x1a>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	b103      	cbz	r3, 800ceba <_sbrk_r+0x1a>
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	bd38      	pop	{r3, r4, r5, pc}
 800cebc:	200059a4 	.word	0x200059a4

0800cec0 <nan>:
 800cec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cec8 <nan+0x8>
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	00000000 	.word	0x00000000
 800cecc:	7ff80000 	.word	0x7ff80000

0800ced0 <__assert_func>:
 800ced0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ced2:	4614      	mov	r4, r2
 800ced4:	461a      	mov	r2, r3
 800ced6:	4b09      	ldr	r3, [pc, #36]	; (800cefc <__assert_func+0x2c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4605      	mov	r5, r0
 800cedc:	68d8      	ldr	r0, [r3, #12]
 800cede:	b14c      	cbz	r4, 800cef4 <__assert_func+0x24>
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <__assert_func+0x30>)
 800cee2:	9100      	str	r1, [sp, #0]
 800cee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cee8:	4906      	ldr	r1, [pc, #24]	; (800cf04 <__assert_func+0x34>)
 800ceea:	462b      	mov	r3, r5
 800ceec:	f000 fc3e 	bl	800d76c <fiprintf>
 800cef0:	f000 fc4e 	bl	800d790 <abort>
 800cef4:	4b04      	ldr	r3, [pc, #16]	; (800cf08 <__assert_func+0x38>)
 800cef6:	461c      	mov	r4, r3
 800cef8:	e7f3      	b.n	800cee2 <__assert_func+0x12>
 800cefa:	bf00      	nop
 800cefc:	200000ac 	.word	0x200000ac
 800cf00:	0800dfd5 	.word	0x0800dfd5
 800cf04:	0800dfe2 	.word	0x0800dfe2
 800cf08:	0800e010 	.word	0x0800e010

0800cf0c <_calloc_r>:
 800cf0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf0e:	fba1 2402 	umull	r2, r4, r1, r2
 800cf12:	b94c      	cbnz	r4, 800cf28 <_calloc_r+0x1c>
 800cf14:	4611      	mov	r1, r2
 800cf16:	9201      	str	r2, [sp, #4]
 800cf18:	f7fd fc64 	bl	800a7e4 <_malloc_r>
 800cf1c:	9a01      	ldr	r2, [sp, #4]
 800cf1e:	4605      	mov	r5, r0
 800cf20:	b930      	cbnz	r0, 800cf30 <_calloc_r+0x24>
 800cf22:	4628      	mov	r0, r5
 800cf24:	b003      	add	sp, #12
 800cf26:	bd30      	pop	{r4, r5, pc}
 800cf28:	220c      	movs	r2, #12
 800cf2a:	6002      	str	r2, [r0, #0]
 800cf2c:	2500      	movs	r5, #0
 800cf2e:	e7f8      	b.n	800cf22 <_calloc_r+0x16>
 800cf30:	4621      	mov	r1, r4
 800cf32:	f7fc fcbf 	bl	80098b4 <memset>
 800cf36:	e7f4      	b.n	800cf22 <_calloc_r+0x16>

0800cf38 <rshift>:
 800cf38:	6903      	ldr	r3, [r0, #16]
 800cf3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf42:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf46:	f100 0414 	add.w	r4, r0, #20
 800cf4a:	dd45      	ble.n	800cfd8 <rshift+0xa0>
 800cf4c:	f011 011f 	ands.w	r1, r1, #31
 800cf50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf58:	d10c      	bne.n	800cf74 <rshift+0x3c>
 800cf5a:	f100 0710 	add.w	r7, r0, #16
 800cf5e:	4629      	mov	r1, r5
 800cf60:	42b1      	cmp	r1, r6
 800cf62:	d334      	bcc.n	800cfce <rshift+0x96>
 800cf64:	1a9b      	subs	r3, r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	1eea      	subs	r2, r5, #3
 800cf6a:	4296      	cmp	r6, r2
 800cf6c:	bf38      	it	cc
 800cf6e:	2300      	movcc	r3, #0
 800cf70:	4423      	add	r3, r4
 800cf72:	e015      	b.n	800cfa0 <rshift+0x68>
 800cf74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf78:	f1c1 0820 	rsb	r8, r1, #32
 800cf7c:	40cf      	lsrs	r7, r1
 800cf7e:	f105 0e04 	add.w	lr, r5, #4
 800cf82:	46a1      	mov	r9, r4
 800cf84:	4576      	cmp	r6, lr
 800cf86:	46f4      	mov	ip, lr
 800cf88:	d815      	bhi.n	800cfb6 <rshift+0x7e>
 800cf8a:	1a9a      	subs	r2, r3, r2
 800cf8c:	0092      	lsls	r2, r2, #2
 800cf8e:	3a04      	subs	r2, #4
 800cf90:	3501      	adds	r5, #1
 800cf92:	42ae      	cmp	r6, r5
 800cf94:	bf38      	it	cc
 800cf96:	2200      	movcc	r2, #0
 800cf98:	18a3      	adds	r3, r4, r2
 800cf9a:	50a7      	str	r7, [r4, r2]
 800cf9c:	b107      	cbz	r7, 800cfa0 <rshift+0x68>
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	1b1a      	subs	r2, r3, r4
 800cfa2:	42a3      	cmp	r3, r4
 800cfa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cfa8:	bf08      	it	eq
 800cfaa:	2300      	moveq	r3, #0
 800cfac:	6102      	str	r2, [r0, #16]
 800cfae:	bf08      	it	eq
 800cfb0:	6143      	streq	r3, [r0, #20]
 800cfb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfb6:	f8dc c000 	ldr.w	ip, [ip]
 800cfba:	fa0c fc08 	lsl.w	ip, ip, r8
 800cfbe:	ea4c 0707 	orr.w	r7, ip, r7
 800cfc2:	f849 7b04 	str.w	r7, [r9], #4
 800cfc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfca:	40cf      	lsrs	r7, r1
 800cfcc:	e7da      	b.n	800cf84 <rshift+0x4c>
 800cfce:	f851 cb04 	ldr.w	ip, [r1], #4
 800cfd2:	f847 cf04 	str.w	ip, [r7, #4]!
 800cfd6:	e7c3      	b.n	800cf60 <rshift+0x28>
 800cfd8:	4623      	mov	r3, r4
 800cfda:	e7e1      	b.n	800cfa0 <rshift+0x68>

0800cfdc <__hexdig_fun>:
 800cfdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cfe0:	2b09      	cmp	r3, #9
 800cfe2:	d802      	bhi.n	800cfea <__hexdig_fun+0xe>
 800cfe4:	3820      	subs	r0, #32
 800cfe6:	b2c0      	uxtb	r0, r0
 800cfe8:	4770      	bx	lr
 800cfea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cfee:	2b05      	cmp	r3, #5
 800cff0:	d801      	bhi.n	800cff6 <__hexdig_fun+0x1a>
 800cff2:	3847      	subs	r0, #71	; 0x47
 800cff4:	e7f7      	b.n	800cfe6 <__hexdig_fun+0xa>
 800cff6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cffa:	2b05      	cmp	r3, #5
 800cffc:	d801      	bhi.n	800d002 <__hexdig_fun+0x26>
 800cffe:	3827      	subs	r0, #39	; 0x27
 800d000:	e7f1      	b.n	800cfe6 <__hexdig_fun+0xa>
 800d002:	2000      	movs	r0, #0
 800d004:	4770      	bx	lr
	...

0800d008 <__gethex>:
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	4617      	mov	r7, r2
 800d00e:	680a      	ldr	r2, [r1, #0]
 800d010:	b085      	sub	sp, #20
 800d012:	f102 0b02 	add.w	fp, r2, #2
 800d016:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d01a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d01e:	4681      	mov	r9, r0
 800d020:	468a      	mov	sl, r1
 800d022:	9302      	str	r3, [sp, #8]
 800d024:	32fe      	adds	r2, #254	; 0xfe
 800d026:	eb02 030b 	add.w	r3, r2, fp
 800d02a:	46d8      	mov	r8, fp
 800d02c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	2830      	cmp	r0, #48	; 0x30
 800d034:	d0f7      	beq.n	800d026 <__gethex+0x1e>
 800d036:	f7ff ffd1 	bl	800cfdc <__hexdig_fun>
 800d03a:	4604      	mov	r4, r0
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d138      	bne.n	800d0b2 <__gethex+0xaa>
 800d040:	49a7      	ldr	r1, [pc, #668]	; (800d2e0 <__gethex+0x2d8>)
 800d042:	2201      	movs	r2, #1
 800d044:	4640      	mov	r0, r8
 800d046:	f7ff fef6 	bl	800ce36 <strncmp>
 800d04a:	4606      	mov	r6, r0
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d169      	bne.n	800d124 <__gethex+0x11c>
 800d050:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d054:	465d      	mov	r5, fp
 800d056:	f7ff ffc1 	bl	800cfdc <__hexdig_fun>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d064      	beq.n	800d128 <__gethex+0x120>
 800d05e:	465a      	mov	r2, fp
 800d060:	7810      	ldrb	r0, [r2, #0]
 800d062:	2830      	cmp	r0, #48	; 0x30
 800d064:	4690      	mov	r8, r2
 800d066:	f102 0201 	add.w	r2, r2, #1
 800d06a:	d0f9      	beq.n	800d060 <__gethex+0x58>
 800d06c:	f7ff ffb6 	bl	800cfdc <__hexdig_fun>
 800d070:	2301      	movs	r3, #1
 800d072:	fab0 f480 	clz	r4, r0
 800d076:	0964      	lsrs	r4, r4, #5
 800d078:	465e      	mov	r6, fp
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	4642      	mov	r2, r8
 800d07e:	4615      	mov	r5, r2
 800d080:	3201      	adds	r2, #1
 800d082:	7828      	ldrb	r0, [r5, #0]
 800d084:	f7ff ffaa 	bl	800cfdc <__hexdig_fun>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d1f8      	bne.n	800d07e <__gethex+0x76>
 800d08c:	4994      	ldr	r1, [pc, #592]	; (800d2e0 <__gethex+0x2d8>)
 800d08e:	2201      	movs	r2, #1
 800d090:	4628      	mov	r0, r5
 800d092:	f7ff fed0 	bl	800ce36 <strncmp>
 800d096:	b978      	cbnz	r0, 800d0b8 <__gethex+0xb0>
 800d098:	b946      	cbnz	r6, 800d0ac <__gethex+0xa4>
 800d09a:	1c6e      	adds	r6, r5, #1
 800d09c:	4632      	mov	r2, r6
 800d09e:	4615      	mov	r5, r2
 800d0a0:	3201      	adds	r2, #1
 800d0a2:	7828      	ldrb	r0, [r5, #0]
 800d0a4:	f7ff ff9a 	bl	800cfdc <__hexdig_fun>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d1f8      	bne.n	800d09e <__gethex+0x96>
 800d0ac:	1b73      	subs	r3, r6, r5
 800d0ae:	009e      	lsls	r6, r3, #2
 800d0b0:	e004      	b.n	800d0bc <__gethex+0xb4>
 800d0b2:	2400      	movs	r4, #0
 800d0b4:	4626      	mov	r6, r4
 800d0b6:	e7e1      	b.n	800d07c <__gethex+0x74>
 800d0b8:	2e00      	cmp	r6, #0
 800d0ba:	d1f7      	bne.n	800d0ac <__gethex+0xa4>
 800d0bc:	782b      	ldrb	r3, [r5, #0]
 800d0be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0c2:	2b50      	cmp	r3, #80	; 0x50
 800d0c4:	d13d      	bne.n	800d142 <__gethex+0x13a>
 800d0c6:	786b      	ldrb	r3, [r5, #1]
 800d0c8:	2b2b      	cmp	r3, #43	; 0x2b
 800d0ca:	d02f      	beq.n	800d12c <__gethex+0x124>
 800d0cc:	2b2d      	cmp	r3, #45	; 0x2d
 800d0ce:	d031      	beq.n	800d134 <__gethex+0x12c>
 800d0d0:	1c69      	adds	r1, r5, #1
 800d0d2:	f04f 0b00 	mov.w	fp, #0
 800d0d6:	7808      	ldrb	r0, [r1, #0]
 800d0d8:	f7ff ff80 	bl	800cfdc <__hexdig_fun>
 800d0dc:	1e42      	subs	r2, r0, #1
 800d0de:	b2d2      	uxtb	r2, r2
 800d0e0:	2a18      	cmp	r2, #24
 800d0e2:	d82e      	bhi.n	800d142 <__gethex+0x13a>
 800d0e4:	f1a0 0210 	sub.w	r2, r0, #16
 800d0e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d0ec:	f7ff ff76 	bl	800cfdc <__hexdig_fun>
 800d0f0:	f100 3cff 	add.w	ip, r0, #4294967295
 800d0f4:	fa5f fc8c 	uxtb.w	ip, ip
 800d0f8:	f1bc 0f18 	cmp.w	ip, #24
 800d0fc:	d91d      	bls.n	800d13a <__gethex+0x132>
 800d0fe:	f1bb 0f00 	cmp.w	fp, #0
 800d102:	d000      	beq.n	800d106 <__gethex+0xfe>
 800d104:	4252      	negs	r2, r2
 800d106:	4416      	add	r6, r2
 800d108:	f8ca 1000 	str.w	r1, [sl]
 800d10c:	b1dc      	cbz	r4, 800d146 <__gethex+0x13e>
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	bf14      	ite	ne
 800d114:	f04f 0800 	movne.w	r8, #0
 800d118:	f04f 0806 	moveq.w	r8, #6
 800d11c:	4640      	mov	r0, r8
 800d11e:	b005      	add	sp, #20
 800d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d124:	4645      	mov	r5, r8
 800d126:	4626      	mov	r6, r4
 800d128:	2401      	movs	r4, #1
 800d12a:	e7c7      	b.n	800d0bc <__gethex+0xb4>
 800d12c:	f04f 0b00 	mov.w	fp, #0
 800d130:	1ca9      	adds	r1, r5, #2
 800d132:	e7d0      	b.n	800d0d6 <__gethex+0xce>
 800d134:	f04f 0b01 	mov.w	fp, #1
 800d138:	e7fa      	b.n	800d130 <__gethex+0x128>
 800d13a:	230a      	movs	r3, #10
 800d13c:	fb03 0002 	mla	r0, r3, r2, r0
 800d140:	e7d0      	b.n	800d0e4 <__gethex+0xdc>
 800d142:	4629      	mov	r1, r5
 800d144:	e7e0      	b.n	800d108 <__gethex+0x100>
 800d146:	eba5 0308 	sub.w	r3, r5, r8
 800d14a:	3b01      	subs	r3, #1
 800d14c:	4621      	mov	r1, r4
 800d14e:	2b07      	cmp	r3, #7
 800d150:	dc0a      	bgt.n	800d168 <__gethex+0x160>
 800d152:	4648      	mov	r0, r9
 800d154:	f7fd fbd2 	bl	800a8fc <_Balloc>
 800d158:	4604      	mov	r4, r0
 800d15a:	b940      	cbnz	r0, 800d16e <__gethex+0x166>
 800d15c:	4b61      	ldr	r3, [pc, #388]	; (800d2e4 <__gethex+0x2dc>)
 800d15e:	4602      	mov	r2, r0
 800d160:	21e4      	movs	r1, #228	; 0xe4
 800d162:	4861      	ldr	r0, [pc, #388]	; (800d2e8 <__gethex+0x2e0>)
 800d164:	f7ff feb4 	bl	800ced0 <__assert_func>
 800d168:	3101      	adds	r1, #1
 800d16a:	105b      	asrs	r3, r3, #1
 800d16c:	e7ef      	b.n	800d14e <__gethex+0x146>
 800d16e:	f100 0a14 	add.w	sl, r0, #20
 800d172:	2300      	movs	r3, #0
 800d174:	495a      	ldr	r1, [pc, #360]	; (800d2e0 <__gethex+0x2d8>)
 800d176:	f8cd a004 	str.w	sl, [sp, #4]
 800d17a:	469b      	mov	fp, r3
 800d17c:	45a8      	cmp	r8, r5
 800d17e:	d342      	bcc.n	800d206 <__gethex+0x1fe>
 800d180:	9801      	ldr	r0, [sp, #4]
 800d182:	f840 bb04 	str.w	fp, [r0], #4
 800d186:	eba0 000a 	sub.w	r0, r0, sl
 800d18a:	1080      	asrs	r0, r0, #2
 800d18c:	6120      	str	r0, [r4, #16]
 800d18e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d192:	4658      	mov	r0, fp
 800d194:	f7fd fca4 	bl	800aae0 <__hi0bits>
 800d198:	683d      	ldr	r5, [r7, #0]
 800d19a:	eba8 0000 	sub.w	r0, r8, r0
 800d19e:	42a8      	cmp	r0, r5
 800d1a0:	dd59      	ble.n	800d256 <__gethex+0x24e>
 800d1a2:	eba0 0805 	sub.w	r8, r0, r5
 800d1a6:	4641      	mov	r1, r8
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f7fe f833 	bl	800b214 <__any_on>
 800d1ae:	4683      	mov	fp, r0
 800d1b0:	b1b8      	cbz	r0, 800d1e2 <__gethex+0x1da>
 800d1b2:	f108 33ff 	add.w	r3, r8, #4294967295
 800d1b6:	1159      	asrs	r1, r3, #5
 800d1b8:	f003 021f 	and.w	r2, r3, #31
 800d1bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d1c0:	f04f 0b01 	mov.w	fp, #1
 800d1c4:	fa0b f202 	lsl.w	r2, fp, r2
 800d1c8:	420a      	tst	r2, r1
 800d1ca:	d00a      	beq.n	800d1e2 <__gethex+0x1da>
 800d1cc:	455b      	cmp	r3, fp
 800d1ce:	dd06      	ble.n	800d1de <__gethex+0x1d6>
 800d1d0:	f1a8 0102 	sub.w	r1, r8, #2
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f7fe f81d 	bl	800b214 <__any_on>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d138      	bne.n	800d250 <__gethex+0x248>
 800d1de:	f04f 0b02 	mov.w	fp, #2
 800d1e2:	4641      	mov	r1, r8
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7ff fea7 	bl	800cf38 <rshift>
 800d1ea:	4446      	add	r6, r8
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	42b3      	cmp	r3, r6
 800d1f0:	da41      	bge.n	800d276 <__gethex+0x26e>
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4648      	mov	r0, r9
 800d1f6:	f7fd fbc1 	bl	800a97c <_Bfree>
 800d1fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	6013      	str	r3, [r2, #0]
 800d200:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d204:	e78a      	b.n	800d11c <__gethex+0x114>
 800d206:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d20a:	2a2e      	cmp	r2, #46	; 0x2e
 800d20c:	d014      	beq.n	800d238 <__gethex+0x230>
 800d20e:	2b20      	cmp	r3, #32
 800d210:	d106      	bne.n	800d220 <__gethex+0x218>
 800d212:	9b01      	ldr	r3, [sp, #4]
 800d214:	f843 bb04 	str.w	fp, [r3], #4
 800d218:	f04f 0b00 	mov.w	fp, #0
 800d21c:	9301      	str	r3, [sp, #4]
 800d21e:	465b      	mov	r3, fp
 800d220:	7828      	ldrb	r0, [r5, #0]
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	f7ff feda 	bl	800cfdc <__hexdig_fun>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	f000 000f 	and.w	r0, r0, #15
 800d22e:	4098      	lsls	r0, r3
 800d230:	ea4b 0b00 	orr.w	fp, fp, r0
 800d234:	3304      	adds	r3, #4
 800d236:	e7a1      	b.n	800d17c <__gethex+0x174>
 800d238:	45a8      	cmp	r8, r5
 800d23a:	d8e8      	bhi.n	800d20e <__gethex+0x206>
 800d23c:	2201      	movs	r2, #1
 800d23e:	4628      	mov	r0, r5
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	f7ff fdf8 	bl	800ce36 <strncmp>
 800d246:	4926      	ldr	r1, [pc, #152]	; (800d2e0 <__gethex+0x2d8>)
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d1df      	bne.n	800d20e <__gethex+0x206>
 800d24e:	e795      	b.n	800d17c <__gethex+0x174>
 800d250:	f04f 0b03 	mov.w	fp, #3
 800d254:	e7c5      	b.n	800d1e2 <__gethex+0x1da>
 800d256:	da0b      	bge.n	800d270 <__gethex+0x268>
 800d258:	eba5 0800 	sub.w	r8, r5, r0
 800d25c:	4621      	mov	r1, r4
 800d25e:	4642      	mov	r2, r8
 800d260:	4648      	mov	r0, r9
 800d262:	f7fd fda5 	bl	800adb0 <__lshift>
 800d266:	eba6 0608 	sub.w	r6, r6, r8
 800d26a:	4604      	mov	r4, r0
 800d26c:	f100 0a14 	add.w	sl, r0, #20
 800d270:	f04f 0b00 	mov.w	fp, #0
 800d274:	e7ba      	b.n	800d1ec <__gethex+0x1e4>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	42b3      	cmp	r3, r6
 800d27a:	dd73      	ble.n	800d364 <__gethex+0x35c>
 800d27c:	1b9e      	subs	r6, r3, r6
 800d27e:	42b5      	cmp	r5, r6
 800d280:	dc34      	bgt.n	800d2ec <__gethex+0x2e4>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b02      	cmp	r3, #2
 800d286:	d023      	beq.n	800d2d0 <__gethex+0x2c8>
 800d288:	2b03      	cmp	r3, #3
 800d28a:	d025      	beq.n	800d2d8 <__gethex+0x2d0>
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d115      	bne.n	800d2bc <__gethex+0x2b4>
 800d290:	42b5      	cmp	r5, r6
 800d292:	d113      	bne.n	800d2bc <__gethex+0x2b4>
 800d294:	2d01      	cmp	r5, #1
 800d296:	d10b      	bne.n	800d2b0 <__gethex+0x2a8>
 800d298:	9a02      	ldr	r2, [sp, #8]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	2301      	movs	r3, #1
 800d2a0:	6123      	str	r3, [r4, #16]
 800d2a2:	f8ca 3000 	str.w	r3, [sl]
 800d2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2a8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d2ac:	601c      	str	r4, [r3, #0]
 800d2ae:	e735      	b.n	800d11c <__gethex+0x114>
 800d2b0:	1e69      	subs	r1, r5, #1
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7fd ffae 	bl	800b214 <__any_on>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d1ed      	bne.n	800d298 <__gethex+0x290>
 800d2bc:	4621      	mov	r1, r4
 800d2be:	4648      	mov	r0, r9
 800d2c0:	f7fd fb5c 	bl	800a97c <_Bfree>
 800d2c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	6013      	str	r3, [r2, #0]
 800d2ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d2ce:	e725      	b.n	800d11c <__gethex+0x114>
 800d2d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1f2      	bne.n	800d2bc <__gethex+0x2b4>
 800d2d6:	e7df      	b.n	800d298 <__gethex+0x290>
 800d2d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1dc      	bne.n	800d298 <__gethex+0x290>
 800d2de:	e7ed      	b.n	800d2bc <__gethex+0x2b4>
 800d2e0:	0800de4c 	.word	0x0800de4c
 800d2e4:	0800dcdf 	.word	0x0800dcdf
 800d2e8:	0800e011 	.word	0x0800e011
 800d2ec:	f106 38ff 	add.w	r8, r6, #4294967295
 800d2f0:	f1bb 0f00 	cmp.w	fp, #0
 800d2f4:	d133      	bne.n	800d35e <__gethex+0x356>
 800d2f6:	f1b8 0f00 	cmp.w	r8, #0
 800d2fa:	d004      	beq.n	800d306 <__gethex+0x2fe>
 800d2fc:	4641      	mov	r1, r8
 800d2fe:	4620      	mov	r0, r4
 800d300:	f7fd ff88 	bl	800b214 <__any_on>
 800d304:	4683      	mov	fp, r0
 800d306:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d30a:	2301      	movs	r3, #1
 800d30c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d310:	f008 081f 	and.w	r8, r8, #31
 800d314:	fa03 f308 	lsl.w	r3, r3, r8
 800d318:	4213      	tst	r3, r2
 800d31a:	4631      	mov	r1, r6
 800d31c:	4620      	mov	r0, r4
 800d31e:	bf18      	it	ne
 800d320:	f04b 0b02 	orrne.w	fp, fp, #2
 800d324:	1bad      	subs	r5, r5, r6
 800d326:	f7ff fe07 	bl	800cf38 <rshift>
 800d32a:	687e      	ldr	r6, [r7, #4]
 800d32c:	f04f 0802 	mov.w	r8, #2
 800d330:	f1bb 0f00 	cmp.w	fp, #0
 800d334:	d04a      	beq.n	800d3cc <__gethex+0x3c4>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d016      	beq.n	800d36a <__gethex+0x362>
 800d33c:	2b03      	cmp	r3, #3
 800d33e:	d018      	beq.n	800d372 <__gethex+0x36a>
 800d340:	2b01      	cmp	r3, #1
 800d342:	d109      	bne.n	800d358 <__gethex+0x350>
 800d344:	f01b 0f02 	tst.w	fp, #2
 800d348:	d006      	beq.n	800d358 <__gethex+0x350>
 800d34a:	f8da 3000 	ldr.w	r3, [sl]
 800d34e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d352:	f01b 0f01 	tst.w	fp, #1
 800d356:	d10f      	bne.n	800d378 <__gethex+0x370>
 800d358:	f048 0810 	orr.w	r8, r8, #16
 800d35c:	e036      	b.n	800d3cc <__gethex+0x3c4>
 800d35e:	f04f 0b01 	mov.w	fp, #1
 800d362:	e7d0      	b.n	800d306 <__gethex+0x2fe>
 800d364:	f04f 0801 	mov.w	r8, #1
 800d368:	e7e2      	b.n	800d330 <__gethex+0x328>
 800d36a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d36c:	f1c3 0301 	rsb	r3, r3, #1
 800d370:	930f      	str	r3, [sp, #60]	; 0x3c
 800d372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d374:	2b00      	cmp	r3, #0
 800d376:	d0ef      	beq.n	800d358 <__gethex+0x350>
 800d378:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d37c:	f104 0214 	add.w	r2, r4, #20
 800d380:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d38a:	2300      	movs	r3, #0
 800d38c:	4694      	mov	ip, r2
 800d38e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d392:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d396:	d01e      	beq.n	800d3d6 <__gethex+0x3ce>
 800d398:	3101      	adds	r1, #1
 800d39a:	f8cc 1000 	str.w	r1, [ip]
 800d39e:	f1b8 0f02 	cmp.w	r8, #2
 800d3a2:	f104 0214 	add.w	r2, r4, #20
 800d3a6:	d13d      	bne.n	800d424 <__gethex+0x41c>
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	42ab      	cmp	r3, r5
 800d3ae:	d10b      	bne.n	800d3c8 <__gethex+0x3c0>
 800d3b0:	1169      	asrs	r1, r5, #5
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	f005 051f 	and.w	r5, r5, #31
 800d3b8:	fa03 f505 	lsl.w	r5, r3, r5
 800d3bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3c0:	421d      	tst	r5, r3
 800d3c2:	bf18      	it	ne
 800d3c4:	f04f 0801 	movne.w	r8, #1
 800d3c8:	f048 0820 	orr.w	r8, r8, #32
 800d3cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3ce:	601c      	str	r4, [r3, #0]
 800d3d0:	9b02      	ldr	r3, [sp, #8]
 800d3d2:	601e      	str	r6, [r3, #0]
 800d3d4:	e6a2      	b.n	800d11c <__gethex+0x114>
 800d3d6:	4290      	cmp	r0, r2
 800d3d8:	f842 3c04 	str.w	r3, [r2, #-4]
 800d3dc:	d8d6      	bhi.n	800d38c <__gethex+0x384>
 800d3de:	68a2      	ldr	r2, [r4, #8]
 800d3e0:	4593      	cmp	fp, r2
 800d3e2:	db17      	blt.n	800d414 <__gethex+0x40c>
 800d3e4:	6861      	ldr	r1, [r4, #4]
 800d3e6:	4648      	mov	r0, r9
 800d3e8:	3101      	adds	r1, #1
 800d3ea:	f7fd fa87 	bl	800a8fc <_Balloc>
 800d3ee:	4682      	mov	sl, r0
 800d3f0:	b918      	cbnz	r0, 800d3fa <__gethex+0x3f2>
 800d3f2:	4b1b      	ldr	r3, [pc, #108]	; (800d460 <__gethex+0x458>)
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	2184      	movs	r1, #132	; 0x84
 800d3f8:	e6b3      	b.n	800d162 <__gethex+0x15a>
 800d3fa:	6922      	ldr	r2, [r4, #16]
 800d3fc:	3202      	adds	r2, #2
 800d3fe:	f104 010c 	add.w	r1, r4, #12
 800d402:	0092      	lsls	r2, r2, #2
 800d404:	300c      	adds	r0, #12
 800d406:	f7fc fae9 	bl	80099dc <memcpy>
 800d40a:	4621      	mov	r1, r4
 800d40c:	4648      	mov	r0, r9
 800d40e:	f7fd fab5 	bl	800a97c <_Bfree>
 800d412:	4654      	mov	r4, sl
 800d414:	6922      	ldr	r2, [r4, #16]
 800d416:	1c51      	adds	r1, r2, #1
 800d418:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d41c:	6121      	str	r1, [r4, #16]
 800d41e:	2101      	movs	r1, #1
 800d420:	6151      	str	r1, [r2, #20]
 800d422:	e7bc      	b.n	800d39e <__gethex+0x396>
 800d424:	6921      	ldr	r1, [r4, #16]
 800d426:	4559      	cmp	r1, fp
 800d428:	dd0b      	ble.n	800d442 <__gethex+0x43a>
 800d42a:	2101      	movs	r1, #1
 800d42c:	4620      	mov	r0, r4
 800d42e:	f7ff fd83 	bl	800cf38 <rshift>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	3601      	adds	r6, #1
 800d436:	42b3      	cmp	r3, r6
 800d438:	f6ff aedb 	blt.w	800d1f2 <__gethex+0x1ea>
 800d43c:	f04f 0801 	mov.w	r8, #1
 800d440:	e7c2      	b.n	800d3c8 <__gethex+0x3c0>
 800d442:	f015 051f 	ands.w	r5, r5, #31
 800d446:	d0f9      	beq.n	800d43c <__gethex+0x434>
 800d448:	9b01      	ldr	r3, [sp, #4]
 800d44a:	441a      	add	r2, r3
 800d44c:	f1c5 0520 	rsb	r5, r5, #32
 800d450:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d454:	f7fd fb44 	bl	800aae0 <__hi0bits>
 800d458:	42a8      	cmp	r0, r5
 800d45a:	dbe6      	blt.n	800d42a <__gethex+0x422>
 800d45c:	e7ee      	b.n	800d43c <__gethex+0x434>
 800d45e:	bf00      	nop
 800d460:	0800dcdf 	.word	0x0800dcdf

0800d464 <L_shift>:
 800d464:	f1c2 0208 	rsb	r2, r2, #8
 800d468:	0092      	lsls	r2, r2, #2
 800d46a:	b570      	push	{r4, r5, r6, lr}
 800d46c:	f1c2 0620 	rsb	r6, r2, #32
 800d470:	6843      	ldr	r3, [r0, #4]
 800d472:	6804      	ldr	r4, [r0, #0]
 800d474:	fa03 f506 	lsl.w	r5, r3, r6
 800d478:	432c      	orrs	r4, r5
 800d47a:	40d3      	lsrs	r3, r2
 800d47c:	6004      	str	r4, [r0, #0]
 800d47e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d482:	4288      	cmp	r0, r1
 800d484:	d3f4      	bcc.n	800d470 <L_shift+0xc>
 800d486:	bd70      	pop	{r4, r5, r6, pc}

0800d488 <__match>:
 800d488:	b530      	push	{r4, r5, lr}
 800d48a:	6803      	ldr	r3, [r0, #0]
 800d48c:	3301      	adds	r3, #1
 800d48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d492:	b914      	cbnz	r4, 800d49a <__match+0x12>
 800d494:	6003      	str	r3, [r0, #0]
 800d496:	2001      	movs	r0, #1
 800d498:	bd30      	pop	{r4, r5, pc}
 800d49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d49e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d4a2:	2d19      	cmp	r5, #25
 800d4a4:	bf98      	it	ls
 800d4a6:	3220      	addls	r2, #32
 800d4a8:	42a2      	cmp	r2, r4
 800d4aa:	d0f0      	beq.n	800d48e <__match+0x6>
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e7f3      	b.n	800d498 <__match+0x10>

0800d4b0 <__hexnan>:
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	680b      	ldr	r3, [r1, #0]
 800d4b6:	6801      	ldr	r1, [r0, #0]
 800d4b8:	115e      	asrs	r6, r3, #5
 800d4ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d4be:	f013 031f 	ands.w	r3, r3, #31
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	bf18      	it	ne
 800d4c6:	3604      	addne	r6, #4
 800d4c8:	2500      	movs	r5, #0
 800d4ca:	1f37      	subs	r7, r6, #4
 800d4cc:	4682      	mov	sl, r0
 800d4ce:	4690      	mov	r8, r2
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d4d6:	46b9      	mov	r9, r7
 800d4d8:	463c      	mov	r4, r7
 800d4da:	9502      	str	r5, [sp, #8]
 800d4dc:	46ab      	mov	fp, r5
 800d4de:	784a      	ldrb	r2, [r1, #1]
 800d4e0:	1c4b      	adds	r3, r1, #1
 800d4e2:	9303      	str	r3, [sp, #12]
 800d4e4:	b342      	cbz	r2, 800d538 <__hexnan+0x88>
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	9105      	str	r1, [sp, #20]
 800d4ea:	9204      	str	r2, [sp, #16]
 800d4ec:	f7ff fd76 	bl	800cfdc <__hexdig_fun>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d14f      	bne.n	800d594 <__hexnan+0xe4>
 800d4f4:	9a04      	ldr	r2, [sp, #16]
 800d4f6:	9905      	ldr	r1, [sp, #20]
 800d4f8:	2a20      	cmp	r2, #32
 800d4fa:	d818      	bhi.n	800d52e <__hexnan+0x7e>
 800d4fc:	9b02      	ldr	r3, [sp, #8]
 800d4fe:	459b      	cmp	fp, r3
 800d500:	dd13      	ble.n	800d52a <__hexnan+0x7a>
 800d502:	454c      	cmp	r4, r9
 800d504:	d206      	bcs.n	800d514 <__hexnan+0x64>
 800d506:	2d07      	cmp	r5, #7
 800d508:	dc04      	bgt.n	800d514 <__hexnan+0x64>
 800d50a:	462a      	mov	r2, r5
 800d50c:	4649      	mov	r1, r9
 800d50e:	4620      	mov	r0, r4
 800d510:	f7ff ffa8 	bl	800d464 <L_shift>
 800d514:	4544      	cmp	r4, r8
 800d516:	d950      	bls.n	800d5ba <__hexnan+0x10a>
 800d518:	2300      	movs	r3, #0
 800d51a:	f1a4 0904 	sub.w	r9, r4, #4
 800d51e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d522:	f8cd b008 	str.w	fp, [sp, #8]
 800d526:	464c      	mov	r4, r9
 800d528:	461d      	mov	r5, r3
 800d52a:	9903      	ldr	r1, [sp, #12]
 800d52c:	e7d7      	b.n	800d4de <__hexnan+0x2e>
 800d52e:	2a29      	cmp	r2, #41	; 0x29
 800d530:	d155      	bne.n	800d5de <__hexnan+0x12e>
 800d532:	3102      	adds	r1, #2
 800d534:	f8ca 1000 	str.w	r1, [sl]
 800d538:	f1bb 0f00 	cmp.w	fp, #0
 800d53c:	d04f      	beq.n	800d5de <__hexnan+0x12e>
 800d53e:	454c      	cmp	r4, r9
 800d540:	d206      	bcs.n	800d550 <__hexnan+0xa0>
 800d542:	2d07      	cmp	r5, #7
 800d544:	dc04      	bgt.n	800d550 <__hexnan+0xa0>
 800d546:	462a      	mov	r2, r5
 800d548:	4649      	mov	r1, r9
 800d54a:	4620      	mov	r0, r4
 800d54c:	f7ff ff8a 	bl	800d464 <L_shift>
 800d550:	4544      	cmp	r4, r8
 800d552:	d934      	bls.n	800d5be <__hexnan+0x10e>
 800d554:	f1a8 0204 	sub.w	r2, r8, #4
 800d558:	4623      	mov	r3, r4
 800d55a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d55e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d562:	429f      	cmp	r7, r3
 800d564:	d2f9      	bcs.n	800d55a <__hexnan+0xaa>
 800d566:	1b3b      	subs	r3, r7, r4
 800d568:	f023 0303 	bic.w	r3, r3, #3
 800d56c:	3304      	adds	r3, #4
 800d56e:	3e03      	subs	r6, #3
 800d570:	3401      	adds	r4, #1
 800d572:	42a6      	cmp	r6, r4
 800d574:	bf38      	it	cc
 800d576:	2304      	movcc	r3, #4
 800d578:	4443      	add	r3, r8
 800d57a:	2200      	movs	r2, #0
 800d57c:	f843 2b04 	str.w	r2, [r3], #4
 800d580:	429f      	cmp	r7, r3
 800d582:	d2fb      	bcs.n	800d57c <__hexnan+0xcc>
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	b91b      	cbnz	r3, 800d590 <__hexnan+0xe0>
 800d588:	4547      	cmp	r7, r8
 800d58a:	d126      	bne.n	800d5da <__hexnan+0x12a>
 800d58c:	2301      	movs	r3, #1
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	2005      	movs	r0, #5
 800d592:	e025      	b.n	800d5e0 <__hexnan+0x130>
 800d594:	3501      	adds	r5, #1
 800d596:	2d08      	cmp	r5, #8
 800d598:	f10b 0b01 	add.w	fp, fp, #1
 800d59c:	dd06      	ble.n	800d5ac <__hexnan+0xfc>
 800d59e:	4544      	cmp	r4, r8
 800d5a0:	d9c3      	bls.n	800d52a <__hexnan+0x7a>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5a8:	2501      	movs	r5, #1
 800d5aa:	3c04      	subs	r4, #4
 800d5ac:	6822      	ldr	r2, [r4, #0]
 800d5ae:	f000 000f 	and.w	r0, r0, #15
 800d5b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d5b6:	6020      	str	r0, [r4, #0]
 800d5b8:	e7b7      	b.n	800d52a <__hexnan+0x7a>
 800d5ba:	2508      	movs	r5, #8
 800d5bc:	e7b5      	b.n	800d52a <__hexnan+0x7a>
 800d5be:	9b01      	ldr	r3, [sp, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d0df      	beq.n	800d584 <__hexnan+0xd4>
 800d5c4:	f1c3 0320 	rsb	r3, r3, #32
 800d5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5cc:	40da      	lsrs	r2, r3
 800d5ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d5d2:	4013      	ands	r3, r2
 800d5d4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d5d8:	e7d4      	b.n	800d584 <__hexnan+0xd4>
 800d5da:	3f04      	subs	r7, #4
 800d5dc:	e7d2      	b.n	800d584 <__hexnan+0xd4>
 800d5de:	2004      	movs	r0, #4
 800d5e0:	b007      	add	sp, #28
 800d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5e6 <__ascii_mbtowc>:
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	b901      	cbnz	r1, 800d5ec <__ascii_mbtowc+0x6>
 800d5ea:	a901      	add	r1, sp, #4
 800d5ec:	b142      	cbz	r2, 800d600 <__ascii_mbtowc+0x1a>
 800d5ee:	b14b      	cbz	r3, 800d604 <__ascii_mbtowc+0x1e>
 800d5f0:	7813      	ldrb	r3, [r2, #0]
 800d5f2:	600b      	str	r3, [r1, #0]
 800d5f4:	7812      	ldrb	r2, [r2, #0]
 800d5f6:	1e10      	subs	r0, r2, #0
 800d5f8:	bf18      	it	ne
 800d5fa:	2001      	movne	r0, #1
 800d5fc:	b002      	add	sp, #8
 800d5fe:	4770      	bx	lr
 800d600:	4610      	mov	r0, r2
 800d602:	e7fb      	b.n	800d5fc <__ascii_mbtowc+0x16>
 800d604:	f06f 0001 	mvn.w	r0, #1
 800d608:	e7f8      	b.n	800d5fc <__ascii_mbtowc+0x16>

0800d60a <_realloc_r>:
 800d60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d60e:	4680      	mov	r8, r0
 800d610:	4614      	mov	r4, r2
 800d612:	460e      	mov	r6, r1
 800d614:	b921      	cbnz	r1, 800d620 <_realloc_r+0x16>
 800d616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d61a:	4611      	mov	r1, r2
 800d61c:	f7fd b8e2 	b.w	800a7e4 <_malloc_r>
 800d620:	b92a      	cbnz	r2, 800d62e <_realloc_r+0x24>
 800d622:	f7fd f86b 	bl	800a6fc <_free_r>
 800d626:	4625      	mov	r5, r4
 800d628:	4628      	mov	r0, r5
 800d62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d62e:	f000 f8b6 	bl	800d79e <_malloc_usable_size_r>
 800d632:	4284      	cmp	r4, r0
 800d634:	4607      	mov	r7, r0
 800d636:	d802      	bhi.n	800d63e <_realloc_r+0x34>
 800d638:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d63c:	d812      	bhi.n	800d664 <_realloc_r+0x5a>
 800d63e:	4621      	mov	r1, r4
 800d640:	4640      	mov	r0, r8
 800d642:	f7fd f8cf 	bl	800a7e4 <_malloc_r>
 800d646:	4605      	mov	r5, r0
 800d648:	2800      	cmp	r0, #0
 800d64a:	d0ed      	beq.n	800d628 <_realloc_r+0x1e>
 800d64c:	42bc      	cmp	r4, r7
 800d64e:	4622      	mov	r2, r4
 800d650:	4631      	mov	r1, r6
 800d652:	bf28      	it	cs
 800d654:	463a      	movcs	r2, r7
 800d656:	f7fc f9c1 	bl	80099dc <memcpy>
 800d65a:	4631      	mov	r1, r6
 800d65c:	4640      	mov	r0, r8
 800d65e:	f7fd f84d 	bl	800a6fc <_free_r>
 800d662:	e7e1      	b.n	800d628 <_realloc_r+0x1e>
 800d664:	4635      	mov	r5, r6
 800d666:	e7df      	b.n	800d628 <_realloc_r+0x1e>

0800d668 <_strtoul_l.constprop.0>:
 800d668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d66c:	4f36      	ldr	r7, [pc, #216]	; (800d748 <_strtoul_l.constprop.0+0xe0>)
 800d66e:	4686      	mov	lr, r0
 800d670:	460d      	mov	r5, r1
 800d672:	4628      	mov	r0, r5
 800d674:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d678:	5d3e      	ldrb	r6, [r7, r4]
 800d67a:	f016 0608 	ands.w	r6, r6, #8
 800d67e:	d1f8      	bne.n	800d672 <_strtoul_l.constprop.0+0xa>
 800d680:	2c2d      	cmp	r4, #45	; 0x2d
 800d682:	d130      	bne.n	800d6e6 <_strtoul_l.constprop.0+0x7e>
 800d684:	782c      	ldrb	r4, [r5, #0]
 800d686:	2601      	movs	r6, #1
 800d688:	1c85      	adds	r5, r0, #2
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d057      	beq.n	800d73e <_strtoul_l.constprop.0+0xd6>
 800d68e:	2b10      	cmp	r3, #16
 800d690:	d109      	bne.n	800d6a6 <_strtoul_l.constprop.0+0x3e>
 800d692:	2c30      	cmp	r4, #48	; 0x30
 800d694:	d107      	bne.n	800d6a6 <_strtoul_l.constprop.0+0x3e>
 800d696:	7828      	ldrb	r0, [r5, #0]
 800d698:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d69c:	2858      	cmp	r0, #88	; 0x58
 800d69e:	d149      	bne.n	800d734 <_strtoul_l.constprop.0+0xcc>
 800d6a0:	786c      	ldrb	r4, [r5, #1]
 800d6a2:	2310      	movs	r3, #16
 800d6a4:	3502      	adds	r5, #2
 800d6a6:	f04f 38ff 	mov.w	r8, #4294967295
 800d6aa:	2700      	movs	r7, #0
 800d6ac:	fbb8 f8f3 	udiv	r8, r8, r3
 800d6b0:	fb03 f908 	mul.w	r9, r3, r8
 800d6b4:	ea6f 0909 	mvn.w	r9, r9
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d6be:	f1bc 0f09 	cmp.w	ip, #9
 800d6c2:	d815      	bhi.n	800d6f0 <_strtoul_l.constprop.0+0x88>
 800d6c4:	4664      	mov	r4, ip
 800d6c6:	42a3      	cmp	r3, r4
 800d6c8:	dd23      	ble.n	800d712 <_strtoul_l.constprop.0+0xaa>
 800d6ca:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d6ce:	d007      	beq.n	800d6e0 <_strtoul_l.constprop.0+0x78>
 800d6d0:	4580      	cmp	r8, r0
 800d6d2:	d31b      	bcc.n	800d70c <_strtoul_l.constprop.0+0xa4>
 800d6d4:	d101      	bne.n	800d6da <_strtoul_l.constprop.0+0x72>
 800d6d6:	45a1      	cmp	r9, r4
 800d6d8:	db18      	blt.n	800d70c <_strtoul_l.constprop.0+0xa4>
 800d6da:	fb00 4003 	mla	r0, r0, r3, r4
 800d6de:	2701      	movs	r7, #1
 800d6e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6e4:	e7e9      	b.n	800d6ba <_strtoul_l.constprop.0+0x52>
 800d6e6:	2c2b      	cmp	r4, #43	; 0x2b
 800d6e8:	bf04      	itt	eq
 800d6ea:	782c      	ldrbeq	r4, [r5, #0]
 800d6ec:	1c85      	addeq	r5, r0, #2
 800d6ee:	e7cc      	b.n	800d68a <_strtoul_l.constprop.0+0x22>
 800d6f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d6f4:	f1bc 0f19 	cmp.w	ip, #25
 800d6f8:	d801      	bhi.n	800d6fe <_strtoul_l.constprop.0+0x96>
 800d6fa:	3c37      	subs	r4, #55	; 0x37
 800d6fc:	e7e3      	b.n	800d6c6 <_strtoul_l.constprop.0+0x5e>
 800d6fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d702:	f1bc 0f19 	cmp.w	ip, #25
 800d706:	d804      	bhi.n	800d712 <_strtoul_l.constprop.0+0xaa>
 800d708:	3c57      	subs	r4, #87	; 0x57
 800d70a:	e7dc      	b.n	800d6c6 <_strtoul_l.constprop.0+0x5e>
 800d70c:	f04f 37ff 	mov.w	r7, #4294967295
 800d710:	e7e6      	b.n	800d6e0 <_strtoul_l.constprop.0+0x78>
 800d712:	1c7b      	adds	r3, r7, #1
 800d714:	d106      	bne.n	800d724 <_strtoul_l.constprop.0+0xbc>
 800d716:	2322      	movs	r3, #34	; 0x22
 800d718:	f8ce 3000 	str.w	r3, [lr]
 800d71c:	4638      	mov	r0, r7
 800d71e:	b932      	cbnz	r2, 800d72e <_strtoul_l.constprop.0+0xc6>
 800d720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d724:	b106      	cbz	r6, 800d728 <_strtoul_l.constprop.0+0xc0>
 800d726:	4240      	negs	r0, r0
 800d728:	2a00      	cmp	r2, #0
 800d72a:	d0f9      	beq.n	800d720 <_strtoul_l.constprop.0+0xb8>
 800d72c:	b107      	cbz	r7, 800d730 <_strtoul_l.constprop.0+0xc8>
 800d72e:	1e69      	subs	r1, r5, #1
 800d730:	6011      	str	r1, [r2, #0]
 800d732:	e7f5      	b.n	800d720 <_strtoul_l.constprop.0+0xb8>
 800d734:	2430      	movs	r4, #48	; 0x30
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1b5      	bne.n	800d6a6 <_strtoul_l.constprop.0+0x3e>
 800d73a:	2308      	movs	r3, #8
 800d73c:	e7b3      	b.n	800d6a6 <_strtoul_l.constprop.0+0x3e>
 800d73e:	2c30      	cmp	r4, #48	; 0x30
 800d740:	d0a9      	beq.n	800d696 <_strtoul_l.constprop.0+0x2e>
 800d742:	230a      	movs	r3, #10
 800d744:	e7af      	b.n	800d6a6 <_strtoul_l.constprop.0+0x3e>
 800d746:	bf00      	nop
 800d748:	0800dea1 	.word	0x0800dea1

0800d74c <_strtoul_r>:
 800d74c:	f7ff bf8c 	b.w	800d668 <_strtoul_l.constprop.0>

0800d750 <__ascii_wctomb>:
 800d750:	b149      	cbz	r1, 800d766 <__ascii_wctomb+0x16>
 800d752:	2aff      	cmp	r2, #255	; 0xff
 800d754:	bf85      	ittet	hi
 800d756:	238a      	movhi	r3, #138	; 0x8a
 800d758:	6003      	strhi	r3, [r0, #0]
 800d75a:	700a      	strbls	r2, [r1, #0]
 800d75c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d760:	bf98      	it	ls
 800d762:	2001      	movls	r0, #1
 800d764:	4770      	bx	lr
 800d766:	4608      	mov	r0, r1
 800d768:	4770      	bx	lr
	...

0800d76c <fiprintf>:
 800d76c:	b40e      	push	{r1, r2, r3}
 800d76e:	b503      	push	{r0, r1, lr}
 800d770:	4601      	mov	r1, r0
 800d772:	ab03      	add	r3, sp, #12
 800d774:	4805      	ldr	r0, [pc, #20]	; (800d78c <fiprintf+0x20>)
 800d776:	f853 2b04 	ldr.w	r2, [r3], #4
 800d77a:	6800      	ldr	r0, [r0, #0]
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	f7fe ff55 	bl	800c62c <_vfiprintf_r>
 800d782:	b002      	add	sp, #8
 800d784:	f85d eb04 	ldr.w	lr, [sp], #4
 800d788:	b003      	add	sp, #12
 800d78a:	4770      	bx	lr
 800d78c:	200000ac 	.word	0x200000ac

0800d790 <abort>:
 800d790:	b508      	push	{r3, lr}
 800d792:	2006      	movs	r0, #6
 800d794:	f000 f834 	bl	800d800 <raise>
 800d798:	2001      	movs	r0, #1
 800d79a:	f7f6 fb99 	bl	8003ed0 <_exit>

0800d79e <_malloc_usable_size_r>:
 800d79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7a2:	1f18      	subs	r0, r3, #4
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	bfbc      	itt	lt
 800d7a8:	580b      	ldrlt	r3, [r1, r0]
 800d7aa:	18c0      	addlt	r0, r0, r3
 800d7ac:	4770      	bx	lr

0800d7ae <_raise_r>:
 800d7ae:	291f      	cmp	r1, #31
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	460d      	mov	r5, r1
 800d7b6:	d904      	bls.n	800d7c2 <_raise_r+0x14>
 800d7b8:	2316      	movs	r3, #22
 800d7ba:	6003      	str	r3, [r0, #0]
 800d7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c0:	bd38      	pop	{r3, r4, r5, pc}
 800d7c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d7c4:	b112      	cbz	r2, 800d7cc <_raise_r+0x1e>
 800d7c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7ca:	b94b      	cbnz	r3, 800d7e0 <_raise_r+0x32>
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f000 f831 	bl	800d834 <_getpid_r>
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	4601      	mov	r1, r0
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7dc:	f000 b818 	b.w	800d810 <_kill_r>
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d00a      	beq.n	800d7fa <_raise_r+0x4c>
 800d7e4:	1c59      	adds	r1, r3, #1
 800d7e6:	d103      	bne.n	800d7f0 <_raise_r+0x42>
 800d7e8:	2316      	movs	r3, #22
 800d7ea:	6003      	str	r3, [r0, #0]
 800d7ec:	2001      	movs	r0, #1
 800d7ee:	e7e7      	b.n	800d7c0 <_raise_r+0x12>
 800d7f0:	2400      	movs	r4, #0
 800d7f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	4798      	blx	r3
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	e7e0      	b.n	800d7c0 <_raise_r+0x12>
	...

0800d800 <raise>:
 800d800:	4b02      	ldr	r3, [pc, #8]	; (800d80c <raise+0xc>)
 800d802:	4601      	mov	r1, r0
 800d804:	6818      	ldr	r0, [r3, #0]
 800d806:	f7ff bfd2 	b.w	800d7ae <_raise_r>
 800d80a:	bf00      	nop
 800d80c:	200000ac 	.word	0x200000ac

0800d810 <_kill_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	4d07      	ldr	r5, [pc, #28]	; (800d830 <_kill_r+0x20>)
 800d814:	2300      	movs	r3, #0
 800d816:	4604      	mov	r4, r0
 800d818:	4608      	mov	r0, r1
 800d81a:	4611      	mov	r1, r2
 800d81c:	602b      	str	r3, [r5, #0]
 800d81e:	f7f6 fb47 	bl	8003eb0 <_kill>
 800d822:	1c43      	adds	r3, r0, #1
 800d824:	d102      	bne.n	800d82c <_kill_r+0x1c>
 800d826:	682b      	ldr	r3, [r5, #0]
 800d828:	b103      	cbz	r3, 800d82c <_kill_r+0x1c>
 800d82a:	6023      	str	r3, [r4, #0]
 800d82c:	bd38      	pop	{r3, r4, r5, pc}
 800d82e:	bf00      	nop
 800d830:	200059a4 	.word	0x200059a4

0800d834 <_getpid_r>:
 800d834:	f7f6 bb34 	b.w	8003ea0 <_getpid>

0800d838 <_init>:
 800d838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83a:	bf00      	nop
 800d83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d83e:	bc08      	pop	{r3}
 800d840:	469e      	mov	lr, r3
 800d842:	4770      	bx	lr

0800d844 <_fini>:
 800d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d846:	bf00      	nop
 800d848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84a:	bc08      	pop	{r3}
 800d84c:	469e      	mov	lr, r3
 800d84e:	4770      	bx	lr
