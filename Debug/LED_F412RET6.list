
LED_F412RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800d688  0800d688  0001d688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddac  0800ddac  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddac  0800ddac  0001ddac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddb4  0800ddb4  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddb4  0800ddb4  0001ddb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddb8  0800ddb8  0001ddb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800ddbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a1c0  20000224  0800dfe0  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a3e4  0800dfe0  0002a3e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019098  00000000  00000000  00020297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f88  00000000  00000000  0003932f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  0003d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001237  00000000  00000000  0003ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002543c  00000000  00000000  0003fc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f5ff  00000000  00000000  000650ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5cf2  00000000  00000000  000846aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007990  00000000  00000000  0015a39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00161d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000224 	.word	0x20000224
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d670 	.word	0x0800d670

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000228 	.word	0x20000228
 800020c:	0800d670 	.word	0x0800d670

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xb8>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800104a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800105e:	2201      	movs	r2, #1
 8001060:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <MX_ADC1_Init+0xbc>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800107e:	2202      	movs	r2, #2
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001092:	f003 f9a3 	bl	80043dc <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800109c:	f002 f9f6 	bl	800348c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010a8:	2306      	movs	r3, #6
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_ADC1_Init+0xb4>)
 80010b2:	f003 fae5 	bl	8004680 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010bc:	f002 f9e6 	bl	800348c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010c0:	2303      	movs	r3, #3
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_ADC1_Init+0xb4>)
 80010ce:	f003 fad7 	bl	8004680 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010d8:	f002 f9d8 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000240 	.word	0x20000240
 80010e8:	40012000 	.word	0x40012000
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <HAL_ADC_MspInit+0xdc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d157      	bne.n	80011c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <HAL_ADC_MspInit+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = NTC_Pin|ACC_Z_Pin;
 800114a:	2309      	movs	r3, #9
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	481d      	ldr	r0, [pc, #116]	; (80011d4 <HAL_ADC_MspInit+0xe4>)
 800115e:	f004 f9df 	bl	8005520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001164:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <HAL_ADC_MspInit+0xec>)
 8001166:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 800117c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001180:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001188:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 8001194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001198:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 80011a8:	f003 fe1c 	bl	8004de4 <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011b2:	f002 f96b 	bl	800348c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_ADC_MspInit+0xe8>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012000 	.word	0x40012000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	20000288 	.word	0x20000288
 80011dc:	40026410 	.word	0x40026410

080011e0 <ch395_gpio_init>:
 * @brief       ch395_gpio初始化
 * @param       无
 * @retval      无
 */
void ch395_gpio_init( void )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CH395_RST_GPIO_Port, CH395_RST_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2101      	movs	r1, #1
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ch395_gpio_init+0x18>)
 80011ea:	f004 fb2d 	bl	8005848 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80011ee:	2014      	movs	r0, #20
 80011f0:	f003 f8d0 	bl	8004394 <HAL_Delay>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020400 	.word	0x40020400

080011fc <ch395_read_write_byte>:
 * @brief       硬件SPI输出且输入8个位数据
 * @param       d:将要送入到ch395的数据
 * @retval      无
 */
uint8_t ch395_read_write_byte( uint8_t data )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
    uint8_t rxdata;
    rxdata = spi1_read_write_byte(data);       /* SPI写入一个CH395Q数据并返回一个数据 */
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fd0f 	bl	8003c2c <spi1_read_write_byte>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
    return rxdata;                             /* 返回收到的数据 */
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <ch395_write_cmd>:
 * @brief       向ch395写命令
 * @param       将要写入ch395的命令码
 * @retval      无
 */
void ch395_write_cmd( uint8_t mcmd )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;                         /* 防止CS原来为低，先将CS置高 */
 8001226:	2201      	movs	r2, #1
 8001228:	2110      	movs	r1, #16
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <ch395_write_cmd+0x34>)
 800122c:	f004 fb0c 	bl	8005848 <HAL_GPIO_WritePin>
    ch395_scs_low;                          /* 命令开始，CS拉低 */
 8001230:	2200      	movs	r2, #0
 8001232:	2110      	movs	r1, #16
 8001234:	4806      	ldr	r0, [pc, #24]	; (8001250 <ch395_write_cmd+0x34>)
 8001236:	f004 fb07 	bl	8005848 <HAL_GPIO_WritePin>
    ch395_read_write_byte(mcmd);            /* SPI发送命令码 */
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffdd 	bl	80011fc <ch395_read_write_byte>
    HAL_Delay(2);                            /* 必要延时,延时1.5uS确保读写周期不小于1.5uS */
 8001242:	2002      	movs	r0, #2
 8001244:	f003 f8a6 	bl	8004394 <HAL_Delay>

}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020000 	.word	0x40020000

08001254 <ch395_write_data>:
 * @brief       向ch395写数据
 * @param       将要写入ch395的数据
 * @retval      无
 */
void ch395_write_data( uint8_t mdata )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
    ch395_read_write_byte(mdata);           /* SPI发送数据 */
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffcb 	bl	80011fc <ch395_read_write_byte>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <ch395_read_data>:
 * @brief       从ch395读数据
 * @param       无
 * @retval      返回读取的数据
 */
uint8_t ch395_read_data( void )
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
    uint8_t i;
    i = ch395_read_write_byte(0xff);        /* SPI读数据 */
 8001274:	20ff      	movs	r0, #255	; 0xff
 8001276:	f7ff ffc1 	bl	80011fc <ch395_read_write_byte>
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
    return i;
 800127e:	79fb      	ldrb	r3, [r7, #7]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <ch395_keeplive_set>:
 * @brief       ch395_keeplive_set 保活定时器参数设置
 * @param       无
 * @retval      无
 */
void ch395_keeplive_set(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    ch395_keeplive_cnt(DEF_KEEP_LIVE_CNT);
 800128c:	20c8      	movs	r0, #200	; 0xc8
 800128e:	f001 fa2e 	bl	80026ee <ch395_keeplive_cnt>
    ch395_keeplive_idle(DEF_KEEP_LIVE_IDLE);
 8001292:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001296:	f001 fa3a 	bl	800270e <ch395_keeplive_idle>
    ch395_keeplive_intvl(DEF_KEEP_LIVE_PERIOD);
 800129a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800129e:	f001 fa5a 	bl	8002756 <ch395_keeplive_intvl>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <ch395q_socket_config>:
 * @brief       ch395 socket配置
 * @param       ch395_sokect：Socket配置信息
 * @retval      无
 */
uint8_t ch395q_socket_config(ch395_socket * ch395_sokect)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    if (ch395_sokect == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <ch395q_socket_config+0x12>
    {
        return 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e141      	b.n	800153e <ch395q_socket_config+0x296>
    }

    if (g_ch395q_sta.dhcp_status == DHCP_UP)                                    /* DHCP获取成功状态 */
 80012ba:	4ba3      	ldr	r3, [pc, #652]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d164      	bne.n	800138c <ch395q_socket_config+0xe4>
    {
        ch395_sokect->net_info.ip[0] = g_ch395q_sta.ipinf_buf[0];
 80012c2:	4ba1      	ldr	r3, [pc, #644]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012c4:	78da      	ldrb	r2, [r3, #3]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]
        ch395_sokect->net_info.ip[1] = g_ch395q_sta.ipinf_buf[1];
 80012cc:	4b9e      	ldr	r3, [pc, #632]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012ce:	791a      	ldrb	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        ch395_sokect->net_info.ip[2] = g_ch395q_sta.ipinf_buf[2];
 80012d6:	4b9c      	ldr	r3, [pc, #624]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012d8:	795a      	ldrb	r2, [r3, #5]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        ch395_sokect->net_info.ip[3] = g_ch395q_sta.ipinf_buf[3];
 80012e0:	4b99      	ldr	r3, [pc, #612]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012e2:	799a      	ldrb	r2, [r3, #6]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

        ch395_sokect->net_info.gwip[0] = g_ch395q_sta.ipinf_buf[4];
 80012ea:	4b97      	ldr	r3, [pc, #604]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012ec:	79da      	ldrb	r2, [r3, #7]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        ch395_sokect->net_info.gwip[1] = g_ch395q_sta.ipinf_buf[5];
 80012f4:	4b94      	ldr	r3, [pc, #592]	; (8001548 <ch395q_socket_config+0x2a0>)
 80012f6:	7a1a      	ldrb	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ch395_sokect->net_info.gwip[2] = g_ch395q_sta.ipinf_buf[6];
 80012fe:	4b92      	ldr	r3, [pc, #584]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001300:	7a5a      	ldrb	r2, [r3, #9]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        ch395_sokect->net_info.gwip[3] = g_ch395q_sta.ipinf_buf[7];
 8001308:	4b8f      	ldr	r3, [pc, #572]	; (8001548 <ch395q_socket_config+0x2a0>)
 800130a:	7a9a      	ldrb	r2, [r3, #10]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

        ch395_sokect->net_info.mask[0] = g_ch395q_sta.ipinf_buf[8];
 8001312:	4b8d      	ldr	r3, [pc, #564]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001314:	7ada      	ldrb	r2, [r3, #11]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        ch395_sokect->net_info.mask[1] = g_ch395q_sta.ipinf_buf[9];
 800131c:	4b8a      	ldr	r3, [pc, #552]	; (8001548 <ch395q_socket_config+0x2a0>)
 800131e:	7b1a      	ldrb	r2, [r3, #12]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        ch395_sokect->net_info.mask[2] = g_ch395q_sta.ipinf_buf[10];
 8001326:	4b88      	ldr	r3, [pc, #544]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001328:	7b5a      	ldrb	r2, [r3, #13]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        ch395_sokect->net_info.mask[3] = g_ch395q_sta.ipinf_buf[11];
 8001330:	4b85      	ldr	r3, [pc, #532]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001332:	7b9a      	ldrb	r2, [r3, #14]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

        ch395_sokect->net_info.dns1[0] = g_ch395q_sta.ipinf_buf[12];
 800133a:	4b83      	ldr	r3, [pc, #524]	; (8001548 <ch395q_socket_config+0x2a0>)
 800133c:	7bda      	ldrb	r2, [r3, #15]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        ch395_sokect->net_info.dns1[1] = g_ch395q_sta.ipinf_buf[13];
 8001344:	4b80      	ldr	r3, [pc, #512]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001346:	7c1a      	ldrb	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        ch395_sokect->net_info.dns1[2] = g_ch395q_sta.ipinf_buf[14];
 800134e:	4b7e      	ldr	r3, [pc, #504]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001350:	7c5a      	ldrb	r2, [r3, #17]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        ch395_sokect->net_info.dns1[3] = g_ch395q_sta.ipinf_buf[15];
 8001358:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <ch395q_socket_config+0x2a0>)
 800135a:	7c9a      	ldrb	r2, [r3, #18]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

        ch395_sokect->net_info.dns2[0] = g_ch395q_sta.ipinf_buf[16];
 8001362:	4b79      	ldr	r3, [pc, #484]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001364:	7cda      	ldrb	r2, [r3, #19]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        ch395_sokect->net_info.dns2[1] = g_ch395q_sta.ipinf_buf[17];
 800136c:	4b76      	ldr	r3, [pc, #472]	; (8001548 <ch395q_socket_config+0x2a0>)
 800136e:	7d1a      	ldrb	r2, [r3, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        ch395_sokect->net_info.dns2[2] = g_ch395q_sta.ipinf_buf[18];
 8001376:	4b74      	ldr	r3, [pc, #464]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001378:	7d5a      	ldrb	r2, [r3, #21]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        ch395_sokect->net_info.dns2[3] = g_ch395q_sta.ipinf_buf[19];
 8001380:	4b71      	ldr	r3, [pc, #452]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001382:	7d9a      	ldrb	r2, [r3, #22]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800138a:	e013      	b.n	80013b4 <ch395q_socket_config+0x10c>
    }
    else                                                                      /* DHCP获取失败状态，设置静态IP地址信息 */
    {
        ch395_cmd_set_ipaddr(ch395_sokect->net_config.ipaddr);                /* 设置CH395的IP地址 */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3334      	adds	r3, #52	; 0x34
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fe15 	bl	8001fc0 <ch395_cmd_set_ipaddr>
        ch395_cmd_set_gw_ipaddr(ch395_sokect->net_config.gwipaddr);           /* 设置网关地址 */
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3338      	adds	r3, #56	; 0x38
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fe32 	bl	8002004 <ch395_cmd_set_gw_ipaddr>
        ch395_cmd_set_maskaddr(ch395_sokect->net_config.maskaddr);            /* 设置子网掩码，默认为255.255.255.0*/
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	333c      	adds	r3, #60	; 0x3c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fe4f 	bl	8002048 <ch395_cmd_set_maskaddr>
        ch395_cmd_init();
 80013aa:	f000 fdcb 	bl	8001f44 <ch395_cmd_init>
        HAL_Delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f002 fff0 	bl	8004394 <HAL_Delay>
    }

    ch395_cmd_set_macaddr(ch395_sokect->net_config.macaddr);                  /* 设置MAC地址 */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3340      	adds	r3, #64	; 0x40
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fe67 	bl	800208c <ch395_cmd_set_macaddr>

    memcpy(&g_ch395q_sta.socket[ch395_sokect->socket_index].config, ch395_sokect, sizeof(ch395_socket));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	3318      	adds	r3, #24
 80013ce:	4a5e      	ldr	r2, [pc, #376]	; (8001548 <ch395q_socket_config+0x2a0>)
 80013d0:	4413      	add	r3, r2
 80013d2:	2248      	movs	r2, #72	; 0x48
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f008 fa1c 	bl	8009814 <memcpy>

    switch(ch395_sokect->proto)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	789b      	ldrb	r3, [r3, #2]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	f200 80ab 	bhi.w	800153c <ch395q_socket_config+0x294>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <ch395q_socket_config+0x144>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	08001451 	.word	0x08001451
 80013f4:	080014bf 	.word	0x080014bf
 80013f8:	08001519 	.word	0x08001519
    {
        case CH395Q_SOCKET_UDP:
            /* socket 为UDP模式 */
            ch395_set_socket_desip(ch395_sokect->socket_index, ch395_sokect->des_ip);                                           /* 设置socket 0目标IP地址 */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785a      	ldrb	r2, [r3, #1]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3303      	adds	r3, #3
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f000 fe88 	bl	800211c <ch395_set_socket_desip>
            ch395_set_socket_prot_type(ch395_sokect->socket_index,  PROTO_TYPE_UDP);                                            /* 设置socket 0协议类型 */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	2102      	movs	r1, #2
 8001412:	4618      	mov	r0, r3
 8001414:	f000 feb6 	bl	8002184 <ch395_set_socket_prot_type>
            ch395_set_socket_desport(ch395_sokect->socket_index, ch395_sokect->des_port);                                       /* 设置socket 0目的端口 */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	785a      	ldrb	r2, [r3, #1]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	891b      	ldrh	r3, [r3, #8]
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f000 fecc 	bl	80021c0 <ch395_set_socket_desport>
            ch395_set_socket_sourport(ch395_sokect->socket_index, ch395_sokect->sour_port);                                     /* 设置socket 0源端口 */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	785a      	ldrb	r2, [r3, #1]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	895b      	ldrh	r3, [r3, #10]
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f000 feea 	bl	800220c <ch395_set_socket_sourport>
            g_ch395q_sta.ch395_error(ch395_open_socket(ch395_sokect->socket_index));                                            /* 检查是否成功 */
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <ch395q_socket_config+0x2a0>)
 800143a:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 ffa6 	bl	8002394 <ch395_open_socket>
 8001448:	4603      	mov	r3, r0
 800144a:	4618      	mov	r0, r3
 800144c:	47a0      	blx	r4
            break;
 800144e:	e075      	b.n	800153c <ch395q_socket_config+0x294>
        case CH395Q_SOCKET_TCP_CLIENT:
            /* socket 为TCPClient模式 */
            ch395_keeplive_set();                                                                                               /* 保活设置 */
 8001450:	f7ff ff1a 	bl	8001288 <ch395_keeplive_set>
            ch395_set_socket_desip(ch395_sokect->socket_index, ch395_sokect->des_ip);                                           /* 设置socket 0目标IP地址 */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	785a      	ldrb	r2, [r3, #1]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3303      	adds	r3, #3
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f000 fe5c 	bl	800211c <ch395_set_socket_desip>
            ch395_set_socket_prot_type(ch395_sokect->socket_index,  PROTO_TYPE_TCP);                                            /* 设置socket 0协议类型 */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	2103      	movs	r1, #3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fe8a 	bl	8002184 <ch395_set_socket_prot_type>
            ch395_set_socket_desport(ch395_sokect->socket_index, ch395_sokect->des_port);                                       /* 设置socket 0目的端口 */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	785a      	ldrb	r2, [r3, #1]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	891b      	ldrh	r3, [r3, #8]
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f000 fea0 	bl	80021c0 <ch395_set_socket_desport>
            ch395_set_socket_sourport(ch395_sokect->socket_index, ch395_sokect->sour_port);                                     /* 设置socket 0源端口 */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	785a      	ldrb	r2, [r3, #1]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	895b      	ldrh	r3, [r3, #10]
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f000 febe 	bl	800220c <ch395_set_socket_sourport>
            g_ch395q_sta.ch395_error(ch395_open_socket(ch395_sokect->socket_index));                                            /* 检查sokect是否打开成功 */
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001492:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 ff7a 	bl	8002394 <ch395_open_socket>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4618      	mov	r0, r3
 80014a4:	47a0      	blx	r4
            g_ch395q_sta.ch395_error(ch395_tcp_connect(ch395_sokect->socket_index));                                            /* 检查tcp连接是否成功 */
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <ch395q_socket_config+0x2a0>)
 80014a8:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 ffcb 	bl	800244c <ch395_tcp_connect>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	47a0      	blx	r4
            break;
 80014bc:	e03e      	b.n	800153c <ch395q_socket_config+0x294>
        case CH395Q_SOCKET_TCP_SERVER:
            /* socket 为TCPServer模式 */
            ch395_set_socket_desip(ch395_sokect->socket_index, ch395_sokect->des_ip);                                           /* 设置socket 0目标IP地址 */
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	785a      	ldrb	r2, [r3, #1]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3303      	adds	r3, #3
 80014c6:	4619      	mov	r1, r3
 80014c8:	4610      	mov	r0, r2
 80014ca:	f000 fe27 	bl	800211c <ch395_set_socket_desip>
            ch395_set_socket_prot_type(ch395_sokect->socket_index,  PROTO_TYPE_TCP);                                            /* 设置socket 0协议类型 */
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	785b      	ldrb	r3, [r3, #1]
 80014d2:	2103      	movs	r1, #3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fe55 	bl	8002184 <ch395_set_socket_prot_type>
            ch395_set_socket_sourport(ch395_sokect->socket_index, ch395_sokect->sour_port);                                     /* 设置socket 0源端口 */
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	785a      	ldrb	r2, [r3, #1]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	895b      	ldrh	r3, [r3, #10]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4610      	mov	r0, r2
 80014e6:	f000 fe91 	bl	800220c <ch395_set_socket_sourport>
            g_ch395q_sta.ch395_error(ch395_open_socket(ch395_sokect->socket_index));                                            /* 检查sokect是否打开成功 */
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <ch395q_socket_config+0x2a0>)
 80014ec:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 ff4d 	bl	8002394 <ch395_open_socket>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	47a0      	blx	r4
            g_ch395q_sta.ch395_error(ch395_tcp_listen(ch395_sokect->socket_index));                                             /* 监听tcp连接 */
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001502:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 ffcc 	bl	80024a8 <ch395_tcp_listen>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	47a0      	blx	r4
            break;
 8001516:	e011      	b.n	800153c <ch395q_socket_config+0x294>
        case CH395Q_SOCKET_MAC_RAW:
            ch395_set_socket_prot_type(ch395_sokect->socket_index,  PROTO_TYPE_MAC_RAW);                                        /* 设置socket 0协议类型 */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fe30 	bl	8002184 <ch395_set_socket_prot_type>
            g_ch395q_sta.ch395_error(ch395_open_socket(ch395_sokect->socket_index));                                            /* 检查sokect是否打开成功 */
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <ch395q_socket_config+0x2a0>)
 8001526:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 ff30 	bl	8002394 <ch395_open_socket>
 8001534:	4603      	mov	r3, r0
 8001536:	4618      	mov	r0, r3
 8001538:	47a0      	blx	r4
            break;
 800153a:	bf00      	nop
    }

    return 1;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	200002e8 	.word	0x200002e8

0800154c <ch395_error>:
 * @brief       调试使用，显示错误代码，并停机
 * @param       ierror 检测命令
 * @retval      无
 */
void ch395_error(uint8_t ierror)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
    if (ierror == CMD_ERR_SUCCESS)
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00b      	beq.n	8001574 <ch395_error+0x28>
    {
        return;          /* 操作成功 */
    }

    printf("Error: %02X\r\n", (uint16_t)ierror);    /* 显示错误 */
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4619      	mov	r1, r3
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <ch395_error+0x30>)
 8001562:	f007 ff2f 	bl	80093c4 <iprintf>

    while ( 1 )
    {
        HAL_Delay(200);
 8001566:	20c8      	movs	r0, #200	; 0xc8
 8001568:	f002 ff14 	bl	8004394 <HAL_Delay>
        HAL_Delay(200);
 800156c:	20c8      	movs	r0, #200	; 0xc8
 800156e:	f002 ff11 	bl	8004394 <HAL_Delay>
        HAL_Delay(200);
 8001572:	e7f8      	b.n	8001566 <ch395_error+0x1a>
        return;          /* 操作成功 */
 8001574:	bf00      	nop
    }
}
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	0800d688 	.word	0x0800d688

08001580 <ch395_phy_status>:
 * @brief       CH395 PHY状态
 * @param       phy_status：PHY状态值
 * @retval      无
 */
void ch395_phy_status(uint8_t phy_status)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
    switch (phy_status)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3b01      	subs	r3, #1
 800158e:	2b0f      	cmp	r3, #15
 8001590:	d836      	bhi.n	8001600 <ch395_phy_status+0x80>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <ch395_phy_status+0x18>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015d9 	.word	0x080015d9
 800159c:	080015e1 	.word	0x080015e1
 80015a0:	08001601 	.word	0x08001601
 80015a4:	080015e9 	.word	0x080015e9
 80015a8:	08001601 	.word	0x08001601
 80015ac:	08001601 	.word	0x08001601
 80015b0:	08001601 	.word	0x08001601
 80015b4:	080015f1 	.word	0x080015f1
 80015b8:	08001601 	.word	0x08001601
 80015bc:	08001601 	.word	0x08001601
 80015c0:	08001601 	.word	0x08001601
 80015c4:	08001601 	.word	0x08001601
 80015c8:	08001601 	.word	0x08001601
 80015cc:	08001601 	.word	0x08001601
 80015d0:	08001601 	.word	0x08001601
 80015d4:	080015f9 	.word	0x080015f9
    {
        case PHY_DISCONN:
            printf("PHY DISCONN\r\n");
 80015d8:	480f      	ldr	r0, [pc, #60]	; (8001618 <ch395_phy_status+0x98>)
 80015da:	f007 ff59 	bl	8009490 <puts>
            break;
 80015de:	e013      	b.n	8001608 <ch395_phy_status+0x88>
        case PHY_10M_FLL:
            printf("PHY 10M_FLL\r\n");
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <ch395_phy_status+0x9c>)
 80015e2:	f007 ff55 	bl	8009490 <puts>
            break;
 80015e6:	e00f      	b.n	8001608 <ch395_phy_status+0x88>
        case PHY_10M_HALF:
            printf("PHY 10M_HALF\r\n");
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <ch395_phy_status+0xa0>)
 80015ea:	f007 ff51 	bl	8009490 <puts>
            break;
 80015ee:	e00b      	b.n	8001608 <ch395_phy_status+0x88>
        case PHY_100M_FLL:
            printf("PHY 100M_FLL\r\n");
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <ch395_phy_status+0xa4>)
 80015f2:	f007 ff4d 	bl	8009490 <puts>
            break;
 80015f6:	e007      	b.n	8001608 <ch395_phy_status+0x88>
        case PHY_100M_HALF:
            printf("PHY 100M_HALF\r\n");
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <ch395_phy_status+0xa8>)
 80015fa:	f007 ff49 	bl	8009490 <puts>
            break;
 80015fe:	e003      	b.n	8001608 <ch395_phy_status+0x88>
        default:
            printf("PHY AUTO\r\n");
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <ch395_phy_status+0xac>)
 8001602:	f007 ff45 	bl	8009490 <puts>
            break;
 8001606:	bf00      	nop
    }

    HAL_Delay(1000);
 8001608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160c:	f002 fec2 	bl	8004394 <HAL_Delay>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	0800d698 	.word	0x0800d698
 800161c:	0800d6a8 	.word	0x0800d6a8
 8001620:	0800d6b8 	.word	0x0800d6b8
 8001624:	0800d6c8 	.word	0x0800d6c8
 8001628:	0800d6d8 	.word	0x0800d6d8
 800162c:	0800d6e8 	.word	0x0800d6e8

08001630 <ch395_socket_r_s_buf_modify>:
 * @brief      设置socket接口的接收与发送缓冲区
 * @param      无
 * @retval     无
 */
void ch395_socket_r_s_buf_modify(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

   ch395_set_socket_recv_buf(0,0,4);                                                            /* Socket 0 ，接收缓冲区4*512 = 2K，发送缓冲区2*512 = 1K*/
 8001634:	2204      	movs	r2, #4
 8001636:	2100      	movs	r1, #0
 8001638:	2000      	movs	r0, #0
 800163a:	f000 ffe7 	bl	800260c <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(0,4,2);
 800163e:	2202      	movs	r2, #2
 8001640:	2104      	movs	r1, #4
 8001642:	2000      	movs	r0, #0
 8001644:	f000 fffe 	bl	8002644 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(1,6,4);                                                            /* Socket 1 */
 8001648:	2204      	movs	r2, #4
 800164a:	2106      	movs	r1, #6
 800164c:	2001      	movs	r0, #1
 800164e:	f000 ffdd 	bl	800260c <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(1,10,2);
 8001652:	2202      	movs	r2, #2
 8001654:	210a      	movs	r1, #10
 8001656:	2001      	movs	r0, #1
 8001658:	f000 fff4 	bl	8002644 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(2,12,4);                                                           /* Socket 2 */
 800165c:	2204      	movs	r2, #4
 800165e:	210c      	movs	r1, #12
 8001660:	2002      	movs	r0, #2
 8001662:	f000 ffd3 	bl	800260c <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(2,16,2);
 8001666:	2202      	movs	r2, #2
 8001668:	2110      	movs	r1, #16
 800166a:	2002      	movs	r0, #2
 800166c:	f000 ffea 	bl	8002644 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(3,18,4);                                                           /* Socket 3 */
 8001670:	2204      	movs	r2, #4
 8001672:	2112      	movs	r1, #18
 8001674:	2003      	movs	r0, #3
 8001676:	f000 ffc9 	bl	800260c <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(3,22,2);
 800167a:	2202      	movs	r2, #2
 800167c:	2116      	movs	r1, #22
 800167e:	2003      	movs	r0, #3
 8001680:	f000 ffe0 	bl	8002644 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(4,24,4);                                                           /* Socket 4 */
 8001684:	2204      	movs	r2, #4
 8001686:	2118      	movs	r1, #24
 8001688:	2004      	movs	r0, #4
 800168a:	f000 ffbf 	bl	800260c <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(4,28,2);
 800168e:	2202      	movs	r2, #2
 8001690:	211c      	movs	r1, #28
 8001692:	2004      	movs	r0, #4
 8001694:	f000 ffd6 	bl	8002644 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(5,30,4);                                                           /* Socket 5 */
 8001698:	2204      	movs	r2, #4
 800169a:	211e      	movs	r1, #30
 800169c:	2005      	movs	r0, #5
 800169e:	f000 ffb5 	bl	800260c <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(5,34,2);
 80016a2:	2202      	movs	r2, #2
 80016a4:	2122      	movs	r1, #34	; 0x22
 80016a6:	2005      	movs	r0, #5
 80016a8:	f000 ffcc 	bl	8002644 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(6,36,4);                                                           /* Socket 6 */
 80016ac:	2204      	movs	r2, #4
 80016ae:	2124      	movs	r1, #36	; 0x24
 80016b0:	2006      	movs	r0, #6
 80016b2:	f000 ffab 	bl	800260c <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(6,40,2);
 80016b6:	2202      	movs	r2, #2
 80016b8:	2128      	movs	r1, #40	; 0x28
 80016ba:	2006      	movs	r0, #6
 80016bc:	f000 ffc2 	bl	8002644 <ch395_set_socket_send_buf>

   ch395_set_socket_recv_buf(7,42,4);                                                           /* Socket 7 */
 80016c0:	2204      	movs	r2, #4
 80016c2:	212a      	movs	r1, #42	; 0x2a
 80016c4:	2007      	movs	r0, #7
 80016c6:	f000 ffa1 	bl	800260c <ch395_set_socket_recv_buf>
   ch395_set_socket_send_buf(7,46,2);
 80016ca:	2202      	movs	r2, #2
 80016cc:	212e      	movs	r1, #46	; 0x2e
 80016ce:	2007      	movs	r0, #7
 80016d0:	f000 ffb8 	bl	8002644 <ch395_set_socket_send_buf>

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <ch395_hardware_init>:
 * @brief      ch395_tcp初始化
 * @param      无
 * @retval     无
 */
void ch395_hardware_init(void)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
    uint8_t i;
    ch395_gpio_init();
 80016de:	f7ff fd7f 	bl	80011e0 <ch395_gpio_init>

    g_ch395q_sta.ch395_error = ch395_error;
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <ch395_hardware_init+0xc4>)
 80016e4:	4a2e      	ldr	r2, [pc, #184]	; (80017a0 <ch395_hardware_init+0xc8>)
 80016e6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    g_ch395q_sta.ch395_phy_cb = ch395_phy_status;
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <ch395_hardware_init+0xc4>)
 80016ec:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <ch395_hardware_init+0xcc>)
 80016ee:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
    g_ch395q_sta.ch395_reconnection = ch395_reconnection;
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <ch395_hardware_init+0xc4>)
 80016f4:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <ch395_hardware_init+0xd0>)
 80016f6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
    g_ch395q_sta.dhcp_status = DHCP_STA;
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <ch395_hardware_init+0xc4>)
 80016fc:	2202      	movs	r2, #2
 80016fe:	709a      	strb	r2, [r3, #2]

    i = ch395_cmd_check_exist(0x65);                                        /* 测试命令，用于测试硬件以及接口通讯 */
 8001700:	2065      	movs	r0, #101	; 0x65
 8001702:	f000 fbed 	bl	8001ee0 <ch395_cmd_check_exist>
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]

    if (i != 0x9a)
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b9a      	cmp	r3, #154	; 0x9a
 800170e:	d005      	beq.n	800171c <ch395_hardware_init+0x44>
    {
        g_ch395q_sta.ch395_error(i);                                        /* ch395q检测错误 */
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <ch395_hardware_init+0xc4>)
 8001712:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	4610      	mov	r0, r2
 800171a:	4798      	blx	r3
    }

    ch395_cmd_reset();                                                      /* 对ch395q复位 */
 800171c:	f000 fbbc 	bl	8001e98 <ch395_cmd_reset>
    HAL_Delay(100);                                                          /* 这里必须等待100以上延时 */
 8001720:	2064      	movs	r0, #100	; 0x64
 8001722:	f002 fe37 	bl	8004394 <HAL_Delay>

    g_ch395q_sta.ch395_error(ch395_cmd_init());                             /* 初始化ch395q命令 */
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <ch395_hardware_init+0xc4>)
 8001728:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 800172c:	f000 fc0a 	bl	8001f44 <ch395_cmd_init>
 8001730:	4603      	mov	r3, r0
 8001732:	4618      	mov	r0, r3
 8001734:	47a0      	blx	r4
    ch395_socket_r_s_buf_modify();
 8001736:	f7ff ff7b 	bl	8001630 <ch395_socket_r_s_buf_modify>
//      ch395_set_tcpmss(536);
//      ch395_set_start_para(FUN_PARA_FLAG_TCP_SERVER | SOCK_CTRL_FLAG_SOCKET_CLOSE);

    do
    {
        g_ch395q_sta.phy_status = ch395_cmd_get_phy_status();               /* 获取PHY状态 */
 800173a:	f000 fbed 	bl	8001f18 <ch395_cmd_get_phy_status>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <ch395_hardware_init+0xc4>)
 8001744:	705a      	strb	r2, [r3, #1]
        g_ch395q_sta.ch395_phy_cb(g_ch395q_sta.phy_status);                 /* 判断双工和网速模式 */
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <ch395_hardware_init+0xc4>)
 8001748:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800174c:	4a13      	ldr	r2, [pc, #76]	; (800179c <ch395_hardware_init+0xc4>)
 800174e:	7852      	ldrb	r2, [r2, #1]
 8001750:	4610      	mov	r0, r2
 8001752:	4798      	blx	r3
    }
    while(g_ch395q_sta.phy_status == PHY_DISCONN);
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <ch395_hardware_init+0xc4>)
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d0ee      	beq.n	800173a <ch395_hardware_init+0x62>

    g_ch395q_sta.version = ch395_cmd_get_ver();                             /* 获取版本 */
 800175c:	f000 fbaa 	bl	8001eb4 <ch395_cmd_get_ver>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <ch395_hardware_init+0xc4>)
 8001766:	701a      	strb	r2, [r3, #0]
    printf("CH395VER : %2x\r\n", (uint16_t)g_ch395q_sta.version);
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <ch395_hardware_init+0xc4>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <ch395_hardware_init+0xd4>)
 8001770:	f007 fe28 	bl	80093c4 <iprintf>

    i = ch395_dhcp_enable(1);                                               /* 开启DHCP */
 8001774:	2001      	movs	r0, #1
 8001776:	f000 fee5 	bl	8002544 <ch395_dhcp_enable>
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
    g_ch395q_sta.ch395_error(i);                                            /* ch395q检测错误 */
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <ch395_hardware_init+0xc4>)
 8001780:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	4610      	mov	r0, r2
 8001788:	4798      	blx	r3

    HAL_Delay(1000);                                                         /* ch395q初始化延时 */
 800178a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800178e:	f002 fe01 	bl	8004394 <HAL_Delay>
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	bf00      	nop
 800179c:	200002e8 	.word	0x200002e8
 80017a0:	0800154d 	.word	0x0800154d
 80017a4:	08001581 	.word	0x08001581
 80017a8:	08001b91 	.word	0x08001b91
 80017ac:	0800d6f4 	.word	0x0800d6f4

080017b0 <ch395_socket_interrupt>:
 * @brief       CH395 socket 中断,在全局中断中被调用
 * @param       sockindex （0~7）
 * @retval      无
 */
void ch395_socket_interrupt(uint8_t sockindex)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
    uint8_t  sock_int_socket;
    uint16_t rx_len = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	81fb      	strh	r3, [r7, #14]

    sock_int_socket = ch395_get_socket_int(sockindex);      /* 获取socket 的中断状态 */
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fe9f 	bl	8002504 <ch395_get_socket_int>
 80017c6:	4603      	mov	r3, r0
 80017c8:	737b      	strb	r3, [r7, #13]
    if (sock_int_socket & SINT_STAT_SEND_OK)                /* 发送完成中断 */
    {

    }

    if (sock_int_socket & SINT_STAT_RECV)                   /* 接收中断 */
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d049      	beq.n	8001868 <ch395_socket_interrupt+0xb8>
    {
        g_ch395q_sta.socket[sockindex].config.recv.size = ch395_get_recv_length(sockindex);     /* 获取当前缓冲区内数据长度 */
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fd76 	bl	80022c8 <ch395_get_recv_length>
 80017dc:	4603      	mov	r3, r0
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	4973      	ldr	r1, [pc, #460]	; (80019b0 <ch395_socket_interrupt+0x200>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3334      	adds	r3, #52	; 0x34
 80017f0:	6018      	str	r0, [r3, #0]
        rx_len = g_ch395q_sta.socket[sockindex].config.recv.size;
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	496e      	ldr	r1, [pc, #440]	; (80019b0 <ch395_socket_interrupt+0x200>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3334      	adds	r3, #52	; 0x34
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	81fb      	strh	r3, [r7, #14]
        ch395_get_recv_data(sockindex, rx_len, g_ch395q_sta.socket[sockindex].config.recv.buf); /* 读取数据 */
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	4969      	ldr	r1, [pc, #420]	; (80019b0 <ch395_socket_interrupt+0x200>)
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	3330      	adds	r3, #48	; 0x30
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	89f9      	ldrh	r1, [r7, #14]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fd79 	bl	8002314 <ch395_get_recv_data>
        g_ch395q_sta.socket[sockindex].config.recv.buf[rx_len] = '\0';
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	4962      	ldr	r1, [pc, #392]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3330      	adds	r3, #48	; 0x30
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	4413      	add	r3, r2
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
//        printf("%s", g_ch395q_sta.socket[sockindex].config.recv.buf);
        g_ch395q_sta.socket[sockindex].config.recv.recv_flag |= 0x04;
 800183c:	79fa      	ldrb	r2, [r7, #7]
 800183e:	495c      	ldr	r1, [pc, #368]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	332c      	adds	r3, #44	; 0x2c
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	79fa      	ldrb	r2, [r7, #7]
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	b2d8      	uxtb	r0, r3
 8001856:	4956      	ldr	r1, [pc, #344]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	332c      	adds	r3, #44	; 0x2c
 8001864:	4602      	mov	r2, r0
 8001866:	701a      	strb	r2, [r3, #0]
    }

    if (sock_int_socket & SINT_STAT_CONNECT)                /* 连接中断，仅在TCP模式下有效 */
 8001868:	7b7b      	ldrb	r3, [r7, #13]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d014      	beq.n	800189c <ch395_socket_interrupt+0xec>
    {
        if (g_ch395q_sta.socket[sockindex].config.proto == CH395Q_SOCKET_TCP_CLIENT)
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	494e      	ldr	r1, [pc, #312]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	331a      	adds	r3, #26
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d109      	bne.n	800189c <ch395_socket_interrupt+0xec>
        {
            ch395_set_keeplive(sockindex,1);                /* 打开KEEPALIVE保活定时器 */
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2101      	movs	r1, #1
 800188c:	4618      	mov	r0, r3
 800188e:	f000 ff17 	bl	80026c0 <ch395_set_keeplive>
            ch395_setttl_num(sockindex,60);                 /* 设置TTL */
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	213c      	movs	r1, #60	; 0x3c
 8001896:	4618      	mov	r0, r3
 8001898:	f000 ff81 	bl	800279e <ch395_setttl_num>
        }
    }

    if (sock_int_socket & SINT_STAT_DISCONNECT)             /* 断开中断，仅在TCP模式下有效 */
 800189c:	7b7b      	ldrb	r3, [r7, #13]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d048      	beq.n	8001938 <ch395_socket_interrupt+0x188>
    {
        g_ch395q_sta.ch395_error(ch395_open_socket(g_ch395q_sta.socket[sockindex].config.socket_index));
 80018a6:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <ch395_socket_interrupt+0x200>)
 80018a8:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	4940      	ldr	r1, [pc, #256]	; (80019b0 <ch395_socket_interrupt+0x200>)
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	3319      	adds	r3, #25
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fd68 	bl	8002394 <ch395_open_socket>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4618      	mov	r0, r3
 80018c8:	47a0      	blx	r4

        switch(g_ch395q_sta.socket[sockindex].config.proto)
 80018ca:	79fa      	ldrb	r2, [r7, #7]
 80018cc:	4938      	ldr	r1, [pc, #224]	; (80019b0 <ch395_socket_interrupt+0x200>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	331a      	adds	r3, #26
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d002      	beq.n	80018e6 <ch395_socket_interrupt+0x136>
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d013      	beq.n	800190c <ch395_socket_interrupt+0x15c>
                break;
            case CH395Q_SOCKET_TCP_SERVER:
                g_ch395q_sta.ch395_error(ch395_tcp_listen(g_ch395q_sta.socket[sockindex].config.socket_index));
                break;
            default:
                break;
 80018e4:	e025      	b.n	8001932 <ch395_socket_interrupt+0x182>
                g_ch395q_sta.ch395_error(ch395_tcp_connect(g_ch395q_sta.socket[sockindex].config.socket_index));
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <ch395_socket_interrupt+0x200>)
 80018e8:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	4930      	ldr	r1, [pc, #192]	; (80019b0 <ch395_socket_interrupt+0x200>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	3319      	adds	r3, #25
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fda4 	bl	800244c <ch395_tcp_connect>
 8001904:	4603      	mov	r3, r0
 8001906:	4618      	mov	r0, r3
 8001908:	47a0      	blx	r4
                break;
 800190a:	e012      	b.n	8001932 <ch395_socket_interrupt+0x182>
                g_ch395q_sta.ch395_error(ch395_tcp_listen(g_ch395q_sta.socket[sockindex].config.socket_index));
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <ch395_socket_interrupt+0x200>)
 800190e:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	4926      	ldr	r1, [pc, #152]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	3319      	adds	r3, #25
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fdbf 	bl	80024a8 <ch395_tcp_listen>
 800192a:	4603      	mov	r3, r0
 800192c:	4618      	mov	r0, r3
 800192e:	47a0      	blx	r4
                break;
 8001930:	bf00      	nop
        }
        HAL_Delay(200);                                      /* 延时200MS后再次重试，没有必要过于频繁连接 */
 8001932:	20c8      	movs	r0, #200	; 0xc8
 8001934:	f002 fd2e 	bl	8004394 <HAL_Delay>
    }

    if (sock_int_socket & SINT_STAT_TIM_OUT)                /* 超时中断，仅在TCP模式下有效 */
 8001938:	7b7b      	ldrb	r3, [r7, #13]
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d031      	beq.n	80019a6 <ch395_socket_interrupt+0x1f6>
    {
        if (g_ch395q_sta.socket[sockindex].config.proto == CH395Q_SOCKET_TCP_CLIENT)
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	491a      	ldr	r1, [pc, #104]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	331a      	adds	r3, #26
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d126      	bne.n	80019a6 <ch395_socket_interrupt+0x1f6>
        {
            HAL_Delay(200);                                  /* 延时200MS后再次重试，没有必要过于频繁连接 */
 8001958:	20c8      	movs	r0, #200	; 0xc8
 800195a:	f002 fd1b 	bl	8004394 <HAL_Delay>
            g_ch395q_sta.ch395_error(ch395_open_socket(g_ch395q_sta.socket[sockindex].config.socket_index));
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001960:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	4912      	ldr	r1, [pc, #72]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3319      	adds	r3, #25
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fd0c 	bl	8002394 <ch395_open_socket>
 800197c:	4603      	mov	r3, r0
 800197e:	4618      	mov	r0, r3
 8001980:	47a0      	blx	r4
            g_ch395q_sta.ch395_error(ch395_tcp_connect(g_ch395q_sta.socket[sockindex].config.socket_index));
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <ch395_socket_interrupt+0x200>)
 8001984:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	4909      	ldr	r1, [pc, #36]	; (80019b0 <ch395_socket_interrupt+0x200>)
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3319      	adds	r3, #25
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fd56 	bl	800244c <ch395_tcp_connect>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	47a0      	blx	r4
        }
    }
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002e8 	.word	0x200002e8

080019b4 <ch395_interrupt_handler>:
 * @brief       CH395全局中断函数
 * @param       无
 * @retval      无
 */
void ch395_interrupt_handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af02      	add	r7, sp, #8
    uint16_t  init_status;
    uint8_t i;

    init_status = ch395_cmd_get_glob_int_status_all();
 80019ba:	f000 fe5f 	bl	800267c <ch395_cmd_get_glob_int_status_all>
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]

    if (init_status & GINT_STAT_UNREACH)                                    /* 不可达中断，读取不可达信息 */
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <ch395_interrupt_handler+0x1e>
    {
         ch395_cmd_get_unreachippt(g_ch395q_sta.ipinf_buf);
 80019cc:	485d      	ldr	r0, [pc, #372]	; (8001b44 <ch395_interrupt_handler+0x190>)
 80019ce:	f000 fb83 	bl	80020d8 <ch395_cmd_get_unreachippt>
    if (init_status & GINT_STAT_IP_CONFLI)                                  /* 产生IP冲突中断，建议重新修改CH395的 IP，并初始化CH395 */
    {

    }

    if (init_status & GINT_STAT_PHY_CHANGE)                                 /* 产生PHY改变中断 */
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <ch395_interrupt_handler+0x34>
    {
        g_ch395q_sta.phy_status = ch395_cmd_get_phy_status();               /* 获取PHY状态 */
 80019dc:	f000 fa9c 	bl	8001f18 <ch395_cmd_get_phy_status>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <ch395_interrupt_handler+0x194>)
 80019e6:	705a      	strb	r2, [r3, #1]
    }

    if (init_status & GINT_STAT_DHCP)                                       /* 处理DHCP中断 */
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d064      	beq.n	8001abc <ch395_interrupt_handler+0x108>
    {

        i = ch395_get_dhcp_status();
 80019f2:	f000 fdd3 	bl	800259c <ch395_get_dhcp_status>
 80019f6:	4603      	mov	r3, r0
 80019f8:	717b      	strb	r3, [r7, #5]
//        i = DHCP_DOWN;

        switch (i)
 80019fa:	797b      	ldrb	r3, [r7, #5]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d156      	bne.n	8001aae <ch395_interrupt_handler+0xfa>
        {
            case DHCP_UP:
                ch395_get_ipinf(g_ch395q_sta.ipinf_buf);
 8001a00:	4850      	ldr	r0, [pc, #320]	; (8001b44 <ch395_interrupt_handler+0x190>)
 8001a02:	f000 fde1 	bl	80025c8 <ch395_get_ipinf>
                printf("IP:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[0], (uint16_t)g_ch395q_sta.ipinf_buf[1], (uint16_t)g_ch395q_sta.ipinf_buf[2], (uint16_t)g_ch395q_sta.ipinf_buf[3]);
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a08:	78db      	ldrb	r3, [r3, #3]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b4d      	ldr	r3, [pc, #308]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a14:	795b      	ldrb	r3, [r3, #5]
 8001a16:	4618      	mov	r0, r3
 8001a18:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a1a:	799b      	ldrb	r3, [r3, #6]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	484a      	ldr	r0, [pc, #296]	; (8001b4c <ch395_interrupt_handler+0x198>)
 8001a22:	f007 fccf 	bl	80093c4 <iprintf>
                printf("GWIP:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[4], (uint16_t)g_ch395q_sta.ipinf_buf[5], (uint16_t)g_ch395q_sta.ipinf_buf[6], (uint16_t)g_ch395q_sta.ipinf_buf[7]);
 8001a26:	4b48      	ldr	r3, [pc, #288]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a28:	79db      	ldrb	r3, [r3, #7]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a2e:	7a1b      	ldrb	r3, [r3, #8]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b45      	ldr	r3, [pc, #276]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a34:	7a5b      	ldrb	r3, [r3, #9]
 8001a36:	4618      	mov	r0, r3
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a3a:	7a9b      	ldrb	r3, [r3, #10]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4843      	ldr	r0, [pc, #268]	; (8001b50 <ch395_interrupt_handler+0x19c>)
 8001a42:	f007 fcbf 	bl	80093c4 <iprintf>
                printf("Mask:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[8], (uint16_t)g_ch395q_sta.ipinf_buf[9], (uint16_t)g_ch395q_sta.ipinf_buf[10], (uint16_t)g_ch395q_sta.ipinf_buf[11]);
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a48:	7adb      	ldrb	r3, [r3, #11]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a4e:	7b1b      	ldrb	r3, [r3, #12]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a54:	7b5b      	ldrb	r3, [r3, #13]
 8001a56:	4618      	mov	r0, r3
 8001a58:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a5a:	7b9b      	ldrb	r3, [r3, #14]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4603      	mov	r3, r0
 8001a60:	483c      	ldr	r0, [pc, #240]	; (8001b54 <ch395_interrupt_handler+0x1a0>)
 8001a62:	f007 fcaf 	bl	80093c4 <iprintf>
                printf("DNS1:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[12], (uint16_t)g_ch395q_sta.ipinf_buf[13], (uint16_t)g_ch395q_sta.ipinf_buf[14], (uint16_t)g_ch395q_sta.ipinf_buf[15]);
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a68:	7bdb      	ldrb	r3, [r3, #15]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a6e:	7c1b      	ldrb	r3, [r3, #16]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a74:	7c5b      	ldrb	r3, [r3, #17]
 8001a76:	4618      	mov	r0, r3
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a7a:	7c9b      	ldrb	r3, [r3, #18]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4835      	ldr	r0, [pc, #212]	; (8001b58 <ch395_interrupt_handler+0x1a4>)
 8001a82:	f007 fc9f 	bl	80093c4 <iprintf>
                printf("DNS2:%02d.%02d.%02d.%02d\r\n", (uint16_t)g_ch395q_sta.ipinf_buf[16], (uint16_t)g_ch395q_sta.ipinf_buf[17], (uint16_t)g_ch395q_sta.ipinf_buf[18], (uint16_t)g_ch395q_sta.ipinf_buf[19]);
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a88:	7cdb      	ldrb	r3, [r3, #19]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a8e:	7d1b      	ldrb	r3, [r3, #20]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a94:	7d5b      	ldrb	r3, [r3, #21]
 8001a96:	4618      	mov	r0, r3
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001a9a:	7d9b      	ldrb	r3, [r3, #22]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	482e      	ldr	r0, [pc, #184]	; (8001b5c <ch395_interrupt_handler+0x1a8>)
 8001aa2:	f007 fc8f 	bl	80093c4 <iprintf>
                g_ch395q_sta.dhcp_status = DHCP_UP;
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	709a      	strb	r2, [r3, #2]
                break;
 8001aac:	e006      	b.n	8001abc <ch395_interrupt_handler+0x108>
            default:
                g_ch395q_sta.dhcp_status = DHCP_DOWN;
 8001aae:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <ch395_interrupt_handler+0x194>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	709a      	strb	r2, [r3, #2]
                /* 设置默认IP地址信息 */
                printf("Static IP Mode.....................................\r\n");
 8001ab4:	482a      	ldr	r0, [pc, #168]	; (8001b60 <ch395_interrupt_handler+0x1ac>)
 8001ab6:	f007 fceb 	bl	8009490 <puts>
                break;
 8001aba:	bf00      	nop
        }
    }

    if (init_status & GINT_STAT_SOCK0)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <ch395_interrupt_handler+0x118>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_0);                          /* 处理socket 0中断 */
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fe72 	bl	80017b0 <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK1)
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <ch395_interrupt_handler+0x128>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_1);                          /* 处理socket 1中断 */
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fe6a 	bl	80017b0 <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK2)
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <ch395_interrupt_handler+0x138>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_2);                          /* 处理socket 2中断 */
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f7ff fe62 	bl	80017b0 <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK3)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <ch395_interrupt_handler+0x148>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_3);                          /* 处理socket 3中断 */
 8001af6:	2003      	movs	r0, #3
 8001af8:	f7ff fe5a 	bl	80017b0 <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK4)
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <ch395_interrupt_handler+0x158>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_4);                          /* 处理socket 4中断 */
 8001b06:	2004      	movs	r0, #4
 8001b08:	f7ff fe52 	bl	80017b0 <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK5)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <ch395_interrupt_handler+0x168>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_5);                          /* 处理socket 5中断 */
 8001b16:	2005      	movs	r0, #5
 8001b18:	f7ff fe4a 	bl	80017b0 <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK6)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <ch395_interrupt_handler+0x178>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_6);                          /* 处理socket 6中断 */
 8001b26:	2006      	movs	r0, #6
 8001b28:	f7ff fe42 	bl	80017b0 <ch395_socket_interrupt>
    }

    if (init_status & GINT_STAT_SOCK7)
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <ch395_interrupt_handler+0x188>
    {
        ch395_socket_interrupt(CH395Q_SOCKET_7);                          /* 处理socket 7中断 */
 8001b36:	2007      	movs	r0, #7
 8001b38:	f7ff fe3a 	bl	80017b0 <ch395_socket_interrupt>
    }
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200002eb 	.word	0x200002eb
 8001b48:	200002e8 	.word	0x200002e8
 8001b4c:	0800d708 	.word	0x0800d708
 8001b50:	0800d724 	.word	0x0800d724
 8001b54:	0800d740 	.word	0x0800d740
 8001b58:	0800d75c 	.word	0x0800d75c
 8001b5c:	0800d778 	.word	0x0800d778
 8001b60:	0800d794 	.word	0x0800d794

08001b64 <ch395q_handler>:
 * @brief       CH395全局管理函数
 * @param       无
 * @retval      无
 */
void ch395q_handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
    if (ch395_int_pin_wire == 0)
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <ch395q_handler+0x24>)
 8001b6c:	f003 fe54 	bl	8005818 <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <ch395q_handler+0x16>
    {
        ch395_interrupt_handler();                                       /* 中断处理函数 */
 8001b76:	f7ff ff1d 	bl	80019b4 <ch395_interrupt_handler>
    }

    g_ch395q_sta.ch395_reconnection();                                   /* 检测PHY状态，并重新连接 */
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <ch395q_handler+0x28>)
 8001b7c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8001b80:	4798      	blx	r3
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	200002e8 	.word	0x200002e8

08001b90 <ch395_reconnection>:
 * @brief       检测PHY状态，并重新连接
 * @param       无
 * @retval      无
 */
void ch395_reconnection(void)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
    for (uint8_t socket_index = CH395Q_SOCKET_0 ; socket_index <= CH395Q_SOCKET_7 ; socket_index ++ )
 8001b96:	2300      	movs	r3, #0
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	e16e      	b.n	8001e7a <ch395_reconnection+0x2ea>
    {
        if (g_ch395q_sta.phy_status == PHY_DISCONN && (g_ch395q_sta.dhcp_status == DHCP_UP || g_ch395q_sta.dhcp_status == DHCP_DOWN || g_ch395q_sta.dhcp_status == DHCP_STA))
 8001b9c:	4bbb      	ldr	r3, [pc, #748]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d13c      	bne.n	8001c1e <ch395_reconnection+0x8e>
 8001ba4:	4bb9      	ldr	r3, [pc, #740]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001ba6:	789b      	ldrb	r3, [r3, #2]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <ch395_reconnection+0x2c>
 8001bac:	4bb7      	ldr	r3, [pc, #732]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001bae:	789b      	ldrb	r3, [r3, #2]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d003      	beq.n	8001bbc <ch395_reconnection+0x2c>
 8001bb4:	4bb5      	ldr	r3, [pc, #724]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001bb6:	789b      	ldrb	r3, [r3, #2]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <ch395_reconnection+0x8e>
        {
            if (g_ch395q_sta.socket[socket_index].config.socket_enable == CH395Q_ENABLE)
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	49b3      	ldr	r1, [pc, #716]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3318      	adds	r3, #24
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d121      	bne.n	8001c16 <ch395_reconnection+0x86>
            {
                ch395_close_socket(g_ch395q_sta.socket[socket_index].config.socket_index);
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	49ad      	ldr	r1, [pc, #692]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3319      	adds	r3, #25
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fc03 	bl	80023f0 <ch395_close_socket>
                g_ch395q_sta.ch395_error(ch395_dhcp_enable(0));                                                                 /* ch395q检测错误 */
 8001bea:	4ba8      	ldr	r3, [pc, #672]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001bec:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 fca7 	bl	8002544 <ch395_dhcp_enable>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	47a0      	blx	r4
                g_ch395q_sta.socket[socket_index].config.socket_enable = CH395Q_DISABLE;
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	49a3      	ldr	r1, [pc, #652]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
                g_ch395q_sta.dhcp_status = DHCP_STA;
 8001c10:	4b9e      	ldr	r3, [pc, #632]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001c12:	2202      	movs	r2, #2
 8001c14:	709a      	strb	r2, [r3, #2]
            }

            printf("PHY DISCONN\r\n");
 8001c16:	489e      	ldr	r0, [pc, #632]	; (8001e90 <ch395_reconnection+0x300>)
 8001c18:	f007 fc3a 	bl	8009490 <puts>
 8001c1c:	e12a      	b.n	8001e74 <ch395_reconnection+0x2e4>
        }
        else
        {
            if (g_ch395q_sta.phy_status != PHY_DISCONN && g_ch395q_sta.socket[socket_index].config.socket_enable == CH395Q_DISABLE)
 8001c1e:	4b9b      	ldr	r3, [pc, #620]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	f000 8126 	beq.w	8001e74 <ch395_reconnection+0x2e4>
 8001c28:	79fa      	ldrb	r2, [r7, #7]
 8001c2a:	4998      	ldr	r1, [pc, #608]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	3318      	adds	r3, #24
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	f040 811a 	bne.w	8001e74 <ch395_reconnection+0x2e4>
            {
                if (g_ch395q_sta.dhcp_status == DHCP_STA)
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001c42:	789b      	ldrb	r3, [r3, #2]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d114      	bne.n	8001c72 <ch395_reconnection+0xe2>
                {
                    ch395_cmd_reset();                                                                                          /* 对ch395q复位 */
 8001c48:	f000 f926 	bl	8001e98 <ch395_cmd_reset>
                    HAL_Delay(100);                                                                                              /* 这里必须等待100以上延时 */
 8001c4c:	2064      	movs	r0, #100	; 0x64
 8001c4e:	f002 fba1 	bl	8004394 <HAL_Delay>
                    ch395_cmd_init();
 8001c52:	f000 f977 	bl	8001f44 <ch395_cmd_init>
                    HAL_Delay(100);                                                                                              /* 这里必须等待100以上延时 */
 8001c56:	2064      	movs	r0, #100	; 0x64
 8001c58:	f002 fb9c 	bl	8004394 <HAL_Delay>
                    ch395_socket_r_s_buf_modify();
 8001c5c:	f7ff fce8 	bl	8001630 <ch395_socket_r_s_buf_modify>
//                    ch395_set_tcpmss(536);
//                    ch395_set_start_para(FUN_PARA_FLAG_TCP_SERVER | SOCK_CTRL_FLAG_SOCKET_CLOSE);
                    g_ch395q_sta.ch395_error(ch395_dhcp_enable(1));                                                             /* 开启DHCP */
 8001c60:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001c62:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001c66:	2001      	movs	r0, #1
 8001c68:	f000 fc6c 	bl	8002544 <ch395_dhcp_enable>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	47a0      	blx	r4
                }

                do
                {
                    if (ch395_int_pin_wire == 0)
 8001c72:	2102      	movs	r1, #2
 8001c74:	4887      	ldr	r0, [pc, #540]	; (8001e94 <ch395_reconnection+0x304>)
 8001c76:	f003 fdcf 	bl	8005818 <HAL_GPIO_ReadPin>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <ch395_reconnection+0xf4>
                    {
                        ch395_interrupt_handler();                                                                              /* 中断处理函数 */
 8001c80:	f7ff fe98 	bl	80019b4 <ch395_interrupt_handler>
                    }
                }
                while (g_ch395q_sta.dhcp_status == DHCP_STA);                                                                   /* 获取DHCP */
 8001c84:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001c86:	789b      	ldrb	r3, [r3, #2]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d0f2      	beq.n	8001c72 <ch395_reconnection+0xe2>

                switch(g_ch395q_sta.socket[socket_index].config.proto)
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	497f      	ldr	r1, [pc, #508]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	331a      	adds	r3, #26
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	f200 80d2 	bhi.w	8001e48 <ch395_reconnection+0x2b8>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <ch395_reconnection+0x11c>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001d31 	.word	0x08001d31
 8001cb4:	08001dbd 	.word	0x08001dbd
 8001cb8:	08001e29 	.word	0x08001e29
                {
                    case CH395Q_SOCKET_UDP:
                        /* socket 为UDP模式 */
                        ch395_set_socket_desip(socket_index, g_ch395q_sta.socket[socket_index].config.des_ip);                  /* 设置socket 0目标IP地址 */
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	3318      	adds	r3, #24
 8001cc8:	4a70      	ldr	r2, [pc, #448]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	1cda      	adds	r2, r3, #3
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fa22 	bl	800211c <ch395_set_socket_desip>
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_UDP);                                              /* 设置socket 0协议类型 */
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2102      	movs	r1, #2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fa51 	bl	8002184 <ch395_set_socket_prot_type>
                        ch395_set_socket_desport(socket_index, g_ch395q_sta.socket[socket_index].config.des_port);              /* 设置socket 0目的端口 */
 8001ce2:	79fa      	ldrb	r2, [r7, #7]
 8001ce4:	4969      	ldr	r1, [pc, #420]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	3320      	adds	r3, #32
 8001cf2:	881a      	ldrh	r2, [r3, #0]
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fa61 	bl	80021c0 <ch395_set_socket_desport>
                        ch395_set_socket_sourport(socket_index, g_ch395q_sta.socket[socket_index].config.sour_port);            /* 设置socket 0源端口 */
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	4962      	ldr	r1, [pc, #392]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3322      	adds	r3, #34	; 0x22
 8001d0e:	881a      	ldrh	r2, [r3, #0]
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fa79 	bl	800220c <ch395_set_socket_sourport>
                        g_ch395q_sta.ch395_error(ch395_open_socket(socket_index));                                              /* 检查是否成功 */
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001d1c:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fb36 	bl	8002394 <ch395_open_socket>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	47a0      	blx	r4
                        break;
 8001d2e:	e097      	b.n	8001e60 <ch395_reconnection+0x2d0>
                    case CH395Q_SOCKET_TCP_CLIENT:
                        /* socket 为TCPClient模式 */
                        ch395_keeplive_set();                                                                                   /* 保活设置 */
 8001d30:	f7ff faaa 	bl	8001288 <ch395_keeplive_set>
                        ch395_set_socket_desip(socket_index, g_ch395q_sta.socket[socket_index].config.des_ip);                  /* 设置socket 0目标IP地址 */
 8001d34:	79fa      	ldrb	r2, [r7, #7]
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	3318      	adds	r3, #24
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001d42:	4413      	add	r3, r2
 8001d44:	1cda      	adds	r2, r3, #3
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f9e6 	bl	800211c <ch395_set_socket_desip>
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_TCP);                                              /* 设置socket 0协议类型 */
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2103      	movs	r1, #3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fa15 	bl	8002184 <ch395_set_socket_prot_type>
                        ch395_set_socket_desport(socket_index,g_ch395q_sta.socket[socket_index].config.des_port);               /* 设置socket 0目的端口 */
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	494b      	ldr	r1, [pc, #300]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3320      	adds	r3, #32
 8001d6a:	881a      	ldrh	r2, [r3, #0]
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fa25 	bl	80021c0 <ch395_set_socket_desport>
                        ch395_set_socket_sourport(socket_index,g_ch395q_sta.socket[socket_index].config.sour_port);             /* 设置socket 0源端口 */
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	4944      	ldr	r1, [pc, #272]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	3322      	adds	r3, #34	; 0x22
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fa3d 	bl	800220c <ch395_set_socket_sourport>
                        g_ch395q_sta.ch395_error(ch395_open_socket(socket_index));                                              /* 检查sokect是否打开成功 */
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001d94:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fafa 	bl	8002394 <ch395_open_socket>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4618      	mov	r0, r3
 8001da4:	47a0      	blx	r4
                        g_ch395q_sta.ch395_error(ch395_tcp_connect(socket_index));                                              /* 检查tcp连接是否成功 */
 8001da6:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001da8:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fb4c 	bl	800244c <ch395_tcp_connect>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4618      	mov	r0, r3
 8001db8:	47a0      	blx	r4
                        break;
 8001dba:	e051      	b.n	8001e60 <ch395_reconnection+0x2d0>
                    case CH395Q_SOCKET_TCP_SERVER:
                        /* socket 为TCPServer模式 */
                        ch395_set_socket_desip(socket_index, g_ch395q_sta.socket[socket_index].config.des_ip);                  /* 设置socket 0目标IP地址 */
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	3318      	adds	r3, #24
 8001dc8:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001dca:	4413      	add	r3, r2
 8001dcc:	1cda      	adds	r2, r3, #3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f9a2 	bl	800211c <ch395_set_socket_desip>
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_TCP);                                              /* 设置socket 0协议类型 */
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f9d1 	bl	8002184 <ch395_set_socket_prot_type>
                        ch395_set_socket_sourport(socket_index, g_ch395q_sta.socket[socket_index].config.sour_port);            /* 设置socket 0源端口 */
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	4929      	ldr	r1, [pc, #164]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3322      	adds	r3, #34	; 0x22
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fa07 	bl	800220c <ch395_set_socket_sourport>
                        g_ch395q_sta.ch395_error(ch395_open_socket(socket_index));                                              /* 检查sokect是否打开成功 */
 8001dfe:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001e00:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fac4 	bl	8002394 <ch395_open_socket>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	47a0      	blx	r4
                        g_ch395q_sta.ch395_error(ch395_tcp_listen(socket_index));                                               /* 监听tcp连接 */
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001e14:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fb44 	bl	80024a8 <ch395_tcp_listen>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4618      	mov	r0, r3
 8001e24:	47a0      	blx	r4
                        break;
 8001e26:	e01b      	b.n	8001e60 <ch395_reconnection+0x2d0>
                    case CH395Q_SOCKET_MAC_RAW:
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_MAC_RAW);                                          /* 设置socket 0协议类型 */
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 f9a9 	bl	8002184 <ch395_set_socket_prot_type>
                        g_ch395q_sta.ch395_error(ch395_open_socket(socket_index));                                              /* 检查sokect是否打开成功 */
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001e34:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 faaa 	bl	8002394 <ch395_open_socket>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4618      	mov	r0, r3
 8001e44:	47a0      	blx	r4
                        break;
 8001e46:	e00b      	b.n	8001e60 <ch395_reconnection+0x2d0>
                    default:
                        ch395_set_socket_prot_type(socket_index,  PROTO_TYPE_TCP);
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 f999 	bl	8002184 <ch395_set_socket_prot_type>
                        ch395_set_socket_sourport(socket_index, 8080);                                                          /* 设置socket 1~7源端口 */
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f641 7190 	movw	r1, #8080	; 0x1f90
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f9d7 	bl	800220c <ch395_set_socket_sourport>
                        break;
 8001e5e:	bf00      	nop
                }
                g_ch395q_sta.socket[socket_index].config.socket_enable = CH395Q_ENABLE;
 8001e60:	79fa      	ldrb	r2, [r7, #7]
 8001e62:	490a      	ldr	r1, [pc, #40]	; (8001e8c <ch395_reconnection+0x2fc>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3318      	adds	r3, #24
 8001e70:	2202      	movs	r2, #2
 8001e72:	701a      	strb	r2, [r3, #0]
    for (uint8_t socket_index = CH395Q_SOCKET_0 ; socket_index <= CH395Q_SOCKET_7 ; socket_index ++ )
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	3301      	adds	r3, #1
 8001e78:	71fb      	strb	r3, [r7, #7]
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	f67f ae8d 	bls.w	8001b9c <ch395_reconnection+0xc>
            }
        }
    }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd90      	pop	{r4, r7, pc}
 8001e8c:	200002e8 	.word	0x200002e8
 8001e90:	0800d698 	.word	0x0800d698
 8001e94:	40020400 	.word	0x40020400

08001e98 <ch395_cmd_reset>:
 * @brief       复位ch395芯片
 * @param       无
 * @retval      无
 */
void ch395_cmd_reset(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    ch395_write_cmd(CMD00_RESET_ALL);
 8001e9c:	2005      	movs	r0, #5
 8001e9e:	f7ff f9bd 	bl	800121c <ch395_write_cmd>
    ch395_scs_hign;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <ch395_cmd_reset+0x18>)
 8001ea8:	f003 fcce 	bl	8005848 <HAL_GPIO_WritePin>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <ch395_cmd_get_ver>:
 * @brief       获取芯片以及固件版本号，1字节，高四位表示芯片版本，
 * @param       无
 * @retval      1字节芯片及固件版本号
 */
uint8_t ch395_cmd_get_ver(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
    uint8_t i;
    ch395_write_cmd(CMD01_GET_IC_VER);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7ff f9ae 	bl	800121c <ch395_write_cmd>
    i = ch395_read_data();
 8001ec0:	f7ff f9d5 	bl	800126e <ch395_read_data>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2110      	movs	r1, #16
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <ch395_cmd_get_ver+0x28>)
 8001ece:	f003 fcbb 	bl	8005848 <HAL_GPIO_WritePin>
    return i;
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40020000 	.word	0x40020000

08001ee0 <ch395_cmd_check_exist>:
 * @brief       测试命令，用于测试硬件以及接口通讯，
 * @param       1字节测试数据
 * @retval      硬件ok，返回 testdata按位取反
 */
uint8_t ch395_cmd_check_exist(uint8_t testdata)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    ch395_write_cmd(CMD11_CHECK_EXIST);
 8001eea:	2006      	movs	r0, #6
 8001eec:	f7ff f996 	bl	800121c <ch395_write_cmd>
    ch395_write_data(testdata);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f9ae 	bl	8001254 <ch395_write_data>
    i = ch395_read_data();
 8001ef8:	f7ff f9b9 	bl	800126e <ch395_read_data>
 8001efc:	4603      	mov	r3, r0
 8001efe:	73fb      	strb	r3, [r7, #15]
    ch395_scs_hign;
 8001f00:	2201      	movs	r2, #1
 8001f02:	2110      	movs	r1, #16
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <ch395_cmd_check_exist+0x34>)
 8001f06:	f003 fc9f 	bl	8005848 <HAL_GPIO_WritePin>
    return i;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40020000 	.word	0x40020000

08001f18 <ch395_cmd_get_phy_status>:
 * @brief       获取phy的状态
 * @param       无
 * @retval      当前ch395phy状态，参考phy参数/状态定义
 */
uint8_t ch395_cmd_get_phy_status(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
    uint8_t i;

    ch395_write_cmd(CMD01_GET_PHY_STATUS);
 8001f1e:	2026      	movs	r0, #38	; 0x26
 8001f20:	f7ff f97c 	bl	800121c <ch395_write_cmd>
    i = ch395_read_data();
 8001f24:	f7ff f9a3 	bl	800126e <ch395_read_data>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2110      	movs	r1, #16
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <ch395_cmd_get_phy_status+0x28>)
 8001f32:	f003 fc89 	bl	8005848 <HAL_GPIO_WritePin>
    return i;
 8001f36:	79fb      	ldrb	r3, [r7, #7]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40020000 	.word	0x40020000

08001f44 <ch395_cmd_init>:
 * @brief       初始化ch395芯片
 * @param       无
 * @retval      返回执行结果
 */
uint8_t ch395_cmd_init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
    uint8_t s = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71bb      	strb	r3, [r7, #6]

    ch395_write_cmd(CMD0W_INIT_CH395);
 8001f52:	2027      	movs	r0, #39	; 0x27
 8001f54:	f7ff f962 	bl	800121c <ch395_write_cmd>
    ch395_scs_hign;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2110      	movs	r1, #16
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <ch395_cmd_init+0x4c>)
 8001f5e:	f003 fc73 	bl	8005848 <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(10);                          /* 延时查询，建议2MS以上 */
 8001f62:	200a      	movs	r0, #10
 8001f64:	f002 fa16 	bl	8004394 <HAL_Delay>
        s = ch395_get_cmd_status();            /* 不能过于频繁查询 */
 8001f68:	f000 f814 	bl	8001f94 <ch395_get_cmd_status>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71bb      	strb	r3, [r7, #6]

        if (s != CH395_ERR_BUSY)
 8001f70:	79bb      	ldrb	r3, [r7, #6]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d106      	bne.n	8001f84 <ch395_cmd_init+0x40>
        {
            break;         /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	71fa      	strb	r2, [r7, #7]
 8001f7c:	2bc8      	cmp	r3, #200	; 0xc8
 8001f7e:	d9f0      	bls.n	8001f62 <ch395_cmd_init+0x1e>
        {
            return CH395_ERR_UNKNOW; /* 超时退出,本函数需要500MS以上执行完毕 */
 8001f80:	23fa      	movs	r3, #250	; 0xfa
 8001f82:	e001      	b.n	8001f88 <ch395_cmd_init+0x44>
            break;         /* 如果CH395芯片返回忙状态 */
 8001f84:	bf00      	nop
        }
    }

    return s;
 8001f86:	79bb      	ldrb	r3, [r7, #6]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40020000 	.word	0x40020000

08001f94 <ch395_get_cmd_status>:
 * @brief       获取命令执行状态，某些命令需要等待命令执行结果
 * @param       无
 * @retval      返回上一条命令执行状态
 */
uint8_t ch395_get_cmd_status(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
    uint8_t i;

    ch395_write_cmd(CMD01_GET_CMD_STATUS);
 8001f9a:	202c      	movs	r0, #44	; 0x2c
 8001f9c:	f7ff f93e 	bl	800121c <ch395_write_cmd>
    i = ch395_read_data();
 8001fa0:	f7ff f965 	bl	800126e <ch395_read_data>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2110      	movs	r1, #16
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <ch395_get_cmd_status+0x28>)
 8001fae:	f003 fc4b 	bl	8005848 <HAL_GPIO_WritePin>
    return i;
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40020000 	.word	0x40020000

08001fc0 <ch395_cmd_set_ipaddr>:
 * @brief       设置ch395的ip地址
 * @param       ipaddr 指ip地址
 * @retval      无
 */
void ch395_cmd_set_ipaddr(uint8_t *ipaddr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD40_SET_IP_ADDR);
 8001fc8:	2022      	movs	r0, #34	; 0x22
 8001fca:	f7ff f927 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 4; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e009      	b.n	8001fe8 <ch395_cmd_set_ipaddr+0x28>
    {
        ch395_write_data(*ipaddr++);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff f939 	bl	8001254 <ch395_write_data>
    for (i = 0; i < 4; i++)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d9f2      	bls.n	8001fd4 <ch395_cmd_set_ipaddr+0x14>
    }

    ch395_scs_hign;
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	4803      	ldr	r0, [pc, #12]	; (8002000 <ch395_cmd_set_ipaddr+0x40>)
 8001ff4:	f003 fc28 	bl	8005848 <HAL_GPIO_WritePin>
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40020000 	.word	0x40020000

08002004 <ch395_cmd_set_gw_ipaddr>:
 * @brief       设置ch395的网关ip地址
 * @param       ipaddr 指向网关ip地址
 * @retval      无
 */
void ch395_cmd_set_gw_ipaddr(uint8_t *gwipaddr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD40_SET_GWIP_ADDR);
 800200c:	2023      	movs	r0, #35	; 0x23
 800200e:	f7ff f905 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 4; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	e009      	b.n	800202c <ch395_cmd_set_gw_ipaddr+0x28>
    {
        ch395_write_data(*gwipaddr++);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f917 	bl	8001254 <ch395_write_data>
    for (i = 0; i < 4; i++)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d9f2      	bls.n	8002018 <ch395_cmd_set_gw_ipaddr+0x14>
    }

    ch395_scs_hign;
 8002032:	2201      	movs	r2, #1
 8002034:	2110      	movs	r1, #16
 8002036:	4803      	ldr	r0, [pc, #12]	; (8002044 <ch395_cmd_set_gw_ipaddr+0x40>)
 8002038:	f003 fc06 	bl	8005848 <HAL_GPIO_WritePin>
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40020000 	.word	0x40020000

08002048 <ch395_cmd_set_maskaddr>:
 * @brief       设置ch395的子网掩码，默认为255.255.255.0
 * @param       maskaddr 指子网掩码地址
 * @retval      无
 */
void ch395_cmd_set_maskaddr(uint8_t *maskaddr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD40_SET_MASK_ADDR);
 8002050:	2024      	movs	r0, #36	; 0x24
 8002052:	f7ff f8e3 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 4; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e009      	b.n	8002070 <ch395_cmd_set_maskaddr+0x28>
    {
        ch395_write_data(*maskaddr++);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f8f5 	bl	8001254 <ch395_write_data>
    for (i = 0; i < 4; i++)
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	3301      	adds	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d9f2      	bls.n	800205c <ch395_cmd_set_maskaddr+0x14>
    }

    ch395_scs_hign;
 8002076:	2201      	movs	r2, #1
 8002078:	2110      	movs	r1, #16
 800207a:	4803      	ldr	r0, [pc, #12]	; (8002088 <ch395_cmd_set_maskaddr+0x40>)
 800207c:	f003 fbe4 	bl	8005848 <HAL_GPIO_WritePin>
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40020000 	.word	0x40020000

0800208c <ch395_cmd_set_macaddr>:
 * @brief       设置ch395的mac地址。
 * @param       mcaddr mac地址指针
 * @retval      无
 */
void ch395_cmd_set_macaddr(uint8_t *amcaddr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD60_SET_MAC_ADDR);
 8002094:	2021      	movs	r0, #33	; 0x21
 8002096:	f7ff f8c1 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 6; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e009      	b.n	80020b4 <ch395_cmd_set_macaddr+0x28>
    {
        ch395_write_data(*amcaddr++);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f8d3 	bl	8001254 <ch395_write_data>
    for (i = 0; i < 6; i++)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	3301      	adds	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d9f2      	bls.n	80020a0 <ch395_cmd_set_macaddr+0x14>
    }

    ch395_scs_hign;
 80020ba:	2201      	movs	r2, #1
 80020bc:	2110      	movs	r1, #16
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <ch395_cmd_set_macaddr+0x48>)
 80020c0:	f003 fbc2 	bl	8005848 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80020c4:	2064      	movs	r0, #100	; 0x64
 80020c6:	f002 f965 	bl	8004394 <HAL_Delay>
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40020000 	.word	0x40020000

080020d8 <ch395_cmd_get_unreachippt>:
     @arg       第3-4字节为端口号
     @arg       第4-8字节为ip地址
 * @retval      无
 */
void ch395_cmd_get_unreachippt(uint8_t *list)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    uint8_t i;

    ch395_write_cmd(CMD08_GET_UNREACH_IPPORT);
 80020e0:	2028      	movs	r0, #40	; 0x28
 80020e2:	f7ff f89b 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 8; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e009      	b.n	8002100 <ch395_cmd_get_unreachippt+0x28>
    {
        *list++ = ch395_read_data();
 80020ec:	687c      	ldr	r4, [r7, #4]
 80020ee:	1c63      	adds	r3, r4, #1
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	f7ff f8bc 	bl	800126e <ch395_read_data>
 80020f6:	4603      	mov	r3, r0
 80020f8:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < 8; i++)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	3301      	adds	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b07      	cmp	r3, #7
 8002104:	d9f2      	bls.n	80020ec <ch395_cmd_get_unreachippt+0x14>
    }

    ch395_scs_hign;
 8002106:	2201      	movs	r2, #1
 8002108:	2110      	movs	r1, #16
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <ch395_cmd_get_unreachippt+0x40>)
 800210c:	f003 fb9c 	bl	8005848 <HAL_GPIO_WritePin>
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	40020000 	.word	0x40020000

0800211c <ch395_set_socket_desip>:
 * @param       sockindex socket索引
 * @param       ipaddr 指向ip地址
 * @retval      无
 */
void ch395_set_socket_desip(uint8_t sockindex, uint8_t *ipaddr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
    ch395_write_cmd(CMD50_SET_IP_ADDR_SN);
 8002128:	2031      	movs	r0, #49	; 0x31
 800212a:	f7ff f877 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f88f 	bl	8001254 <ch395_write_data>
    ch395_write_data(*ipaddr++);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	603a      	str	r2, [r7, #0]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f888 	bl	8001254 <ch395_write_data>
    ch395_write_data(*ipaddr++);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	603a      	str	r2, [r7, #0]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f881 	bl	8001254 <ch395_write_data>
    ch395_write_data(*ipaddr++);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	603a      	str	r2, [r7, #0]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f87a 	bl	8001254 <ch395_write_data>
    ch395_write_data(*ipaddr++);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	603a      	str	r2, [r7, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f873 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 800216e:	2201      	movs	r2, #1
 8002170:	2110      	movs	r1, #16
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <ch395_set_socket_desip+0x64>)
 8002174:	f003 fb68 	bl	8005848 <HAL_GPIO_WritePin>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40020000 	.word	0x40020000

08002184 <ch395_set_socket_prot_type>:
 * @param       sockindex socket索引,prottype 协议类型
 * @param       请参考 socket协议类型定义(ch395inc.h)
 * @retval      无
 */
void ch395_set_socket_prot_type(uint8_t sockindex, uint8_t prottype)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	460a      	mov	r2, r1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	4613      	mov	r3, r2
 8002192:	71bb      	strb	r3, [r7, #6]
    ch395_write_cmd(CMD20_SET_PROTO_TYPE_SN);
 8002194:	2034      	movs	r0, #52	; 0x34
 8002196:	f7ff f841 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f859 	bl	8001254 <ch395_write_data>
    ch395_write_data(prottype);
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f855 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 80021aa:	2201      	movs	r2, #1
 80021ac:	2110      	movs	r1, #16
 80021ae:	4803      	ldr	r0, [pc, #12]	; (80021bc <ch395_set_socket_prot_type+0x38>)
 80021b0:	f003 fb4a 	bl	8005848 <HAL_GPIO_WritePin>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40020000 	.word	0x40020000

080021c0 <ch395_set_socket_desport>:
 * @param       sockindex socket索引
 * @param       desprot 2字节目的端口
 * @retval      无
 */
void ch395_set_socket_desport(uint8_t sockindex, uint16_t desprot)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80bb      	strh	r3, [r7, #4]
    ch395_write_cmd(CMD30_SET_DES_PORT_SN);
 80021d0:	2032      	movs	r0, #50	; 0x32
 80021d2:	f7ff f823 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f83b 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)desprot);
 80021de:	88bb      	ldrh	r3, [r7, #4]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f836 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(desprot >> 8));
 80021e8:	88bb      	ldrh	r3, [r7, #4]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f82f 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 80021f6:	2201      	movs	r2, #1
 80021f8:	2110      	movs	r1, #16
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <ch395_set_socket_desport+0x48>)
 80021fc:	f003 fb24 	bl	8005848 <HAL_GPIO_WritePin>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40020000 	.word	0x40020000

0800220c <ch395_set_socket_sourport>:
 * @param       sockindex socket索引
 * @param       desprot 2字节源端口
 * @retval      无
 */
void ch395_set_socket_sourport(uint8_t sockindex, uint16_t surprot)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	80bb      	strh	r3, [r7, #4]
    ch395_write_cmd(CMD30_SET_SOUR_PORT_SN);
 800221c:	2033      	movs	r0, #51	; 0x33
 800221e:	f7fe fffd 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f815 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)surprot);
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f810 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(surprot >> 8));
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	b29b      	uxth	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff f809 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 8002242:	2201      	movs	r2, #1
 8002244:	2110      	movs	r1, #16
 8002246:	4803      	ldr	r0, [pc, #12]	; (8002254 <ch395_set_socket_sourport+0x48>)
 8002248:	f003 fafe 	bl	8005848 <HAL_GPIO_WritePin>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40020000 	.word	0x40020000

08002258 <ch395_send_data>:
 * @param       databuf  数据缓冲区
 * @param       len   长度
 * @retval      无
 */
void ch395_send_data(uint8_t sockindex, uint8_t *databuf, uint16_t len)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4613      	mov	r3, r2
 8002266:	80bb      	strh	r3, [r7, #4]
    uint16_t i;

    ch395_write_cmd(CMD30_WRITE_SEND_BUF_SN);
 8002268:	2039      	movs	r0, #57	; 0x39
 800226a:	f7fe ffd7 	bl	800121c <ch395_write_cmd>
    ch395_write_data((uint8_t)sockindex);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe ffef 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)len);
 8002276:	88bb      	ldrh	r3, [r7, #4]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe ffea 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(len >> 8));
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe ffe3 	bl	8001254 <ch395_write_data>

    for (i = 0; i < len; i++)
 800228e:	2300      	movs	r3, #0
 8002290:	81fb      	strh	r3, [r7, #14]
 8002292:	e009      	b.n	80022a8 <ch395_send_data+0x50>
    {
        ch395_write_data(*databuf++);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	603a      	str	r2, [r7, #0]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe ffd9 	bl	8001254 <ch395_write_data>
    for (i = 0; i < len; i++)
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	3301      	adds	r3, #1
 80022a6:	81fb      	strh	r3, [r7, #14]
 80022a8:	89fa      	ldrh	r2, [r7, #14]
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3f1      	bcc.n	8002294 <ch395_send_data+0x3c>
    }

    ch395_scs_hign;
 80022b0:	2201      	movs	r2, #1
 80022b2:	2110      	movs	r1, #16
 80022b4:	4803      	ldr	r0, [pc, #12]	; (80022c4 <ch395_send_data+0x6c>)
 80022b6:	f003 fac7 	bl	8005848 <HAL_GPIO_WritePin>
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40020000 	.word	0x40020000

080022c8 <ch395_get_recv_length>:
 * @brief       获取接收缓冲区长度
 * @param       sockindex socket索引
 * @retval      返回接收缓冲区有效长度
 */
uint16_t ch395_get_recv_length(uint8_t sockindex)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
    uint16_t i;

    ch395_write_cmd(CMD12_GET_RECV_LEN_SN);
 80022d2:	203b      	movs	r0, #59	; 0x3b
 80022d4:	f7fe ffa2 	bl	800121c <ch395_write_cmd>
    ch395_write_data((uint8_t)sockindex);
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe ffba 	bl	8001254 <ch395_write_data>
    i = ch395_read_data();
 80022e0:	f7fe ffc5 	bl	800126e <ch395_read_data>
 80022e4:	4603      	mov	r3, r0
 80022e6:	81fb      	strh	r3, [r7, #14]
    i = (uint16_t)(ch395_read_data() << 8) + i;
 80022e8:	f7fe ffc1 	bl	800126e <ch395_read_data>
 80022ec:	4603      	mov	r3, r0
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	89fb      	ldrh	r3, [r7, #14]
 80022f6:	4413      	add	r3, r2
 80022f8:	81fb      	strh	r3, [r7, #14]
    ch395_scs_hign;
 80022fa:	2201      	movs	r2, #1
 80022fc:	2110      	movs	r1, #16
 80022fe:	4804      	ldr	r0, [pc, #16]	; (8002310 <ch395_get_recv_length+0x48>)
 8002300:	f003 faa2 	bl	8005848 <HAL_GPIO_WritePin>
    return i;
 8002304:	89fb      	ldrh	r3, [r7, #14]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40020000 	.word	0x40020000

08002314 <ch395_get_recv_data>:
 * @param       len  长度
 * @param       pbuf  缓冲区
 * @retval      无
 */
void ch395_get_recv_data(uint8_t sockindex, uint16_t len, uint8_t *pbuf)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	603a      	str	r2, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
 8002320:	460b      	mov	r3, r1
 8002322:	80bb      	strh	r3, [r7, #4]
    uint16_t i;

    if (!len)return;
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d02e      	beq.n	8002388 <ch395_get_recv_data+0x74>

    ch395_write_cmd(CMD30_READ_RECV_BUF_SN);
 800232a:	203c      	movs	r0, #60	; 0x3c
 800232c:	f7fe ff76 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe ff8e 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)len);
 8002338:	88bb      	ldrh	r3, [r7, #4]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe ff89 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(len >> 8));
 8002342:	88bb      	ldrh	r3, [r7, #4]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	b29b      	uxth	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe ff82 	bl	8001254 <ch395_write_data>
    HAL_Delay(1);
 8002350:	2001      	movs	r0, #1
 8002352:	f002 f81f 	bl	8004394 <HAL_Delay>

    for (i = 0; i < len; i++)
 8002356:	2300      	movs	r3, #0
 8002358:	81fb      	strh	r3, [r7, #14]
 800235a:	e00b      	b.n	8002374 <ch395_get_recv_data+0x60>
    {
        *pbuf = ch395_read_data();
 800235c:	f7fe ff87 	bl	800126e <ch395_read_data>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	701a      	strb	r2, [r3, #0]
        pbuf++;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < len; i++)
 800236e:	89fb      	ldrh	r3, [r7, #14]
 8002370:	3301      	adds	r3, #1
 8002372:	81fb      	strh	r3, [r7, #14]
 8002374:	89fa      	ldrh	r2, [r7, #14]
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d3ef      	bcc.n	800235c <ch395_get_recv_data+0x48>
    }

    ch395_scs_hign;
 800237c:	2201      	movs	r2, #1
 800237e:	2110      	movs	r1, #16
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <ch395_get_recv_data+0x7c>)
 8002382:	f003 fa61 	bl	8005848 <HAL_GPIO_WritePin>
 8002386:	e000      	b.n	800238a <ch395_get_recv_data+0x76>
    if (!len)return;
 8002388:	bf00      	nop
}
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40020000 	.word	0x40020000

08002394 <ch395_open_socket>:
 * @brief       打开socket，此命令需要等待执行成功
 * @param       sockindex socket索引
 * @retval      返回执行结果
 */
uint8_t  ch395_open_socket(uint8_t sockindex)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
    uint8_t s = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73bb      	strb	r3, [r7, #14]
    ch395_write_cmd(CMD1W_OPEN_SOCKET_SN);
 80023a6:	2035      	movs	r0, #53	; 0x35
 80023a8:	f7fe ff38 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe ff50 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 80023b4:	2201      	movs	r2, #1
 80023b6:	2110      	movs	r1, #16
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <ch395_open_socket+0x58>)
 80023ba:	f003 fa45 	bl	8005848 <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(5);                          /* 延时查询，建议2MS以上 */
 80023be:	2005      	movs	r0, #5
 80023c0:	f001 ffe8 	bl	8004394 <HAL_Delay>
        s = ch395_get_cmd_status();           /* 不能过于频繁查询 */
 80023c4:	f7ff fde6 	bl	8001f94 <ch395_get_cmd_status>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 80023cc:	7bbb      	ldrb	r3, [r7, #14]
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d106      	bne.n	80023e0 <ch395_open_socket+0x4c>
        {
            break;        /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	73fa      	strb	r2, [r7, #15]
 80023d8:	2bc8      	cmp	r3, #200	; 0xc8
 80023da:	d9f0      	bls.n	80023be <ch395_open_socket+0x2a>
        {
            return CH395_ERR_UNKNOW; /* 超时退出 */
 80023dc:	23fa      	movs	r3, #250	; 0xfa
 80023de:	e001      	b.n	80023e4 <ch395_open_socket+0x50>
            break;        /* 如果CH395芯片返回忙状态 */
 80023e0:	bf00      	nop
        }
    }

    return s;
 80023e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40020000 	.word	0x40020000

080023f0 <ch395_close_socket>:
 * @brief       关闭socket，
 * @param       sockindex socket索引
 * @retval      返回执行结果
 */
uint8_t  ch395_close_socket(uint8_t sockindex)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
    uint8_t s = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	73bb      	strb	r3, [r7, #14]
    ch395_write_cmd(CMD1W_CLOSE_SOCKET_SN);
 8002402:	203d      	movs	r0, #61	; 0x3d
 8002404:	f7fe ff0a 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe ff22 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 8002410:	2201      	movs	r2, #1
 8002412:	2110      	movs	r1, #16
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <ch395_close_socket+0x58>)
 8002416:	f003 fa17 	bl	8005848 <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(5);                            /* 延时查询，建议2MS以上 */
 800241a:	2005      	movs	r0, #5
 800241c:	f001 ffba 	bl	8004394 <HAL_Delay>
        s = ch395_get_cmd_status();             /* 不能过于频繁查询 */
 8002420:	f7ff fdb8 	bl	8001f94 <ch395_get_cmd_status>
 8002424:	4603      	mov	r3, r0
 8002426:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	2b10      	cmp	r3, #16
 800242c:	d106      	bne.n	800243c <ch395_close_socket+0x4c>
        {
            break;          /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	73fa      	strb	r2, [r7, #15]
 8002434:	2bc8      	cmp	r3, #200	; 0xc8
 8002436:	d9f0      	bls.n	800241a <ch395_close_socket+0x2a>
        {
            return CH395_ERR_UNKNOW;  /* 超时退出 */
 8002438:	23fa      	movs	r3, #250	; 0xfa
 800243a:	e001      	b.n	8002440 <ch395_close_socket+0x50>
            break;          /* 如果CH395芯片返回忙状态 */
 800243c:	bf00      	nop
        }
    }

    return s;
 800243e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40020000 	.word	0x40020000

0800244c <ch395_tcp_connect>:
 * @brief       tcp连接，仅在tcp模式下有效，此命令需要等待执行成功
 * @param       sockindex socket索引
 * @retval      返回执行结果
 */
uint8_t ch395_tcp_connect(uint8_t sockindex)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
    uint8_t s = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	73bb      	strb	r3, [r7, #14]
    ch395_write_cmd(CMD1W_TCP_CONNECT_SN);
 800245e:	2037      	movs	r0, #55	; 0x37
 8002460:	f7fe fedc 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fef4 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 800246c:	2201      	movs	r2, #1
 800246e:	2110      	movs	r1, #16
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <ch395_tcp_connect+0x58>)
 8002472:	f003 f9e9 	bl	8005848 <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(5);                            /* 延时查询，建议2MS以上 */
 8002476:	2005      	movs	r0, #5
 8002478:	f001 ff8c 	bl	8004394 <HAL_Delay>
        s = ch395_get_cmd_status();             /* 不能过于频繁查询 */
 800247c:	f7ff fd8a 	bl	8001f94 <ch395_get_cmd_status>
 8002480:	4603      	mov	r3, r0
 8002482:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 8002484:	7bbb      	ldrb	r3, [r7, #14]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d106      	bne.n	8002498 <ch395_tcp_connect+0x4c>
        {
            break;          /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	73fa      	strb	r2, [r7, #15]
 8002490:	2bc8      	cmp	r3, #200	; 0xc8
 8002492:	d9f0      	bls.n	8002476 <ch395_tcp_connect+0x2a>
        {
            return CH395_ERR_UNKNOW;  /* 超时退出 */
 8002494:	23fa      	movs	r3, #250	; 0xfa
 8002496:	e001      	b.n	800249c <ch395_tcp_connect+0x50>
            break;          /* 如果CH395芯片返回忙状态 */
 8002498:	bf00      	nop
        }
    }

    return s;
 800249a:	7bbb      	ldrb	r3, [r7, #14]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40020000 	.word	0x40020000

080024a8 <ch395_tcp_listen>:
 * @brief       tcp监听，仅在tcp模式下有效，此命令需要等待执行成功
 * @param       sockindex socket索引
 * @retval      返回执行结果
 */
uint8_t ch395_tcp_listen(uint8_t sockindex)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
    uint8_t s = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73bb      	strb	r3, [r7, #14]
    ch395_write_cmd(CMD1W_TCP_LISTEN_SN);
 80024ba:	2036      	movs	r0, #54	; 0x36
 80024bc:	f7fe feae 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fec6 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 80024c8:	2201      	movs	r2, #1
 80024ca:	2110      	movs	r1, #16
 80024cc:	480c      	ldr	r0, [pc, #48]	; (8002500 <ch395_tcp_listen+0x58>)
 80024ce:	f003 f9bb 	bl	8005848 <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(5);                           /* 延时查询，建议2MS以上 */
 80024d2:	2005      	movs	r0, #5
 80024d4:	f001 ff5e 	bl	8004394 <HAL_Delay>
        s = ch395_get_cmd_status();            /* 不能过于频繁查询 */
 80024d8:	f7ff fd5c 	bl	8001f94 <ch395_get_cmd_status>
 80024dc:	4603      	mov	r3, r0
 80024de:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 80024e0:	7bbb      	ldrb	r3, [r7, #14]
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d106      	bne.n	80024f4 <ch395_tcp_listen+0x4c>
        {
            break;         /* 如果CH395芯片返回忙状态 */
        }

        if (i++ > 200)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	73fa      	strb	r2, [r7, #15]
 80024ec:	2bc8      	cmp	r3, #200	; 0xc8
 80024ee:	d9f0      	bls.n	80024d2 <ch395_tcp_listen+0x2a>
        {
            return CH395_ERR_UNKNOW; /* 超时退出 */
 80024f0:	23fa      	movs	r3, #250	; 0xfa
 80024f2:	e001      	b.n	80024f8 <ch395_tcp_listen+0x50>
            break;         /* 如果CH395芯片返回忙状态 */
 80024f4:	bf00      	nop
        }
    }

    return s;
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40020000 	.word	0x40020000

08002504 <ch395_get_socket_int>:
 * @brief       获取socket n的中断状态
 * @param       sockindex   socket索引
 * @retval      中断状态
 */
uint8_t ch395_get_socket_int(uint8_t sockindex)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
    uint8_t intstatus;
    ch395_write_cmd(CMD11_GET_INT_STATUS_SN);
 800250e:	2030      	movs	r0, #48	; 0x30
 8002510:	f7fe fe84 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fe9c 	bl	8001254 <ch395_write_data>
    HAL_Delay(2);
 800251c:	2002      	movs	r0, #2
 800251e:	f001 ff39 	bl	8004394 <HAL_Delay>
    intstatus = ch395_read_data();
 8002522:	f7fe fea4 	bl	800126e <ch395_read_data>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]
    ch395_scs_hign;
 800252a:	2201      	movs	r2, #1
 800252c:	2110      	movs	r1, #16
 800252e:	4804      	ldr	r0, [pc, #16]	; (8002540 <ch395_get_socket_int+0x3c>)
 8002530:	f003 f98a 	bl	8005848 <HAL_GPIO_WritePin>
    return intstatus;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40020000 	.word	0x40020000

08002544 <ch395_dhcp_enable>:
 *   @arg       1:启动dhcp
 *   @arg       0：停止dhcp
 * @retval      执行状态
 */
uint8_t  ch395_dhcp_enable(uint8_t flag)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
    uint8_t s;
    ch395_write_cmd(CMD10_DHCP_ENABLE);
 8002552:	2041      	movs	r0, #65	; 0x41
 8002554:	f7fe fe62 	bl	800121c <ch395_write_cmd>
    ch395_write_data(flag);
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fe7a 	bl	8001254 <ch395_write_data>
    ch395_scs_hign;
 8002560:	2201      	movs	r2, #1
 8002562:	2110      	movs	r1, #16
 8002564:	480c      	ldr	r0, [pc, #48]	; (8002598 <ch395_dhcp_enable+0x54>)
 8002566:	f003 f96f 	bl	8005848 <HAL_GPIO_WritePin>

    while (1)
    {
        HAL_Delay(20);
 800256a:	2014      	movs	r0, #20
 800256c:	f001 ff12 	bl	8004394 <HAL_Delay>
        s = ch395_get_cmd_status();            /* 不能过于频繁查询 */
 8002570:	f7ff fd10 	bl	8001f94 <ch395_get_cmd_status>
 8002574:	4603      	mov	r3, r0
 8002576:	73bb      	strb	r3, [r7, #14]

        if (s != CH395_ERR_BUSY)
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d106      	bne.n	800258c <ch395_dhcp_enable+0x48>
        {
            break;         /* 如果ch395芯片返回忙状态 */
        }

        if (i++ > 200)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	73fa      	strb	r2, [r7, #15]
 8002584:	2bc8      	cmp	r3, #200	; 0xc8
 8002586:	d9f0      	bls.n	800256a <ch395_dhcp_enable+0x26>
        {
            return CH395_ERR_UNKNOW; /* 超时退出 */
 8002588:	23fa      	movs	r3, #250	; 0xfa
 800258a:	e001      	b.n	8002590 <ch395_dhcp_enable+0x4c>
            break;         /* 如果ch395芯片返回忙状态 */
 800258c:	bf00      	nop
        }
    }

    return s;
 800258e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40020000 	.word	0x40020000

0800259c <ch395_get_dhcp_status>:
 * @brief       获取dhcp状态
 * @param       无
 * @retval      dhcp状态，0为成功，其他值表示错误
 */
uint8_t ch395_get_dhcp_status(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
    uint8_t status;
    ch395_write_cmd(CMD01_GET_DHCP_STATUS);
 80025a2:	2042      	movs	r0, #66	; 0x42
 80025a4:	f7fe fe3a 	bl	800121c <ch395_write_cmd>
    status = ch395_read_data();
 80025a8:	f7fe fe61 	bl	800126e <ch395_read_data>
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
    ch395_scs_hign;
 80025b0:	2201      	movs	r2, #1
 80025b2:	2110      	movs	r1, #16
 80025b4:	4803      	ldr	r0, [pc, #12]	; (80025c4 <ch395_get_dhcp_status+0x28>)
 80025b6:	f003 f947 	bl	8005848 <HAL_GPIO_WritePin>
    return status;
 80025ba:	79fb      	ldrb	r3, [r7, #7]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40020000 	.word	0x40020000

080025c8 <ch395_get_ipinf>:
 * @brief       获取ip，子网掩码和网关地址
 * @param       sockindex socket索引
 * @retval      12个字节的ip,子网掩码和网关地址
 */
void ch395_get_ipinf(uint8_t *addr)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    uint8_t i;
    ch395_write_cmd(CMD014_GET_IP_INF);
 80025d0:	2043      	movs	r0, #67	; 0x43
 80025d2:	f7fe fe23 	bl	800121c <ch395_write_cmd>

    for (i = 0; i < 20; i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e009      	b.n	80025f0 <ch395_get_ipinf+0x28>
    {
        *addr++ = ch395_read_data();
 80025dc:	687c      	ldr	r4, [r7, #4]
 80025de:	1c63      	adds	r3, r4, #1
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	f7fe fe44 	bl	800126e <ch395_read_data>
 80025e6:	4603      	mov	r3, r0
 80025e8:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < 20; i++)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	3301      	adds	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b13      	cmp	r3, #19
 80025f4:	d9f2      	bls.n	80025dc <ch395_get_ipinf+0x14>
    }

    ch395_scs_hign;
 80025f6:	2201      	movs	r2, #1
 80025f8:	2110      	movs	r1, #16
 80025fa:	4803      	ldr	r0, [pc, #12]	; (8002608 <ch395_get_ipinf+0x40>)
 80025fc:	f003 f924 	bl	8005848 <HAL_GPIO_WritePin>
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	40020000 	.word	0x40020000

0800260c <ch395_set_socket_recv_buf>:
 * @param       startblk   起始地
 * @param       单位缓冲区个数 ，单位为512字节
 * @retval      无
 */
void ch395_set_socket_recv_buf(uint8_t sockindex, uint8_t startblk, uint8_t blknum)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
 8002616:	460b      	mov	r3, r1
 8002618:	71bb      	strb	r3, [r7, #6]
 800261a:	4613      	mov	r3, r2
 800261c:	717b      	strb	r3, [r7, #5]
    ch395_write_cmd(CMD30_SET_RECV_BUF);
 800261e:	2052      	movs	r0, #82	; 0x52
 8002620:	f7fe fdfc 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fe14 	bl	8001254 <ch395_write_data>
    ch395_write_data(startblk);
 800262c:	79bb      	ldrb	r3, [r7, #6]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fe10 	bl	8001254 <ch395_write_data>
    ch395_write_data(blknum);
 8002634:	797b      	ldrb	r3, [r7, #5]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fe0c 	bl	8001254 <ch395_write_data>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <ch395_set_socket_send_buf>:
 * @param       startblk   起始地址
 * @param       blknum     单位缓冲区个数
 * @retval      无
 */
void ch395_set_socket_send_buf(uint8_t sockindex, uint8_t startblk, uint8_t blknum)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
 800264e:	460b      	mov	r3, r1
 8002650:	71bb      	strb	r3, [r7, #6]
 8002652:	4613      	mov	r3, r2
 8002654:	717b      	strb	r3, [r7, #5]
    ch395_write_cmd(CMD30_SET_SEND_BUF);
 8002656:	2053      	movs	r0, #83	; 0x53
 8002658:	f7fe fde0 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fdf8 	bl	8001254 <ch395_write_data>
    ch395_write_data(startblk);
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fdf4 	bl	8001254 <ch395_write_data>
    ch395_write_data(blknum);
 800266c:	797b      	ldrb	r3, [r7, #5]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fdf0 	bl	8001254 <ch395_write_data>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <ch395_cmd_get_glob_int_status_all>:
 * @brief       获取全局中断状态，收到此命令ch395自动取消中断,0x44及以上版本使用
 * @param       无
 * @retval      返回当前的全局中断状态
 */
uint16_t ch395_cmd_get_glob_int_status_all(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
    uint16_t init_status;
    ch395_write_cmd(CMD02_GET_GLOB_INT_STATUS_ALL);
 8002682:	2019      	movs	r0, #25
 8002684:	f7fe fdca 	bl	800121c <ch395_write_cmd>
    HAL_Delay(2);
 8002688:	2002      	movs	r0, #2
 800268a:	f001 fe83 	bl	8004394 <HAL_Delay>
    init_status = ch395_read_data();
 800268e:	f7fe fdee 	bl	800126e <ch395_read_data>
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
    init_status = (uint16_t)(ch395_read_data() << 8) + init_status;
 8002696:	f7fe fdea 	bl	800126e <ch395_read_data>
 800269a:	4603      	mov	r3, r0
 800269c:	b29b      	uxth	r3, r3
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	4413      	add	r3, r2
 80026a6:	80fb      	strh	r3, [r7, #6]
    ch395_scs_hign;
 80026a8:	2201      	movs	r2, #1
 80026aa:	2110      	movs	r1, #16
 80026ac:	4803      	ldr	r0, [pc, #12]	; (80026bc <ch395_cmd_get_glob_int_status_all+0x40>)
 80026ae:	f003 f8cb 	bl	8005848 <HAL_GPIO_WritePin>
    return  init_status;
 80026b2:	88fb      	ldrh	r3, [r7, #6]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40020000 	.word	0x40020000

080026c0 <ch395_set_keeplive>:
 * @param       sockindex socket号
 * @param       cmd 0：关闭 1：开启
 * @retval      无
 */
void ch395_set_keeplive(uint8_t sockindex, uint8_t cmd)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	460a      	mov	r2, r1
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71bb      	strb	r3, [r7, #6]
    ch395_write_cmd(CMD20_SET_KEEP_LIVE_SN);
 80026d0:	2059      	movs	r0, #89	; 0x59
 80026d2:	f7fe fda3 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fdbb 	bl	8001254 <ch395_write_data>
    ch395_write_data(cmd);
 80026de:	79bb      	ldrb	r3, [r7, #6]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fdb7 	bl	8001254 <ch395_write_data>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <ch395_keeplive_cnt>:
 * @brief       设置keepalive重试次数
 * @param       cnt 重试次数（）
 * @retval      无
 */
void ch395_keeplive_cnt(uint8_t cnt)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	71fb      	strb	r3, [r7, #7]
    ch395_write_cmd(CMD10_SET_KEEP_LIVE_CNT);
 80026f8:	2058      	movs	r0, #88	; 0x58
 80026fa:	f7fe fd8f 	bl	800121c <ch395_write_cmd>
    ch395_write_data(cnt);
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fda7 	bl	8001254 <ch395_write_data>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <ch395_keeplive_idle>:
 * @brief       设置keeplive空闲
 * @param       idle 空闲时间（单位：ms）
 * @retval      无
 */
void ch395_keeplive_idle(uint32_t idle)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
    ch395_write_cmd(CMD40_SET_KEEP_LIVE_IDLE);
 8002716:	2056      	movs	r0, #86	; 0x56
 8002718:	f7fe fd80 	bl	800121c <ch395_write_cmd>
    ch395_write_data((uint8_t)idle);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fd97 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)((uint16_t)idle >> 8));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	b29b      	uxth	r3, r3
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	b29b      	uxth	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fd8f 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(idle >> 16));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fd89 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(idle >> 24));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0e1b      	lsrs	r3, r3, #24
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fd83 	bl	8001254 <ch395_write_data>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <ch395_keeplive_intvl>:
 * @brief       设置keeplive间隔时间
 * @param       intvl 间隔时间（单位：ms）
 * @retval      无
 */
void ch395_keeplive_intvl(uint32_t intvl)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
    ch395_write_cmd(CMD40_SET_KEEP_LIVE_INTVL);
 800275e:	2057      	movs	r0, #87	; 0x57
 8002760:	f7fe fd5c 	bl	800121c <ch395_write_cmd>
    ch395_write_data((uint8_t)intvl);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe fd73 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)((uint16_t)intvl >> 8));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	b29b      	uxth	r3, r3
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b29b      	uxth	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fd6b 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(intvl >> 16));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fd65 	bl	8001254 <ch395_write_data>
    ch395_write_data((uint8_t)(intvl >> 24));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0e1b      	lsrs	r3, r3, #24
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fd5f 	bl	8001254 <ch395_write_data>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <ch395_setttl_num>:
 * @param       ssockindex socket号
 * @param       ttlnum:ttl数
 * @retval      无
 */
void ch395_setttl_num(uint8_t sockindex, uint8_t ttlnum)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	460a      	mov	r2, r1
 80027a8:	71fb      	strb	r3, [r7, #7]
 80027aa:	4613      	mov	r3, r2
 80027ac:	71bb      	strb	r3, [r7, #6]
    ch395_write_cmd(CMD20_SET_TTL);
 80027ae:	2051      	movs	r0, #81	; 0x51
 80027b0:	f7fe fd34 	bl	800121c <ch395_write_cmd>
    ch395_write_data(sockindex);
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fd4c 	bl	8001254 <ch395_write_data>
    ch395_write_data(ttlnum);
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fd48 	bl	8001254 <ch395_write_data>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <MX_DMA_Init+0x78>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <MX_DMA_Init+0x78>)
 80027dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <MX_DMA_Init+0x78>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_DMA_Init+0x78>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a13      	ldr	r2, [pc, #76]	; (8002844 <MX_DMA_Init+0x78>)
 80027f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_DMA_Init+0x78>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	200b      	movs	r0, #11
 8002810:	f002 fab1 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002814:	200b      	movs	r0, #11
 8002816:	f002 faca 	bl	8004dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	200c      	movs	r0, #12
 8002820:	f002 faa9 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002824:	200c      	movs	r0, #12
 8002826:	f002 fac2 	bl	8004dae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	2038      	movs	r0, #56	; 0x38
 8002830:	f002 faa1 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002834:	2038      	movs	r0, #56	; 0x38
 8002836:	f002 faba 	bl	8004dae <HAL_NVIC_EnableIRQ>

}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <MX_GPIO_Init+0x138>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a46      	ldr	r2, [pc, #280]	; (8002980 <MX_GPIO_Init+0x138>)
 8002868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b44      	ldr	r3, [pc, #272]	; (8002980 <MX_GPIO_Init+0x138>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b40      	ldr	r3, [pc, #256]	; (8002980 <MX_GPIO_Init+0x138>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a3f      	ldr	r2, [pc, #252]	; (8002980 <MX_GPIO_Init+0x138>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <MX_GPIO_Init+0x138>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b39      	ldr	r3, [pc, #228]	; (8002980 <MX_GPIO_Init+0x138>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a38      	ldr	r2, [pc, #224]	; (8002980 <MX_GPIO_Init+0x138>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <MX_GPIO_Init+0x138>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	4b32      	ldr	r3, [pc, #200]	; (8002980 <MX_GPIO_Init+0x138>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a31      	ldr	r2, [pc, #196]	; (8002980 <MX_GPIO_Init+0x138>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <MX_GPIO_Init+0x138>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin|LED1_Pin
 80028ce:	2201      	movs	r2, #1
 80028d0:	2137      	movs	r1, #55	; 0x37
 80028d2:	482c      	ldr	r0, [pc, #176]	; (8002984 <MX_GPIO_Init+0x13c>)
 80028d4:	f002 ffb8 	bl	8005848 <HAL_GPIO_WritePin>
                          |LED0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH395_CS_GPIO_Port, CH395_CS_Pin, GPIO_PIN_RESET);
 80028d8:	2200      	movs	r2, #0
 80028da:	2110      	movs	r1, #16
 80028dc:	482a      	ldr	r0, [pc, #168]	; (8002988 <MX_GPIO_Init+0x140>)
 80028de:	f002 ffb3 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH395_RST_Pin|SPI2_CS1_Pin, GPIO_PIN_RESET);
 80028e2:	2200      	movs	r2, #0
 80028e4:	f241 0101 	movw	r1, #4097	; 0x1001
 80028e8:	4828      	ldr	r0, [pc, #160]	; (800298c <MX_GPIO_Init+0x144>)
 80028ea:	f002 ffad 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin|LED1_Pin
 80028ee:	2337      	movs	r3, #55	; 0x37
 80028f0:	617b      	str	r3, [r7, #20]
                          |LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	481f      	ldr	r0, [pc, #124]	; (8002984 <MX_GPIO_Init+0x13c>)
 8002906:	f002 fe0b 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CH395_CS_Pin;
 800290a:	2310      	movs	r3, #16
 800290c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002916:	2301      	movs	r3, #1
 8002918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH395_CS_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4819      	ldr	r0, [pc, #100]	; (8002988 <MX_GPIO_Init+0x140>)
 8002922:	f002 fdfd 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CH395_RST_Pin;
 8002926:	2301      	movs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	2301      	movs	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800292e:	2301      	movs	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002932:	2302      	movs	r3, #2
 8002934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH395_RST_GPIO_Port, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4813      	ldr	r0, [pc, #76]	; (800298c <MX_GPIO_Init+0x144>)
 800293e:	f002 fdef 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 8002942:	2302      	movs	r3, #2
 8002944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <MX_GPIO_Init+0x144>)
 8002956:	f002 fde3 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin;
 800295a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002960:	2301      	movs	r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS1_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	4806      	ldr	r0, [pc, #24]	; (800298c <MX_GPIO_Init+0x144>)
 8002974:	f002 fdd4 	bl	8005520 <HAL_GPIO_Init>

}
 8002978:	bf00      	nop
 800297a:	3728      	adds	r7, #40	; 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	40020800 	.word	0x40020800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400

08002990 <HAL_I2C_MemRxCpltCallback>:
/* USER CODE BEGIN 0 */

extern uint8_t IIC_State;

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <HAL_I2C_MemRxCpltCallback+0x24>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d102      	bne.n	80029a6 <HAL_I2C_MemRxCpltCallback+0x16>
	{
		IIC_State = 1;
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_I2C_MemRxCpltCallback+0x28>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
	}
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000054c 	.word	0x2000054c
 80029b8:	20000668 	.word	0x20000668

080029bc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <MX_I2C1_Init+0x54>)
 80029c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <MX_I2C1_Init+0x58>)
 80029ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <MX_I2C1_Init+0x50>)
 80029fa:	f002 ff3f 	bl	800587c <HAL_I2C_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a04:	f000 fd42 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	2000054c 	.word	0x2000054c
 8002a10:	40005400 	.word	0x40005400
 8002a14:	000186a0 	.word	0x000186a0

08002a18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a47      	ldr	r2, [pc, #284]	; (8002b54 <HAL_I2C_MspInit+0x13c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	f040 8087 	bne.w	8002b4a <HAL_I2C_MspInit+0x132>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	4b45      	ldr	r3, [pc, #276]	; (8002b58 <HAL_I2C_MspInit+0x140>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4a44      	ldr	r2, [pc, #272]	; (8002b58 <HAL_I2C_MspInit+0x140>)
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <HAL_I2C_MspInit+0x140>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a58:	23c0      	movs	r3, #192	; 0xc0
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a5c:	2312      	movs	r3, #18
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a68:	2304      	movs	r3, #4
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	483a      	ldr	r0, [pc, #232]	; (8002b5c <HAL_I2C_MspInit+0x144>)
 8002a74:	f002 fd54 	bl	8005520 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <HAL_I2C_MspInit+0x140>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	4a35      	ldr	r2, [pc, #212]	; (8002b58 <HAL_I2C_MspInit+0x140>)
 8002a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a86:	6413      	str	r3, [r2, #64]	; 0x40
 8002a88:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HAL_I2C_MspInit+0x140>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002a94:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002a96:	4a33      	ldr	r2, [pc, #204]	; (8002b64 <HAL_I2C_MspInit+0x14c>)
 8002a98:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aae:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab6:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002ac2:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002ad4:	4822      	ldr	r0, [pc, #136]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002ad6:	f002 f985 	bl	8004de4 <HAL_DMA_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002ae0:	f000 fcd4 	bl	800348c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_I2C_MspInit+0x148>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_I2C_MspInit+0x154>)
 8002af4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b02:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b2e:	480e      	ldr	r0, [pc, #56]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b30:	f002 f958 	bl	8004de4 <HAL_DMA_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002b3a:	f000 fca7 	bl	800348c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34
 8002b44:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_I2C_MspInit+0x150>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40005400 	.word	0x40005400
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	200005a0 	.word	0x200005a0
 8002b64:	40026010 	.word	0x40026010
 8002b68:	20000600 	.word	0x20000600
 8002b6c:	40026028 	.word	0x40026028

08002b70 <LIS2DH12_ReadAcc_Init>:
 *      Author: 15300
 */
#include "lis2dh12.h"

void LIS2DH12_ReadAcc_Init(I2C_HandleTypeDef *hi2c)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	6078      	str	r0, [r7, #4]
	uint8_t ctrlreg1_addr_data[2] = {0x20, 0x9f};
 8002b78:	f649 7320 	movw	r3, #40736	; 0x9f20
 8002b7c:	81bb      	strh	r3, [r7, #12]
	uint8_t ctrlreg4_addr_data[2] = {0x23, 0x00};
 8002b7e:	2323      	movs	r3, #35	; 0x23
 8002b80:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Master_Transmit(hi2c, LIS2DH12_Addr_SD0_SA0_0, ctrlreg1_addr_data, 2, HAL_MAX_DELAY);
 8002b82:	f107 020c 	add.w	r2, r7, #12
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	2130      	movs	r1, #48	; 0x30
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f002 ffb7 	bl	8005b04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, LIS2DH12_Addr_SD0_SA0_0, ctrlreg4_addr_data, 2, HAL_MAX_DELAY);
 8002b96:	f107 0208 	add.w	r2, r7, #8
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	2130      	movs	r1, #48	; 0x30
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f002 ffad 	bl	8005b04 <HAL_I2C_Master_Transmit>
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <LIS2DH12_ReadAccall>:
{
	HAL_I2C_Master_Receive_DMA(hi2c, LIS2DH12_Addr_SD0_SA0_0, value, 1);
}

void LIS2DH12_ReadAccall(I2C_HandleTypeDef *hi2c, uint8_t *value)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b092      	sub	sp, #72	; 0x48
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	static uint8_t accall_addr = 0xa8;
	char message[50] = {0};
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	f107 0310 	add.w	r3, r7, #16
 8002bc6:	222e      	movs	r2, #46	; 0x2e
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f006 fd8e 	bl	80096ec <memset>

	status = HAL_I2C_Mem_Read_DMA(hi2c, LIS2DH12_Addr_SD0_SA0_0, accall_addr, I2C_MEMADD_SIZE_8BIT, value, 6);
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <LIS2DH12_ReadAccall+0x44>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2301      	movs	r3, #1
 8002be0:	2130      	movs	r1, #48	; 0x30
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f003 f88c 	bl	8005d00 <HAL_I2C_Mem_Read_DMA>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//	else if(status == HAL_TIMEOUT)
//	{
//		sprintf(message, "i2c timeout!\r\n");
//		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
//	}
}
 8002bee:	bf00      	nop
 8002bf0:	3740      	adds	r7, #64	; 0x40
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000

08002bfc <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a25      	ldr	r2, [pc, #148]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d140      	bne.n	8002c8e <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		int16_t *dataptr_x;
		int16_t *dataptr_y;

		if(iic_switch == 1) {
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PeriodElapsedCallback+0x22>
			dataptr_x = iic_accx_buf_1;
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002c16:	617b      	str	r3, [r7, #20]
			dataptr_y = iic_accy_buf_1;
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	e007      	b.n	8002c2e <HAL_TIM_PeriodElapsedCallback+0x32>
		}
		else if(iic_switch == 2) {
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d103      	bne.n	8002c2e <HAL_TIM_PeriodElapsedCallback+0x32>
			dataptr_x = iic_accx_buf_2;
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c28:	617b      	str	r3, [r7, #20]
			dataptr_y = iic_accy_buf_2;
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002c2c:	613b      	str	r3, [r7, #16]
		}
		else {
			*(dataptr_x + iic_num) = pre_accx;
			*(dataptr_y + iic_num) = pre_accy;
		}*/
		*(dataptr_x + iic_num) = 0;
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4413      	add	r3, r2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	801a      	strh	r2, [r3, #0]
		*(dataptr_y + iic_num) = 0;
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	801a      	strh	r2, [r3, #0]

		iic_num++;
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002c54:	801a      	strh	r2, [r3, #0]

		int16_t *dataptr_z;

		if(adc_switch == 1) {
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_TIM_PeriodElapsedCallback+0x68>
			dataptr_z = adc_accz_buf_1;
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e005      	b.n	8002c70 <HAL_TIM_PeriodElapsedCallback+0x74>
		}
		else if(adc_switch == 2) {
 8002c64:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIM_PeriodElapsedCallback+0x74>
			dataptr_z = adc_accz_buf_2;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002c6e:	60fb      	str	r3, [r7, #12]
		}
		*(dataptr_z + adc_num) = adc_buf[1];
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002c72:	8859      	ldrh	r1, [r3, #2]
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	b20a      	sxth	r2, r1
 8002c80:	801a      	strh	r2, [r3, #0]

		adc_num++;
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c8c:	801a      	strh	r2, [r3, #0]
	}
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	2000a208 	.word	0x2000a208
 8002ca0:	2000002d 	.word	0x2000002d
 8002ca4:	200062a8 	.word	0x200062a8
 8002ca8:	200081e8 	.word	0x200081e8
 8002cac:	20007248 	.word	0x20007248
 8002cb0:	20009188 	.word	0x20009188
 8002cb4:	20004366 	.word	0x20004366
 8002cb8:	2000002c 	.word	0x2000002c
 8002cbc:	20004368 	.word	0x20004368
 8002cc0:	20005308 	.word	0x20005308
 8002cc4:	20000660 	.word	0x20000660
 8002cc8:	20004364 	.word	0x20004364
 8002ccc:	00000000 	.word	0x00000000

08002cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cd4:	b095      	sub	sp, #84	; 0x54
 8002cd6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cd8:	f001 faea 	bl	80042b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cdc:	f000 fb6c 	bl	80033b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ce0:	f7ff fdb2 	bl	8002848 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ce4:	f7ff fd72 	bl	80027cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002ce8:	f001 f98e 	bl	8004008 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002cec:	f7ff fe66 	bl	80029bc <MX_I2C1_Init>
  MX_SPI2_Init();
 8002cf0:	f000 fee8 	bl	8003ac4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002cf4:	f000 feb0 	bl	8003a58 <MX_SPI1_Init>
  MX_ADC1_Init();
 8002cf8:	f7fe f99a 	bl	8001030 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002cfc:	f001 f914 	bl	8003f28 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Flash Init
  __HAL_SPI_ENABLE(&hspi2);
 8002d00:	4b80      	ldr	r3, [pc, #512]	; (8002f04 <main+0x234>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <main+0x234>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0e:	601a      	str	r2, [r3, #0]
  SPI2_ReadWriteByte(0Xff);
 8002d10:	20ff      	movs	r0, #255	; 0xff
 8002d12:	f000 ffa1 	bl	8003c58 <SPI2_ReadWriteByte>
  W25QXX_Init();
 8002d16:	f001 f9e9 	bl	80040ec <W25QXX_Init>
  while(W25QXX_ReadID() != W25Q128) {
 8002d1a:	e014      	b.n	8002d46 <main+0x76>
	  printf("Flash Error!!\r\n");
 8002d1c:	487a      	ldr	r0, [pc, #488]	; (8002f08 <main+0x238>)
 8002d1e:	f006 fbb7 	bl	8009490 <puts>
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8002d22:	2201      	movs	r2, #1
 8002d24:	2120      	movs	r1, #32
 8002d26:	4879      	ldr	r0, [pc, #484]	; (8002f0c <main+0x23c>)
 8002d28:	f002 fd8e 	bl	8005848 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d30:	f001 fb30 	bl	8004394 <HAL_Delay>
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2120      	movs	r1, #32
 8002d38:	4874      	ldr	r0, [pc, #464]	; (8002f0c <main+0x23c>)
 8002d3a:	f002 fd85 	bl	8005848 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002d3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d42:	f001 fb27 	bl	8004394 <HAL_Delay>
  while(W25QXX_ReadID() != W25Q128) {
 8002d46:	f001 fa51 	bl	80041ec <W25QXX_ReadID>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f64e 7317 	movw	r3, #61207	; 0xef17
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d1e2      	bne.n	8002d1c <main+0x4c>
  }

  // ADC Init (ADXL1002 + NTC)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, (uint32_t)2);
 8002d56:	2202      	movs	r2, #2
 8002d58:	496d      	ldr	r1, [pc, #436]	; (8002f10 <main+0x240>)
 8002d5a:	486e      	ldr	r0, [pc, #440]	; (8002f14 <main+0x244>)
 8002d5c:	f001 fb82 	bl	8004464 <HAL_ADC_Start_DMA>

  // Lis2dh12 Init (IIC + DMA)
  HAL_Delay(10);
 8002d60:	200a      	movs	r0, #10
 8002d62:	f001 fb17 	bl	8004394 <HAL_Delay>
  LIS2DH12_ReadAcc_Init(&hi2c1);
 8002d66:	486c      	ldr	r0, [pc, #432]	; (8002f18 <main+0x248>)
 8002d68:	f7ff ff02 	bl	8002b70 <LIS2DH12_ReadAcc_Init>
  LIS2DH12_ReadAccall(&hi2c1, acc_all);
 8002d6c:	496b      	ldr	r1, [pc, #428]	; (8002f1c <main+0x24c>)
 8002d6e:	486a      	ldr	r0, [pc, #424]	; (8002f18 <main+0x248>)
 8002d70:	f7ff ff20 	bl	8002bb4 <LIS2DH12_ReadAccall>
  HAL_Delay(10);
 8002d74:	200a      	movs	r0, #10
 8002d76:	f001 fb0d 	bl	8004394 <HAL_Delay>

  // Sensor Correct
  Com_Value_Init_DMA();
 8002d7a:	f000 fc29 	bl	80035d0 <Com_Value_Init_DMA>

  // CH395 TCP Init
  __HAL_SPI_ENABLE(&hspi1);
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <main+0x250>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <main+0x250>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8c:	601a      	str	r2, [r3, #0]
  spi1_read_write_byte(0Xff);
 8002d8e:	20ff      	movs	r0, #255	; 0xff
 8002d90:	f000 ff4c 	bl	8003c2c <spi1_read_write_byte>
  ch395_hardware_init();
 8002d94:	f7fe fca0 	bl	80016d8 <ch395_hardware_init>
  do {
	  ch395q_handler();
 8002d98:	f7fe fee4 	bl	8001b64 <ch395q_handler>
  } while(g_ch395q_sta.dhcp_status == DHCP_STA);                                                                       /* 获取DHCP */
 8002d9c:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <main+0x254>)
 8002d9e:	789b      	ldrb	r3, [r3, #2]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d0f9      	beq.n	8002d98 <main+0xc8>

  cha95_sockct_sta[0].socket_enable = CH395Q_ENABLE;                                                                  /* 使能socket对 */
 8002da4:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <main+0x258>)
 8002da6:	2202      	movs	r2, #2
 8002da8:	701a      	strb	r2, [r3, #0]
  cha95_sockct_sta[0].socket_index = CH395Q_SOCKET_0;                                                                 /* 设置socket对 */
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <main+0x258>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	705a      	strb	r2, [r3, #1]
 8002db0:	4b5e      	ldr	r3, [pc, #376]	; (8002f2c <main+0x25c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
  memcpy(cha95_sockct_sta[0].des_ip, ch395_des_ipaddr, sizeof(cha95_sockct_sta[0].des_ip));                           /* 设置目标IP地址 */
 8002db4:	4a5c      	ldr	r2, [pc, #368]	; (8002f28 <main+0x258>)
 8002db6:	f8c2 3003 	str.w	r3, [r2, #3]
 8002dba:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <main+0x260>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
  memcpy(cha95_sockct_sta[0].net_config.ipaddr, ch395_ipaddr, sizeof(cha95_sockct_sta[0].net_config.ipaddr));         /* 设置静态本地IP地址 */
 8002dbe:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <main+0x258>)
 8002dc0:	6353      	str	r3, [r2, #52]	; 0x34
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <main+0x264>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
  memcpy(cha95_sockct_sta[0].net_config.gwipaddr, ch395_gw_ipaddr, sizeof(cha95_sockct_sta[0].net_config.gwipaddr));  /* 设置静态网关IP地址 */
 8002dc6:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <main+0x258>)
 8002dc8:	6393      	str	r3, [r2, #56]	; 0x38
 8002dca:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <main+0x268>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
  memcpy(cha95_sockct_sta[0].net_config.maskaddr, ch395_ipmask, sizeof(cha95_sockct_sta[0].net_config.maskaddr));     /* 设置静态子网掩码地址 */
 8002dce:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <main+0x258>)
 8002dd0:	63d3      	str	r3, [r2, #60]	; 0x3c
  memcpy(cha95_sockct_sta[0].net_config.macaddr, ch395_macaddr, sizeof(cha95_sockct_sta[0].net_config.macaddr));      /* 设置静态MAC地址 */
 8002dd2:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <main+0x258>)
 8002dd4:	4a59      	ldr	r2, [pc, #356]	; (8002f3c <main+0x26c>)
 8002dd6:	3340      	adds	r3, #64	; 0x40
 8002dd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ddc:	6018      	str	r0, [r3, #0]
 8002dde:	3304      	adds	r3, #4
 8002de0:	8019      	strh	r1, [r3, #0]
  cha95_sockct_sta[0].des_port = ch395_des_port;                                                                      /* 目标端口 */
 8002de2:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <main+0x270>)
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <main+0x258>)
 8002de8:	811a      	strh	r2, [r3, #8]
  cha95_sockct_sta[0].sour_port = 8080;                                                                               /* 源端口 */
 8002dea:	4b4f      	ldr	r3, [pc, #316]	; (8002f28 <main+0x258>)
 8002dec:	f641 7290 	movw	r2, #8080	; 0x1f90
 8002df0:	815a      	strh	r2, [r3, #10]
  cha95_sockct_sta[0].proto = CH395Q_SOCKET_TCP_CLIENT;                                                               /* 设置协议 */
 8002df2:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <main+0x258>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	709a      	strb	r2, [r3, #2]
  cha95_sockct_sta[0].send.buf = socket0_send_buf;                                                                    /* 发送数据 */
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <main+0x258>)
 8002dfa:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <main+0x274>)
 8002dfc:	60da      	str	r2, [r3, #12]
  cha95_sockct_sta[0].send.size = sizeof(socket0_send_buf);                                                           /* 发送数据大小 */
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <main+0x258>)
 8002e00:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8002e04:	611a      	str	r2, [r3, #16]
  cha95_sockct_sta[0].recv.buf =  socket0_recv_buf;                                                                   /* 接收数据缓冲区 */
 8002e06:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <main+0x258>)
 8002e08:	4a4f      	ldr	r2, [pc, #316]	; (8002f48 <main+0x278>)
 8002e0a:	619a      	str	r2, [r3, #24]
  cha95_sockct_sta[0].recv.size = sizeof(socket0_recv_buf);                                                           /* 接收数据大小 */
 8002e0c:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <main+0x258>)
 8002e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e12:	61da      	str	r2, [r3, #28]
  ch395q_socket_config(&cha95_sockct_sta[0]);                                                                         /* 配置socket参数 */
 8002e14:	4844      	ldr	r0, [pc, #272]	; (8002f28 <main+0x258>)
 8002e16:	f7fe fa47 	bl	80012a8 <ch395q_socket_config>

  sprintf(socket0_send_buf, "%s", rtimrequest);
 8002e1a:	4a4c      	ldr	r2, [pc, #304]	; (8002f4c <main+0x27c>)
 8002e1c:	494c      	ldr	r1, [pc, #304]	; (8002f50 <main+0x280>)
 8002e1e:	4849      	ldr	r0, [pc, #292]	; (8002f44 <main+0x274>)
 8002e20:	f006 fb3e 	bl	80094a0 <siprintf>
  uint8_t *isFound;
  do {
	  printf("rtim requesting...\r\n");
 8002e24:	484b      	ldr	r0, [pc, #300]	; (8002f54 <main+0x284>)
 8002e26:	f006 fb33 	bl	8009490 <puts>
	  ch395_send_data(0, (uint8_t *)socket0_send_buf, strlen((char *)socket0_send_buf));
 8002e2a:	4846      	ldr	r0, [pc, #280]	; (8002f44 <main+0x274>)
 8002e2c:	f7fd fa40 	bl	80002b0 <strlen>
 8002e30:	4603      	mov	r3, r0
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	4943      	ldr	r1, [pc, #268]	; (8002f44 <main+0x274>)
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff fa0d 	bl	8002258 <ch395_send_data>
	  HAL_Delay(1000);
 8002e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e42:	f001 faa7 	bl	8004394 <HAL_Delay>
	  ch395q_handler();
 8002e46:	f7fe fe8d 	bl	8001b64 <ch395q_handler>
	  isFound = strstr(socket0_recv_buf, "rtim");
 8002e4a:	4943      	ldr	r1, [pc, #268]	; (8002f58 <main+0x288>)
 8002e4c:	483e      	ldr	r0, [pc, #248]	; (8002f48 <main+0x278>)
 8002e4e:	f006 fc55 	bl	80096fc <strstr>
 8002e52:	6278      	str	r0, [r7, #36]	; 0x24
  } while(isFound == NULL);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0e4      	beq.n	8002e24 <main+0x154>
  memcpy(rtim, isFound + 4, 16);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2210      	movs	r2, #16
 8002e60:	4619      	mov	r1, r3
 8002e62:	483e      	ldr	r0, [pc, #248]	; (8002f5c <main+0x28c>)
 8002e64:	f006 fcd6 	bl	8009814 <memcpy>
  printf("rtim:[%s]\r\n", rtim);
 8002e68:	493c      	ldr	r1, [pc, #240]	; (8002f5c <main+0x28c>)
 8002e6a:	483d      	ldr	r0, [pc, #244]	; (8002f60 <main+0x290>)
 8002e6c:	f006 faaa 	bl	80093c4 <iprintf>
  sscanf(rtim, "%8d%8d", &rtime_head_8, &rtime_foot_8);
 8002e70:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <main+0x294>)
 8002e72:	4a3d      	ldr	r2, [pc, #244]	; (8002f68 <main+0x298>)
 8002e74:	493d      	ldr	r1, [pc, #244]	; (8002f6c <main+0x29c>)
 8002e76:	4839      	ldr	r0, [pc, #228]	; (8002f5c <main+0x28c>)
 8002e78:	f006 fb32 	bl	80094e0 <siscanf>
//	  float a = 68.66;
//	  printf("%c  %c\r\n", int_separate(a), dec_separate(a));
//  }

  // TIM6 Tnit
  HAL_TIM_Base_Start_IT(&htim6);
 8002e7c:	483c      	ldr	r0, [pc, #240]	; (8002f70 <main+0x2a0>)
 8002e7e:	f004 fce9 	bl	8007854 <HAL_TIM_Base_Start_IT>
//	  accx = acc_all[1] * Sen_3;
//	  accy = acc_all[3] * Sen_3;
//	  accz = (adc_buf[1] * (3.3 / 4096) - com_value) / Sen_1;
//	  printf("accx:%.2f, accy:%.2f, accz:%.2f\r\n", accx, accy, accz);

	  HAL_Delay(10);
 8002e82:	200a      	movs	r0, #10
 8002e84:	f001 fa86 	bl	8004394 <HAL_Delay>

	  static uint16_t num_1 = 0;
	  static uint16_t num_2 = 0;
	  char *ptr = &socket0_send_buf[0];
 8002e88:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <main+0x274>)
 8002e8a:	623b      	str	r3, [r7, #32]
	  int16_t *dataptr_z;
	  int16_t *dataptr_x;
	  int16_t *dataptr_y;

	  uint8_t old_adc_switch = adc_switch;
 8002e8c:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <main+0x2a4>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	77fb      	strb	r3, [r7, #31]
	  uint8_t old_iic_switch = iic_switch;
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <main+0x2a8>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	77bb      	strb	r3, [r7, #30]
	  uint16_t old_adc_num = adc_num;
 8002e98:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <main+0x2ac>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	83bb      	strh	r3, [r7, #28]
	  uint16_t old_iic_num = iic_num;
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <main+0x2b0>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	837b      	strh	r3, [r7, #26]

	  (adc_switch == 1)?(adc_switch = 2):(adc_switch = 1);
 8002ea4:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <main+0x2a4>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d103      	bne.n	8002eb4 <main+0x1e4>
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <main+0x2a4>)
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e002      	b.n	8002eba <main+0x1ea>
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <main+0x2a4>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
	  (iic_switch == 1)?(iic_switch = 2):(iic_switch = 1);
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <main+0x2a8>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d103      	bne.n	8002eca <main+0x1fa>
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <main+0x2a8>)
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e002      	b.n	8002ed0 <main+0x200>
 8002eca:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <main+0x2a8>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]

	  adc_num = 0;
 8002ed0:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <main+0x2ac>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	801a      	strh	r2, [r3, #0]
	  iic_num = 0;
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <main+0x2b0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	801a      	strh	r2, [r3, #0]

	  if(old_adc_switch == 1) { dataptr_z = &adc_accz_buf_1[0]; }
 8002edc:	7ffb      	ldrb	r3, [r7, #31]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <main+0x218>
 8002ee2:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <main+0x2b4>)
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee6:	e004      	b.n	8002ef2 <main+0x222>
	  else if(old_adc_switch == 2) { dataptr_z = &adc_accz_buf_2[0]; }
 8002ee8:	7ffb      	ldrb	r3, [r7, #31]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d101      	bne.n	8002ef2 <main+0x222>
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <main+0x2b8>)
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
	  if(old_iic_switch == 1) { dataptr_x = &iic_accx_buf_1[0]; dataptr_y = &iic_accy_buf_1[0]; }
 8002ef2:	7fbb      	ldrb	r3, [r7, #30]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d14d      	bne.n	8002f94 <main+0x2c4>
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <main+0x2bc>)
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
 8002efc:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <main+0x2c0>)
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	e04f      	b.n	8002fa2 <main+0x2d2>
 8002f02:	bf00      	nop
 8002f04:	2000a1ac 	.word	0x2000a1ac
 8002f08:	0800d7cc 	.word	0x0800d7cc
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	20000660 	.word	0x20000660
 8002f14:	20000240 	.word	0x20000240
 8002f18:	2000054c 	.word	0x2000054c
 8002f1c:	2000066c 	.word	0x2000066c
 8002f20:	2000a154 	.word	0x2000a154
 8002f24:	200002e8 	.word	0x200002e8
 8002f28:	20004124 	.word	0x20004124
 8002f2c:	20000024 	.word	0x20000024
 8002f30:	20000010 	.word	0x20000010
 8002f34:	20000014 	.word	0x20000014
 8002f38:	20000018 	.word	0x20000018
 8002f3c:	2000001c 	.word	0x2000001c
 8002f40:	20000028 	.word	0x20000028
 8002f44:	20000674 	.word	0x20000674
 8002f48:	20003d24 	.word	0x20003d24
 8002f4c:	2000003c 	.word	0x2000003c
 8002f50:	0800d7dc 	.word	0x0800d7dc
 8002f54:	0800d7e0 	.word	0x0800d7e0
 8002f58:	0800d7f4 	.word	0x0800d7f4
 8002f5c:	2000a128 	.word	0x2000a128
 8002f60:	0800d7fc 	.word	0x0800d7fc
 8002f64:	2000a140 	.word	0x2000a140
 8002f68:	2000a13c 	.word	0x2000a13c
 8002f6c:	0800d808 	.word	0x0800d808
 8002f70:	2000a208 	.word	0x2000a208
 8002f74:	2000002c 	.word	0x2000002c
 8002f78:	2000002d 	.word	0x2000002d
 8002f7c:	20004364 	.word	0x20004364
 8002f80:	20004366 	.word	0x20004366
 8002f84:	20004368 	.word	0x20004368
 8002f88:	20005308 	.word	0x20005308
 8002f8c:	200062a8 	.word	0x200062a8
 8002f90:	200081e8 	.word	0x200081e8
	  else if(old_iic_switch == 2) { dataptr_x = &iic_accx_buf_2[0]; dataptr_y = &iic_accy_buf_2[0]; }
 8002f94:	7fbb      	ldrb	r3, [r7, #30]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d103      	bne.n	8002fa2 <main+0x2d2>
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <main+0x398>)
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9e:	4b33      	ldr	r3, [pc, #204]	; (800306c <main+0x39c>)
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

	  rtime_calculate(old_adc_num);
 8002fa2:	8bbb      	ldrh	r3, [r7, #28]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fac9 	bl	800353c <rtime_calculate>

	  num_1 += old_adc_num;
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <main+0x3a0>)
 8002fac:	881a      	ldrh	r2, [r3, #0]
 8002fae:	8bbb      	ldrh	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <main+0x3a0>)
 8002fb6:	801a      	strh	r2, [r3, #0]
	  num_2 += old_iic_num;
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <main+0x3a4>)
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	8b7b      	ldrh	r3, [r7, #26]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <main+0x3a4>)
 8002fc4:	801a      	strh	r2, [r3, #0]
	  static float test_x, test_y, test_z;
	  if(num_1 >= data_frequency) {
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <main+0x3a0>)
 8002fc8:	881a      	ldrh	r2, [r3, #0]
 8002fca:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <main+0x3a8>)
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d341      	bcc.n	8003056 <main+0x386>
		  printf(">>> num_1:[%d], old_adc_num:[%d], num_2:[%d], old_iic_num:[%d], ntc:[%05.1f], rtime:[%08d%08d], ",
 8002fd2:	4b27      	ldr	r3, [pc, #156]	; (8003070 <main+0x3a0>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	461e      	mov	r6, r3
 8002fd8:	8bbd      	ldrh	r5, [r7, #28]
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <main+0x3a4>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	4698      	mov	r8, r3
 8002fe0:	8b7c      	ldrh	r4, [r7, #26]
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <main+0x3ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd face 	bl	8000588 <__aeabi_f2d>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4923      	ldr	r1, [pc, #140]	; (8003080 <main+0x3b0>)
 8002ff2:	6809      	ldr	r1, [r1, #0]
 8002ff4:	4823      	ldr	r0, [pc, #140]	; (8003084 <main+0x3b4>)
 8002ff6:	6800      	ldr	r0, [r0, #0]
 8002ff8:	9005      	str	r0, [sp, #20]
 8002ffa:	9104      	str	r1, [sp, #16]
 8002ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003000:	9400      	str	r4, [sp, #0]
 8003002:	4643      	mov	r3, r8
 8003004:	462a      	mov	r2, r5
 8003006:	4631      	mov	r1, r6
 8003008:	481f      	ldr	r0, [pc, #124]	; (8003088 <main+0x3b8>)
 800300a:	f006 f9db 	bl	80093c4 <iprintf>
					  num_1, old_adc_num, num_2, old_iic_num, ntc, rtime_head_8, rtime_foot_8);
		  printf("    accx:[%.4f], accy:[%.4f], accz:[%.4f]\r\n", test_x, test_y, test_z);
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <main+0x3bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fab8 	bl	8000588 <__aeabi_f2d>
 8003018:	4680      	mov	r8, r0
 800301a:	4689      	mov	r9, r1
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <main+0x3c0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fab1 	bl	8000588 <__aeabi_f2d>
 8003026:	4604      	mov	r4, r0
 8003028:	460d      	mov	r5, r1
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <main+0x3c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd faaa 	bl	8000588 <__aeabi_f2d>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800303c:	e9cd 4500 	strd	r4, r5, [sp]
 8003040:	4642      	mov	r2, r8
 8003042:	464b      	mov	r3, r9
 8003044:	4814      	ldr	r0, [pc, #80]	; (8003098 <main+0x3c8>)
 8003046:	f006 f9bd 	bl	80093c4 <iprintf>
		  num_1 = 0;
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <main+0x3a0>)
 800304c:	2200      	movs	r2, #0
 800304e:	801a      	strh	r2, [r3, #0]
		  num_2 = 0;
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <main+0x3a4>)
 8003052:	2200      	movs	r2, #0
 8003054:	801a      	strh	r2, [r3, #0]
	  }

	  sprintf(ptr, "%s", DFH);
 8003056:	4a11      	ldr	r2, [pc, #68]	; (800309c <main+0x3cc>)
 8003058:	4911      	ldr	r1, [pc, #68]	; (80030a0 <main+0x3d0>)
 800305a:	6a38      	ldr	r0, [r7, #32]
 800305c:	f006 fa20 	bl	80094a0 <siprintf>

	  for(uint16_t i = 0; i < old_adc_num; i++) {
 8003060:	2300      	movs	r3, #0
 8003062:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003064:	e0bb      	b.n	80031de <main+0x50e>
 8003066:	bf00      	nop
 8003068:	20007248 	.word	0x20007248
 800306c:	20009188 	.word	0x20009188
 8003070:	2000a144 	.word	0x2000a144
 8003074:	2000a146 	.word	0x2000a146
 8003078:	2000002a 	.word	0x2000002a
 800307c:	20000664 	.word	0x20000664
 8003080:	2000a13c 	.word	0x2000a13c
 8003084:	2000a140 	.word	0x2000a140
 8003088:	0800d810 	.word	0x0800d810
 800308c:	2000a148 	.word	0x2000a148
 8003090:	2000a14c 	.word	0x2000a14c
 8003094:	2000a150 	.word	0x2000a150
 8003098:	0800d874 	.word	0x0800d874
 800309c:	20000030 	.word	0x20000030
 80030a0:	0800d7dc 	.word	0x0800d7dc
		  float data_z = (*(dataptr_z + i) * (3.3 / 4096) - com_value) / Sen_1;
 80030a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030aa:	4413      	add	r3, r2
 80030ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fa57 	bl	8000564 <__aeabi_i2d>
 80030b6:	a3be      	add	r3, pc, #760	; (adr r3, 80033b0 <main+0x6e0>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd fabc 	bl	8000638 <__aeabi_dmul>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4614      	mov	r4, r2
 80030c6:	461d      	mov	r5, r3
 80030c8:	4b9d      	ldr	r3, [pc, #628]	; (8003340 <main+0x670>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fa5b 	bl	8000588 <__aeabi_f2d>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4620      	mov	r0, r4
 80030d8:	4629      	mov	r1, r5
 80030da:	f7fd f8f5 	bl	80002c8 <__aeabi_dsub>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4614      	mov	r4, r2
 80030e4:	461d      	mov	r5, r3
 80030e6:	4b97      	ldr	r3, [pc, #604]	; (8003344 <main+0x674>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fa4c 	bl	8000588 <__aeabi_f2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4620      	mov	r0, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	f7fd fbc8 	bl	800088c <__aeabi_ddiv>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	f7fd fd90 	bl	8000c28 <__aeabi_d2f>
 8003108:	4603      	mov	r3, r0
 800310a:	617b      	str	r3, [r7, #20]
		  float data_x = *(dataptr_x + i) * Sen_3;
 800310c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003112:	4413      	add	r3, r2
 8003114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003120:	4b89      	ldr	r3, [pc, #548]	; (8003348 <main+0x678>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a04 	vstr	s15, [r7, #16]
		  float data_y = *(dataptr_y + i) * Sen_3;
 800312e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003134:	4413      	add	r3, r2
 8003136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003142:	4b81      	ldr	r3, [pc, #516]	; (8003348 <main+0x678>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314c:	edc7 7a03 	vstr	s15, [r7, #12]
		  test_z = data_z;
 8003150:	4a7e      	ldr	r2, [pc, #504]	; (800334c <main+0x67c>)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6013      	str	r3, [r2, #0]
		  test_x = data_x;
 8003156:	4a7e      	ldr	r2, [pc, #504]	; (8003350 <main+0x680>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6013      	str	r3, [r2, #0]
		  test_y = data_y;
 800315c:	4a7d      	ldr	r2, [pc, #500]	; (8003354 <main+0x684>)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6013      	str	r3, [r2, #0]
		  data_z = 65.65;
 8003162:	4b7d      	ldr	r3, [pc, #500]	; (8003358 <main+0x688>)
 8003164:	617b      	str	r3, [r7, #20]
		  data_x = 66.66;
 8003166:	4b7d      	ldr	r3, [pc, #500]	; (800335c <main+0x68c>)
 8003168:	613b      	str	r3, [r7, #16]
		  data_y = 67.67;
 800316a:	4b7d      	ldr	r3, [pc, #500]	; (8003360 <main+0x690>)
 800316c:	60fb      	str	r3, [r7, #12]
		  sprintf((ptr + 6 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 800316e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	3306      	adds	r3, #6
 8003178:	6a3a      	ldr	r2, [r7, #32]
 800317a:	18d4      	adds	r4, r2, r3
 800317c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003180:	f000 f989 	bl	8003496 <int_separate>
 8003184:	4603      	mov	r3, r0
 8003186:	4698      	mov	r8, r3
 8003188:	ed97 0a05 	vldr	s0, [r7, #20]
 800318c:	f000 f9a2 	bl	80034d4 <dec_separate>
 8003190:	4603      	mov	r3, r0
 8003192:	4699      	mov	r9, r3
				  	  	  	  	  	  	  	  	  	  int_separate(data_x), dec_separate(data_x),
 8003194:	ed97 0a04 	vldr	s0, [r7, #16]
 8003198:	f000 f97d 	bl	8003496 <int_separate>
 800319c:	4603      	mov	r3, r0
		  sprintf((ptr + 6 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 800319e:	461d      	mov	r5, r3
				  	  	  	  	  	  	  	  	  	  int_separate(data_x), dec_separate(data_x),
 80031a0:	ed97 0a04 	vldr	s0, [r7, #16]
 80031a4:	f000 f996 	bl	80034d4 <dec_separate>
 80031a8:	4603      	mov	r3, r0
		  sprintf((ptr + 6 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 80031aa:	461e      	mov	r6, r3
													  int_separate(data_y), dec_separate(data_y));
 80031ac:	ed97 0a03 	vldr	s0, [r7, #12]
 80031b0:	f000 f971 	bl	8003496 <int_separate>
 80031b4:	4603      	mov	r3, r0
		  sprintf((ptr + 6 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 80031b6:	607b      	str	r3, [r7, #4]
													  int_separate(data_y), dec_separate(data_y));
 80031b8:	ed97 0a03 	vldr	s0, [r7, #12]
 80031bc:	f000 f98a 	bl	80034d4 <dec_separate>
 80031c0:	4603      	mov	r3, r0
		  sprintf((ptr + 6 + i * 7), "%c%c%c%c%c%c|", int_separate(data_z), dec_separate(data_z),
 80031c2:	9303      	str	r3, [sp, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	9302      	str	r3, [sp, #8]
 80031c8:	9601      	str	r6, [sp, #4]
 80031ca:	9500      	str	r5, [sp, #0]
 80031cc:	464b      	mov	r3, r9
 80031ce:	4642      	mov	r2, r8
 80031d0:	4964      	ldr	r1, [pc, #400]	; (8003364 <main+0x694>)
 80031d2:	4620      	mov	r0, r4
 80031d4:	f006 f964 	bl	80094a0 <siprintf>
	  for(uint16_t i = 0; i < old_adc_num; i++) {
 80031d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031da:	3301      	adds	r3, #1
 80031dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80031de:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031e0:	8bbb      	ldrh	r3, [r7, #28]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f4ff af5e 	bcc.w	80030a4 <main+0x3d4>
	  }

	  sprintf(ptr + 6 + old_adc_num * 3 + old_iic_num * 4, "{%08d%08d}", rtime_head_8, rtime_foot_8);
 80031e8:	8bba      	ldrh	r2, [r7, #28]
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	8b7b      	ldrh	r3, [r7, #26]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3306      	adds	r3, #6
 80031fa:	6a3a      	ldr	r2, [r7, #32]
 80031fc:	18d0      	adds	r0, r2, r3
 80031fe:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <main+0x698>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b5a      	ldr	r3, [pc, #360]	; (800336c <main+0x69c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	495a      	ldr	r1, [pc, #360]	; (8003370 <main+0x6a0>)
 8003208:	f006 f94a 	bl	80094a0 <siprintf>

	  ntc = Get_Kelvin_Temperature(adc_buf[0]);
 800320c:	4b59      	ldr	r3, [pc, #356]	; (8003374 <main+0x6a4>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fbad 	bl	8003970 <Get_Kelvin_Temperature>
 8003216:	eef0 7a40 	vmov.f32	s15, s0
 800321a:	4b57      	ldr	r3, [pc, #348]	; (8003378 <main+0x6a8>)
 800321c:	edc3 7a00 	vstr	s15, [r3]
	  if(ntc > 999 || ntc < 0) ntc = 999.9;
 8003220:	4b55      	ldr	r3, [pc, #340]	; (8003378 <main+0x6a8>)
 8003222:	edd3 7a00 	vldr	s15, [r3]
 8003226:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800337c <main+0x6ac>
 800322a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003232:	dc07      	bgt.n	8003244 <main+0x574>
 8003234:	4b50      	ldr	r3, [pc, #320]	; (8003378 <main+0x6a8>)
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d502      	bpl.n	800324a <main+0x57a>
 8003244:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <main+0x6a8>)
 8003246:	4a4e      	ldr	r2, [pc, #312]	; (8003380 <main+0x6b0>)
 8003248:	601a      	str	r2, [r3, #0]
	  sprintf(ptr + 6 + old_adc_num * 3 + old_iic_num * 4 + 18, "{%05.1f}", ntc);
 800324a:	8bba      	ldrh	r2, [r7, #28]
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	461a      	mov	r2, r3
 8003254:	8b7b      	ldrh	r3, [r7, #26]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	3318      	adds	r3, #24
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	18d4      	adds	r4, r2, r3
 8003260:	4b45      	ldr	r3, [pc, #276]	; (8003378 <main+0x6a8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd f98f 	bl	8000588 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4945      	ldr	r1, [pc, #276]	; (8003384 <main+0x6b4>)
 8003270:	4620      	mov	r0, r4
 8003272:	f006 f915 	bl	80094a0 <siprintf>

	  sprintf(ptr + 6 + old_adc_num * 3 + old_iic_num * 4 + 25, "%s", DFF);
 8003276:	8bba      	ldrh	r2, [r7, #28]
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	461a      	mov	r2, r3
 8003280:	8b7b      	ldrh	r3, [r7, #26]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	331f      	adds	r3, #31
 8003288:	6a3a      	ldr	r2, [r7, #32]
 800328a:	4413      	add	r3, r2
 800328c:	4a3e      	ldr	r2, [pc, #248]	; (8003388 <main+0x6b8>)
 800328e:	493f      	ldr	r1, [pc, #252]	; (800338c <main+0x6bc>)
 8003290:	4618      	mov	r0, r3
 8003292:	f006 f905 	bl	80094a0 <siprintf>

	  sprintf(ptr + 6 + old_adc_num * 3 + old_iic_num * 4 + 28, "\0");
 8003296:	8bba      	ldrh	r2, [r7, #28]
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	461a      	mov	r2, r3
 80032a0:	8b7b      	ldrh	r3, [r7, #26]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	3322      	adds	r3, #34	; 0x22
 80032a8:	6a3a      	ldr	r2, [r7, #32]
 80032aa:	4413      	add	r3, r2
 80032ac:	4938      	ldr	r1, [pc, #224]	; (8003390 <main+0x6c0>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f006 f8f6 	bl	80094a0 <siprintf>

	  ch395_send_data(0, (uint8_t *)socket0_send_buf, strlen((char *)socket0_send_buf));
 80032b4:	4837      	ldr	r0, [pc, #220]	; (8003394 <main+0x6c4>)
 80032b6:	f7fc fffb 	bl	80002b0 <strlen>
 80032ba:	4603      	mov	r3, r0
 80032bc:	b29b      	uxth	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	4934      	ldr	r1, [pc, #208]	; (8003394 <main+0x6c4>)
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7fe ffc8 	bl	8002258 <ch395_send_data>

	  ch395q_handler();
 80032c8:	f7fe fc4c 	bl	8001b64 <ch395q_handler>

	  memset(socket0_send_buf, '\0' , sizeof(socket0_send_buf));
 80032cc:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80032d0:	2100      	movs	r1, #0
 80032d2:	4830      	ldr	r0, [pc, #192]	; (8003394 <main+0x6c4>)
 80032d4:	f006 fa0a 	bl	80096ec <memset>

	  if(old_adc_switch == 1) {
 80032d8:	7ffb      	ldrb	r3, [r7, #31]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d106      	bne.n	80032ec <main+0x61c>
		  memset(adc_accz_buf_1, '\0' , sizeof(adc_accz_buf_1));
 80032de:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80032e2:	2100      	movs	r1, #0
 80032e4:	482c      	ldr	r0, [pc, #176]	; (8003398 <main+0x6c8>)
 80032e6:	f006 fa01 	bl	80096ec <memset>
 80032ea:	e008      	b.n	80032fe <main+0x62e>
	  }
	  else if(old_adc_switch == 2) {
 80032ec:	7ffb      	ldrb	r3, [r7, #31]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d105      	bne.n	80032fe <main+0x62e>
		  memset(adc_accz_buf_2, '\0' , sizeof(adc_accz_buf_2));
 80032f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80032f6:	2100      	movs	r1, #0
 80032f8:	4828      	ldr	r0, [pc, #160]	; (800339c <main+0x6cc>)
 80032fa:	f006 f9f7 	bl	80096ec <memset>
	  }
	  if(old_iic_switch == 1) {
 80032fe:	7fbb      	ldrb	r3, [r7, #30]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <main+0x64e>
		  memset(iic_accx_buf_1, '\0' , sizeof(iic_accx_buf_1));
 8003304:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003308:	2100      	movs	r1, #0
 800330a:	4825      	ldr	r0, [pc, #148]	; (80033a0 <main+0x6d0>)
 800330c:	f006 f9ee 	bl	80096ec <memset>
		  memset(iic_accy_buf_1, '\0' , sizeof(iic_accy_buf_1));
 8003310:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003314:	2100      	movs	r1, #0
 8003316:	4823      	ldr	r0, [pc, #140]	; (80033a4 <main+0x6d4>)
 8003318:	f006 f9e8 	bl	80096ec <memset>
 800331c:	e5b1      	b.n	8002e82 <main+0x1b2>
	  }
	  else if(old_iic_switch == 2) {
 800331e:	7fbb      	ldrb	r3, [r7, #30]
 8003320:	2b02      	cmp	r3, #2
 8003322:	f47f adae 	bne.w	8002e82 <main+0x1b2>
		  memset(iic_accx_buf_2, '\0' , sizeof(iic_accx_buf_2));
 8003326:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800332a:	2100      	movs	r1, #0
 800332c:	481e      	ldr	r0, [pc, #120]	; (80033a8 <main+0x6d8>)
 800332e:	f006 f9dd 	bl	80096ec <memset>
		  memset(iic_accy_buf_2, '\0' , sizeof(iic_accy_buf_2));
 8003332:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003336:	2100      	movs	r1, #0
 8003338:	481c      	ldr	r0, [pc, #112]	; (80033ac <main+0x6dc>)
 800333a:	f006 f9d7 	bl	80096ec <memset>
  {
 800333e:	e5a0      	b.n	8002e82 <main+0x1b2>
 8003340:	20000008 	.word	0x20000008
 8003344:	20000004 	.word	0x20000004
 8003348:	2000000c 	.word	0x2000000c
 800334c:	2000a150 	.word	0x2000a150
 8003350:	2000a148 	.word	0x2000a148
 8003354:	2000a14c 	.word	0x2000a14c
 8003358:	42834ccd 	.word	0x42834ccd
 800335c:	428551ec 	.word	0x428551ec
 8003360:	4287570a 	.word	0x4287570a
 8003364:	0800d8a0 	.word	0x0800d8a0
 8003368:	2000a13c 	.word	0x2000a13c
 800336c:	2000a140 	.word	0x2000a140
 8003370:	0800d8b0 	.word	0x0800d8b0
 8003374:	20000660 	.word	0x20000660
 8003378:	20000664 	.word	0x20000664
 800337c:	4479c000 	.word	0x4479c000
 8003380:	4479f99a 	.word	0x4479f99a
 8003384:	0800d8bc 	.word	0x0800d8bc
 8003388:	20000038 	.word	0x20000038
 800338c:	0800d7dc 	.word	0x0800d7dc
 8003390:	0800d8c8 	.word	0x0800d8c8
 8003394:	20000674 	.word	0x20000674
 8003398:	20004368 	.word	0x20004368
 800339c:	20005308 	.word	0x20005308
 80033a0:	200062a8 	.word	0x200062a8
 80033a4:	200081e8 	.word	0x200081e8
 80033a8:	20007248 	.word	0x20007248
 80033ac:	20009188 	.word	0x20009188
 80033b0:	66666666 	.word	0x66666666
 80033b4:	3f4a6666 	.word	0x3f4a6666

080033b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b094      	sub	sp, #80	; 0x50
 80033bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	2234      	movs	r2, #52	; 0x34
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f006 f990 	bl	80096ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	2300      	movs	r3, #0
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	4b28      	ldr	r3, [pc, #160]	; (8003484 <SystemClock_Config+0xcc>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	4a27      	ldr	r2, [pc, #156]	; (8003484 <SystemClock_Config+0xcc>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6413      	str	r3, [r2, #64]	; 0x40
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <SystemClock_Config+0xcc>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f8:	2300      	movs	r3, #0
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <SystemClock_Config+0xd0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a21      	ldr	r2, [pc, #132]	; (8003488 <SystemClock_Config+0xd0>)
 8003402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <SystemClock_Config+0xd0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003414:	2301      	movs	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800341c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800341e:	2302      	movs	r3, #2
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003428:	2304      	movs	r3, #4
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800342c:	2364      	movs	r3, #100	; 0x64
 800342e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003430:	2302      	movs	r3, #2
 8003432:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003434:	2302      	movs	r3, #2
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003438:	2302      	movs	r3, #2
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fc3d 	bl	8006cc0 <HAL_RCC_OscConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800344c:	f000 f81e 	bl	800348c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003450:	230f      	movs	r3, #15
 8003452:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003454:	2302      	movs	r3, #2
 8003456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800345c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	2103      	movs	r1, #3
 800346c:	4618      	mov	r0, r3
 800346e:	f003 fa07 	bl	8006880 <HAL_RCC_ClockConfig>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003478:	f000 f808 	bl	800348c <Error_Handler>
  }
}
 800347c:	bf00      	nop
 800347e:	3750      	adds	r7, #80	; 0x50
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	40007000 	.word	0x40007000

0800348c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
}
 8003492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003494:	e7fe      	b.n	8003494 <Error_Handler+0x8>

08003496 <int_separate>:
extern float Sen_3;
extern int8_t acc_all[6];

// 分离出整数部分（有符号）
char int_separate(float d)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	ed87 0a01 	vstr	s0, [r7, #4]
	char a = (int)d;
 80034a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a8:	edc7 7a00 	vstr	s15, [r7]
 80034ac:	783b      	ldrb	r3, [r7, #0]
 80034ae:	73fb      	strb	r3, [r7, #15]

	if((int)d == 0) {
 80034b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034b8:	ee17 3a90 	vmov	r3, s15
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <int_separate+0x2e>
		a = 'o';
 80034c0:	236f      	movs	r3, #111	; 0x6f
 80034c2:	73fb      	strb	r3, [r7, #15]
	}

	return a;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <dec_separate>:

// 分离出小数部分（无符号、小数点后两位）
char dec_separate(float d)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	ed87 0a01 	vstr	s0, [r7, #4]
	int a = d;
 80034de:	edd7 7a01 	vldr	s15, [r7, #4]
 80034e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e6:	ee17 3a90 	vmov	r3, s15
 80034ea:	613b      	str	r3, [r7, #16]
	int b = (d-a)*100.0;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80034fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fe:	ee17 0a90 	vmov	r0, s15
 8003502:	f7fd f841 	bl	8000588 <__aeabi_f2d>
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <dec_separate+0x64>)
 800350c:	f7fd f894 	bl	8000638 <__aeabi_dmul>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	f7fd fb3e 	bl	8000b98 <__aeabi_d2iz>
 800351c:	4603      	mov	r3, r0
 800351e:	60fb      	str	r3, [r7, #12]
	char ss = b;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	75fb      	strb	r3, [r7, #23]

	if(b == 0) {
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <dec_separate+0x5a>
		ss = 'o';
 800352a:	236f      	movs	r3, #111	; 0x6f
 800352c:	75fb      	strb	r3, [r7, #23]
	}

	return ss;
 800352e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40590000 	.word	0x40590000

0800353c <rtime_calculate>:

// 计算时间戳
void rtime_calculate(uint16_t old_num)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	80fb      	strh	r3, [r7, #6]
	float tim = 1000000 / data_frequency;
 8003546:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <rtime_calculate+0x7c>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <rtime_calculate+0x80>)
 800354e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355a:	edc7 7a03 	vstr	s15, [r7, #12]
	rtime_foot_8 += old_num * tim;
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <rtime_calculate+0x84>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003574:	edd7 7a03 	vldr	s15, [r7, #12]
 8003578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003584:	ee17 2a90 	vmov	r2, s15
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <rtime_calculate+0x84>)
 800358a:	601a      	str	r2, [r3, #0]

	if(rtime_foot_8 >= 100000000)
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <rtime_calculate+0x84>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <rtime_calculate+0x88>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d90a      	bls.n	80035ac <rtime_calculate+0x70>
	{
		rtime_foot_8 -= 100000000;
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <rtime_calculate+0x84>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <rtime_calculate+0x8c>)
 800359c:	4413      	add	r3, r2
 800359e:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <rtime_calculate+0x84>)
 80035a0:	6013      	str	r3, [r2, #0]
		rtime_head_8++;
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <rtime_calculate+0x90>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	4a08      	ldr	r2, [pc, #32]	; (80035cc <rtime_calculate+0x90>)
 80035aa:	6013      	str	r3, [r2, #0]
	}
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	2000002a 	.word	0x2000002a
 80035bc:	000f4240 	.word	0x000f4240
 80035c0:	2000a140 	.word	0x2000a140
 80035c4:	05f5e0ff 	.word	0x05f5e0ff
 80035c8:	fa0a1f00 	.word	0xfa0a1f00
 80035cc:	2000a13c 	.word	0x2000a13c

080035d0 <Com_Value_Init_DMA>:

// 通过三轴的z轴数据矫正单轴数据
void Com_Value_Init_DMA(void)
{
 80035d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035d4:	b088      	sub	sp, #32
 80035d6:	af04      	add	r7, sp, #16
	uint8_t flag = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]
	float accz_1;
	float accz_3;

	printf("The sensor is correcting...... \r\n");
 80035dc:	4872      	ldr	r0, [pc, #456]	; (80037a8 <Com_Value_Init_DMA+0x1d8>)
 80035de:	f005 ff57 	bl	8009490 <puts>

//	while(1)
	while(flag == 0)
 80035e2:	e0c5      	b.n	8003770 <Com_Value_Init_DMA+0x1a0>
	{
		accz_1 = (adc_buf[1] * 3.3/4096 - com_value) / Sen_1;
 80035e4:	4b71      	ldr	r3, [pc, #452]	; (80037ac <Com_Value_Init_DMA+0x1dc>)
 80035e6:	885b      	ldrh	r3, [r3, #2]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ffbb 	bl	8000564 <__aeabi_i2d>
 80035ee:	a366      	add	r3, pc, #408	; (adr r3, 8003788 <Com_Value_Init_DMA+0x1b8>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fd f820 	bl	8000638 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	4b6a      	ldr	r3, [pc, #424]	; (80037b0 <Com_Value_Init_DMA+0x1e0>)
 8003606:	f7fd f941 	bl	800088c <__aeabi_ddiv>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4614      	mov	r4, r2
 8003610:	461d      	mov	r5, r3
 8003612:	4b68      	ldr	r3, [pc, #416]	; (80037b4 <Com_Value_Init_DMA+0x1e4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc ffb6 	bl	8000588 <__aeabi_f2d>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4620      	mov	r0, r4
 8003622:	4629      	mov	r1, r5
 8003624:	f7fc fe50 	bl	80002c8 <__aeabi_dsub>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4614      	mov	r4, r2
 800362e:	461d      	mov	r5, r3
 8003630:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <Com_Value_Init_DMA+0x1e8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ffa7 	bl	8000588 <__aeabi_f2d>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4620      	mov	r0, r4
 8003640:	4629      	mov	r1, r5
 8003642:	f7fd f923 	bl	800088c <__aeabi_ddiv>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f7fd faeb 	bl	8000c28 <__aeabi_d2f>
 8003652:	4603      	mov	r3, r0
 8003654:	60bb      	str	r3, [r7, #8]
		accz_3 = acc_all[5] * Sen_3;
 8003656:	4b59      	ldr	r3, [pc, #356]	; (80037bc <Com_Value_Init_DMA+0x1ec>)
 8003658:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003664:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <Com_Value_Init_DMA+0x1f0>)
 8003666:	edd3 7a00 	vldr	s15, [r3]
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	edc7 7a01 	vstr	s15, [r7, #4]

		// 上电前，以三轴加速度芯片的z轴加速度accz_3作为标准，
		// 调整补偿量com_value，使传感器上电时的单轴加速度accz_1 = accz_3 ± 0.001g
		if(flag == 0 && (accz_1 - accz_3) > 0.001) {
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d125      	bne.n	80036c4 <Com_Value_Init_DMA+0xf4>
 8003678:	ed97 7a02 	vldr	s14, [r7, #8]
 800367c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003684:	ee17 0a90 	vmov	r0, s15
 8003688:	f7fc ff7e 	bl	8000588 <__aeabi_f2d>
 800368c:	a340      	add	r3, pc, #256	; (adr r3, 8003790 <Com_Value_Init_DMA+0x1c0>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f7fd fa61 	bl	8000b58 <__aeabi_dcmpgt>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <Com_Value_Init_DMA+0xf4>
			com_value += 0.0001;
 800369c:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <Com_Value_Init_DMA+0x1e4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fc ff71 	bl	8000588 <__aeabi_f2d>
 80036a6:	a33c      	add	r3, pc, #240	; (adr r3, 8003798 <Com_Value_Init_DMA+0x1c8>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fc fe0e 	bl	80002cc <__adddf3>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f7fd fab6 	bl	8000c28 <__aeabi_d2f>
 80036bc:	4603      	mov	r3, r0
 80036be:	4a3d      	ldr	r2, [pc, #244]	; (80037b4 <Com_Value_Init_DMA+0x1e4>)
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e02d      	b.n	8003720 <Com_Value_Init_DMA+0x150>
		}
		else if(flag == 0 && (accz_1 - accz_3) < -0.001) {
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d125      	bne.n	8003716 <Com_Value_Init_DMA+0x146>
 80036ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80036ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80036d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d6:	ee17 0a90 	vmov	r0, s15
 80036da:	f7fc ff55 	bl	8000588 <__aeabi_f2d>
 80036de:	a330      	add	r3, pc, #192	; (adr r3, 80037a0 <Com_Value_Init_DMA+0x1d0>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f7fd fa1a 	bl	8000b1c <__aeabi_dcmplt>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d013      	beq.n	8003716 <Com_Value_Init_DMA+0x146>
			com_value -= 0.0001;
 80036ee:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <Com_Value_Init_DMA+0x1e4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff48 	bl	8000588 <__aeabi_f2d>
 80036f8:	a327      	add	r3, pc, #156	; (adr r3, 8003798 <Com_Value_Init_DMA+0x1c8>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fc fde3 	bl	80002c8 <__aeabi_dsub>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd fa8d 	bl	8000c28 <__aeabi_d2f>
 800370e:	4603      	mov	r3, r0
 8003710:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <Com_Value_Init_DMA+0x1e4>)
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	e004      	b.n	8003720 <Com_Value_Init_DMA+0x150>
		}
		else {
			flag = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
			printf("Calibration is completed \r\n");
 800371a:	482a      	ldr	r0, [pc, #168]	; (80037c4 <Com_Value_Init_DMA+0x1f4>)
 800371c:	f005 feb8 	bl	8009490 <puts>
		}

		LIS2DH12_ReadAccall(&hi2c1, acc_all);			/* 启动I2C DMA采集 */
 8003720:	4926      	ldr	r1, [pc, #152]	; (80037bc <Com_Value_Init_DMA+0x1ec>)
 8003722:	4829      	ldr	r0, [pc, #164]	; (80037c8 <Com_Value_Init_DMA+0x1f8>)
 8003724:	f7ff fa46 	bl	8002bb4 <LIS2DH12_ReadAccall>
		HAL_Delay(1);
 8003728:	2001      	movs	r0, #1
 800372a:	f000 fe33 	bl	8004394 <HAL_Delay>

		if(flag == 1) {
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d11d      	bne.n	8003770 <Com_Value_Init_DMA+0x1a0>
			printf("corrected information: %.5f  %.5f  %.5f\r\n", accz_3, accz_1, com_value);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fc ff27 	bl	8000588 <__aeabi_f2d>
 800373a:	4680      	mov	r8, r0
 800373c:	4689      	mov	r9, r1
 800373e:	68b8      	ldr	r0, [r7, #8]
 8003740:	f7fc ff22 	bl	8000588 <__aeabi_f2d>
 8003744:	4604      	mov	r4, r0
 8003746:	460d      	mov	r5, r1
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <Com_Value_Init_DMA+0x1e4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fc ff1b 	bl	8000588 <__aeabi_f2d>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800375a:	e9cd 4500 	strd	r4, r5, [sp]
 800375e:	4642      	mov	r2, r8
 8003760:	464b      	mov	r3, r9
 8003762:	481a      	ldr	r0, [pc, #104]	; (80037cc <Com_Value_Init_DMA+0x1fc>)
 8003764:	f005 fe2e 	bl	80093c4 <iprintf>
			HAL_Delay(500);
 8003768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800376c:	f000 fe12 	bl	8004394 <HAL_Delay>
	while(flag == 0)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f43f af36 	beq.w	80035e4 <Com_Value_Init_DMA+0x14>
		}
	}
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003784:	f3af 8000 	nop.w
 8003788:	66666666 	.word	0x66666666
 800378c:	400a6666 	.word	0x400a6666
 8003790:	d2f1a9fc 	.word	0xd2f1a9fc
 8003794:	3f50624d 	.word	0x3f50624d
 8003798:	eb1c432d 	.word	0xeb1c432d
 800379c:	3f1a36e2 	.word	0x3f1a36e2
 80037a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80037a4:	bf50624d 	.word	0xbf50624d
 80037a8:	0800d8cc 	.word	0x0800d8cc
 80037ac:	20000660 	.word	0x20000660
 80037b0:	40b00000 	.word	0x40b00000
 80037b4:	20000008 	.word	0x20000008
 80037b8:	20000004 	.word	0x20000004
 80037bc:	2000066c 	.word	0x2000066c
 80037c0:	2000000c 	.word	0x2000000c
 80037c4:	0800d8f0 	.word	0x0800d8f0
 80037c8:	2000054c 	.word	0x2000054c
 80037cc:	0800d90c 	.word	0x0800d90c

080037d0 <temp_Get_R>:
#include "ntc.h"

//模拟量转电阻
float temp_Get_R(uint16_t adct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
	float v1,v2,r;

	v1 = (float)(adct*3.3)/4096;//将NTC电路上的ADC采样值转换为电压
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fc fec1 	bl	8000564 <__aeabi_i2d>
 80037e2:	a31d      	add	r3, pc, #116	; (adr r3, 8003858 <temp_Get_R+0x88>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f7fc ff26 	bl	8000638 <__aeabi_dmul>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	f7fd fa18 	bl	8000c28 <__aeabi_d2f>
 80037f8:	ee06 0a90 	vmov	s13, r0
 80037fc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003860 <temp_Get_R+0x90>
 8003800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003804:	edc7 7a05 	vstr	s15, [r7, #20]
	v2 = 3.3 - v1;
 8003808:	6978      	ldr	r0, [r7, #20]
 800380a:	f7fc febd 	bl	8000588 <__aeabi_f2d>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	a111      	add	r1, pc, #68	; (adr r1, 8003858 <temp_Get_R+0x88>)
 8003814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003818:	f7fc fd56 	bl	80002c8 <__aeabi_dsub>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f7fd fa00 	bl	8000c28 <__aeabi_d2f>
 8003828:	4603      	mov	r3, r0
 800382a:	613b      	str	r3, [r7, #16]
	r = (v1/v2) * 10;
 800382c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003830:	ed97 7a04 	vldr	s14, [r7, #16]
 8003834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003838:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800383c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003840:	edc7 7a03 	vstr	s15, [r7, #12]

	return r;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	ee07 3a90 	vmov	s15, r3
}
 800384a:	eeb0 0a67 	vmov.f32	s0, s15
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	f3af 8000 	nop.w
 8003858:	66666666 	.word	0x66666666
 800385c:	400a6666 	.word	0x400a6666
 8003860:	45800000 	.word	0x45800000

08003864 <myln>:

//实现ln(x) 的计算
double myln(double a)
{
 8003864:	b5b0      	push	{r4, r5, r7, lr}
 8003866:	b08c      	sub	sp, #48	; 0x30
 8003868:	af00      	add	r7, sp, #0
 800386a:	ed87 0b00 	vstr	d0, [r7]
   int N = 15;//取了前15+1项来估算
 800386e:	230f      	movs	r3, #15
 8003870:	61fb      	str	r3, [r7, #28]
   int k,nk;
   double x,xx,y;
   x = (a-1)/(a+1);
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <myln+0x104>)
 8003878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800387c:	f7fc fd24 	bl	80002c8 <__aeabi_dsub>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4614      	mov	r4, r2
 8003886:	461d      	mov	r5, r3
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <myln+0x104>)
 800388e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003892:	f7fc fd1b 	bl	80002cc <__adddf3>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f7fc fff5 	bl	800088c <__aeabi_ddiv>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
   xx = x*x;
 80038aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038b2:	f7fc fec1 	bl	8000638 <__aeabi_dmul>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
   nk = 2*N+1;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	3301      	adds	r3, #1
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
   y = 1.0/nk;
 80038c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c8:	f7fc fe4c 	bl	8000564 <__aeabi_i2d>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	f04f 0000 	mov.w	r0, #0
 80038d4:	4924      	ldr	r1, [pc, #144]	; (8003968 <myln+0x104>)
 80038d6:	f7fc ffd9 	bl	800088c <__aeabi_ddiv>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	e9c7 2308 	strd	r2, r3, [r7, #32]
   for(k=N;k>0;k--)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e6:	e023      	b.n	8003930 <myln+0xcc>
   {
     nk = nk - 2;
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	3b02      	subs	r3, #2
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
     y = 1.0/nk+xx*y;
 80038ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f0:	f7fc fe38 	bl	8000564 <__aeabi_i2d>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	f04f 0000 	mov.w	r0, #0
 80038fc:	491a      	ldr	r1, [pc, #104]	; (8003968 <myln+0x104>)
 80038fe:	f7fc ffc5 	bl	800088c <__aeabi_ddiv>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4614      	mov	r4, r2
 8003908:	461d      	mov	r5, r3
 800390a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800390e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003912:	f7fc fe91 	bl	8000638 <__aeabi_dmul>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4620      	mov	r0, r4
 800391c:	4629      	mov	r1, r5
 800391e:	f7fc fcd5 	bl	80002cc <__adddf3>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	e9c7 2308 	strd	r2, r3, [r7, #32]
   for(k=N;k>0;k--)
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	3b01      	subs	r3, #1
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	2b00      	cmp	r3, #0
 8003934:	dcd8      	bgt.n	80038e8 <myln+0x84>

   }
   return 2.0*x*y;
 8003936:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	f7fc fcc5 	bl	80002cc <__adddf3>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394e:	f7fc fe73 	bl	8000638 <__aeabi_dmul>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	ec43 2b17 	vmov	d7, r2, r3
}
 800395a:	eeb0 0a47 	vmov.f32	s0, s14
 800395e:	eef0 0a67 	vmov.f32	s1, s15
 8003962:	3730      	adds	r7, #48	; 0x30
 8003964:	46bd      	mov	sp, r7
 8003966:	bdb0      	pop	{r4, r5, r7, pc}
 8003968:	3ff00000 	.word	0x3ff00000
 800396c:	00000000 	.word	0x00000000

08003970 <Get_Kelvin_Temperature>:

float Get_Kelvin_Temperature(uint16_t t)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	80fb      	strh	r3, [r7, #6]
	float N1,N2,N3,N4;
	float Rntc = temp_Get_R(t);
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff27 	bl	80037d0 <temp_Get_R>
 8003982:	ed87 0a07 	vstr	s0, [r7, #28]
	N1 = (myln(R25)-myln(Rntc))/B;
 8003986:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8003a38 <Get_Kelvin_Temperature+0xc8>
 800398a:	f7ff ff6b 	bl	8003864 <myln>
 800398e:	ec55 4b10 	vmov	r4, r5, d0
 8003992:	69f8      	ldr	r0, [r7, #28]
 8003994:	f7fc fdf8 	bl	8000588 <__aeabi_f2d>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	ec43 2b10 	vmov	d0, r2, r3
 80039a0:	f7ff ff60 	bl	8003864 <myln>
 80039a4:	ec53 2b10 	vmov	r2, r3, d0
 80039a8:	4620      	mov	r0, r4
 80039aa:	4629      	mov	r1, r5
 80039ac:	f7fc fc8c 	bl	80002c8 <__aeabi_dsub>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	a321      	add	r3, pc, #132	; (adr r3, 8003a40 <Get_Kelvin_Temperature+0xd0>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f7fc ff65 	bl	800088c <__aeabi_ddiv>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	f7fd f92d 	bl	8000c28 <__aeabi_d2f>
 80039ce:	4603      	mov	r3, r0
 80039d0:	61bb      	str	r3, [r7, #24]
	N2 = 1/T25 - N1;
 80039d2:	69b8      	ldr	r0, [r7, #24]
 80039d4:	f7fc fdd8 	bl	8000588 <__aeabi_f2d>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	a11a      	add	r1, pc, #104	; (adr r1, 8003a48 <Get_Kelvin_Temperature+0xd8>)
 80039de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039e2:	f7fc fc71 	bl	80002c8 <__aeabi_dsub>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fd f91b 	bl	8000c28 <__aeabi_d2f>
 80039f2:	4603      	mov	r3, r0
 80039f4:	617b      	str	r3, [r7, #20]
	N3 = 1/N2;
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80039fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a02:	edc7 7a04 	vstr	s15, [r7, #16]
	N4 = N3-273.15;//开尔文转摄氏度
 8003a06:	6938      	ldr	r0, [r7, #16]
 8003a08:	f7fc fdbe 	bl	8000588 <__aeabi_f2d>
 8003a0c:	a310      	add	r3, pc, #64	; (adr r3, 8003a50 <Get_Kelvin_Temperature+0xe0>)
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	f7fc fc59 	bl	80002c8 <__aeabi_dsub>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f7fd f903 	bl	8000c28 <__aeabi_d2f>
 8003a22:	4603      	mov	r3, r0
 8003a24:	60fb      	str	r3, [r7, #12]

	return N4;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	ee07 3a90 	vmov	s15, r3
}
 8003a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bdb0      	pop	{r4, r5, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	40590000 	.word	0x40590000
 8003a40:	00000000 	.word	0x00000000
 8003a44:	40aedc00 	.word	0x40aedc00
 8003a48:	dcb5db83 	.word	0xdcb5db83
 8003a4c:	3f6b79e1 	.word	0x3f6b79e1
 8003a50:	66666666 	.word	0x66666666
 8003a54:	40711266 	.word	0x40711266

08003a58 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <MX_SPI1_Init+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a6a:	4b14      	ldr	r3, [pc, #80]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a70:	4b12      	ldr	r3, [pc, #72]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003a76:	4b11      	ldr	r3, [pc, #68]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a78:	2202      	movs	r2, #2
 8003a7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a8c:	2238      	movs	r2, #56	; 0x38
 8003a8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <MX_SPI1_Init+0x64>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <MX_SPI1_Init+0x64>)
 8003aa4:	220a      	movs	r2, #10
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003aa8:	4804      	ldr	r0, [pc, #16]	; (8003abc <MX_SPI1_Init+0x64>)
 8003aaa:	f003 fb8d 	bl	80071c8 <HAL_SPI_Init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ab4:	f7ff fcea 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	2000a154 	.word	0x2000a154
 8003ac0:	40013000 	.word	0x40013000

08003ac4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <MX_SPI2_Init+0x68>)
 8003acc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ad4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b08:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003b10:	220a      	movs	r2, #10
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b14:	4804      	ldr	r0, [pc, #16]	; (8003b28 <MX_SPI2_Init+0x64>)
 8003b16:	f003 fb57 	bl	80071c8 <HAL_SPI_Init>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003b20:	f7ff fcb4 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	2000a1ac 	.word	0x2000a1ac
 8003b2c:	40003800 	.word	0x40003800

08003b30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08c      	sub	sp, #48	; 0x30
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a32      	ldr	r2, [pc, #200]	; (8003c18 <HAL_SPI_MspInit+0xe8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d12c      	bne.n	8003bac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	4b31      	ldr	r3, [pc, #196]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	4a30      	ldr	r2, [pc, #192]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b60:	6453      	str	r3, [r2, #68]	; 0x44
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a29      	ldr	r2, [pc, #164]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b8a:	23e0      	movs	r3, #224	; 0xe0
 8003b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b96:	2303      	movs	r3, #3
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b9a:	2305      	movs	r3, #5
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	481e      	ldr	r0, [pc, #120]	; (8003c20 <HAL_SPI_MspInit+0xf0>)
 8003ba6:	f001 fcbb 	bl	8005520 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003baa:	e031      	b.n	8003c10 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_SPI_MspInit+0xf4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d12c      	bne.n	8003c10 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <HAL_SPI_MspInit+0xec>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003bee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c00:	2305      	movs	r3, #5
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c04:	f107 031c 	add.w	r3, r7, #28
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4807      	ldr	r0, [pc, #28]	; (8003c28 <HAL_SPI_MspInit+0xf8>)
 8003c0c:	f001 fc88 	bl	8005520 <HAL_GPIO_Init>
}
 8003c10:	bf00      	nop
 8003c12:	3730      	adds	r7, #48	; 0x30
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40013000 	.word	0x40013000
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40020000 	.word	0x40020000
 8003c24:	40003800 	.word	0x40003800
 8003c28:	40020400 	.word	0x40020400

08003c2c <spi1_read_write_byte>:
 * @brief       SPI1读写一个字节数据
 * @param       txdata  : 要发送的数据(1字节)
 * @retval      接收到的数据(1字节)
 */
uint8_t spi1_read_write_byte(uint8_t txdata)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
    uint8_t rxdata;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rxdata, 1, 1000);
 8003c36:	f107 020f 	add.w	r2, r7, #15
 8003c3a:	1df9      	adds	r1, r7, #7
 8003c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2301      	movs	r3, #1
 8003c44:	4803      	ldr	r0, [pc, #12]	; (8003c54 <spi1_read_write_byte+0x28>)
 8003c46:	f003 fb48 	bl	80072da <HAL_SPI_TransmitReceive>
    return rxdata; /* 返回收到的数据 */
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	2000a154 	.word	0x2000a154

08003c58 <SPI2_ReadWriteByte>:
  * @brief          封装SPI2读写函数（片外SPI Flash使用）
  * @param[in]     	TxData 发出的数据
  * @retval         RxData 收到的数据
  */
uint8_t SPI2_ReadWriteByte(uint8_t TxData)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
	HAL_SPI_TransmitReceive(&hspi2, &TxData, &RxData, 1, 1000);
 8003c62:	f107 020f 	add.w	r2, r7, #15
 8003c66:	1df9      	adds	r1, r7, #7
 8003c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2301      	movs	r3, #1
 8003c70:	4803      	ldr	r0, [pc, #12]	; (8003c80 <SPI2_ReadWriteByte+0x28>)
 8003c72:	f003 fb32 	bl	80072da <HAL_SPI_TransmitReceive>
	return RxData;
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	2000a1ac 	.word	0x2000a1ac

08003c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	4a0f      	ldr	r2, [pc, #60]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c98:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800

08003cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cd8:	e7fe      	b.n	8003cd8 <NMI_Handler+0x4>

08003cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cde:	e7fe      	b.n	8003cde <HardFault_Handler+0x4>

08003ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ce4:	e7fe      	b.n	8003ce4 <MemManage_Handler+0x4>

08003ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cea:	e7fe      	b.n	8003cea <BusFault_Handler+0x4>

08003cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cf0:	e7fe      	b.n	8003cf0 <UsageFault_Handler+0x4>

08003cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d20:	f000 fb18 	bl	8004354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <DMA1_Stream0_IRQHandler+0x10>)
 8003d2e:	f001 f981 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200005a0 	.word	0x200005a0

08003d3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003d40:	4802      	ldr	r0, [pc, #8]	; (8003d4c <DMA1_Stream1_IRQHandler+0x10>)
 8003d42:	f001 f977 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000600 	.word	0x20000600

08003d50 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <TIM6_IRQHandler+0x10>)
 8003d56:	f003 fded 	bl	8007934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2000a208 	.word	0x2000a208

08003d64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <DMA2_Stream0_IRQHandler+0x10>)
 8003d6a:	f001 f963 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000288 	.word	0x20000288

08003d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return 1;
 8003d7c:	2301      	movs	r3, #1
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_kill>:

int _kill(int pid, int sig)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d92:	f005 fd13 	bl	80097bc <__errno>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2216      	movs	r2, #22
 8003d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_exit>:

void _exit (int status)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003db0:	f04f 31ff 	mov.w	r1, #4294967295
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ffe7 	bl	8003d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dba:	e7fe      	b.n	8003dba <_exit+0x12>

08003dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e00a      	b.n	8003de4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dce:	f3af 8000 	nop.w
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	60ba      	str	r2, [r7, #8]
 8003dda:	b2ca      	uxtb	r2, r1
 8003ddc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	3301      	adds	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	dbf0      	blt.n	8003dce <_read+0x12>
  }

  return len;
 8003dec:	687b      	ldr	r3, [r7, #4]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e009      	b.n	8003e1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	60ba      	str	r2, [r7, #8]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f8e7 	bl	8003fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	dbf1      	blt.n	8003e08 <_write+0x12>
  }
  return len;
 8003e24:	687b      	ldr	r3, [r7, #4]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_close>:

int _close(int file)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e56:	605a      	str	r2, [r3, #4]
  return 0;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_isatty>:

int _isatty(int file)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e6e:	2301      	movs	r3, #1
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea0:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <_sbrk+0x5c>)
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <_sbrk+0x60>)
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <_sbrk+0x64>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <_sbrk+0x64>)
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <_sbrk+0x68>)
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <_sbrk+0x64>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d207      	bcs.n	8003ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ec8:	f005 fc78 	bl	80097bc <__errno>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	220c      	movs	r2, #12
 8003ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	e009      	b.n	8003eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <_sbrk+0x64>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <_sbrk+0x64>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <_sbrk+0x64>)
 8003ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20040000 	.word	0x20040000
 8003ef8:	00000400 	.word	0x00000400
 8003efc:	2000a204 	.word	0x2000a204
 8003f00:	2000a3e8 	.word	0x2000a3e8

08003f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <SystemInit+0x20>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <SystemInit+0x20>)
 8003f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f2e:	463b      	mov	r3, r7
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <MX_TIM6_Init+0x64>)
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <MX_TIM6_Init+0x68>)
 8003f3a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 500-1;
 8003f3c:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <MX_TIM6_Init+0x64>)
 8003f3e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003f42:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f44:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <MX_TIM6_Init+0x64>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <MX_TIM6_Init+0x64>)
 8003f4c:	2263      	movs	r2, #99	; 0x63
 8003f4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <MX_TIM6_Init+0x64>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f56:	480d      	ldr	r0, [pc, #52]	; (8003f8c <MX_TIM6_Init+0x64>)
 8003f58:	f003 fc2c 	bl	80077b4 <HAL_TIM_Base_Init>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003f62:	f7ff fa93 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f6e:	463b      	mov	r3, r7
 8003f70:	4619      	mov	r1, r3
 8003f72:	4806      	ldr	r0, [pc, #24]	; (8003f8c <MX_TIM6_Init+0x64>)
 8003f74:	f003 feae 	bl	8007cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003f7e:	f7ff fa85 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000a208 	.word	0x2000a208
 8003f90:	40001000 	.word	0x40001000

08003f94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0e      	ldr	r2, [pc, #56]	; (8003fdc <HAL_TIM_Base_MspInit+0x48>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d115      	bne.n	8003fd2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_TIM_Base_MspInit+0x4c>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <HAL_TIM_Base_MspInit+0x4c>)
 8003fb0:	f043 0310 	orr.w	r3, r3, #16
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_TIM_Base_MspInit+0x4c>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	2036      	movs	r0, #54	; 0x36
 8003fc8:	f000 fed5 	bl	8004d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003fcc:	2036      	movs	r0, #54	; 0x36
 8003fce:	f000 feee 	bl	8004dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40001000 	.word	0x40001000
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8003fec:	1d39      	adds	r1, r7, #4
 8003fee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4803      	ldr	r0, [pc, #12]	; (8004004 <__io_putchar+0x20>)
 8003ff6:	f003 ff4a 	bl	8007e8e <HAL_UART_Transmit>
    return ch;
 8003ffa:	687b      	ldr	r3, [r7, #4]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	2000a250 	.word	0x2000a250

08004008 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 800400e:	4a12      	ldr	r2, [pc, #72]	; (8004058 <MX_USART1_UART_Init+0x50>)
 8004010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 8004014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 800402e:	220c      	movs	r2, #12
 8004030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 8004034:	2200      	movs	r2, #0
 8004036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <MX_USART1_UART_Init+0x4c>)
 8004040:	f003 fed8 	bl	8007df4 <HAL_UART_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800404a:	f7ff fa1f 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2000a250 	.word	0x2000a250
 8004058:	40011000 	.word	0x40011000

0800405c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <HAL_UART_MspInit+0x84>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d12c      	bne.n	80040d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <HAL_UART_MspInit+0x88>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_UART_MspInit+0x88>)
 8004088:	f043 0310 	orr.w	r3, r3, #16
 800408c:	6453      	str	r3, [r2, #68]	; 0x44
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <HAL_UART_MspInit+0x88>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <HAL_UART_MspInit+0x88>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <HAL_UART_MspInit+0x88>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6313      	str	r3, [r2, #48]	; 0x30
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <HAL_UART_MspInit+0x88>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040bc:	2302      	movs	r3, #2
 80040be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c4:	2303      	movs	r3, #3
 80040c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040c8:	2307      	movs	r3, #7
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040cc:	f107 0314 	add.w	r3, r7, #20
 80040d0:	4619      	mov	r1, r3
 80040d2:	4805      	ldr	r0, [pc, #20]	; (80040e8 <HAL_UART_MspInit+0x8c>)
 80040d4:	f001 fa24 	bl	8005520 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80040d8:	bf00      	nop
 80040da:	3728      	adds	r7, #40	; 0x28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40011000 	.word	0x40011000
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40020000 	.word	0x40020000

080040ec <W25QXX_Init>:
//W25Q80
//容量为1M字节,共有16个Block,256个Sector

//初始化SPI FLASH的IO口
void W25QXX_Init(void)
{ 
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  uint8_t temp;

	__HAL_SPI_ENABLE(&hspi2);                 //使能SPI2
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <W25QXX_Init+0x7c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <W25QXX_Init+0x7c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004100:	601a      	str	r2, [r3, #0]
  SPI2_ReadWriteByte(0Xff);                        //启动传输
 8004102:	20ff      	movs	r0, #255	; 0xff
 8004104:	f7ff fda8 	bl	8003c58 <SPI2_ReadWriteByte>
	
	W25QXX_CS(1);			                //SPI FLASH不选中
 8004108:	2201      	movs	r2, #1
 800410a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800410e:	4817      	ldr	r0, [pc, #92]	; (800416c <W25QXX_Init+0x80>)
 8004110:	f001 fb9a 	bl	8005848 <HAL_GPIO_WritePin>

	W25QXX_TYPE=W25QXX_ReadID();	        //读取FLASH ID
 8004114:	f000 f86a 	bl	80041ec <W25QXX_ReadID>
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	4b14      	ldr	r3, [pc, #80]	; (8004170 <W25QXX_Init+0x84>)
 800411e:	801a      	strh	r2, [r3, #0]

    if(W25QXX_TYPE==W25Q256)                
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <W25QXX_Init+0x84>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	f64e 7218 	movw	r2, #61208	; 0xef18
 8004128:	4293      	cmp	r3, r2
 800412a:	d118      	bne.n	800415e <W25QXX_Init+0x72>
    {
        temp=W25QXX_ReadSR(3);              //读取状态寄存器3，判断地址模式
 800412c:	2003      	movs	r0, #3
 800412e:	f000 f821 	bl	8004174 <W25QXX_ReadSR>
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
        if((temp&0X01)==0)			        //如果不是4字节地址模式,则进入4字节地址模式
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10e      	bne.n	800415e <W25QXX_Init+0x72>
		{
			W25QXX_CS(0); 			        //选中
 8004140:	2200      	movs	r2, #0
 8004142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004146:	4809      	ldr	r0, [pc, #36]	; (800416c <W25QXX_Init+0x80>)
 8004148:	f001 fb7e 	bl	8005848 <HAL_GPIO_WritePin>
			SPI2_ReadWriteByte(W25X_Enable4ByteAddr);//发送进入4字节地址模式指令
 800414c:	20b7      	movs	r0, #183	; 0xb7
 800414e:	f7ff fd83 	bl	8003c58 <SPI2_ReadWriteByte>
			W25QXX_CS(1);       		  	//取消片选
 8004152:	2201      	movs	r2, #1
 8004154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004158:	4804      	ldr	r0, [pc, #16]	; (800416c <W25QXX_Init+0x80>)
 800415a:	f001 fb75 	bl	8005848 <HAL_GPIO_WritePin>
		}
    }
}  
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	2000a1ac 	.word	0x2000a1ac
 800416c:	40020400 	.word	0x40020400
 8004170:	20000050 	.word	0x20000050

08004174 <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
uint8_t W25QXX_ReadSR(uint8_t regno)
{  
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0,command=0;
 800417e:	2300      	movs	r3, #0
 8004180:	73bb      	strb	r3, [r7, #14]
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d00c      	beq.n	80041a6 <W25QXX_ReadSR+0x32>
 800418c:	2b03      	cmp	r3, #3
 800418e:	dc0d      	bgt.n	80041ac <W25QXX_ReadSR+0x38>
 8004190:	2b01      	cmp	r3, #1
 8004192:	d002      	beq.n	800419a <W25QXX_ReadSR+0x26>
 8004194:	2b02      	cmp	r3, #2
 8004196:	d003      	beq.n	80041a0 <W25QXX_ReadSR+0x2c>
 8004198:	e008      	b.n	80041ac <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 800419a:	2305      	movs	r3, #5
 800419c:	73fb      	strb	r3, [r7, #15]
            break;
 800419e:	e008      	b.n	80041b2 <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 80041a0:	2335      	movs	r3, #53	; 0x35
 80041a2:	73fb      	strb	r3, [r7, #15]
            break;
 80041a4:	e005      	b.n	80041b2 <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 80041a6:	2315      	movs	r3, #21
 80041a8:	73fb      	strb	r3, [r7, #15]
            break;
 80041aa:	e002      	b.n	80041b2 <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;    
 80041ac:	2305      	movs	r3, #5
 80041ae:	73fb      	strb	r3, [r7, #15]
            break;
 80041b0:	bf00      	nop
    }    
	W25QXX_CS(0);                       	//使能器件
 80041b2:	2200      	movs	r2, #0
 80041b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041b8:	480b      	ldr	r0, [pc, #44]	; (80041e8 <W25QXX_ReadSR+0x74>)
 80041ba:	f001 fb45 	bl	8005848 <HAL_GPIO_WritePin>
	SPI2_ReadWriteByte(command);            //发送读取状态寄存器命令
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fd49 	bl	8003c58 <SPI2_ReadWriteByte>
	byte=SPI2_ReadWriteByte(0Xff);          //读取一个字节
 80041c6:	20ff      	movs	r0, #255	; 0xff
 80041c8:	f7ff fd46 	bl	8003c58 <SPI2_ReadWriteByte>
 80041cc:	4603      	mov	r3, r0
 80041ce:	73bb      	strb	r3, [r7, #14]
	W25QXX_CS(1);                         	//取消片选
 80041d0:	2201      	movs	r2, #1
 80041d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041d6:	4804      	ldr	r0, [pc, #16]	; (80041e8 <W25QXX_ReadSR+0x74>)
 80041d8:	f001 fb36 	bl	8005848 <HAL_GPIO_WritePin>
	return byte;   
 80041dc:	7bbb      	ldrb	r3, [r7, #14]
} 
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40020400 	.word	0x40020400

080041ec <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
uint16_t W25QXX_ReadID(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
	uint16_t Temp = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	80fb      	strh	r3, [r7, #6]
	W25QXX_CS(0);				    
 80041f6:	2200      	movs	r2, #0
 80041f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041fc:	4816      	ldr	r0, [pc, #88]	; (8004258 <W25QXX_ReadID+0x6c>)
 80041fe:	f001 fb23 	bl	8005848 <HAL_GPIO_WritePin>
	SPI2_ReadWriteByte(0x90);//发送读取ID命令
 8004202:	2090      	movs	r0, #144	; 0x90
 8004204:	f7ff fd28 	bl	8003c58 <SPI2_ReadWriteByte>
	SPI2_ReadWriteByte(0x00); 	    
 8004208:	2000      	movs	r0, #0
 800420a:	f7ff fd25 	bl	8003c58 <SPI2_ReadWriteByte>
	SPI2_ReadWriteByte(0x00); 	    
 800420e:	2000      	movs	r0, #0
 8004210:	f7ff fd22 	bl	8003c58 <SPI2_ReadWriteByte>
	SPI2_ReadWriteByte(0x00); 	 			   
 8004214:	2000      	movs	r0, #0
 8004216:	f7ff fd1f 	bl	8003c58 <SPI2_ReadWriteByte>
	Temp|=SPI2_ReadWriteByte(0xFF)<<8;  
 800421a:	20ff      	movs	r0, #255	; 0xff
 800421c:	f7ff fd1c 	bl	8003c58 <SPI2_ReadWriteByte>
 8004220:	4603      	mov	r3, r0
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	b21a      	sxth	r2, r3
 8004226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800422a:	4313      	orrs	r3, r2
 800422c:	b21b      	sxth	r3, r3
 800422e:	80fb      	strh	r3, [r7, #6]
	Temp|=SPI2_ReadWriteByte(0xFF);	 
 8004230:	20ff      	movs	r0, #255	; 0xff
 8004232:	f7ff fd11 	bl	8003c58 <SPI2_ReadWriteByte>
 8004236:	4603      	mov	r3, r0
 8004238:	b29a      	uxth	r2, r3
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	4313      	orrs	r3, r2
 800423e:	80fb      	strh	r3, [r7, #6]
	W25QXX_CS(1);				    
 8004240:	2201      	movs	r2, #1
 8004242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004246:	4804      	ldr	r0, [pc, #16]	; (8004258 <W25QXX_ReadID+0x6c>)
 8004248:	f001 fafe 	bl	8005848 <HAL_GPIO_WritePin>
	return Temp;
 800424c:	88fb      	ldrh	r3, [r7, #6]
}   		    
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40020400 	.word	0x40020400

0800425c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800425c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004294 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004260:	480d      	ldr	r0, [pc, #52]	; (8004298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004262:	490e      	ldr	r1, [pc, #56]	; (800429c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004264:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004268:	e002      	b.n	8004270 <LoopCopyDataInit>

0800426a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800426a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800426c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800426e:	3304      	adds	r3, #4

08004270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004274:	d3f9      	bcc.n	800426a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004276:	4a0b      	ldr	r2, [pc, #44]	; (80042a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004278:	4c0b      	ldr	r4, [pc, #44]	; (80042a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800427a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800427c:	e001      	b.n	8004282 <LoopFillZerobss>

0800427e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800427e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004280:	3204      	adds	r2, #4

08004282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004284:	d3fb      	bcc.n	800427e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004286:	f7ff fe3d 	bl	8003f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800428a:	f005 fa9d 	bl	80097c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800428e:	f7fe fd1f 	bl	8002cd0 <main>
  bx  lr    
 8004292:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004294:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8004298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800429c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80042a0:	0800ddbc 	.word	0x0800ddbc
  ldr r2, =_sbss
 80042a4:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80042a8:	2000a3e4 	.word	0x2000a3e4

080042ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042ac:	e7fe      	b.n	80042ac <ADC_IRQHandler>
	...

080042b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <HAL_Init+0x40>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <HAL_Init+0x40>)
 80042ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_Init+0x40>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <HAL_Init+0x40>)
 80042c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <HAL_Init+0x40>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <HAL_Init+0x40>)
 80042d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d8:	2003      	movs	r0, #3
 80042da:	f000 fd41 	bl	8004d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042de:	200f      	movs	r0, #15
 80042e0:	f000 f808 	bl	80042f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042e4:	f7ff fcce 	bl	8003c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023c00 	.word	0x40023c00

080042f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042fc:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_InitTick+0x54>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_InitTick+0x58>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800430a:	fbb3 f3f1 	udiv	r3, r3, r1
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fd59 	bl	8004dca <HAL_SYSTICK_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e00e      	b.n	8004340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b0f      	cmp	r3, #15
 8004326:	d80a      	bhi.n	800433e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004328:	2200      	movs	r2, #0
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f000 fd21 	bl	8004d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004334:	4a06      	ldr	r2, [pc, #24]	; (8004350 <HAL_InitTick+0x5c>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	2000004c 	.word	0x2000004c
 800434c:	20000058 	.word	0x20000058
 8004350:	20000054 	.word	0x20000054

08004354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_IncTick+0x20>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_IncTick+0x24>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4413      	add	r3, r2
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <HAL_IncTick+0x24>)
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000058 	.word	0x20000058
 8004378:	2000a294 	.word	0x2000a294

0800437c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return uwTick;
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_GetTick+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	2000a294 	.word	0x2000a294

08004394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800439c:	f7ff ffee 	bl	800437c <HAL_GetTick>
 80043a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d005      	beq.n	80043ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_Delay+0x44>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043ba:	bf00      	nop
 80043bc:	f7ff ffde 	bl	800437c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d8f7      	bhi.n	80043bc <HAL_Delay+0x28>
  {
  }
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000058 	.word	0x20000058

080043dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e033      	b.n	800445a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc fe78 	bl	80010f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d118      	bne.n	800444c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004422:	f023 0302 	bic.w	r3, r3, #2
 8004426:	f043 0202 	orr.w	r2, r3, #2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa48 	bl	80048c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	f043 0201 	orr.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
 800444a:	e001      	b.n	8004450 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_ADC_Start_DMA+0x1e>
 800447e:	2302      	movs	r3, #2
 8004480:	e0ce      	b.n	8004620 <HAL_ADC_Start_DMA+0x1bc>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d018      	beq.n	80044ca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044a8:	4b5f      	ldr	r3, [pc, #380]	; (8004628 <HAL_ADC_Start_DMA+0x1c4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a5f      	ldr	r2, [pc, #380]	; (800462c <HAL_ADC_Start_DMA+0x1c8>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	0c9a      	lsrs	r2, r3, #18
 80044b4:	4613      	mov	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4413      	add	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80044bc:	e002      	b.n	80044c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f9      	bne.n	80044be <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d8:	d107      	bne.n	80044ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 8086 	bne.w	8004606 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004524:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d106      	bne.n	8004548 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f023 0206 	bic.w	r2, r3, #6
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
 8004546:	e002      	b.n	800454e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_ADC_Start_DMA+0x1cc>)
 8004558:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	4a35      	ldr	r2, [pc, #212]	; (8004634 <HAL_ADC_Start_DMA+0x1d0>)
 8004560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	4a34      	ldr	r2, [pc, #208]	; (8004638 <HAL_ADC_Start_DMA+0x1d4>)
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	4a33      	ldr	r2, [pc, #204]	; (800463c <HAL_ADC_Start_DMA+0x1d8>)
 8004570:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800457a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800458a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	334c      	adds	r3, #76	; 0x4c
 80045a6:	4619      	mov	r1, r3
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f000 fcc8 	bl	8004f40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10f      	bne.n	80045dc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d129      	bne.n	800461e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	e020      	b.n	800461e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <HAL_ADC_Start_DMA+0x1dc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d11b      	bne.n	800461e <HAL_ADC_Start_DMA+0x1ba>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d114      	bne.n	800461e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	e00b      	b.n	800461e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f043 0210 	orr.w	r2, r3, #16
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	2000004c 	.word	0x2000004c
 800462c:	431bde83 	.word	0x431bde83
 8004630:	40012300 	.word	0x40012300
 8004634:	08004abd 	.word	0x08004abd
 8004638:	08004b77 	.word	0x08004b77
 800463c:	08004b93 	.word	0x08004b93
 8004640:	40012000 	.word	0x40012000

08004644 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_ADC_ConfigChannel+0x1c>
 8004698:	2302      	movs	r3, #2
 800469a:	e105      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x228>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b09      	cmp	r3, #9
 80046aa:	d925      	bls.n	80046f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68d9      	ldr	r1, [r3, #12]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	3b1e      	subs	r3, #30
 80046c2:	2207      	movs	r2, #7
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43da      	mvns	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	400a      	ands	r2, r1
 80046d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68d9      	ldr	r1, [r3, #12]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4618      	mov	r0, r3
 80046e4:	4603      	mov	r3, r0
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4403      	add	r3, r0
 80046ea:	3b1e      	subs	r3, #30
 80046ec:	409a      	lsls	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	e022      	b.n	800473e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6919      	ldr	r1, [r3, #16]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	2207      	movs	r2, #7
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43da      	mvns	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	400a      	ands	r2, r1
 800471a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6919      	ldr	r1, [r3, #16]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	4618      	mov	r0, r3
 800472e:	4603      	mov	r3, r0
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4403      	add	r3, r0
 8004734:	409a      	lsls	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d824      	bhi.n	8004790 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	3b05      	subs	r3, #5
 8004758:	221f      	movs	r2, #31
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43da      	mvns	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	400a      	ands	r2, r1
 8004766:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	4618      	mov	r0, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	3b05      	subs	r3, #5
 8004782:	fa00 f203 	lsl.w	r2, r0, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	635a      	str	r2, [r3, #52]	; 0x34
 800478e:	e04c      	b.n	800482a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d824      	bhi.n	80047e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	3b23      	subs	r3, #35	; 0x23
 80047aa:	221f      	movs	r2, #31
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43da      	mvns	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	400a      	ands	r2, r1
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	4618      	mov	r0, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	3b23      	subs	r3, #35	; 0x23
 80047d4:	fa00 f203 	lsl.w	r2, r0, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
 80047e0:	e023      	b.n	800482a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	3b41      	subs	r3, #65	; 0x41
 80047f4:	221f      	movs	r2, #31
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43da      	mvns	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	400a      	ands	r2, r1
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	4618      	mov	r0, r3
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	3b41      	subs	r3, #65	; 0x41
 800481e:	fa00 f203 	lsl.w	r2, r0, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800482a:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <HAL_ADC_ConfigChannel+0x234>)
 800482c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <HAL_ADC_ConfigChannel+0x238>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d109      	bne.n	800484c <HAL_ADC_ConfigChannel+0x1cc>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b12      	cmp	r3, #18
 800483e:	d105      	bne.n	800484c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <HAL_ADC_ConfigChannel+0x238>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d123      	bne.n	800489e <HAL_ADC_ConfigChannel+0x21e>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b10      	cmp	r3, #16
 800485c:	d003      	beq.n	8004866 <HAL_ADC_ConfigChannel+0x1e6>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b11      	cmp	r3, #17
 8004864:	d11b      	bne.n	800489e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b10      	cmp	r3, #16
 8004878:	d111      	bne.n	800489e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <HAL_ADC_ConfigChannel+0x23c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <HAL_ADC_ConfigChannel+0x240>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	0c9a      	lsrs	r2, r3, #18
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004890:	e002      	b.n	8004898 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	3b01      	subs	r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f9      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012300 	.word	0x40012300
 80048b8:	40012000 	.word	0x40012000
 80048bc:	2000004c 	.word	0x2000004c
 80048c0:	431bde83 	.word	0x431bde83

080048c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048cc:	4b79      	ldr	r3, [pc, #484]	; (8004ab4 <ADC_Init+0x1f0>)
 80048ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800491c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	4a58      	ldr	r2, [pc, #352]	; (8004ab8 <ADC_Init+0x1f4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800496a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800498c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6899      	ldr	r1, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	e00f      	b.n	80049c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0202 	bic.w	r2, r2, #2
 80049d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6899      	ldr	r1, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7e1b      	ldrb	r3, [r3, #24]
 80049dc:	005a      	lsls	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6859      	ldr	r1, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	035a      	lsls	r2, r3, #13
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	e007      	b.n	8004a38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	051a      	lsls	r2, r3, #20
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6899      	ldr	r1, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a7a:	025a      	lsls	r2, r3, #9
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	029a      	lsls	r2, r3, #10
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	609a      	str	r2, [r3, #8]
}
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40012300 	.word	0x40012300
 8004ab8:	0f000001 	.word	0x0f000001

08004abc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d13c      	bne.n	8004b50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d12b      	bne.n	8004b48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d127      	bne.n	8004b48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d119      	bne.n	8004b48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0220 	bic.w	r2, r2, #32
 8004b22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	f043 0201 	orr.w	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff fd7b 	bl	8004644 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b4e:	e00e      	b.n	8004b6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fd85 	bl	800466c <HAL_ADC_ErrorCallback>
}
 8004b62:	e004      	b.n	8004b6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff fd67 	bl	8004658 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2240      	movs	r2, #64	; 0x40
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	f043 0204 	orr.w	r2, r3, #4
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fd5a 	bl	800466c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bf2:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	60d3      	str	r3, [r2, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <__NVIC_GetPriorityGrouping+0x18>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	f003 0307 	and.w	r3, r3, #7
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db0b      	blt.n	8004c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	f003 021f 	and.w	r2, r3, #31
 8004c3c:	4907      	ldr	r1, [pc, #28]	; (8004c5c <__NVIC_EnableIRQ+0x38>)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2001      	movs	r0, #1
 8004c46:	fa00 f202 	lsl.w	r2, r0, r2
 8004c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	e000e100 	.word	0xe000e100

08004c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	db0a      	blt.n	8004c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	490c      	ldr	r1, [pc, #48]	; (8004cac <__NVIC_SetPriority+0x4c>)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	0112      	lsls	r2, r2, #4
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	440b      	add	r3, r1
 8004c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c88:	e00a      	b.n	8004ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4908      	ldr	r1, [pc, #32]	; (8004cb0 <__NVIC_SetPriority+0x50>)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	3b04      	subs	r3, #4
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	761a      	strb	r2, [r3, #24]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000e100 	.word	0xe000e100
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b089      	sub	sp, #36	; 0x24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f1c3 0307 	rsb	r3, r3, #7
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	bf28      	it	cs
 8004cd2:	2304      	movcs	r3, #4
 8004cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d902      	bls.n	8004ce4 <NVIC_EncodePriority+0x30>
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3b03      	subs	r3, #3
 8004ce2:	e000      	b.n	8004ce6 <NVIC_EncodePriority+0x32>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43da      	mvns	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	43d9      	mvns	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d0c:	4313      	orrs	r3, r2
         );
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3724      	adds	r7, #36	; 0x24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d2c:	d301      	bcc.n	8004d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e00f      	b.n	8004d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d32:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <SysTick_Config+0x40>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d3a:	210f      	movs	r1, #15
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	f7ff ff8e 	bl	8004c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <SysTick_Config+0x40>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d4a:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <SysTick_Config+0x40>)
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	e000e010 	.word	0xe000e010

08004d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff29 	bl	8004bc0 <__NVIC_SetPriorityGrouping>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d88:	f7ff ff3e 	bl	8004c08 <__NVIC_GetPriorityGrouping>
 8004d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	6978      	ldr	r0, [r7, #20]
 8004d94:	f7ff ff8e 	bl	8004cb4 <NVIC_EncodePriority>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff5d 	bl	8004c60 <__NVIC_SetPriority>
}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	4603      	mov	r3, r0
 8004db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff ff31 	bl	8004c24 <__NVIC_EnableIRQ>
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ffa2 	bl	8004d1c <SysTick_Config>
 8004dd8:	4603      	mov	r3, r0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7ff fac4 	bl	800437c <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e099      	b.n	8004f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e20:	e00f      	b.n	8004e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e22:	f7ff faab 	bl	800437c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	d908      	bls.n	8004e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e078      	b.n	8004f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e8      	bne.n	8004e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4b38      	ldr	r3, [pc, #224]	; (8004f3c <HAL_DMA_Init+0x158>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d107      	bne.n	8004eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0307 	bic.w	r3, r3, #7
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d117      	bne.n	8004f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fa9d 	bl	8005428 <DMA_CheckFifoParam>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f02:	2301      	movs	r3, #1
 8004f04:	e016      	b.n	8004f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa54 	bl	80053bc <DMA_CalcBaseAndBitshift>
 8004f14:	4603      	mov	r3, r0
 8004f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	223f      	movs	r2, #63	; 0x3f
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	f010803f 	.word	0xf010803f

08004f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_DMA_Start_IT+0x26>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e040      	b.n	8004fe8 <HAL_DMA_Start_IT+0xa8>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d12f      	bne.n	8004fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f9e6 	bl	8005360 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f98:	223f      	movs	r2, #63	; 0x3f
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0216 	orr.w	r2, r2, #22
 8004fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e005      	b.n	8004fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d004      	beq.n	800500e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e00c      	b.n	8005028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2205      	movs	r2, #5
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005040:	4b8e      	ldr	r3, [pc, #568]	; (800527c <HAL_DMA_IRQHandler+0x248>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a8e      	ldr	r2, [pc, #568]	; (8005280 <HAL_DMA_IRQHandler+0x24c>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	0a9b      	lsrs	r3, r3, #10
 800504c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505e:	2208      	movs	r2, #8
 8005060:	409a      	lsls	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01a      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d013      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0204 	bic.w	r2, r2, #4
 8005086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	2208      	movs	r2, #8
 800508e:	409a      	lsls	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f043 0201 	orr.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	2201      	movs	r2, #1
 80050a6:	409a      	lsls	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d012      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c2:	2201      	movs	r2, #1
 80050c4:	409a      	lsls	r2, r3
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f043 0202 	orr.w	r2, r3, #2
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	2204      	movs	r2, #4
 80050dc:	409a      	lsls	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d012      	beq.n	800510c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f8:	2204      	movs	r2, #4
 80050fa:	409a      	lsls	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f043 0204 	orr.w	r2, r3, #4
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	2210      	movs	r2, #16
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d043      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d03c      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512e:	2210      	movs	r2, #16
 8005130:	409a      	lsls	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d018      	beq.n	8005176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d108      	bne.n	8005164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d024      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
 8005162:	e01f      	b.n	80051a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01b      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
 8005174:	e016      	b.n	80051a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0208 	bic.w	r2, r2, #8
 8005192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	2220      	movs	r2, #32
 80051aa:	409a      	lsls	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 808f 	beq.w	80052d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8087 	beq.w	80052d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ca:	2220      	movs	r2, #32
 80051cc:	409a      	lsls	r2, r3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d136      	bne.n	800524c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0216 	bic.w	r2, r2, #22
 80051ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <HAL_DMA_IRQHandler+0x1da>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0208 	bic.w	r2, r2, #8
 800521c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	223f      	movs	r2, #63	; 0x3f
 8005224:	409a      	lsls	r2, r3
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523e:	2b00      	cmp	r3, #0
 8005240:	d07e      	beq.n	8005340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	4798      	blx	r3
        }
        return;
 800524a:	e079      	b.n	8005340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01d      	beq.n	8005296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10d      	bne.n	8005284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	2b00      	cmp	r3, #0
 800526e:	d031      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
 8005278:	e02c      	b.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
 800527a:	bf00      	nop
 800527c:	2000004c 	.word	0x2000004c
 8005280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d023      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
 8005294:	e01e      	b.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0210 	bic.w	r2, r2, #16
 80052b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d032      	beq.n	8005342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d022      	beq.n	800532e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2205      	movs	r2, #5
 80052ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	3301      	adds	r3, #1
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	429a      	cmp	r2, r3
 800530a:	d307      	bcc.n	800531c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f2      	bne.n	8005300 <HAL_DMA_IRQHandler+0x2cc>
 800531a:	e000      	b.n	800531e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800531c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
 800533e:	e000      	b.n	8005342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005340:	bf00      	nop
    }
  }
}
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800537c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d108      	bne.n	80053a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800539e:	e007      	b.n	80053b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	3b10      	subs	r3, #16
 80053cc:	4a14      	ldr	r2, [pc, #80]	; (8005420 <DMA_CalcBaseAndBitshift+0x64>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	091b      	lsrs	r3, r3, #4
 80053d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053d6:	4a13      	ldr	r2, [pc, #76]	; (8005424 <DMA_CalcBaseAndBitshift+0x68>)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d909      	bls.n	80053fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	1d1a      	adds	r2, r3, #4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	659a      	str	r2, [r3, #88]	; 0x58
 80053fc:	e007      	b.n	800540e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	aaaaaaab 	.word	0xaaaaaaab
 8005424:	0800d95c 	.word	0x0800d95c

08005428 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11f      	bne.n	8005482 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d856      	bhi.n	80054f6 <DMA_CheckFifoParam+0xce>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <DMA_CheckFifoParam+0x28>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005461 	.word	0x08005461
 8005454:	08005473 	.word	0x08005473
 8005458:	08005461 	.word	0x08005461
 800545c:	080054f7 	.word	0x080054f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d046      	beq.n	80054fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005470:	e043      	b.n	80054fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800547a:	d140      	bne.n	80054fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005480:	e03d      	b.n	80054fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548a:	d121      	bne.n	80054d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b03      	cmp	r3, #3
 8005490:	d837      	bhi.n	8005502 <DMA_CheckFifoParam+0xda>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <DMA_CheckFifoParam+0x70>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054a9 	.word	0x080054a9
 800549c:	080054af 	.word	0x080054af
 80054a0:	080054a9 	.word	0x080054a9
 80054a4:	080054c1 	.word	0x080054c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      break;
 80054ac:	e030      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d025      	beq.n	8005506 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054be:	e022      	b.n	8005506 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054c8:	d11f      	bne.n	800550a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054ce:	e01c      	b.n	800550a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d903      	bls.n	80054de <DMA_CheckFifoParam+0xb6>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d003      	beq.n	80054e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054dc:	e018      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
      break;
 80054e2:	e015      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00e      	beq.n	800550e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
      break;
 80054f4:	e00b      	b.n	800550e <DMA_CheckFifoParam+0xe6>
      break;
 80054f6:	bf00      	nop
 80054f8:	e00a      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
      break;
 80054fa:	bf00      	nop
 80054fc:	e008      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
      break;
 80054fe:	bf00      	nop
 8005500:	e006      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
      break;
 8005502:	bf00      	nop
 8005504:	e004      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
      break;
 8005506:	bf00      	nop
 8005508:	e002      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
      break;   
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <DMA_CheckFifoParam+0xe8>
      break;
 800550e:	bf00      	nop
    }
  } 
  
  return status; 
 8005510:	7bfb      	ldrb	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop

08005520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	; 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005532:	2300      	movs	r3, #0
 8005534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e153      	b.n	80057e4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800553c:	2201      	movs	r2, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4013      	ands	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	429a      	cmp	r2, r3
 8005556:	f040 8142 	bne.w	80057de <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b01      	cmp	r3, #1
 8005564:	d005      	beq.n	8005572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800556e:	2b02      	cmp	r3, #2
 8005570:	d130      	bne.n	80055d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	2203      	movs	r2, #3
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055a8:	2201      	movs	r2, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4013      	ands	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 0201 	and.w	r2, r3, #1
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d017      	beq.n	8005610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	2203      	movs	r2, #3
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d123      	bne.n	8005664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	08da      	lsrs	r2, r3, #3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3208      	adds	r2, #8
 8005624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	220f      	movs	r2, #15
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	08da      	lsrs	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3208      	adds	r2, #8
 800565e:	69b9      	ldr	r1, [r7, #24]
 8005660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4013      	ands	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0203 	and.w	r2, r3, #3
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 809c 	beq.w	80057de <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	4b54      	ldr	r3, [pc, #336]	; (80057fc <HAL_GPIO_Init+0x2dc>)
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	4a53      	ldr	r2, [pc, #332]	; (80057fc <HAL_GPIO_Init+0x2dc>)
 80056b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056b4:	6453      	str	r3, [r2, #68]	; 0x44
 80056b6:	4b51      	ldr	r3, [pc, #324]	; (80057fc <HAL_GPIO_Init+0x2dc>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056c2:	4a4f      	ldr	r2, [pc, #316]	; (8005800 <HAL_GPIO_Init+0x2e0>)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	3302      	adds	r3, #2
 80056ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	220f      	movs	r2, #15
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a46      	ldr	r2, [pc, #280]	; (8005804 <HAL_GPIO_Init+0x2e4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <HAL_GPIO_Init+0x1f6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a45      	ldr	r2, [pc, #276]	; (8005808 <HAL_GPIO_Init+0x2e8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00d      	beq.n	8005712 <HAL_GPIO_Init+0x1f2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a44      	ldr	r2, [pc, #272]	; (800580c <HAL_GPIO_Init+0x2ec>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <HAL_GPIO_Init+0x1ee>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a43      	ldr	r2, [pc, #268]	; (8005810 <HAL_GPIO_Init+0x2f0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_GPIO_Init+0x1ea>
 8005706:	2303      	movs	r3, #3
 8005708:	e006      	b.n	8005718 <HAL_GPIO_Init+0x1f8>
 800570a:	2307      	movs	r3, #7
 800570c:	e004      	b.n	8005718 <HAL_GPIO_Init+0x1f8>
 800570e:	2302      	movs	r3, #2
 8005710:	e002      	b.n	8005718 <HAL_GPIO_Init+0x1f8>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_GPIO_Init+0x1f8>
 8005716:	2300      	movs	r3, #0
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	f002 0203 	and.w	r2, r2, #3
 800571e:	0092      	lsls	r2, r2, #2
 8005720:	4093      	lsls	r3, r2
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005728:	4935      	ldr	r1, [pc, #212]	; (8005800 <HAL_GPIO_Init+0x2e0>)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	3302      	adds	r3, #2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005736:	4b37      	ldr	r3, [pc, #220]	; (8005814 <HAL_GPIO_Init+0x2f4>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800575a:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <HAL_GPIO_Init+0x2f4>)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005760:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <HAL_GPIO_Init+0x2f4>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	43db      	mvns	r3, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005784:	4a23      	ldr	r2, [pc, #140]	; (8005814 <HAL_GPIO_Init+0x2f4>)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800578a:	4b22      	ldr	r3, [pc, #136]	; (8005814 <HAL_GPIO_Init+0x2f4>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ae:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_GPIO_Init+0x2f4>)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057b4:	4b17      	ldr	r3, [pc, #92]	; (8005814 <HAL_GPIO_Init+0x2f4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057d8:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <HAL_GPIO_Init+0x2f4>)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	f67f aea8 	bls.w	800553c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3724      	adds	r7, #36	; 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800
 8005800:	40013800 	.word	0x40013800
 8005804:	40020000 	.word	0x40020000
 8005808:	40020400 	.word	0x40020400
 800580c:	40020800 	.word	0x40020800
 8005810:	40020c00 	.word	0x40020c00
 8005814:	40013c00 	.word	0x40013c00

08005818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	887b      	ldrh	r3, [r7, #2]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e001      	b.n	800583a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
 8005854:	4613      	mov	r3, r2
 8005856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005858:	787b      	ldrb	r3, [r7, #1]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005864:	e003      	b.n	800586e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005866:	887b      	ldrh	r3, [r7, #2]
 8005868:	041a      	lsls	r2, r3, #16
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	619a      	str	r2, [r3, #24]
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e12b      	b.n	8005ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fd f8b8 	bl	8002a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2224      	movs	r2, #36	; 0x24
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058e0:	f001 f9c6 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 80058e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	4a81      	ldr	r2, [pc, #516]	; (8005af0 <HAL_I2C_Init+0x274>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d807      	bhi.n	8005900 <HAL_I2C_Init+0x84>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a80      	ldr	r2, [pc, #512]	; (8005af4 <HAL_I2C_Init+0x278>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	bf94      	ite	ls
 80058f8:	2301      	movls	r3, #1
 80058fa:	2300      	movhi	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	e006      	b.n	800590e <HAL_I2C_Init+0x92>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4a7d      	ldr	r2, [pc, #500]	; (8005af8 <HAL_I2C_Init+0x27c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	bf94      	ite	ls
 8005908:	2301      	movls	r3, #1
 800590a:	2300      	movhi	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0e7      	b.n	8005ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a78      	ldr	r2, [pc, #480]	; (8005afc <HAL_I2C_Init+0x280>)
 800591a:	fba2 2303 	umull	r2, r3, r2, r3
 800591e:	0c9b      	lsrs	r3, r3, #18
 8005920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4a6a      	ldr	r2, [pc, #424]	; (8005af0 <HAL_I2C_Init+0x274>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d802      	bhi.n	8005950 <HAL_I2C_Init+0xd4>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	3301      	adds	r3, #1
 800594e:	e009      	b.n	8005964 <HAL_I2C_Init+0xe8>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005956:	fb02 f303 	mul.w	r3, r2, r3
 800595a:	4a69      	ldr	r2, [pc, #420]	; (8005b00 <HAL_I2C_Init+0x284>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	099b      	lsrs	r3, r3, #6
 8005962:	3301      	adds	r3, #1
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	430b      	orrs	r3, r1
 800596a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	495c      	ldr	r1, [pc, #368]	; (8005af0 <HAL_I2C_Init+0x274>)
 8005980:	428b      	cmp	r3, r1
 8005982:	d819      	bhi.n	80059b8 <HAL_I2C_Init+0x13c>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1e59      	subs	r1, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005992:	1c59      	adds	r1, r3, #1
 8005994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005998:	400b      	ands	r3, r1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_I2C_Init+0x138>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1e59      	subs	r1, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ac:	3301      	adds	r3, #1
 80059ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b2:	e051      	b.n	8005a58 <HAL_I2C_Init+0x1dc>
 80059b4:	2304      	movs	r3, #4
 80059b6:	e04f      	b.n	8005a58 <HAL_I2C_Init+0x1dc>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d111      	bne.n	80059e4 <HAL_I2C_Init+0x168>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1e58      	subs	r0, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6859      	ldr	r1, [r3, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	440b      	add	r3, r1
 80059ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80059d2:	3301      	adds	r3, #1
 80059d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e012      	b.n	8005a0a <HAL_I2C_Init+0x18e>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	1e58      	subs	r0, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	0099      	lsls	r1, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059fa:	3301      	adds	r3, #1
 80059fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_I2C_Init+0x196>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e022      	b.n	8005a58 <HAL_I2C_Init+0x1dc>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10e      	bne.n	8005a38 <HAL_I2C_Init+0x1bc>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1e58      	subs	r0, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	440b      	add	r3, r1
 8005a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a36:	e00f      	b.n	8005a58 <HAL_I2C_Init+0x1dc>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1e58      	subs	r0, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6859      	ldr	r1, [r3, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	0099      	lsls	r1, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a4e:	3301      	adds	r3, #1
 8005a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	6809      	ldr	r1, [r1, #0]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6911      	ldr	r1, [r2, #16]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68d2      	ldr	r2, [r2, #12]
 8005a92:	4311      	orrs	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	000186a0 	.word	0x000186a0
 8005af4:	001e847f 	.word	0x001e847f
 8005af8:	003d08ff 	.word	0x003d08ff
 8005afc:	431bde83 	.word	0x431bde83
 8005b00:	10624dd3 	.word	0x10624dd3

08005b04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	460b      	mov	r3, r1
 8005b12:	817b      	strh	r3, [r7, #10]
 8005b14:	4613      	mov	r3, r2
 8005b16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b18:	f7fe fc30 	bl	800437c <HAL_GetTick>
 8005b1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	f040 80e0 	bne.w	8005cec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	2319      	movs	r3, #25
 8005b32:	2201      	movs	r2, #1
 8005b34:	4970      	ldr	r1, [pc, #448]	; (8005cf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 fd1a 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
 8005b44:	e0d3      	b.n	8005cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_I2C_Master_Transmit+0x50>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e0cc      	b.n	8005cee <HAL_I2C_Master_Transmit+0x1ea>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d007      	beq.n	8005b7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0201 	orr.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2221      	movs	r2, #33	; 0x21
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2210      	movs	r2, #16
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	893a      	ldrh	r2, [r7, #8]
 8005baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4a50      	ldr	r2, [pc, #320]	; (8005cfc <HAL_I2C_Master_Transmit+0x1f8>)
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bbc:	8979      	ldrh	r1, [r7, #10]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fa58 	bl	8006078 <I2C_MasterRequestWrite>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e08d      	b.n	8005cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005be8:	e066      	b.n	8005cb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	6a39      	ldr	r1, [r7, #32]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fd94 	bl	800671c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00d      	beq.n	8005c16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d107      	bne.n	8005c12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e06b      	b.n	8005cee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d11b      	bne.n	8005c8c <HAL_I2C_Master_Transmit+0x188>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d017      	beq.n	8005c8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	781a      	ldrb	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	6a39      	ldr	r1, [r7, #32]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fd84 	bl	800679e <I2C_WaitOnBTFFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00d      	beq.n	8005cb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d107      	bne.n	8005cb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e01a      	b.n	8005cee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d194      	bne.n	8005bea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	00100002 	.word	0x00100002
 8005cfc:	ffff0000 	.word	0xffff0000

08005d00 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08c      	sub	sp, #48	; 0x30
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	4608      	mov	r0, r1
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	817b      	strh	r3, [r7, #10]
 8005d12:	460b      	mov	r3, r1
 8005d14:	813b      	strh	r3, [r7, #8]
 8005d16:	4613      	mov	r3, r2
 8005d18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d1a:	f7fe fb2f 	bl	800437c <HAL_GetTick>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	f040 8176 	bne.w	800601e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d32:	4b95      	ldr	r3, [pc, #596]	; (8005f88 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	08db      	lsrs	r3, r3, #3
 8005d38:	4a94      	ldr	r2, [pc, #592]	; (8005f8c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	0a1a      	lsrs	r2, r3, #8
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009a      	lsls	r2, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d116      	bne.n	8005d86 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f043 0220 	orr.w	r2, r3, #32
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e14c      	b.n	8006020 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d0db      	beq.n	8005d4c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2C_Mem_Read_DMA+0xa2>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e13e      	b.n	8006020 <HAL_I2C_Mem_Read_DMA+0x320>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d007      	beq.n	8005dc8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2222      	movs	r2, #34	; 0x22
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4a62      	ldr	r2, [pc, #392]	; (8005f90 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005e0a:	897a      	ldrh	r2, [r7, #10]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005e10:	893a      	ldrh	r2, [r7, #8]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 80cc 	beq.w	8005fc4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d02d      	beq.n	8005e90 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	4a56      	ldr	r2, [pc, #344]	; (8005f94 <HAL_I2C_Mem_Read_DMA+0x294>)
 8005e3a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	4a55      	ldr	r2, [pc, #340]	; (8005f98 <HAL_I2C_Mem_Read_DMA+0x298>)
 8005e42:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	2200      	movs	r2, #0
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	2200      	movs	r2, #0
 8005e52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	2200      	movs	r2, #0
 8005e5a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	2200      	movs	r2, #0
 8005e62:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3310      	adds	r3, #16
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	461a      	mov	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	f7ff f861 	bl	8004f40 <HAL_DMA_Start_IT>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 8087 	bne.w	8005f9c <HAL_I2C_Mem_Read_DMA+0x29c>
 8005e8e:	e013      	b.n	8005eb8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0b3      	b.n	8006020 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005eb8:	88f8      	ldrh	r0, [r7, #6]
 8005eba:	893a      	ldrh	r2, [r7, #8]
 8005ebc:	8979      	ldrh	r1, [r7, #10]
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	2323      	movs	r3, #35	; 0x23
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f957 	bl	800617c <I2C_RequestMemoryRead>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d023      	beq.n	8005f1c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff f889 	bl	8004ff0 <HAL_DMA_Abort_IT>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	2200      	movs	r2, #0
 8005eea:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efa:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e081      	b.n	8006020 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d108      	bne.n	8005f36 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e007      	b.n	8005f46 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f46:	2300      	movs	r3, #0
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	61bb      	str	r3, [r7, #24]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f72:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	e049      	b.n	800601a <HAL_I2C_Mem_Read_DMA+0x31a>
 8005f86:	bf00      	nop
 8005f88:	2000004c 	.word	0x2000004c
 8005f8c:	14f8b589 	.word	0x14f8b589
 8005f90:	ffff0000 	.word	0xffff0000
 8005f94:	0800634d 	.word	0x0800634d
 8005f98:	080064f7 	.word	0x080064f7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f043 0210 	orr.w	r2, r3, #16
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e02d      	b.n	8006020 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005fc4:	88f8      	ldrh	r0, [r7, #6]
 8005fc6:	893a      	ldrh	r2, [r7, #8]
 8005fc8:	8979      	ldrh	r1, [r7, #10]
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	2323      	movs	r3, #35	; 0x23
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f8d1 	bl	800617c <I2C_RequestMemoryRead>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e01d      	b.n	8006020 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006008:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3728      	adds	r7, #40	; 0x28
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	460b      	mov	r3, r1
 8006086:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b08      	cmp	r3, #8
 8006092:	d006      	beq.n	80060a2 <I2C_MasterRequestWrite+0x2a>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d003      	beq.n	80060a2 <I2C_MasterRequestWrite+0x2a>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060a0:	d108      	bne.n	80060b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	e00b      	b.n	80060cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	2b12      	cmp	r3, #18
 80060ba:	d107      	bne.n	80060cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 fa49 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00d      	beq.n	8006100 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f2:	d103      	bne.n	80060fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e035      	b.n	800616c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006108:	d108      	bne.n	800611c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800610a:	897b      	ldrh	r3, [r7, #10]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006118:	611a      	str	r2, [r3, #16]
 800611a:	e01b      	b.n	8006154 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800611c:	897b      	ldrh	r3, [r7, #10]
 800611e:	11db      	asrs	r3, r3, #7
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f003 0306 	and.w	r3, r3, #6
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f063 030f 	orn	r3, r3, #15
 800612c:	b2da      	uxtb	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	490e      	ldr	r1, [pc, #56]	; (8006174 <I2C_MasterRequestWrite+0xfc>)
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fa6f 	bl	800661e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e010      	b.n	800616c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800614a:	897b      	ldrh	r3, [r7, #10]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	4907      	ldr	r1, [pc, #28]	; (8006178 <I2C_MasterRequestWrite+0x100>)
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fa5f 	bl	800661e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	00010008 	.word	0x00010008
 8006178:	00010002 	.word	0x00010002

0800617c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	4608      	mov	r0, r1
 8006186:	4611      	mov	r1, r2
 8006188:	461a      	mov	r2, r3
 800618a:	4603      	mov	r3, r0
 800618c:	817b      	strh	r3, [r7, #10]
 800618e:	460b      	mov	r3, r1
 8006190:	813b      	strh	r3, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	2200      	movs	r2, #0
 80061be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f9d4 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00d      	beq.n	80061ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061dc:	d103      	bne.n	80061e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e0aa      	b.n	8006340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061ea:	897b      	ldrh	r3, [r7, #10]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	4952      	ldr	r1, [pc, #328]	; (8006348 <I2C_RequestMemoryRead+0x1cc>)
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fa0c 	bl	800661e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e097      	b.n	8006340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006228:	6a39      	ldr	r1, [r7, #32]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fa76 	bl	800671c <I2C_WaitOnTXEFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00d      	beq.n	8006252 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b04      	cmp	r3, #4
 800623c:	d107      	bne.n	800624e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e076      	b.n	8006340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d105      	bne.n	8006264 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006258:	893b      	ldrh	r3, [r7, #8]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	611a      	str	r2, [r3, #16]
 8006262:	e021      	b.n	80062a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006264:	893b      	ldrh	r3, [r7, #8]
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	b29b      	uxth	r3, r3
 800626a:	b2da      	uxtb	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006274:	6a39      	ldr	r1, [r7, #32]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fa50 	bl	800671c <I2C_WaitOnTXEFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	2b04      	cmp	r3, #4
 8006288:	d107      	bne.n	800629a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e050      	b.n	8006340 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800629e:	893b      	ldrh	r3, [r7, #8]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	6a39      	ldr	r1, [r7, #32]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fa35 	bl	800671c <I2C_WaitOnTXEFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00d      	beq.n	80062d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d107      	bne.n	80062d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e035      	b.n	8006340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f93d 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00d      	beq.n	8006318 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630a:	d103      	bne.n	8006314 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e013      	b.n	8006340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006318:	897b      	ldrh	r3, [r7, #10]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	b2da      	uxtb	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	6a3a      	ldr	r2, [r7, #32]
 800632c:	4906      	ldr	r1, [pc, #24]	; (8006348 <I2C_RequestMemoryRead+0x1cc>)
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f975 	bl	800661e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	00010002 	.word	0x00010002

0800634c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006368:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800637e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638c:	2200      	movs	r2, #0
 800638e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	2200      	movs	r2, #0
 800639e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80063a0:	7cfb      	ldrb	r3, [r7, #19]
 80063a2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80063a6:	2b21      	cmp	r3, #33	; 0x21
 80063a8:	d007      	beq.n	80063ba <I2C_DMAXferCplt+0x6e>
 80063aa:	7cfb      	ldrb	r3, [r7, #19]
 80063ac:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80063b0:	2b22      	cmp	r3, #34	; 0x22
 80063b2:	d131      	bne.n	8006418 <I2C_DMAXferCplt+0xcc>
 80063b4:	7cbb      	ldrb	r3, [r7, #18]
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d12e      	bne.n	8006418 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	2b29      	cmp	r3, #41	; 0x29
 80063d4:	d10a      	bne.n	80063ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2221      	movs	r2, #33	; 0x21
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2228      	movs	r2, #40	; 0x28
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063e4:	6978      	ldr	r0, [r7, #20]
 80063e6:	f7ff fe29 	bl	800603c <HAL_I2C_SlaveTxCpltCallback>
 80063ea:	e00c      	b.n	8006406 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80063ec:	7cfb      	ldrb	r3, [r7, #19]
 80063ee:	2b2a      	cmp	r3, #42	; 0x2a
 80063f0:	d109      	bne.n	8006406 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2222      	movs	r2, #34	; 0x22
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2228      	movs	r2, #40	; 0x28
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006400:	6978      	ldr	r0, [r7, #20]
 8006402:	f7ff fe25 	bl	8006050 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006414:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006416:	e06a      	b.n	80064ee <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d064      	beq.n	80064ee <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b01      	cmp	r3, #1
 800642c:	d107      	bne.n	800643e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800644c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006454:	d009      	beq.n	800646a <I2C_DMAXferCplt+0x11e>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b08      	cmp	r3, #8
 800645a:	d006      	beq.n	800646a <I2C_DMAXferCplt+0x11e>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006462:	d002      	beq.n	800646a <I2C_DMAXferCplt+0x11e>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b20      	cmp	r3, #32
 8006468:	d107      	bne.n	800647a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006478:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006488:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006498:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2200      	movs	r2, #0
 800649e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80064a8:	6978      	ldr	r0, [r7, #20]
 80064aa:	f7ff fddb 	bl	8006064 <HAL_I2C_ErrorCallback>
}
 80064ae:	e01e      	b.n	80064ee <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d10a      	bne.n	80064da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80064d2:	6978      	ldr	r0, [r7, #20]
 80064d4:	f7fc fa5c 	bl	8002990 <HAL_I2C_MemRxCpltCallback>
}
 80064d8:	e009      	b.n	80064ee <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2212      	movs	r2, #18
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80064e8:	6978      	ldr	r0, [r7, #20]
 80064ea:	f7ff fd9d 	bl	8006028 <HAL_I2C_MasterRxCpltCallback>
}
 80064ee:	bf00      	nop
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006510:	2200      	movs	r2, #0
 8006512:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	2200      	movs	r2, #0
 8006522:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fe ff0f 	bl	8005348 <HAL_DMA_GetError>
 800652a:	4603      	mov	r3, r0
 800652c:	2b02      	cmp	r3, #2
 800652e:	d01b      	beq.n	8006568 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f043 0210 	orr.w	r2, r3, #16
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7ff fd7e 	bl	8006064 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006568:	bf00      	nop
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4613      	mov	r3, r2
 800657e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006580:	e025      	b.n	80065ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d021      	beq.n	80065ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800658a:	f7fd fef7 	bl	800437c <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d302      	bcc.n	80065a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d116      	bne.n	80065ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e023      	b.n	8006616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d10d      	bne.n	80065f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	43da      	mvns	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	e00c      	b.n	800660e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	43da      	mvns	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4013      	ands	r3, r2
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf0c      	ite	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	2300      	movne	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	429a      	cmp	r2, r3
 8006612:	d0b6      	beq.n	8006582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800662c:	e051      	b.n	80066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d123      	bne.n	8006686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800664c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	f043 0204 	orr.w	r2, r3, #4
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e046      	b.n	8006714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d021      	beq.n	80066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668e:	f7fd fe75 	bl	800437c <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d116      	bne.n	80066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f043 0220 	orr.w	r2, r3, #32
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e020      	b.n	8006714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d10c      	bne.n	80066f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	43da      	mvns	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	2300      	moveq	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	e00b      	b.n	800670e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	43da      	mvns	r2, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4013      	ands	r3, r2
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	bf14      	ite	ne
 8006708:	2301      	movne	r3, #1
 800670a:	2300      	moveq	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d18d      	bne.n	800662e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006728:	e02d      	b.n	8006786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f878 	bl	8006820 <I2C_IsAcknowledgeFailed>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e02d      	b.n	8006796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006740:	d021      	beq.n	8006786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006742:	f7fd fe1b 	bl	800437c <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	d302      	bcc.n	8006758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d116      	bne.n	8006786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f043 0220 	orr.w	r2, r3, #32
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e007      	b.n	8006796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006790:	2b80      	cmp	r3, #128	; 0x80
 8006792:	d1ca      	bne.n	800672a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067aa:	e02d      	b.n	8006808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f837 	bl	8006820 <I2C_IsAcknowledgeFailed>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e02d      	b.n	8006818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c2:	d021      	beq.n	8006808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c4:	f7fd fdda 	bl	800437c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d302      	bcc.n	80067da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d116      	bne.n	8006808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e007      	b.n	8006818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b04      	cmp	r3, #4
 8006814:	d1ca      	bne.n	80067ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006836:	d11b      	bne.n	8006870 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006840:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	f043 0204 	orr.w	r2, r3, #4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0cc      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006894:	4b68      	ldr	r3, [pc, #416]	; (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d90c      	bls.n	80068bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b65      	ldr	r3, [pc, #404]	; (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b63      	ldr	r3, [pc, #396]	; (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0b8      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d020      	beq.n	800690a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068d4:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4a58      	ldr	r2, [pc, #352]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068ec:	4b53      	ldr	r3, [pc, #332]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	4a52      	ldr	r2, [pc, #328]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f8:	4b50      	ldr	r3, [pc, #320]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	494d      	ldr	r1, [pc, #308]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	4313      	orrs	r3, r2
 8006908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d044      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d107      	bne.n	800692e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800691e:	4b47      	ldr	r3, [pc, #284]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d119      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e07f      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d003      	beq.n	800693e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800693a:	2b03      	cmp	r3, #3
 800693c:	d107      	bne.n	800694e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693e:	4b3f      	ldr	r3, [pc, #252]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e06f      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694e:	4b3b      	ldr	r3, [pc, #236]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e067      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800695e:	4b37      	ldr	r3, [pc, #220]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f023 0203 	bic.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4934      	ldr	r1, [pc, #208]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	4313      	orrs	r3, r2
 800696e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006970:	f7fd fd04 	bl	800437c <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006976:	e00a      	b.n	800698e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006978:	f7fd fd00 	bl	800437c <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	; 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e04f      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698e:	4b2b      	ldr	r3, [pc, #172]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 020c 	and.w	r2, r3, #12
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	429a      	cmp	r2, r3
 800699e:	d1eb      	bne.n	8006978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069a0:	4b25      	ldr	r3, [pc, #148]	; (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d20c      	bcs.n	80069c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ae:	4b22      	ldr	r3, [pc, #136]	; (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b6:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e032      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4916      	ldr	r1, [pc, #88]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	490e      	ldr	r1, [pc, #56]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a06:	f000 f821 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	490a      	ldr	r1, [pc, #40]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 8006a18:	5ccb      	ldrb	r3, [r1, r3]
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <HAL_RCC_ClockConfig+0x1c8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fd fc64 	bl	80042f4 <HAL_InitTick>

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40023c00 	.word	0x40023c00
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	0800d944 	.word	0x0800d944
 8006a44:	2000004c 	.word	0x2000004c
 8006a48:	20000054 	.word	0x20000054

08006a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a50:	b094      	sub	sp, #80	; 0x50
 8006a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	647b      	str	r3, [r7, #68]	; 0x44
 8006a58:	2300      	movs	r3, #0
 8006a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a64:	4b79      	ldr	r3, [pc, #484]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 030c 	and.w	r3, r3, #12
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d00d      	beq.n	8006a8c <HAL_RCC_GetSysClockFreq+0x40>
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	f200 80e1 	bhi.w	8006c38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x34>
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a7e:	e0db      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a80:	4b73      	ldr	r3, [pc, #460]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a84:	e0db      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a86:	4b73      	ldr	r3, [pc, #460]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a8a:	e0d8      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a8c:	4b6f      	ldr	r3, [pc, #444]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a96:	4b6d      	ldr	r3, [pc, #436]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d063      	beq.n	8006b6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa2:	4b6a      	ldr	r3, [pc, #424]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f04f 0100 	mov.w	r1, #0
 8006aca:	0159      	lsls	r1, r3, #5
 8006acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ad0:	0150      	lsls	r0, r2, #5
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	1a51      	subs	r1, r2, r1
 8006ada:	6139      	str	r1, [r7, #16]
 8006adc:	4629      	mov	r1, r5
 8006ade:	eb63 0301 	sbc.w	r3, r3, r1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006af0:	4659      	mov	r1, fp
 8006af2:	018b      	lsls	r3, r1, #6
 8006af4:	4651      	mov	r1, sl
 8006af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006afa:	4651      	mov	r1, sl
 8006afc:	018a      	lsls	r2, r1, #6
 8006afe:	4651      	mov	r1, sl
 8006b00:	ebb2 0801 	subs.w	r8, r2, r1
 8006b04:	4659      	mov	r1, fp
 8006b06:	eb63 0901 	sbc.w	r9, r3, r1
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b1e:	4690      	mov	r8, r2
 8006b20:	4699      	mov	r9, r3
 8006b22:	4623      	mov	r3, r4
 8006b24:	eb18 0303 	adds.w	r3, r8, r3
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	eb49 0303 	adc.w	r3, r9, r3
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b3e:	4629      	mov	r1, r5
 8006b40:	024b      	lsls	r3, r1, #9
 8006b42:	4621      	mov	r1, r4
 8006b44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b48:	4621      	mov	r1, r4
 8006b4a:	024a      	lsls	r2, r1, #9
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b52:	2200      	movs	r2, #0
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b5c:	f7fa f8b4 	bl	8000cc8 <__aeabi_uldivmod>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4613      	mov	r3, r2
 8006b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b68:	e058      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b6a:	4b38      	ldr	r3, [pc, #224]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	099b      	lsrs	r3, r3, #6
 8006b70:	2200      	movs	r2, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	4611      	mov	r1, r2
 8006b76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b7a:	623b      	str	r3, [r7, #32]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	f04f 0000 	mov.w	r0, #0
 8006b8c:	f04f 0100 	mov.w	r1, #0
 8006b90:	0159      	lsls	r1, r3, #5
 8006b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b96:	0150      	lsls	r0, r2, #5
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bbc:	ebb2 040a 	subs.w	r4, r2, sl
 8006bc0:	eb63 050b 	sbc.w	r5, r3, fp
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	00eb      	lsls	r3, r5, #3
 8006bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bd2:	00e2      	lsls	r2, r4, #3
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	4643      	mov	r3, r8
 8006bda:	18e3      	adds	r3, r4, r3
 8006bdc:	603b      	str	r3, [r7, #0]
 8006bde:	464b      	mov	r3, r9
 8006be0:	eb45 0303 	adc.w	r3, r5, r3
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	028b      	lsls	r3, r1, #10
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	028a      	lsls	r2, r1, #10
 8006c00:	4610      	mov	r0, r2
 8006c02:	4619      	mov	r1, r3
 8006c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c06:	2200      	movs	r2, #0
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	61fa      	str	r2, [r7, #28]
 8006c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c10:	f7fa f85a 	bl	8000cc8 <__aeabi_uldivmod>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4613      	mov	r3, r2
 8006c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	0c1b      	lsrs	r3, r3, #16
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	3301      	adds	r3, #1
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c36:	e002      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3750      	adds	r7, #80	; 0x50
 8006c44:	46bd      	mov	sp, r7
 8006c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	00f42400 	.word	0x00f42400
 8006c54:	007a1200 	.word	0x007a1200

08006c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c5c:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	2000004c 	.word	0x2000004c

08006c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c74:	f7ff fff0 	bl	8006c58 <HAL_RCC_GetHCLKFreq>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	0a9b      	lsrs	r3, r3, #10
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	4903      	ldr	r1, [pc, #12]	; (8006c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c86:	5ccb      	ldrb	r3, [r1, r3]
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40023800 	.word	0x40023800
 8006c94:	0800d954 	.word	0x0800d954

08006c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c9c:	f7ff ffdc 	bl	8006c58 <HAL_RCC_GetHCLKFreq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	0b5b      	lsrs	r3, r3, #13
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	4903      	ldr	r1, [pc, #12]	; (8006cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cae:	5ccb      	ldrb	r3, [r1, r3]
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	0800d954 	.word	0x0800d954

08006cc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e273      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d075      	beq.n	8006dca <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006cde:	4b88      	ldr	r3, [pc, #544]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 030c 	and.w	r3, r3, #12
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d00c      	beq.n	8006d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cea:	4b85      	ldr	r3, [pc, #532]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d112      	bne.n	8006d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cf6:	4b82      	ldr	r3, [pc, #520]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d02:	d10b      	bne.n	8006d1c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d04:	4b7e      	ldr	r3, [pc, #504]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d05b      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x108>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d157      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e24e      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d24:	d106      	bne.n	8006d34 <HAL_RCC_OscConfig+0x74>
 8006d26:	4b76      	ldr	r3, [pc, #472]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a75      	ldr	r2, [pc, #468]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e01d      	b.n	8006d70 <HAL_RCC_OscConfig+0xb0>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d3c:	d10c      	bne.n	8006d58 <HAL_RCC_OscConfig+0x98>
 8006d3e:	4b70      	ldr	r3, [pc, #448]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a6f      	ldr	r2, [pc, #444]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	4b6d      	ldr	r3, [pc, #436]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a6c      	ldr	r2, [pc, #432]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e00b      	b.n	8006d70 <HAL_RCC_OscConfig+0xb0>
 8006d58:	4b69      	ldr	r3, [pc, #420]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a68      	ldr	r2, [pc, #416]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	4b66      	ldr	r3, [pc, #408]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a65      	ldr	r2, [pc, #404]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d013      	beq.n	8006da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d78:	f7fd fb00 	bl	800437c <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d80:	f7fd fafc 	bl	800437c <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b64      	cmp	r3, #100	; 0x64
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e213      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d92:	4b5b      	ldr	r3, [pc, #364]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f0      	beq.n	8006d80 <HAL_RCC_OscConfig+0xc0>
 8006d9e:	e014      	b.n	8006dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da0:	f7fd faec 	bl	800437c <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006da8:	f7fd fae8 	bl	800437c <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b64      	cmp	r3, #100	; 0x64
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e1ff      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dba:	4b51      	ldr	r3, [pc, #324]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f0      	bne.n	8006da8 <HAL_RCC_OscConfig+0xe8>
 8006dc6:	e000      	b.n	8006dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d063      	beq.n	8006e9e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006dd6:	4b4a      	ldr	r3, [pc, #296]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 030c 	and.w	r3, r3, #12
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006de2:	4b47      	ldr	r3, [pc, #284]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d11c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dee:	4b44      	ldr	r3, [pc, #272]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d116      	bne.n	8006e28 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dfa:	4b41      	ldr	r3, [pc, #260]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <HAL_RCC_OscConfig+0x152>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d001      	beq.n	8006e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e1d3      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e12:	4b3b      	ldr	r3, [pc, #236]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4937      	ldr	r1, [pc, #220]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e26:	e03a      	b.n	8006e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d020      	beq.n	8006e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e30:	4b34      	ldr	r3, [pc, #208]	; (8006f04 <HAL_RCC_OscConfig+0x244>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e36:	f7fd faa1 	bl	800437c <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e3e:	f7fd fa9d 	bl	800437c <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e1b4      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e50:	4b2b      	ldr	r3, [pc, #172]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0f0      	beq.n	8006e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e5c:	4b28      	ldr	r3, [pc, #160]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	4925      	ldr	r1, [pc, #148]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	600b      	str	r3, [r1, #0]
 8006e70:	e015      	b.n	8006e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e72:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <HAL_RCC_OscConfig+0x244>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e78:	f7fd fa80 	bl	800437c <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e80:	f7fd fa7c 	bl	800437c <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e193      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e92:	4b1b      	ldr	r3, [pc, #108]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1f0      	bne.n	8006e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d036      	beq.n	8006f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d016      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eb2:	4b15      	ldr	r3, [pc, #84]	; (8006f08 <HAL_RCC_OscConfig+0x248>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb8:	f7fd fa60 	bl	800437c <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ec0:	f7fd fa5c 	bl	800437c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e173      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ed2:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <HAL_RCC_OscConfig+0x240>)
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0f0      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x200>
 8006ede:	e01b      	b.n	8006f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ee0:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <HAL_RCC_OscConfig+0x248>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee6:	f7fd fa49 	bl	800437c <HAL_GetTick>
 8006eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eec:	e00e      	b.n	8006f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eee:	f7fd fa45 	bl	800437c <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d907      	bls.n	8006f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e15c      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
 8006f00:	40023800 	.word	0x40023800
 8006f04:	42470000 	.word	0x42470000
 8006f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f0c:	4b8a      	ldr	r3, [pc, #552]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1ea      	bne.n	8006eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8097 	beq.w	8007054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f2a:	4b83      	ldr	r3, [pc, #524]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10f      	bne.n	8006f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f36:	2300      	movs	r3, #0
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	4b7f      	ldr	r3, [pc, #508]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	4a7e      	ldr	r2, [pc, #504]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f44:	6413      	str	r3, [r2, #64]	; 0x40
 8006f46:	4b7c      	ldr	r3, [pc, #496]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f4e:	60bb      	str	r3, [r7, #8]
 8006f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f52:	2301      	movs	r3, #1
 8006f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f56:	4b79      	ldr	r3, [pc, #484]	; (800713c <HAL_RCC_OscConfig+0x47c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d118      	bne.n	8006f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f62:	4b76      	ldr	r3, [pc, #472]	; (800713c <HAL_RCC_OscConfig+0x47c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a75      	ldr	r2, [pc, #468]	; (800713c <HAL_RCC_OscConfig+0x47c>)
 8006f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f6e:	f7fd fa05 	bl	800437c <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f76:	f7fd fa01 	bl	800437c <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e118      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f88:	4b6c      	ldr	r3, [pc, #432]	; (800713c <HAL_RCC_OscConfig+0x47c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d106      	bne.n	8006faa <HAL_RCC_OscConfig+0x2ea>
 8006f9c:	4b66      	ldr	r3, [pc, #408]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa0:	4a65      	ldr	r2, [pc, #404]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa8:	e01c      	b.n	8006fe4 <HAL_RCC_OscConfig+0x324>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	d10c      	bne.n	8006fcc <HAL_RCC_OscConfig+0x30c>
 8006fb2:	4b61      	ldr	r3, [pc, #388]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb6:	4a60      	ldr	r2, [pc, #384]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fb8:	f043 0304 	orr.w	r3, r3, #4
 8006fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fbe:	4b5e      	ldr	r3, [pc, #376]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	4a5d      	ldr	r2, [pc, #372]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fca:	e00b      	b.n	8006fe4 <HAL_RCC_OscConfig+0x324>
 8006fcc:	4b5a      	ldr	r3, [pc, #360]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	4a59      	ldr	r2, [pc, #356]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd8:	4b57      	ldr	r3, [pc, #348]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fdc:	4a56      	ldr	r2, [pc, #344]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8006fde:	f023 0304 	bic.w	r3, r3, #4
 8006fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d015      	beq.n	8007018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fec:	f7fd f9c6 	bl	800437c <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff2:	e00a      	b.n	800700a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ff4:	f7fd f9c2 	bl	800437c <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007002:	4293      	cmp	r3, r2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e0d7      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800700a:	4b4b      	ldr	r3, [pc, #300]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0ee      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x334>
 8007016:	e014      	b.n	8007042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007018:	f7fd f9b0 	bl	800437c <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800701e:	e00a      	b.n	8007036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007020:	f7fd f9ac 	bl	800437c <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f241 3288 	movw	r2, #5000	; 0x1388
 800702e:	4293      	cmp	r3, r2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e0c1      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007036:	4b40      	ldr	r3, [pc, #256]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1ee      	bne.n	8007020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d105      	bne.n	8007054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007048:	4b3b      	ldr	r3, [pc, #236]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	4a3a      	ldr	r2, [pc, #232]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 800704e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 80ad 	beq.w	80071b8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800705e:	4b36      	ldr	r3, [pc, #216]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 030c 	and.w	r3, r3, #12
 8007066:	2b08      	cmp	r3, #8
 8007068:	d060      	beq.n	800712c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d145      	bne.n	80070fe <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007072:	4b33      	ldr	r3, [pc, #204]	; (8007140 <HAL_RCC_OscConfig+0x480>)
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007078:	f7fd f980 	bl	800437c <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007080:	f7fd f97c 	bl	800437c <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e093      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007092:	4b29      	ldr	r3, [pc, #164]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1f0      	bne.n	8007080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69da      	ldr	r2, [r3, #28]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	019b      	lsls	r3, r3, #6
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	085b      	lsrs	r3, r3, #1
 80070b6:	3b01      	subs	r3, #1
 80070b8:	041b      	lsls	r3, r3, #16
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	061b      	lsls	r3, r3, #24
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	071b      	lsls	r3, r3, #28
 80070ca:	491b      	ldr	r1, [pc, #108]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d0:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <HAL_RCC_OscConfig+0x480>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d6:	f7fd f951 	bl	800437c <HAL_GetTick>
 80070da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070de:	f7fd f94d 	bl	800437c <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e064      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f0:	4b11      	ldr	r3, [pc, #68]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0f0      	beq.n	80070de <HAL_RCC_OscConfig+0x41e>
 80070fc:	e05c      	b.n	80071b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070fe:	4b10      	ldr	r3, [pc, #64]	; (8007140 <HAL_RCC_OscConfig+0x480>)
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fd f93a 	bl	800437c <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800710c:	f7fd f936 	bl	800437c <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e04d      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_RCC_OscConfig+0x478>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1f0      	bne.n	800710c <HAL_RCC_OscConfig+0x44c>
 800712a:	e045      	b.n	80071b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d107      	bne.n	8007144 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e040      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
 8007138:	40023800 	.word	0x40023800
 800713c:	40007000 	.word	0x40007000
 8007140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007144:	4b1f      	ldr	r3, [pc, #124]	; (80071c4 <HAL_RCC_OscConfig+0x504>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d030      	beq.n	80071b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800715c:	429a      	cmp	r2, r3
 800715e:	d129      	bne.n	80071b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800716a:	429a      	cmp	r2, r3
 800716c:	d122      	bne.n	80071b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007174:	4013      	ands	r3, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800717a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800717c:	4293      	cmp	r3, r2
 800717e:	d119      	bne.n	80071b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	085b      	lsrs	r3, r3, #1
 800718c:	3b01      	subs	r3, #1
 800718e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007190:	429a      	cmp	r2, r3
 8007192:	d10f      	bne.n	80071b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d107      	bne.n	80071b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d001      	beq.n	80071b8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800

080071c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e07b      	b.n	80072d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d108      	bne.n	80071f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ea:	d009      	beq.n	8007200 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	61da      	str	r2, [r3, #28]
 80071f2:	e005      	b.n	8007200 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fc fc88 	bl	8003b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007236:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007284:	ea42 0103 	orr.w	r1, r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	0c1b      	lsrs	r3, r3, #16
 800729e:	f003 0104 	and.w	r1, r3, #4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	f003 0210 	and.w	r2, r3, #16
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69da      	ldr	r2, [r3, #28]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b08c      	sub	sp, #48	; 0x30
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072e8:	2301      	movs	r3, #1
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_SPI_TransmitReceive+0x26>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e18a      	b.n	8007616 <HAL_SPI_TransmitReceive+0x33c>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007308:	f7fd f838 	bl	800437c <HAL_GetTick>
 800730c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800731e:	887b      	ldrh	r3, [r7, #2]
 8007320:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007326:	2b01      	cmp	r3, #1
 8007328:	d00f      	beq.n	800734a <HAL_SPI_TransmitReceive+0x70>
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007330:	d107      	bne.n	8007342 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <HAL_SPI_TransmitReceive+0x68>
 800733a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800733e:	2b04      	cmp	r3, #4
 8007340:	d003      	beq.n	800734a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007342:	2302      	movs	r3, #2
 8007344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007348:	e15b      	b.n	8007602 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <HAL_SPI_TransmitReceive+0x82>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_SPI_TransmitReceive+0x82>
 8007356:	887b      	ldrh	r3, [r7, #2]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d103      	bne.n	8007364 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007362:	e14e      	b.n	8007602 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b04      	cmp	r3, #4
 800736e:	d003      	beq.n	8007378 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2205      	movs	r2, #5
 8007374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	887a      	ldrh	r2, [r7, #2]
 8007388:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	887a      	ldrh	r2, [r7, #2]
 800738e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	887a      	ldrh	r2, [r7, #2]
 800739a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	887a      	ldrh	r2, [r7, #2]
 80073a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d007      	beq.n	80073cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d4:	d178      	bne.n	80074c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_SPI_TransmitReceive+0x10a>
 80073de:	8b7b      	ldrh	r3, [r7, #26]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d166      	bne.n	80074b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	881a      	ldrh	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	1c9a      	adds	r2, r3, #2
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007408:	e053      	b.n	80074b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b02      	cmp	r3, #2
 8007416:	d11b      	bne.n	8007450 <HAL_SPI_TransmitReceive+0x176>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d016      	beq.n	8007450 <HAL_SPI_TransmitReceive+0x176>
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d113      	bne.n	8007450 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b01      	cmp	r3, #1
 800745c:	d119      	bne.n	8007492 <HAL_SPI_TransmitReceive+0x1b8>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d014      	beq.n	8007492 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	b292      	uxth	r2, r2
 8007474:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	1c9a      	adds	r2, r3, #2
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800748e:	2301      	movs	r3, #1
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007492:	f7fc ff73 	bl	800437c <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800749e:	429a      	cmp	r2, r3
 80074a0:	d807      	bhi.n	80074b2 <HAL_SPI_TransmitReceive+0x1d8>
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d003      	beq.n	80074b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074b0:	e0a7      	b.n	8007602 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1a6      	bne.n	800740a <HAL_SPI_TransmitReceive+0x130>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1a1      	bne.n	800740a <HAL_SPI_TransmitReceive+0x130>
 80074c6:	e07c      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <HAL_SPI_TransmitReceive+0x1fc>
 80074d0:	8b7b      	ldrh	r3, [r7, #26]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d16b      	bne.n	80075ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	330c      	adds	r3, #12
 80074e0:	7812      	ldrb	r2, [r2, #0]
 80074e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074fc:	e057      	b.n	80075ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b02      	cmp	r3, #2
 800750a:	d11c      	bne.n	8007546 <HAL_SPI_TransmitReceive+0x26c>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d017      	beq.n	8007546 <HAL_SPI_TransmitReceive+0x26c>
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	2b01      	cmp	r3, #1
 800751a:	d114      	bne.n	8007546 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	7812      	ldrb	r2, [r2, #0]
 8007528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	d119      	bne.n	8007588 <HAL_SPI_TransmitReceive+0x2ae>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d014      	beq.n	8007588 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007584:	2301      	movs	r3, #1
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007588:	f7fc fef8 	bl	800437c <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007594:	429a      	cmp	r2, r3
 8007596:	d803      	bhi.n	80075a0 <HAL_SPI_TransmitReceive+0x2c6>
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d102      	bne.n	80075a6 <HAL_SPI_TransmitReceive+0x2cc>
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d103      	bne.n	80075ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075ac:	e029      	b.n	8007602 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1a2      	bne.n	80074fe <HAL_SPI_TransmitReceive+0x224>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d19d      	bne.n	80074fe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f8b2 	bl	8007730 <SPI_EndRxTxTransaction>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d006      	beq.n	80075e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80075de:	e010      	b.n	8007602 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10b      	bne.n	8007600 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	e000      	b.n	8007602 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007600:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007616:	4618      	mov	r0, r3
 8007618:	3730      	adds	r7, #48	; 0x30
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007630:	f7fc fea4 	bl	800437c <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4413      	add	r3, r2
 800763e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007640:	f7fc fe9c 	bl	800437c <HAL_GetTick>
 8007644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007646:	4b39      	ldr	r3, [pc, #228]	; (800772c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	015b      	lsls	r3, r3, #5
 800764c:	0d1b      	lsrs	r3, r3, #20
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	fb02 f303 	mul.w	r3, r2, r3
 8007654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007656:	e054      	b.n	8007702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d050      	beq.n	8007702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007660:	f7fc fe8c 	bl	800437c <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	429a      	cmp	r2, r3
 800766e:	d902      	bls.n	8007676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d13d      	bne.n	80076f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800768e:	d111      	bne.n	80076b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007698:	d004      	beq.n	80076a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a2:	d107      	bne.n	80076b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076bc:	d10f      	bne.n	80076de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e017      	b.n	8007722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	3b01      	subs	r3, #1
 8007700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4013      	ands	r3, r2
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	429a      	cmp	r2, r3
 8007710:	bf0c      	ite	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	2300      	movne	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	429a      	cmp	r2, r3
 800771e:	d19b      	bne.n	8007658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3720      	adds	r7, #32
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	2000004c 	.word	0x2000004c

08007730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800773c:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <SPI_EndRxTxTransaction+0x7c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a1b      	ldr	r2, [pc, #108]	; (80077b0 <SPI_EndRxTxTransaction+0x80>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	0d5b      	lsrs	r3, r3, #21
 8007748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800774c:	fb02 f303 	mul.w	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800775a:	d112      	bne.n	8007782 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	2180      	movs	r1, #128	; 0x80
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f7ff ff5a 	bl	8007620 <SPI_WaitFlagStateUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d016      	beq.n	80077a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007776:	f043 0220 	orr.w	r2, r3, #32
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e00f      	b.n	80077a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	3b01      	subs	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d0f2      	beq.n	8007782 <SPI_EndRxTxTransaction+0x52>
 800779c:	e000      	b.n	80077a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800779e:	bf00      	nop
  }

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	2000004c 	.word	0x2000004c
 80077b0:	165e9f81 	.word	0x165e9f81

080077b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e041      	b.n	800784a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fc fbda 	bl	8003f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3304      	adds	r3, #4
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f000 f9ce 	bl	8007b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b01      	cmp	r3, #1
 8007866:	d001      	beq.n	800786c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e04e      	b.n	800790a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0201 	orr.w	r2, r2, #1
 8007882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a23      	ldr	r2, [pc, #140]	; (8007918 <HAL_TIM_Base_Start_IT+0xc4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d022      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x80>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007896:	d01d      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x80>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1f      	ldr	r2, [pc, #124]	; (800791c <HAL_TIM_Base_Start_IT+0xc8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d018      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x80>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <HAL_TIM_Base_Start_IT+0xcc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d013      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x80>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1c      	ldr	r2, [pc, #112]	; (8007924 <HAL_TIM_Base_Start_IT+0xd0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00e      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x80>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1b      	ldr	r2, [pc, #108]	; (8007928 <HAL_TIM_Base_Start_IT+0xd4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x80>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a19      	ldr	r2, [pc, #100]	; (800792c <HAL_TIM_Base_Start_IT+0xd8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x80>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a18      	ldr	r2, [pc, #96]	; (8007930 <HAL_TIM_Base_Start_IT+0xdc>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d111      	bne.n	80078f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b06      	cmp	r3, #6
 80078e4:	d010      	beq.n	8007908 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0201 	orr.w	r2, r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f6:	e007      	b.n	8007908 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 0201 	orr.w	r2, r2, #1
 8007906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	40010000 	.word	0x40010000
 800791c:	40000400 	.word	0x40000400
 8007920:	40000800 	.word	0x40000800
 8007924:	40000c00 	.word	0x40000c00
 8007928:	40010400 	.word	0x40010400
 800792c:	40014000 	.word	0x40014000
 8007930:	40001800 	.word	0x40001800

08007934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b02      	cmp	r3, #2
 8007948:	d122      	bne.n	8007990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d11b      	bne.n	8007990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0202 	mvn.w	r2, #2
 8007960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8ee 	bl	8007b58 <HAL_TIM_IC_CaptureCallback>
 800797c:	e005      	b.n	800798a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f8e0 	bl	8007b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f8f1 	bl	8007b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0304 	and.w	r3, r3, #4
 800799a:	2b04      	cmp	r3, #4
 800799c:	d122      	bne.n	80079e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d11b      	bne.n	80079e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0204 	mvn.w	r2, #4
 80079b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f8c4 	bl	8007b58 <HAL_TIM_IC_CaptureCallback>
 80079d0:	e005      	b.n	80079de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f8b6 	bl	8007b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8c7 	bl	8007b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d122      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d11b      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0208 	mvn.w	r2, #8
 8007a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2204      	movs	r2, #4
 8007a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f89a 	bl	8007b58 <HAL_TIM_IC_CaptureCallback>
 8007a24:	e005      	b.n	8007a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f88c 	bl	8007b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f89d 	bl	8007b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d122      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d11b      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0210 	mvn.w	r2, #16
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2208      	movs	r2, #8
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f870 	bl	8007b58 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f862 	bl	8007b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f873 	bl	8007b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d10e      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d107      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0201 	mvn.w	r2, #1
 8007ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fb f8a2 	bl	8002bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d10e      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d107      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f97e 	bl	8007de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b40      	cmp	r3, #64	; 0x40
 8007af0:	d10e      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afc:	2b40      	cmp	r3, #64	; 0x40
 8007afe:	d107      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f838 	bl	8007b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	d10e      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d107      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0220 	mvn.w	r2, #32
 8007b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f948 	bl	8007dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a40      	ldr	r2, [pc, #256]	; (8007ca8 <TIM_Base_SetConfig+0x114>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d013      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb2:	d00f      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3d      	ldr	r2, [pc, #244]	; (8007cac <TIM_Base_SetConfig+0x118>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00b      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a3c      	ldr	r2, [pc, #240]	; (8007cb0 <TIM_Base_SetConfig+0x11c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d007      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a3b      	ldr	r2, [pc, #236]	; (8007cb4 <TIM_Base_SetConfig+0x120>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d003      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a3a      	ldr	r2, [pc, #232]	; (8007cb8 <TIM_Base_SetConfig+0x124>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d108      	bne.n	8007be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a2f      	ldr	r2, [pc, #188]	; (8007ca8 <TIM_Base_SetConfig+0x114>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d02b      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf4:	d027      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2c      	ldr	r2, [pc, #176]	; (8007cac <TIM_Base_SetConfig+0x118>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d023      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2b      	ldr	r2, [pc, #172]	; (8007cb0 <TIM_Base_SetConfig+0x11c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d01f      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2a      	ldr	r2, [pc, #168]	; (8007cb4 <TIM_Base_SetConfig+0x120>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01b      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a29      	ldr	r2, [pc, #164]	; (8007cb8 <TIM_Base_SetConfig+0x124>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d017      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a28      	ldr	r2, [pc, #160]	; (8007cbc <TIM_Base_SetConfig+0x128>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a27      	ldr	r2, [pc, #156]	; (8007cc0 <TIM_Base_SetConfig+0x12c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00f      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a26      	ldr	r2, [pc, #152]	; (8007cc4 <TIM_Base_SetConfig+0x130>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00b      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a25      	ldr	r2, [pc, #148]	; (8007cc8 <TIM_Base_SetConfig+0x134>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d007      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a24      	ldr	r2, [pc, #144]	; (8007ccc <TIM_Base_SetConfig+0x138>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d003      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a23      	ldr	r2, [pc, #140]	; (8007cd0 <TIM_Base_SetConfig+0x13c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d108      	bne.n	8007c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <TIM_Base_SetConfig+0x114>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_Base_SetConfig+0xf8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a0c      	ldr	r2, [pc, #48]	; (8007cb8 <TIM_Base_SetConfig+0x124>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d103      	bne.n	8007c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	615a      	str	r2, [r3, #20]
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40000800 	.word	0x40000800
 8007cb4:	40000c00 	.word	0x40000c00
 8007cb8:	40010400 	.word	0x40010400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40014400 	.word	0x40014400
 8007cc4:	40014800 	.word	0x40014800
 8007cc8:	40001800 	.word	0x40001800
 8007ccc:	40001c00 	.word	0x40001c00
 8007cd0:	40002000 	.word	0x40002000

08007cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e05a      	b.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a21      	ldr	r2, [pc, #132]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d022      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d38:	d01d      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d018      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d013      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a1a      	ldr	r2, [pc, #104]	; (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00e      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a18      	ldr	r2, [pc, #96]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a17      	ldr	r2, [pc, #92]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d004      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d10c      	bne.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40000400 	.word	0x40000400
 8007db8:	40000800 	.word	0x40000800
 8007dbc:	40000c00 	.word	0x40000c00
 8007dc0:	40010400 	.word	0x40010400
 8007dc4:	40014000 	.word	0x40014000
 8007dc8:	40001800 	.word	0x40001800

08007dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e03f      	b.n	8007e86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fc f91e 	bl	800405c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2224      	movs	r2, #36	; 0x24
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f929 	bl	8008090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695a      	ldr	r2, [r3, #20]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2220      	movs	r2, #32
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b08a      	sub	sp, #40	; 0x28
 8007e92:	af02      	add	r7, sp, #8
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	603b      	str	r3, [r7, #0]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d17c      	bne.n	8007fa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <HAL_UART_Transmit+0x2c>
 8007eb4:	88fb      	ldrh	r3, [r7, #6]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e075      	b.n	8007faa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_UART_Transmit+0x3e>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e06e      	b.n	8007faa <HAL_UART_Transmit+0x11c>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2221      	movs	r2, #33	; 0x21
 8007ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ee2:	f7fc fa4b 	bl	800437c <HAL_GetTick>
 8007ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	88fa      	ldrh	r2, [r7, #6]
 8007eec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efc:	d108      	bne.n	8007f10 <HAL_UART_Transmit+0x82>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d104      	bne.n	8007f10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	61bb      	str	r3, [r7, #24]
 8007f0e:	e003      	b.n	8007f18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f20:	e02a      	b.n	8007f78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2180      	movs	r1, #128	; 0x80
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f840 	bl	8007fb2 <UART_WaitOnFlagUntilTimeout>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e036      	b.n	8007faa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	3302      	adds	r3, #2
 8007f56:	61bb      	str	r3, [r7, #24]
 8007f58:	e007      	b.n	8007f6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	3301      	adds	r3, #1
 8007f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	3b01      	subs	r3, #1
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1cf      	bne.n	8007f22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2140      	movs	r1, #64	; 0x40
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f810 	bl	8007fb2 <UART_WaitOnFlagUntilTimeout>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e006      	b.n	8007faa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	e000      	b.n	8007faa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fa8:	2302      	movs	r3, #2
  }
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b090      	sub	sp, #64	; 0x40
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc2:	e050      	b.n	8008066 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fca:	d04c      	beq.n	8008066 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fd2:	f7fc f9d3 	bl	800437c <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d241      	bcs.n	8008066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	330c      	adds	r3, #12
 8008000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008002:	637a      	str	r2, [r7, #52]	; 0x34
 8008004:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800800a:	e841 2300 	strex	r3, r2, [r1]
 800800e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1e5      	bne.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3314      	adds	r3, #20
 800801c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	613b      	str	r3, [r7, #16]
   return(result);
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f023 0301 	bic.w	r3, r3, #1
 800802c:	63bb      	str	r3, [r7, #56]	; 0x38
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3314      	adds	r3, #20
 8008034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008036:	623a      	str	r2, [r7, #32]
 8008038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	69f9      	ldr	r1, [r7, #28]
 800803c:	6a3a      	ldr	r2, [r7, #32]
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	61bb      	str	r3, [r7, #24]
   return(result);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e5      	bne.n	8008016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2220      	movs	r2, #32
 800804e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e00f      	b.n	8008086 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4013      	ands	r3, r2
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	429a      	cmp	r2, r3
 8008074:	bf0c      	ite	eq
 8008076:	2301      	moveq	r3, #1
 8008078:	2300      	movne	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	429a      	cmp	r2, r3
 8008082:	d09f      	beq.n	8007fc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3740      	adds	r7, #64	; 0x40
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008094:	b0c0      	sub	sp, #256	; 0x100
 8008096:	af00      	add	r7, sp, #0
 8008098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800809c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ac:	68d9      	ldr	r1, [r3, #12]
 80080ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	ea40 0301 	orr.w	r3, r0, r1
 80080b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	431a      	orrs	r2, r3
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080e8:	f021 010c 	bic.w	r1, r1, #12
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080f6:	430b      	orrs	r3, r1
 80080f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810a:	6999      	ldr	r1, [r3, #24]
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	ea40 0301 	orr.w	r3, r0, r1
 8008116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b8f      	ldr	r3, [pc, #572]	; (800835c <UART_SetConfig+0x2cc>)
 8008120:	429a      	cmp	r2, r3
 8008122:	d005      	beq.n	8008130 <UART_SetConfig+0xa0>
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b8d      	ldr	r3, [pc, #564]	; (8008360 <UART_SetConfig+0x2d0>)
 800812c:	429a      	cmp	r2, r3
 800812e:	d104      	bne.n	800813a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008130:	f7fe fdb2 	bl	8006c98 <HAL_RCC_GetPCLK2Freq>
 8008134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008138:	e003      	b.n	8008142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800813a:	f7fe fd99 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 800813e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800814c:	f040 810c 	bne.w	8008368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008154:	2200      	movs	r2, #0
 8008156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800815a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800815e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008162:	4622      	mov	r2, r4
 8008164:	462b      	mov	r3, r5
 8008166:	1891      	adds	r1, r2, r2
 8008168:	65b9      	str	r1, [r7, #88]	; 0x58
 800816a:	415b      	adcs	r3, r3
 800816c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800816e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008172:	4621      	mov	r1, r4
 8008174:	eb12 0801 	adds.w	r8, r2, r1
 8008178:	4629      	mov	r1, r5
 800817a:	eb43 0901 	adc.w	r9, r3, r1
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800818a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800818e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008192:	4690      	mov	r8, r2
 8008194:	4699      	mov	r9, r3
 8008196:	4623      	mov	r3, r4
 8008198:	eb18 0303 	adds.w	r3, r8, r3
 800819c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081a0:	462b      	mov	r3, r5
 80081a2:	eb49 0303 	adc.w	r3, r9, r3
 80081a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081be:	460b      	mov	r3, r1
 80081c0:	18db      	adds	r3, r3, r3
 80081c2:	653b      	str	r3, [r7, #80]	; 0x50
 80081c4:	4613      	mov	r3, r2
 80081c6:	eb42 0303 	adc.w	r3, r2, r3
 80081ca:	657b      	str	r3, [r7, #84]	; 0x54
 80081cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081d4:	f7f8 fd78 	bl	8000cc8 <__aeabi_uldivmod>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4b61      	ldr	r3, [pc, #388]	; (8008364 <UART_SetConfig+0x2d4>)
 80081de:	fba3 2302 	umull	r2, r3, r3, r2
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	011c      	lsls	r4, r3, #4
 80081e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	1891      	adds	r1, r2, r2
 80081fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8008200:	415b      	adcs	r3, r3
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008208:	4641      	mov	r1, r8
 800820a:	eb12 0a01 	adds.w	sl, r2, r1
 800820e:	4649      	mov	r1, r9
 8008210:	eb43 0b01 	adc.w	fp, r3, r1
 8008214:	f04f 0200 	mov.w	r2, #0
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008228:	4692      	mov	sl, r2
 800822a:	469b      	mov	fp, r3
 800822c:	4643      	mov	r3, r8
 800822e:	eb1a 0303 	adds.w	r3, sl, r3
 8008232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008236:	464b      	mov	r3, r9
 8008238:	eb4b 0303 	adc.w	r3, fp, r3
 800823c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800824c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008254:	460b      	mov	r3, r1
 8008256:	18db      	adds	r3, r3, r3
 8008258:	643b      	str	r3, [r7, #64]	; 0x40
 800825a:	4613      	mov	r3, r2
 800825c:	eb42 0303 	adc.w	r3, r2, r3
 8008260:	647b      	str	r3, [r7, #68]	; 0x44
 8008262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800826a:	f7f8 fd2d 	bl	8000cc8 <__aeabi_uldivmod>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4611      	mov	r1, r2
 8008274:	4b3b      	ldr	r3, [pc, #236]	; (8008364 <UART_SetConfig+0x2d4>)
 8008276:	fba3 2301 	umull	r2, r3, r3, r1
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	2264      	movs	r2, #100	; 0x64
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	1acb      	subs	r3, r1, r3
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800828a:	4b36      	ldr	r3, [pc, #216]	; (8008364 <UART_SetConfig+0x2d4>)
 800828c:	fba3 2302 	umull	r2, r3, r3, r2
 8008290:	095b      	lsrs	r3, r3, #5
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008298:	441c      	add	r4, r3
 800829a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082ac:	4642      	mov	r2, r8
 80082ae:	464b      	mov	r3, r9
 80082b0:	1891      	adds	r1, r2, r2
 80082b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80082b4:	415b      	adcs	r3, r3
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082bc:	4641      	mov	r1, r8
 80082be:	1851      	adds	r1, r2, r1
 80082c0:	6339      	str	r1, [r7, #48]	; 0x30
 80082c2:	4649      	mov	r1, r9
 80082c4:	414b      	adcs	r3, r1
 80082c6:	637b      	str	r3, [r7, #52]	; 0x34
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	f04f 0300 	mov.w	r3, #0
 80082d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082d4:	4659      	mov	r1, fp
 80082d6:	00cb      	lsls	r3, r1, #3
 80082d8:	4651      	mov	r1, sl
 80082da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082de:	4651      	mov	r1, sl
 80082e0:	00ca      	lsls	r2, r1, #3
 80082e2:	4610      	mov	r0, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	4642      	mov	r2, r8
 80082ea:	189b      	adds	r3, r3, r2
 80082ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082f0:	464b      	mov	r3, r9
 80082f2:	460a      	mov	r2, r1
 80082f4:	eb42 0303 	adc.w	r3, r2, r3
 80082f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800830c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008310:	460b      	mov	r3, r1
 8008312:	18db      	adds	r3, r3, r3
 8008314:	62bb      	str	r3, [r7, #40]	; 0x28
 8008316:	4613      	mov	r3, r2
 8008318:	eb42 0303 	adc.w	r3, r2, r3
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008326:	f7f8 fccf 	bl	8000cc8 <__aeabi_uldivmod>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <UART_SetConfig+0x2d4>)
 8008330:	fba3 1302 	umull	r1, r3, r3, r2
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	2164      	movs	r1, #100	; 0x64
 8008338:	fb01 f303 	mul.w	r3, r1, r3
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	3332      	adds	r3, #50	; 0x32
 8008342:	4a08      	ldr	r2, [pc, #32]	; (8008364 <UART_SetConfig+0x2d4>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	f003 0207 	and.w	r2, r3, #7
 800834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4422      	add	r2, r4
 8008356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008358:	e106      	b.n	8008568 <UART_SetConfig+0x4d8>
 800835a:	bf00      	nop
 800835c:	40011000 	.word	0x40011000
 8008360:	40011400 	.word	0x40011400
 8008364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800836c:	2200      	movs	r2, #0
 800836e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800837a:	4642      	mov	r2, r8
 800837c:	464b      	mov	r3, r9
 800837e:	1891      	adds	r1, r2, r2
 8008380:	6239      	str	r1, [r7, #32]
 8008382:	415b      	adcs	r3, r3
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
 8008386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800838a:	4641      	mov	r1, r8
 800838c:	1854      	adds	r4, r2, r1
 800838e:	4649      	mov	r1, r9
 8008390:	eb43 0501 	adc.w	r5, r3, r1
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	00eb      	lsls	r3, r5, #3
 800839e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083a2:	00e2      	lsls	r2, r4, #3
 80083a4:	4614      	mov	r4, r2
 80083a6:	461d      	mov	r5, r3
 80083a8:	4643      	mov	r3, r8
 80083aa:	18e3      	adds	r3, r4, r3
 80083ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083b0:	464b      	mov	r3, r9
 80083b2:	eb45 0303 	adc.w	r3, r5, r3
 80083b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083ca:	f04f 0200 	mov.w	r2, #0
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083d6:	4629      	mov	r1, r5
 80083d8:	008b      	lsls	r3, r1, #2
 80083da:	4621      	mov	r1, r4
 80083dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083e0:	4621      	mov	r1, r4
 80083e2:	008a      	lsls	r2, r1, #2
 80083e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083e8:	f7f8 fc6e 	bl	8000cc8 <__aeabi_uldivmod>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4b60      	ldr	r3, [pc, #384]	; (8008574 <UART_SetConfig+0x4e4>)
 80083f2:	fba3 2302 	umull	r2, r3, r3, r2
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	011c      	lsls	r4, r3, #4
 80083fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	1891      	adds	r1, r2, r2
 8008412:	61b9      	str	r1, [r7, #24]
 8008414:	415b      	adcs	r3, r3
 8008416:	61fb      	str	r3, [r7, #28]
 8008418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800841c:	4641      	mov	r1, r8
 800841e:	1851      	adds	r1, r2, r1
 8008420:	6139      	str	r1, [r7, #16]
 8008422:	4649      	mov	r1, r9
 8008424:	414b      	adcs	r3, r1
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	f04f 0300 	mov.w	r3, #0
 8008430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008434:	4659      	mov	r1, fp
 8008436:	00cb      	lsls	r3, r1, #3
 8008438:	4651      	mov	r1, sl
 800843a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800843e:	4651      	mov	r1, sl
 8008440:	00ca      	lsls	r2, r1, #3
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	4603      	mov	r3, r0
 8008448:	4642      	mov	r2, r8
 800844a:	189b      	adds	r3, r3, r2
 800844c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008450:	464b      	mov	r3, r9
 8008452:	460a      	mov	r2, r1
 8008454:	eb42 0303 	adc.w	r3, r2, r3
 8008458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800845c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	67bb      	str	r3, [r7, #120]	; 0x78
 8008466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008474:	4649      	mov	r1, r9
 8008476:	008b      	lsls	r3, r1, #2
 8008478:	4641      	mov	r1, r8
 800847a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800847e:	4641      	mov	r1, r8
 8008480:	008a      	lsls	r2, r1, #2
 8008482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008486:	f7f8 fc1f 	bl	8000cc8 <__aeabi_uldivmod>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4611      	mov	r1, r2
 8008490:	4b38      	ldr	r3, [pc, #224]	; (8008574 <UART_SetConfig+0x4e4>)
 8008492:	fba3 2301 	umull	r2, r3, r3, r1
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	2264      	movs	r2, #100	; 0x64
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	1acb      	subs	r3, r1, r3
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	3332      	adds	r3, #50	; 0x32
 80084a4:	4a33      	ldr	r2, [pc, #204]	; (8008574 <UART_SetConfig+0x4e4>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b0:	441c      	add	r4, r3
 80084b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b6:	2200      	movs	r2, #0
 80084b8:	673b      	str	r3, [r7, #112]	; 0x70
 80084ba:	677a      	str	r2, [r7, #116]	; 0x74
 80084bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084c0:	4642      	mov	r2, r8
 80084c2:	464b      	mov	r3, r9
 80084c4:	1891      	adds	r1, r2, r2
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	415b      	adcs	r3, r3
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084d0:	4641      	mov	r1, r8
 80084d2:	1851      	adds	r1, r2, r1
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	4649      	mov	r1, r9
 80084d8:	414b      	adcs	r3, r1
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084e8:	4659      	mov	r1, fp
 80084ea:	00cb      	lsls	r3, r1, #3
 80084ec:	4651      	mov	r1, sl
 80084ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084f2:	4651      	mov	r1, sl
 80084f4:	00ca      	lsls	r2, r1, #3
 80084f6:	4610      	mov	r0, r2
 80084f8:	4619      	mov	r1, r3
 80084fa:	4603      	mov	r3, r0
 80084fc:	4642      	mov	r2, r8
 80084fe:	189b      	adds	r3, r3, r2
 8008500:	66bb      	str	r3, [r7, #104]	; 0x68
 8008502:	464b      	mov	r3, r9
 8008504:	460a      	mov	r2, r1
 8008506:	eb42 0303 	adc.w	r3, r2, r3
 800850a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	663b      	str	r3, [r7, #96]	; 0x60
 8008516:	667a      	str	r2, [r7, #100]	; 0x64
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008524:	4649      	mov	r1, r9
 8008526:	008b      	lsls	r3, r1, #2
 8008528:	4641      	mov	r1, r8
 800852a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800852e:	4641      	mov	r1, r8
 8008530:	008a      	lsls	r2, r1, #2
 8008532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008536:	f7f8 fbc7 	bl	8000cc8 <__aeabi_uldivmod>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <UART_SetConfig+0x4e4>)
 8008540:	fba3 1302 	umull	r1, r3, r3, r2
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	2164      	movs	r1, #100	; 0x64
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	3332      	adds	r3, #50	; 0x32
 8008552:	4a08      	ldr	r2, [pc, #32]	; (8008574 <UART_SetConfig+0x4e4>)
 8008554:	fba2 2303 	umull	r2, r3, r2, r3
 8008558:	095b      	lsrs	r3, r3, #5
 800855a:	f003 020f 	and.w	r2, r3, #15
 800855e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4422      	add	r2, r4
 8008566:	609a      	str	r2, [r3, #8]
}
 8008568:	bf00      	nop
 800856a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800856e:	46bd      	mov	sp, r7
 8008570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008574:	51eb851f 	.word	0x51eb851f

08008578 <__cvt>:
 8008578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	ec55 4b10 	vmov	r4, r5, d0
 8008580:	2d00      	cmp	r5, #0
 8008582:	460e      	mov	r6, r1
 8008584:	4619      	mov	r1, r3
 8008586:	462b      	mov	r3, r5
 8008588:	bfbb      	ittet	lt
 800858a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800858e:	461d      	movlt	r5, r3
 8008590:	2300      	movge	r3, #0
 8008592:	232d      	movlt	r3, #45	; 0x2d
 8008594:	700b      	strb	r3, [r1, #0]
 8008596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008598:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800859c:	4691      	mov	r9, r2
 800859e:	f023 0820 	bic.w	r8, r3, #32
 80085a2:	bfbc      	itt	lt
 80085a4:	4622      	movlt	r2, r4
 80085a6:	4614      	movlt	r4, r2
 80085a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085ac:	d005      	beq.n	80085ba <__cvt+0x42>
 80085ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085b2:	d100      	bne.n	80085b6 <__cvt+0x3e>
 80085b4:	3601      	adds	r6, #1
 80085b6:	2102      	movs	r1, #2
 80085b8:	e000      	b.n	80085bc <__cvt+0x44>
 80085ba:	2103      	movs	r1, #3
 80085bc:	ab03      	add	r3, sp, #12
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	ab02      	add	r3, sp, #8
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	ec45 4b10 	vmov	d0, r4, r5
 80085c8:	4653      	mov	r3, sl
 80085ca:	4632      	mov	r2, r6
 80085cc:	f001 f9c0 	bl	8009950 <_dtoa_r>
 80085d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085d4:	4607      	mov	r7, r0
 80085d6:	d102      	bne.n	80085de <__cvt+0x66>
 80085d8:	f019 0f01 	tst.w	r9, #1
 80085dc:	d022      	beq.n	8008624 <__cvt+0xac>
 80085de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085e2:	eb07 0906 	add.w	r9, r7, r6
 80085e6:	d110      	bne.n	800860a <__cvt+0x92>
 80085e8:	783b      	ldrb	r3, [r7, #0]
 80085ea:	2b30      	cmp	r3, #48	; 0x30
 80085ec:	d10a      	bne.n	8008604 <__cvt+0x8c>
 80085ee:	2200      	movs	r2, #0
 80085f0:	2300      	movs	r3, #0
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f8 fa87 	bl	8000b08 <__aeabi_dcmpeq>
 80085fa:	b918      	cbnz	r0, 8008604 <__cvt+0x8c>
 80085fc:	f1c6 0601 	rsb	r6, r6, #1
 8008600:	f8ca 6000 	str.w	r6, [sl]
 8008604:	f8da 3000 	ldr.w	r3, [sl]
 8008608:	4499      	add	r9, r3
 800860a:	2200      	movs	r2, #0
 800860c:	2300      	movs	r3, #0
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f8 fa79 	bl	8000b08 <__aeabi_dcmpeq>
 8008616:	b108      	cbz	r0, 800861c <__cvt+0xa4>
 8008618:	f8cd 900c 	str.w	r9, [sp, #12]
 800861c:	2230      	movs	r2, #48	; 0x30
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	454b      	cmp	r3, r9
 8008622:	d307      	bcc.n	8008634 <__cvt+0xbc>
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008628:	1bdb      	subs	r3, r3, r7
 800862a:	4638      	mov	r0, r7
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	b004      	add	sp, #16
 8008630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008634:	1c59      	adds	r1, r3, #1
 8008636:	9103      	str	r1, [sp, #12]
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e7f0      	b.n	800861e <__cvt+0xa6>

0800863c <__exponent>:
 800863c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800863e:	4603      	mov	r3, r0
 8008640:	2900      	cmp	r1, #0
 8008642:	bfb8      	it	lt
 8008644:	4249      	neglt	r1, r1
 8008646:	f803 2b02 	strb.w	r2, [r3], #2
 800864a:	bfb4      	ite	lt
 800864c:	222d      	movlt	r2, #45	; 0x2d
 800864e:	222b      	movge	r2, #43	; 0x2b
 8008650:	2909      	cmp	r1, #9
 8008652:	7042      	strb	r2, [r0, #1]
 8008654:	dd2a      	ble.n	80086ac <__exponent+0x70>
 8008656:	f10d 0207 	add.w	r2, sp, #7
 800865a:	4617      	mov	r7, r2
 800865c:	260a      	movs	r6, #10
 800865e:	4694      	mov	ip, r2
 8008660:	fb91 f5f6 	sdiv	r5, r1, r6
 8008664:	fb06 1415 	mls	r4, r6, r5, r1
 8008668:	3430      	adds	r4, #48	; 0x30
 800866a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800866e:	460c      	mov	r4, r1
 8008670:	2c63      	cmp	r4, #99	; 0x63
 8008672:	f102 32ff 	add.w	r2, r2, #4294967295
 8008676:	4629      	mov	r1, r5
 8008678:	dcf1      	bgt.n	800865e <__exponent+0x22>
 800867a:	3130      	adds	r1, #48	; 0x30
 800867c:	f1ac 0402 	sub.w	r4, ip, #2
 8008680:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008684:	1c41      	adds	r1, r0, #1
 8008686:	4622      	mov	r2, r4
 8008688:	42ba      	cmp	r2, r7
 800868a:	d30a      	bcc.n	80086a2 <__exponent+0x66>
 800868c:	f10d 0209 	add.w	r2, sp, #9
 8008690:	eba2 020c 	sub.w	r2, r2, ip
 8008694:	42bc      	cmp	r4, r7
 8008696:	bf88      	it	hi
 8008698:	2200      	movhi	r2, #0
 800869a:	4413      	add	r3, r2
 800869c:	1a18      	subs	r0, r3, r0
 800869e:	b003      	add	sp, #12
 80086a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80086a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80086aa:	e7ed      	b.n	8008688 <__exponent+0x4c>
 80086ac:	2330      	movs	r3, #48	; 0x30
 80086ae:	3130      	adds	r1, #48	; 0x30
 80086b0:	7083      	strb	r3, [r0, #2]
 80086b2:	70c1      	strb	r1, [r0, #3]
 80086b4:	1d03      	adds	r3, r0, #4
 80086b6:	e7f1      	b.n	800869c <__exponent+0x60>

080086b8 <_printf_float>:
 80086b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086bc:	ed2d 8b02 	vpush	{d8}
 80086c0:	b08d      	sub	sp, #52	; 0x34
 80086c2:	460c      	mov	r4, r1
 80086c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086c8:	4616      	mov	r6, r2
 80086ca:	461f      	mov	r7, r3
 80086cc:	4605      	mov	r5, r0
 80086ce:	f001 f82b 	bl	8009728 <_localeconv_r>
 80086d2:	f8d0 a000 	ldr.w	sl, [r0]
 80086d6:	4650      	mov	r0, sl
 80086d8:	f7f7 fdea 	bl	80002b0 <strlen>
 80086dc:	2300      	movs	r3, #0
 80086de:	930a      	str	r3, [sp, #40]	; 0x28
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	9305      	str	r3, [sp, #20]
 80086e4:	f8d8 3000 	ldr.w	r3, [r8]
 80086e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086ec:	3307      	adds	r3, #7
 80086ee:	f023 0307 	bic.w	r3, r3, #7
 80086f2:	f103 0208 	add.w	r2, r3, #8
 80086f6:	f8c8 2000 	str.w	r2, [r8]
 80086fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008702:	9307      	str	r3, [sp, #28]
 8008704:	f8cd 8018 	str.w	r8, [sp, #24]
 8008708:	ee08 0a10 	vmov	s16, r0
 800870c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008714:	4b9e      	ldr	r3, [pc, #632]	; (8008990 <_printf_float+0x2d8>)
 8008716:	f04f 32ff 	mov.w	r2, #4294967295
 800871a:	f7f8 fa27 	bl	8000b6c <__aeabi_dcmpun>
 800871e:	bb88      	cbnz	r0, 8008784 <_printf_float+0xcc>
 8008720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008724:	4b9a      	ldr	r3, [pc, #616]	; (8008990 <_printf_float+0x2d8>)
 8008726:	f04f 32ff 	mov.w	r2, #4294967295
 800872a:	f7f8 fa01 	bl	8000b30 <__aeabi_dcmple>
 800872e:	bb48      	cbnz	r0, 8008784 <_printf_float+0xcc>
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	4640      	mov	r0, r8
 8008736:	4649      	mov	r1, r9
 8008738:	f7f8 f9f0 	bl	8000b1c <__aeabi_dcmplt>
 800873c:	b110      	cbz	r0, 8008744 <_printf_float+0x8c>
 800873e:	232d      	movs	r3, #45	; 0x2d
 8008740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008744:	4a93      	ldr	r2, [pc, #588]	; (8008994 <_printf_float+0x2dc>)
 8008746:	4b94      	ldr	r3, [pc, #592]	; (8008998 <_printf_float+0x2e0>)
 8008748:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800874c:	bf94      	ite	ls
 800874e:	4690      	movls	r8, r2
 8008750:	4698      	movhi	r8, r3
 8008752:	2303      	movs	r3, #3
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	9b05      	ldr	r3, [sp, #20]
 8008758:	f023 0304 	bic.w	r3, r3, #4
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	f04f 0900 	mov.w	r9, #0
 8008762:	9700      	str	r7, [sp, #0]
 8008764:	4633      	mov	r3, r6
 8008766:	aa0b      	add	r2, sp, #44	; 0x2c
 8008768:	4621      	mov	r1, r4
 800876a:	4628      	mov	r0, r5
 800876c:	f000 f9da 	bl	8008b24 <_printf_common>
 8008770:	3001      	adds	r0, #1
 8008772:	f040 8090 	bne.w	8008896 <_printf_float+0x1de>
 8008776:	f04f 30ff 	mov.w	r0, #4294967295
 800877a:	b00d      	add	sp, #52	; 0x34
 800877c:	ecbd 8b02 	vpop	{d8}
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	4642      	mov	r2, r8
 8008786:	464b      	mov	r3, r9
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f8 f9ee 	bl	8000b6c <__aeabi_dcmpun>
 8008790:	b140      	cbz	r0, 80087a4 <_printf_float+0xec>
 8008792:	464b      	mov	r3, r9
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfbc      	itt	lt
 8008798:	232d      	movlt	r3, #45	; 0x2d
 800879a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800879e:	4a7f      	ldr	r2, [pc, #508]	; (800899c <_printf_float+0x2e4>)
 80087a0:	4b7f      	ldr	r3, [pc, #508]	; (80089a0 <_printf_float+0x2e8>)
 80087a2:	e7d1      	b.n	8008748 <_printf_float+0x90>
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087aa:	9206      	str	r2, [sp, #24]
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	d13f      	bne.n	8008830 <_printf_float+0x178>
 80087b0:	2306      	movs	r3, #6
 80087b2:	6063      	str	r3, [r4, #4]
 80087b4:	9b05      	ldr	r3, [sp, #20]
 80087b6:	6861      	ldr	r1, [r4, #4]
 80087b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087bc:	2300      	movs	r3, #0
 80087be:	9303      	str	r3, [sp, #12]
 80087c0:	ab0a      	add	r3, sp, #40	; 0x28
 80087c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087c6:	ab09      	add	r3, sp, #36	; 0x24
 80087c8:	ec49 8b10 	vmov	d0, r8, r9
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	6022      	str	r2, [r4, #0]
 80087d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087d4:	4628      	mov	r0, r5
 80087d6:	f7ff fecf 	bl	8008578 <__cvt>
 80087da:	9b06      	ldr	r3, [sp, #24]
 80087dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087de:	2b47      	cmp	r3, #71	; 0x47
 80087e0:	4680      	mov	r8, r0
 80087e2:	d108      	bne.n	80087f6 <_printf_float+0x13e>
 80087e4:	1cc8      	adds	r0, r1, #3
 80087e6:	db02      	blt.n	80087ee <_printf_float+0x136>
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	4299      	cmp	r1, r3
 80087ec:	dd41      	ble.n	8008872 <_printf_float+0x1ba>
 80087ee:	f1ab 0302 	sub.w	r3, fp, #2
 80087f2:	fa5f fb83 	uxtb.w	fp, r3
 80087f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087fa:	d820      	bhi.n	800883e <_printf_float+0x186>
 80087fc:	3901      	subs	r1, #1
 80087fe:	465a      	mov	r2, fp
 8008800:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008804:	9109      	str	r1, [sp, #36]	; 0x24
 8008806:	f7ff ff19 	bl	800863c <__exponent>
 800880a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800880c:	1813      	adds	r3, r2, r0
 800880e:	2a01      	cmp	r2, #1
 8008810:	4681      	mov	r9, r0
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	dc02      	bgt.n	800881c <_printf_float+0x164>
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	07d2      	lsls	r2, r2, #31
 800881a:	d501      	bpl.n	8008820 <_printf_float+0x168>
 800881c:	3301      	adds	r3, #1
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008824:	2b00      	cmp	r3, #0
 8008826:	d09c      	beq.n	8008762 <_printf_float+0xaa>
 8008828:	232d      	movs	r3, #45	; 0x2d
 800882a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800882e:	e798      	b.n	8008762 <_printf_float+0xaa>
 8008830:	9a06      	ldr	r2, [sp, #24]
 8008832:	2a47      	cmp	r2, #71	; 0x47
 8008834:	d1be      	bne.n	80087b4 <_printf_float+0xfc>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1bc      	bne.n	80087b4 <_printf_float+0xfc>
 800883a:	2301      	movs	r3, #1
 800883c:	e7b9      	b.n	80087b2 <_printf_float+0xfa>
 800883e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008842:	d118      	bne.n	8008876 <_printf_float+0x1be>
 8008844:	2900      	cmp	r1, #0
 8008846:	6863      	ldr	r3, [r4, #4]
 8008848:	dd0b      	ble.n	8008862 <_printf_float+0x1aa>
 800884a:	6121      	str	r1, [r4, #16]
 800884c:	b913      	cbnz	r3, 8008854 <_printf_float+0x19c>
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	07d0      	lsls	r0, r2, #31
 8008852:	d502      	bpl.n	800885a <_printf_float+0x1a2>
 8008854:	3301      	adds	r3, #1
 8008856:	440b      	add	r3, r1
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	65a1      	str	r1, [r4, #88]	; 0x58
 800885c:	f04f 0900 	mov.w	r9, #0
 8008860:	e7de      	b.n	8008820 <_printf_float+0x168>
 8008862:	b913      	cbnz	r3, 800886a <_printf_float+0x1b2>
 8008864:	6822      	ldr	r2, [r4, #0]
 8008866:	07d2      	lsls	r2, r2, #31
 8008868:	d501      	bpl.n	800886e <_printf_float+0x1b6>
 800886a:	3302      	adds	r3, #2
 800886c:	e7f4      	b.n	8008858 <_printf_float+0x1a0>
 800886e:	2301      	movs	r3, #1
 8008870:	e7f2      	b.n	8008858 <_printf_float+0x1a0>
 8008872:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008878:	4299      	cmp	r1, r3
 800887a:	db05      	blt.n	8008888 <_printf_float+0x1d0>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	6121      	str	r1, [r4, #16]
 8008880:	07d8      	lsls	r0, r3, #31
 8008882:	d5ea      	bpl.n	800885a <_printf_float+0x1a2>
 8008884:	1c4b      	adds	r3, r1, #1
 8008886:	e7e7      	b.n	8008858 <_printf_float+0x1a0>
 8008888:	2900      	cmp	r1, #0
 800888a:	bfd4      	ite	le
 800888c:	f1c1 0202 	rsble	r2, r1, #2
 8008890:	2201      	movgt	r2, #1
 8008892:	4413      	add	r3, r2
 8008894:	e7e0      	b.n	8008858 <_printf_float+0x1a0>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	055a      	lsls	r2, r3, #21
 800889a:	d407      	bmi.n	80088ac <_printf_float+0x1f4>
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	4642      	mov	r2, r8
 80088a0:	4631      	mov	r1, r6
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b8      	blx	r7
 80088a6:	3001      	adds	r0, #1
 80088a8:	d12c      	bne.n	8008904 <_printf_float+0x24c>
 80088aa:	e764      	b.n	8008776 <_printf_float+0xbe>
 80088ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088b0:	f240 80e0 	bls.w	8008a74 <_printf_float+0x3bc>
 80088b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088b8:	2200      	movs	r2, #0
 80088ba:	2300      	movs	r3, #0
 80088bc:	f7f8 f924 	bl	8000b08 <__aeabi_dcmpeq>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d034      	beq.n	800892e <_printf_float+0x276>
 80088c4:	4a37      	ldr	r2, [pc, #220]	; (80089a4 <_printf_float+0x2ec>)
 80088c6:	2301      	movs	r3, #1
 80088c8:	4631      	mov	r1, r6
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b8      	blx	r7
 80088ce:	3001      	adds	r0, #1
 80088d0:	f43f af51 	beq.w	8008776 <_printf_float+0xbe>
 80088d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088d8:	429a      	cmp	r2, r3
 80088da:	db02      	blt.n	80088e2 <_printf_float+0x22a>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	07d8      	lsls	r0, r3, #31
 80088e0:	d510      	bpl.n	8008904 <_printf_float+0x24c>
 80088e2:	ee18 3a10 	vmov	r3, s16
 80088e6:	4652      	mov	r2, sl
 80088e8:	4631      	mov	r1, r6
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	f43f af41 	beq.w	8008776 <_printf_float+0xbe>
 80088f4:	f04f 0800 	mov.w	r8, #0
 80088f8:	f104 091a 	add.w	r9, r4, #26
 80088fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fe:	3b01      	subs	r3, #1
 8008900:	4543      	cmp	r3, r8
 8008902:	dc09      	bgt.n	8008918 <_printf_float+0x260>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	079b      	lsls	r3, r3, #30
 8008908:	f100 8107 	bmi.w	8008b1a <_printf_float+0x462>
 800890c:	68e0      	ldr	r0, [r4, #12]
 800890e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008910:	4298      	cmp	r0, r3
 8008912:	bfb8      	it	lt
 8008914:	4618      	movlt	r0, r3
 8008916:	e730      	b.n	800877a <_printf_float+0xc2>
 8008918:	2301      	movs	r3, #1
 800891a:	464a      	mov	r2, r9
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f af27 	beq.w	8008776 <_printf_float+0xbe>
 8008928:	f108 0801 	add.w	r8, r8, #1
 800892c:	e7e6      	b.n	80088fc <_printf_float+0x244>
 800892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	dc39      	bgt.n	80089a8 <_printf_float+0x2f0>
 8008934:	4a1b      	ldr	r2, [pc, #108]	; (80089a4 <_printf_float+0x2ec>)
 8008936:	2301      	movs	r3, #1
 8008938:	4631      	mov	r1, r6
 800893a:	4628      	mov	r0, r5
 800893c:	47b8      	blx	r7
 800893e:	3001      	adds	r0, #1
 8008940:	f43f af19 	beq.w	8008776 <_printf_float+0xbe>
 8008944:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008948:	4313      	orrs	r3, r2
 800894a:	d102      	bne.n	8008952 <_printf_float+0x29a>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	07d9      	lsls	r1, r3, #31
 8008950:	d5d8      	bpl.n	8008904 <_printf_float+0x24c>
 8008952:	ee18 3a10 	vmov	r3, s16
 8008956:	4652      	mov	r2, sl
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	f43f af09 	beq.w	8008776 <_printf_float+0xbe>
 8008964:	f04f 0900 	mov.w	r9, #0
 8008968:	f104 0a1a 	add.w	sl, r4, #26
 800896c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896e:	425b      	negs	r3, r3
 8008970:	454b      	cmp	r3, r9
 8008972:	dc01      	bgt.n	8008978 <_printf_float+0x2c0>
 8008974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008976:	e792      	b.n	800889e <_printf_float+0x1e6>
 8008978:	2301      	movs	r3, #1
 800897a:	4652      	mov	r2, sl
 800897c:	4631      	mov	r1, r6
 800897e:	4628      	mov	r0, r5
 8008980:	47b8      	blx	r7
 8008982:	3001      	adds	r0, #1
 8008984:	f43f aef7 	beq.w	8008776 <_printf_float+0xbe>
 8008988:	f109 0901 	add.w	r9, r9, #1
 800898c:	e7ee      	b.n	800896c <_printf_float+0x2b4>
 800898e:	bf00      	nop
 8008990:	7fefffff 	.word	0x7fefffff
 8008994:	0800d964 	.word	0x0800d964
 8008998:	0800d968 	.word	0x0800d968
 800899c:	0800d96c 	.word	0x0800d96c
 80089a0:	0800d970 	.word	0x0800d970
 80089a4:	0800dd00 	.word	0x0800dd00
 80089a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ac:	429a      	cmp	r2, r3
 80089ae:	bfa8      	it	ge
 80089b0:	461a      	movge	r2, r3
 80089b2:	2a00      	cmp	r2, #0
 80089b4:	4691      	mov	r9, r2
 80089b6:	dc37      	bgt.n	8008a28 <_printf_float+0x370>
 80089b8:	f04f 0b00 	mov.w	fp, #0
 80089bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089c0:	f104 021a 	add.w	r2, r4, #26
 80089c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	eba3 0309 	sub.w	r3, r3, r9
 80089cc:	455b      	cmp	r3, fp
 80089ce:	dc33      	bgt.n	8008a38 <_printf_float+0x380>
 80089d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089d4:	429a      	cmp	r2, r3
 80089d6:	db3b      	blt.n	8008a50 <_printf_float+0x398>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	07da      	lsls	r2, r3, #31
 80089dc:	d438      	bmi.n	8008a50 <_printf_float+0x398>
 80089de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80089e2:	eba2 0903 	sub.w	r9, r2, r3
 80089e6:	9b05      	ldr	r3, [sp, #20]
 80089e8:	1ad2      	subs	r2, r2, r3
 80089ea:	4591      	cmp	r9, r2
 80089ec:	bfa8      	it	ge
 80089ee:	4691      	movge	r9, r2
 80089f0:	f1b9 0f00 	cmp.w	r9, #0
 80089f4:	dc35      	bgt.n	8008a62 <_printf_float+0x3aa>
 80089f6:	f04f 0800 	mov.w	r8, #0
 80089fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089fe:	f104 0a1a 	add.w	sl, r4, #26
 8008a02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	eba3 0309 	sub.w	r3, r3, r9
 8008a0c:	4543      	cmp	r3, r8
 8008a0e:	f77f af79 	ble.w	8008904 <_printf_float+0x24c>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f43f aeaa 	beq.w	8008776 <_printf_float+0xbe>
 8008a22:	f108 0801 	add.w	r8, r8, #1
 8008a26:	e7ec      	b.n	8008a02 <_printf_float+0x34a>
 8008a28:	4613      	mov	r3, r2
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	d1c0      	bne.n	80089b8 <_printf_float+0x300>
 8008a36:	e69e      	b.n	8008776 <_printf_float+0xbe>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	9205      	str	r2, [sp, #20]
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f ae97 	beq.w	8008776 <_printf_float+0xbe>
 8008a48:	9a05      	ldr	r2, [sp, #20]
 8008a4a:	f10b 0b01 	add.w	fp, fp, #1
 8008a4e:	e7b9      	b.n	80089c4 <_printf_float+0x30c>
 8008a50:	ee18 3a10 	vmov	r3, s16
 8008a54:	4652      	mov	r2, sl
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d1be      	bne.n	80089de <_printf_float+0x326>
 8008a60:	e689      	b.n	8008776 <_printf_float+0xbe>
 8008a62:	9a05      	ldr	r2, [sp, #20]
 8008a64:	464b      	mov	r3, r9
 8008a66:	4442      	add	r2, r8
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b8      	blx	r7
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d1c1      	bne.n	80089f6 <_printf_float+0x33e>
 8008a72:	e680      	b.n	8008776 <_printf_float+0xbe>
 8008a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a76:	2a01      	cmp	r2, #1
 8008a78:	dc01      	bgt.n	8008a7e <_printf_float+0x3c6>
 8008a7a:	07db      	lsls	r3, r3, #31
 8008a7c:	d53a      	bpl.n	8008af4 <_printf_float+0x43c>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4642      	mov	r2, r8
 8008a82:	4631      	mov	r1, r6
 8008a84:	4628      	mov	r0, r5
 8008a86:	47b8      	blx	r7
 8008a88:	3001      	adds	r0, #1
 8008a8a:	f43f ae74 	beq.w	8008776 <_printf_float+0xbe>
 8008a8e:	ee18 3a10 	vmov	r3, s16
 8008a92:	4652      	mov	r2, sl
 8008a94:	4631      	mov	r1, r6
 8008a96:	4628      	mov	r0, r5
 8008a98:	47b8      	blx	r7
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	f43f ae6b 	beq.w	8008776 <_printf_float+0xbe>
 8008aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008aac:	f7f8 f82c 	bl	8000b08 <__aeabi_dcmpeq>
 8008ab0:	b9d8      	cbnz	r0, 8008aea <_printf_float+0x432>
 8008ab2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ab6:	f108 0201 	add.w	r2, r8, #1
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d10e      	bne.n	8008ae2 <_printf_float+0x42a>
 8008ac4:	e657      	b.n	8008776 <_printf_float+0xbe>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4652      	mov	r2, sl
 8008aca:	4631      	mov	r1, r6
 8008acc:	4628      	mov	r0, r5
 8008ace:	47b8      	blx	r7
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	f43f ae50 	beq.w	8008776 <_printf_float+0xbe>
 8008ad6:	f108 0801 	add.w	r8, r8, #1
 8008ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008adc:	3b01      	subs	r3, #1
 8008ade:	4543      	cmp	r3, r8
 8008ae0:	dcf1      	bgt.n	8008ac6 <_printf_float+0x40e>
 8008ae2:	464b      	mov	r3, r9
 8008ae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ae8:	e6da      	b.n	80088a0 <_printf_float+0x1e8>
 8008aea:	f04f 0800 	mov.w	r8, #0
 8008aee:	f104 0a1a 	add.w	sl, r4, #26
 8008af2:	e7f2      	b.n	8008ada <_printf_float+0x422>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4642      	mov	r2, r8
 8008af8:	e7df      	b.n	8008aba <_printf_float+0x402>
 8008afa:	2301      	movs	r3, #1
 8008afc:	464a      	mov	r2, r9
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	47b8      	blx	r7
 8008b04:	3001      	adds	r0, #1
 8008b06:	f43f ae36 	beq.w	8008776 <_printf_float+0xbe>
 8008b0a:	f108 0801 	add.w	r8, r8, #1
 8008b0e:	68e3      	ldr	r3, [r4, #12]
 8008b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b12:	1a5b      	subs	r3, r3, r1
 8008b14:	4543      	cmp	r3, r8
 8008b16:	dcf0      	bgt.n	8008afa <_printf_float+0x442>
 8008b18:	e6f8      	b.n	800890c <_printf_float+0x254>
 8008b1a:	f04f 0800 	mov.w	r8, #0
 8008b1e:	f104 0919 	add.w	r9, r4, #25
 8008b22:	e7f4      	b.n	8008b0e <_printf_float+0x456>

08008b24 <_printf_common>:
 8008b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b28:	4616      	mov	r6, r2
 8008b2a:	4699      	mov	r9, r3
 8008b2c:	688a      	ldr	r2, [r1, #8]
 8008b2e:	690b      	ldr	r3, [r1, #16]
 8008b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b34:	4293      	cmp	r3, r2
 8008b36:	bfb8      	it	lt
 8008b38:	4613      	movlt	r3, r2
 8008b3a:	6033      	str	r3, [r6, #0]
 8008b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b40:	4607      	mov	r7, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	b10a      	cbz	r2, 8008b4a <_printf_common+0x26>
 8008b46:	3301      	adds	r3, #1
 8008b48:	6033      	str	r3, [r6, #0]
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	0699      	lsls	r1, r3, #26
 8008b4e:	bf42      	ittt	mi
 8008b50:	6833      	ldrmi	r3, [r6, #0]
 8008b52:	3302      	addmi	r3, #2
 8008b54:	6033      	strmi	r3, [r6, #0]
 8008b56:	6825      	ldr	r5, [r4, #0]
 8008b58:	f015 0506 	ands.w	r5, r5, #6
 8008b5c:	d106      	bne.n	8008b6c <_printf_common+0x48>
 8008b5e:	f104 0a19 	add.w	sl, r4, #25
 8008b62:	68e3      	ldr	r3, [r4, #12]
 8008b64:	6832      	ldr	r2, [r6, #0]
 8008b66:	1a9b      	subs	r3, r3, r2
 8008b68:	42ab      	cmp	r3, r5
 8008b6a:	dc26      	bgt.n	8008bba <_printf_common+0x96>
 8008b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b70:	1e13      	subs	r3, r2, #0
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	bf18      	it	ne
 8008b76:	2301      	movne	r3, #1
 8008b78:	0692      	lsls	r2, r2, #26
 8008b7a:	d42b      	bmi.n	8008bd4 <_printf_common+0xb0>
 8008b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b80:	4649      	mov	r1, r9
 8008b82:	4638      	mov	r0, r7
 8008b84:	47c0      	blx	r8
 8008b86:	3001      	adds	r0, #1
 8008b88:	d01e      	beq.n	8008bc8 <_printf_common+0xa4>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	f003 0306 	and.w	r3, r3, #6
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	bf02      	ittt	eq
 8008b96:	68e5      	ldreq	r5, [r4, #12]
 8008b98:	6833      	ldreq	r3, [r6, #0]
 8008b9a:	1aed      	subeq	r5, r5, r3
 8008b9c:	68a3      	ldr	r3, [r4, #8]
 8008b9e:	bf0c      	ite	eq
 8008ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ba4:	2500      	movne	r5, #0
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	bfc4      	itt	gt
 8008baa:	1a9b      	subgt	r3, r3, r2
 8008bac:	18ed      	addgt	r5, r5, r3
 8008bae:	2600      	movs	r6, #0
 8008bb0:	341a      	adds	r4, #26
 8008bb2:	42b5      	cmp	r5, r6
 8008bb4:	d11a      	bne.n	8008bec <_printf_common+0xc8>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	e008      	b.n	8008bcc <_printf_common+0xa8>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4652      	mov	r2, sl
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	47c0      	blx	r8
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d103      	bne.n	8008bd0 <_printf_common+0xac>
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd0:	3501      	adds	r5, #1
 8008bd2:	e7c6      	b.n	8008b62 <_printf_common+0x3e>
 8008bd4:	18e1      	adds	r1, r4, r3
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	2030      	movs	r0, #48	; 0x30
 8008bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bde:	4422      	add	r2, r4
 8008be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008be8:	3302      	adds	r3, #2
 8008bea:	e7c7      	b.n	8008b7c <_printf_common+0x58>
 8008bec:	2301      	movs	r3, #1
 8008bee:	4622      	mov	r2, r4
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	47c0      	blx	r8
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d0e6      	beq.n	8008bc8 <_printf_common+0xa4>
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7d9      	b.n	8008bb2 <_printf_common+0x8e>
	...

08008c00 <_printf_i>:
 8008c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c04:	7e0f      	ldrb	r7, [r1, #24]
 8008c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c08:	2f78      	cmp	r7, #120	; 0x78
 8008c0a:	4691      	mov	r9, r2
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	469a      	mov	sl, r3
 8008c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c16:	d807      	bhi.n	8008c28 <_printf_i+0x28>
 8008c18:	2f62      	cmp	r7, #98	; 0x62
 8008c1a:	d80a      	bhi.n	8008c32 <_printf_i+0x32>
 8008c1c:	2f00      	cmp	r7, #0
 8008c1e:	f000 80d4 	beq.w	8008dca <_printf_i+0x1ca>
 8008c22:	2f58      	cmp	r7, #88	; 0x58
 8008c24:	f000 80c0 	beq.w	8008da8 <_printf_i+0x1a8>
 8008c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c30:	e03a      	b.n	8008ca8 <_printf_i+0xa8>
 8008c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c36:	2b15      	cmp	r3, #21
 8008c38:	d8f6      	bhi.n	8008c28 <_printf_i+0x28>
 8008c3a:	a101      	add	r1, pc, #4	; (adr r1, 8008c40 <_printf_i+0x40>)
 8008c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c40:	08008c99 	.word	0x08008c99
 8008c44:	08008cad 	.word	0x08008cad
 8008c48:	08008c29 	.word	0x08008c29
 8008c4c:	08008c29 	.word	0x08008c29
 8008c50:	08008c29 	.word	0x08008c29
 8008c54:	08008c29 	.word	0x08008c29
 8008c58:	08008cad 	.word	0x08008cad
 8008c5c:	08008c29 	.word	0x08008c29
 8008c60:	08008c29 	.word	0x08008c29
 8008c64:	08008c29 	.word	0x08008c29
 8008c68:	08008c29 	.word	0x08008c29
 8008c6c:	08008db1 	.word	0x08008db1
 8008c70:	08008cd9 	.word	0x08008cd9
 8008c74:	08008d6b 	.word	0x08008d6b
 8008c78:	08008c29 	.word	0x08008c29
 8008c7c:	08008c29 	.word	0x08008c29
 8008c80:	08008dd3 	.word	0x08008dd3
 8008c84:	08008c29 	.word	0x08008c29
 8008c88:	08008cd9 	.word	0x08008cd9
 8008c8c:	08008c29 	.word	0x08008c29
 8008c90:	08008c29 	.word	0x08008c29
 8008c94:	08008d73 	.word	0x08008d73
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	1d1a      	adds	r2, r3, #4
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	602a      	str	r2, [r5, #0]
 8008ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e09f      	b.n	8008dec <_printf_i+0x1ec>
 8008cac:	6820      	ldr	r0, [r4, #0]
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	0607      	lsls	r7, r0, #24
 8008cb2:	f103 0104 	add.w	r1, r3, #4
 8008cb6:	6029      	str	r1, [r5, #0]
 8008cb8:	d501      	bpl.n	8008cbe <_printf_i+0xbe>
 8008cba:	681e      	ldr	r6, [r3, #0]
 8008cbc:	e003      	b.n	8008cc6 <_printf_i+0xc6>
 8008cbe:	0646      	lsls	r6, r0, #25
 8008cc0:	d5fb      	bpl.n	8008cba <_printf_i+0xba>
 8008cc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008cc6:	2e00      	cmp	r6, #0
 8008cc8:	da03      	bge.n	8008cd2 <_printf_i+0xd2>
 8008cca:	232d      	movs	r3, #45	; 0x2d
 8008ccc:	4276      	negs	r6, r6
 8008cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd2:	485a      	ldr	r0, [pc, #360]	; (8008e3c <_printf_i+0x23c>)
 8008cd4:	230a      	movs	r3, #10
 8008cd6:	e012      	b.n	8008cfe <_printf_i+0xfe>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	6820      	ldr	r0, [r4, #0]
 8008cdc:	1d19      	adds	r1, r3, #4
 8008cde:	6029      	str	r1, [r5, #0]
 8008ce0:	0605      	lsls	r5, r0, #24
 8008ce2:	d501      	bpl.n	8008ce8 <_printf_i+0xe8>
 8008ce4:	681e      	ldr	r6, [r3, #0]
 8008ce6:	e002      	b.n	8008cee <_printf_i+0xee>
 8008ce8:	0641      	lsls	r1, r0, #25
 8008cea:	d5fb      	bpl.n	8008ce4 <_printf_i+0xe4>
 8008cec:	881e      	ldrh	r6, [r3, #0]
 8008cee:	4853      	ldr	r0, [pc, #332]	; (8008e3c <_printf_i+0x23c>)
 8008cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8008cf2:	bf0c      	ite	eq
 8008cf4:	2308      	moveq	r3, #8
 8008cf6:	230a      	movne	r3, #10
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cfe:	6865      	ldr	r5, [r4, #4]
 8008d00:	60a5      	str	r5, [r4, #8]
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	bfa2      	ittt	ge
 8008d06:	6821      	ldrge	r1, [r4, #0]
 8008d08:	f021 0104 	bicge.w	r1, r1, #4
 8008d0c:	6021      	strge	r1, [r4, #0]
 8008d0e:	b90e      	cbnz	r6, 8008d14 <_printf_i+0x114>
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	d04b      	beq.n	8008dac <_printf_i+0x1ac>
 8008d14:	4615      	mov	r5, r2
 8008d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8008d1e:	5dc7      	ldrb	r7, [r0, r7]
 8008d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d24:	4637      	mov	r7, r6
 8008d26:	42bb      	cmp	r3, r7
 8008d28:	460e      	mov	r6, r1
 8008d2a:	d9f4      	bls.n	8008d16 <_printf_i+0x116>
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d10b      	bne.n	8008d48 <_printf_i+0x148>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	07de      	lsls	r6, r3, #31
 8008d34:	d508      	bpl.n	8008d48 <_printf_i+0x148>
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	6861      	ldr	r1, [r4, #4]
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	bfde      	ittt	le
 8008d3e:	2330      	movle	r3, #48	; 0x30
 8008d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d48:	1b52      	subs	r2, r2, r5
 8008d4a:	6122      	str	r2, [r4, #16]
 8008d4c:	f8cd a000 	str.w	sl, [sp]
 8008d50:	464b      	mov	r3, r9
 8008d52:	aa03      	add	r2, sp, #12
 8008d54:	4621      	mov	r1, r4
 8008d56:	4640      	mov	r0, r8
 8008d58:	f7ff fee4 	bl	8008b24 <_printf_common>
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d14a      	bne.n	8008df6 <_printf_i+0x1f6>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	b004      	add	sp, #16
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	f043 0320 	orr.w	r3, r3, #32
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	4833      	ldr	r0, [pc, #204]	; (8008e40 <_printf_i+0x240>)
 8008d74:	2778      	movs	r7, #120	; 0x78
 8008d76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	6829      	ldr	r1, [r5, #0]
 8008d7e:	061f      	lsls	r7, r3, #24
 8008d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d84:	d402      	bmi.n	8008d8c <_printf_i+0x18c>
 8008d86:	065f      	lsls	r7, r3, #25
 8008d88:	bf48      	it	mi
 8008d8a:	b2b6      	uxthmi	r6, r6
 8008d8c:	07df      	lsls	r7, r3, #31
 8008d8e:	bf48      	it	mi
 8008d90:	f043 0320 	orrmi.w	r3, r3, #32
 8008d94:	6029      	str	r1, [r5, #0]
 8008d96:	bf48      	it	mi
 8008d98:	6023      	strmi	r3, [r4, #0]
 8008d9a:	b91e      	cbnz	r6, 8008da4 <_printf_i+0x1a4>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	f023 0320 	bic.w	r3, r3, #32
 8008da2:	6023      	str	r3, [r4, #0]
 8008da4:	2310      	movs	r3, #16
 8008da6:	e7a7      	b.n	8008cf8 <_printf_i+0xf8>
 8008da8:	4824      	ldr	r0, [pc, #144]	; (8008e3c <_printf_i+0x23c>)
 8008daa:	e7e4      	b.n	8008d76 <_printf_i+0x176>
 8008dac:	4615      	mov	r5, r2
 8008dae:	e7bd      	b.n	8008d2c <_printf_i+0x12c>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	6826      	ldr	r6, [r4, #0]
 8008db4:	6961      	ldr	r1, [r4, #20]
 8008db6:	1d18      	adds	r0, r3, #4
 8008db8:	6028      	str	r0, [r5, #0]
 8008dba:	0635      	lsls	r5, r6, #24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	d501      	bpl.n	8008dc4 <_printf_i+0x1c4>
 8008dc0:	6019      	str	r1, [r3, #0]
 8008dc2:	e002      	b.n	8008dca <_printf_i+0x1ca>
 8008dc4:	0670      	lsls	r0, r6, #25
 8008dc6:	d5fb      	bpl.n	8008dc0 <_printf_i+0x1c0>
 8008dc8:	8019      	strh	r1, [r3, #0]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	4615      	mov	r5, r2
 8008dd0:	e7bc      	b.n	8008d4c <_printf_i+0x14c>
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	602a      	str	r2, [r5, #0]
 8008dd8:	681d      	ldr	r5, [r3, #0]
 8008dda:	6862      	ldr	r2, [r4, #4]
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4628      	mov	r0, r5
 8008de0:	f7f7 fa16 	bl	8000210 <memchr>
 8008de4:	b108      	cbz	r0, 8008dea <_printf_i+0x1ea>
 8008de6:	1b40      	subs	r0, r0, r5
 8008de8:	6060      	str	r0, [r4, #4]
 8008dea:	6863      	ldr	r3, [r4, #4]
 8008dec:	6123      	str	r3, [r4, #16]
 8008dee:	2300      	movs	r3, #0
 8008df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df4:	e7aa      	b.n	8008d4c <_printf_i+0x14c>
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	462a      	mov	r2, r5
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	47d0      	blx	sl
 8008e00:	3001      	adds	r0, #1
 8008e02:	d0ad      	beq.n	8008d60 <_printf_i+0x160>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	079b      	lsls	r3, r3, #30
 8008e08:	d413      	bmi.n	8008e32 <_printf_i+0x232>
 8008e0a:	68e0      	ldr	r0, [r4, #12]
 8008e0c:	9b03      	ldr	r3, [sp, #12]
 8008e0e:	4298      	cmp	r0, r3
 8008e10:	bfb8      	it	lt
 8008e12:	4618      	movlt	r0, r3
 8008e14:	e7a6      	b.n	8008d64 <_printf_i+0x164>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4632      	mov	r2, r6
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	47d0      	blx	sl
 8008e20:	3001      	adds	r0, #1
 8008e22:	d09d      	beq.n	8008d60 <_printf_i+0x160>
 8008e24:	3501      	adds	r5, #1
 8008e26:	68e3      	ldr	r3, [r4, #12]
 8008e28:	9903      	ldr	r1, [sp, #12]
 8008e2a:	1a5b      	subs	r3, r3, r1
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dcf2      	bgt.n	8008e16 <_printf_i+0x216>
 8008e30:	e7eb      	b.n	8008e0a <_printf_i+0x20a>
 8008e32:	2500      	movs	r5, #0
 8008e34:	f104 0619 	add.w	r6, r4, #25
 8008e38:	e7f5      	b.n	8008e26 <_printf_i+0x226>
 8008e3a:	bf00      	nop
 8008e3c:	0800d974 	.word	0x0800d974
 8008e40:	0800d985 	.word	0x0800d985

08008e44 <_scanf_float>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	b087      	sub	sp, #28
 8008e4a:	4617      	mov	r7, r2
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	688b      	ldr	r3, [r1, #8]
 8008e50:	1e5a      	subs	r2, r3, #1
 8008e52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e56:	bf83      	ittte	hi
 8008e58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e5c:	195b      	addhi	r3, r3, r5
 8008e5e:	9302      	strhi	r3, [sp, #8]
 8008e60:	2300      	movls	r3, #0
 8008e62:	bf86      	itte	hi
 8008e64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e68:	608b      	strhi	r3, [r1, #8]
 8008e6a:	9302      	strls	r3, [sp, #8]
 8008e6c:	680b      	ldr	r3, [r1, #0]
 8008e6e:	468b      	mov	fp, r1
 8008e70:	2500      	movs	r5, #0
 8008e72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e76:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e7e:	4680      	mov	r8, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	465e      	mov	r6, fp
 8008e84:	46aa      	mov	sl, r5
 8008e86:	46a9      	mov	r9, r5
 8008e88:	9501      	str	r5, [sp, #4]
 8008e8a:	68a2      	ldr	r2, [r4, #8]
 8008e8c:	b152      	cbz	r2, 8008ea4 <_scanf_float+0x60>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b4e      	cmp	r3, #78	; 0x4e
 8008e94:	d864      	bhi.n	8008f60 <_scanf_float+0x11c>
 8008e96:	2b40      	cmp	r3, #64	; 0x40
 8008e98:	d83c      	bhi.n	8008f14 <_scanf_float+0xd0>
 8008e9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e9e:	b2c8      	uxtb	r0, r1
 8008ea0:	280e      	cmp	r0, #14
 8008ea2:	d93a      	bls.n	8008f1a <_scanf_float+0xd6>
 8008ea4:	f1b9 0f00 	cmp.w	r9, #0
 8008ea8:	d003      	beq.n	8008eb2 <_scanf_float+0x6e>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eb6:	f1ba 0f01 	cmp.w	sl, #1
 8008eba:	f200 8113 	bhi.w	80090e4 <_scanf_float+0x2a0>
 8008ebe:	455e      	cmp	r6, fp
 8008ec0:	f200 8105 	bhi.w	80090ce <_scanf_float+0x28a>
 8008ec4:	2501      	movs	r5, #1
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	b007      	add	sp, #28
 8008eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008ed2:	2a0d      	cmp	r2, #13
 8008ed4:	d8e6      	bhi.n	8008ea4 <_scanf_float+0x60>
 8008ed6:	a101      	add	r1, pc, #4	; (adr r1, 8008edc <_scanf_float+0x98>)
 8008ed8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008edc:	0800901b 	.word	0x0800901b
 8008ee0:	08008ea5 	.word	0x08008ea5
 8008ee4:	08008ea5 	.word	0x08008ea5
 8008ee8:	08008ea5 	.word	0x08008ea5
 8008eec:	0800907b 	.word	0x0800907b
 8008ef0:	08009053 	.word	0x08009053
 8008ef4:	08008ea5 	.word	0x08008ea5
 8008ef8:	08008ea5 	.word	0x08008ea5
 8008efc:	08009029 	.word	0x08009029
 8008f00:	08008ea5 	.word	0x08008ea5
 8008f04:	08008ea5 	.word	0x08008ea5
 8008f08:	08008ea5 	.word	0x08008ea5
 8008f0c:	08008ea5 	.word	0x08008ea5
 8008f10:	08008fe1 	.word	0x08008fe1
 8008f14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f18:	e7db      	b.n	8008ed2 <_scanf_float+0x8e>
 8008f1a:	290e      	cmp	r1, #14
 8008f1c:	d8c2      	bhi.n	8008ea4 <_scanf_float+0x60>
 8008f1e:	a001      	add	r0, pc, #4	; (adr r0, 8008f24 <_scanf_float+0xe0>)
 8008f20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f24:	08008fd3 	.word	0x08008fd3
 8008f28:	08008ea5 	.word	0x08008ea5
 8008f2c:	08008fd3 	.word	0x08008fd3
 8008f30:	08009067 	.word	0x08009067
 8008f34:	08008ea5 	.word	0x08008ea5
 8008f38:	08008f81 	.word	0x08008f81
 8008f3c:	08008fbd 	.word	0x08008fbd
 8008f40:	08008fbd 	.word	0x08008fbd
 8008f44:	08008fbd 	.word	0x08008fbd
 8008f48:	08008fbd 	.word	0x08008fbd
 8008f4c:	08008fbd 	.word	0x08008fbd
 8008f50:	08008fbd 	.word	0x08008fbd
 8008f54:	08008fbd 	.word	0x08008fbd
 8008f58:	08008fbd 	.word	0x08008fbd
 8008f5c:	08008fbd 	.word	0x08008fbd
 8008f60:	2b6e      	cmp	r3, #110	; 0x6e
 8008f62:	d809      	bhi.n	8008f78 <_scanf_float+0x134>
 8008f64:	2b60      	cmp	r3, #96	; 0x60
 8008f66:	d8b2      	bhi.n	8008ece <_scanf_float+0x8a>
 8008f68:	2b54      	cmp	r3, #84	; 0x54
 8008f6a:	d077      	beq.n	800905c <_scanf_float+0x218>
 8008f6c:	2b59      	cmp	r3, #89	; 0x59
 8008f6e:	d199      	bne.n	8008ea4 <_scanf_float+0x60>
 8008f70:	2d07      	cmp	r5, #7
 8008f72:	d197      	bne.n	8008ea4 <_scanf_float+0x60>
 8008f74:	2508      	movs	r5, #8
 8008f76:	e029      	b.n	8008fcc <_scanf_float+0x188>
 8008f78:	2b74      	cmp	r3, #116	; 0x74
 8008f7a:	d06f      	beq.n	800905c <_scanf_float+0x218>
 8008f7c:	2b79      	cmp	r3, #121	; 0x79
 8008f7e:	e7f6      	b.n	8008f6e <_scanf_float+0x12a>
 8008f80:	6821      	ldr	r1, [r4, #0]
 8008f82:	05c8      	lsls	r0, r1, #23
 8008f84:	d51a      	bpl.n	8008fbc <_scanf_float+0x178>
 8008f86:	9b02      	ldr	r3, [sp, #8]
 8008f88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f8c:	6021      	str	r1, [r4, #0]
 8008f8e:	f109 0901 	add.w	r9, r9, #1
 8008f92:	b11b      	cbz	r3, 8008f9c <_scanf_float+0x158>
 8008f94:	3b01      	subs	r3, #1
 8008f96:	3201      	adds	r2, #1
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	60a2      	str	r2, [r4, #8]
 8008f9c:	68a3      	ldr	r3, [r4, #8]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	60a3      	str	r3, [r4, #8]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	f340 8084 	ble.w	80090bc <_scanf_float+0x278>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	603b      	str	r3, [r7, #0]
 8008fba:	e766      	b.n	8008e8a <_scanf_float+0x46>
 8008fbc:	eb1a 0f05 	cmn.w	sl, r5
 8008fc0:	f47f af70 	bne.w	8008ea4 <_scanf_float+0x60>
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008fca:	6022      	str	r2, [r4, #0]
 8008fcc:	f806 3b01 	strb.w	r3, [r6], #1
 8008fd0:	e7e4      	b.n	8008f9c <_scanf_float+0x158>
 8008fd2:	6822      	ldr	r2, [r4, #0]
 8008fd4:	0610      	lsls	r0, r2, #24
 8008fd6:	f57f af65 	bpl.w	8008ea4 <_scanf_float+0x60>
 8008fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fde:	e7f4      	b.n	8008fca <_scanf_float+0x186>
 8008fe0:	f1ba 0f00 	cmp.w	sl, #0
 8008fe4:	d10e      	bne.n	8009004 <_scanf_float+0x1c0>
 8008fe6:	f1b9 0f00 	cmp.w	r9, #0
 8008fea:	d10e      	bne.n	800900a <_scanf_float+0x1c6>
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ff2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ff6:	d108      	bne.n	800900a <_scanf_float+0x1c6>
 8008ff8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ffc:	6022      	str	r2, [r4, #0]
 8008ffe:	f04f 0a01 	mov.w	sl, #1
 8009002:	e7e3      	b.n	8008fcc <_scanf_float+0x188>
 8009004:	f1ba 0f02 	cmp.w	sl, #2
 8009008:	d055      	beq.n	80090b6 <_scanf_float+0x272>
 800900a:	2d01      	cmp	r5, #1
 800900c:	d002      	beq.n	8009014 <_scanf_float+0x1d0>
 800900e:	2d04      	cmp	r5, #4
 8009010:	f47f af48 	bne.w	8008ea4 <_scanf_float+0x60>
 8009014:	3501      	adds	r5, #1
 8009016:	b2ed      	uxtb	r5, r5
 8009018:	e7d8      	b.n	8008fcc <_scanf_float+0x188>
 800901a:	f1ba 0f01 	cmp.w	sl, #1
 800901e:	f47f af41 	bne.w	8008ea4 <_scanf_float+0x60>
 8009022:	f04f 0a02 	mov.w	sl, #2
 8009026:	e7d1      	b.n	8008fcc <_scanf_float+0x188>
 8009028:	b97d      	cbnz	r5, 800904a <_scanf_float+0x206>
 800902a:	f1b9 0f00 	cmp.w	r9, #0
 800902e:	f47f af3c 	bne.w	8008eaa <_scanf_float+0x66>
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009038:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800903c:	f47f af39 	bne.w	8008eb2 <_scanf_float+0x6e>
 8009040:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009044:	6022      	str	r2, [r4, #0]
 8009046:	2501      	movs	r5, #1
 8009048:	e7c0      	b.n	8008fcc <_scanf_float+0x188>
 800904a:	2d03      	cmp	r5, #3
 800904c:	d0e2      	beq.n	8009014 <_scanf_float+0x1d0>
 800904e:	2d05      	cmp	r5, #5
 8009050:	e7de      	b.n	8009010 <_scanf_float+0x1cc>
 8009052:	2d02      	cmp	r5, #2
 8009054:	f47f af26 	bne.w	8008ea4 <_scanf_float+0x60>
 8009058:	2503      	movs	r5, #3
 800905a:	e7b7      	b.n	8008fcc <_scanf_float+0x188>
 800905c:	2d06      	cmp	r5, #6
 800905e:	f47f af21 	bne.w	8008ea4 <_scanf_float+0x60>
 8009062:	2507      	movs	r5, #7
 8009064:	e7b2      	b.n	8008fcc <_scanf_float+0x188>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	0591      	lsls	r1, r2, #22
 800906a:	f57f af1b 	bpl.w	8008ea4 <_scanf_float+0x60>
 800906e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009072:	6022      	str	r2, [r4, #0]
 8009074:	f8cd 9004 	str.w	r9, [sp, #4]
 8009078:	e7a8      	b.n	8008fcc <_scanf_float+0x188>
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009080:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009084:	d006      	beq.n	8009094 <_scanf_float+0x250>
 8009086:	0550      	lsls	r0, r2, #21
 8009088:	f57f af0c 	bpl.w	8008ea4 <_scanf_float+0x60>
 800908c:	f1b9 0f00 	cmp.w	r9, #0
 8009090:	f43f af0f 	beq.w	8008eb2 <_scanf_float+0x6e>
 8009094:	0591      	lsls	r1, r2, #22
 8009096:	bf58      	it	pl
 8009098:	9901      	ldrpl	r1, [sp, #4]
 800909a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800909e:	bf58      	it	pl
 80090a0:	eba9 0101 	subpl.w	r1, r9, r1
 80090a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80090a8:	bf58      	it	pl
 80090aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80090ae:	6022      	str	r2, [r4, #0]
 80090b0:	f04f 0900 	mov.w	r9, #0
 80090b4:	e78a      	b.n	8008fcc <_scanf_float+0x188>
 80090b6:	f04f 0a03 	mov.w	sl, #3
 80090ba:	e787      	b.n	8008fcc <_scanf_float+0x188>
 80090bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090c0:	4639      	mov	r1, r7
 80090c2:	4640      	mov	r0, r8
 80090c4:	4798      	blx	r3
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f43f aedf 	beq.w	8008e8a <_scanf_float+0x46>
 80090cc:	e6ea      	b.n	8008ea4 <_scanf_float+0x60>
 80090ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090d6:	463a      	mov	r2, r7
 80090d8:	4640      	mov	r0, r8
 80090da:	4798      	blx	r3
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	3b01      	subs	r3, #1
 80090e0:	6123      	str	r3, [r4, #16]
 80090e2:	e6ec      	b.n	8008ebe <_scanf_float+0x7a>
 80090e4:	1e6b      	subs	r3, r5, #1
 80090e6:	2b06      	cmp	r3, #6
 80090e8:	d825      	bhi.n	8009136 <_scanf_float+0x2f2>
 80090ea:	2d02      	cmp	r5, #2
 80090ec:	d836      	bhi.n	800915c <_scanf_float+0x318>
 80090ee:	455e      	cmp	r6, fp
 80090f0:	f67f aee8 	bls.w	8008ec4 <_scanf_float+0x80>
 80090f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090fc:	463a      	mov	r2, r7
 80090fe:	4640      	mov	r0, r8
 8009100:	4798      	blx	r3
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	3b01      	subs	r3, #1
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	e7f1      	b.n	80090ee <_scanf_float+0x2aa>
 800910a:	9802      	ldr	r0, [sp, #8]
 800910c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009110:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009114:	9002      	str	r0, [sp, #8]
 8009116:	463a      	mov	r2, r7
 8009118:	4640      	mov	r0, r8
 800911a:	4798      	blx	r3
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	3b01      	subs	r3, #1
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009126:	fa5f fa8a 	uxtb.w	sl, sl
 800912a:	f1ba 0f02 	cmp.w	sl, #2
 800912e:	d1ec      	bne.n	800910a <_scanf_float+0x2c6>
 8009130:	3d03      	subs	r5, #3
 8009132:	b2ed      	uxtb	r5, r5
 8009134:	1b76      	subs	r6, r6, r5
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	05da      	lsls	r2, r3, #23
 800913a:	d52f      	bpl.n	800919c <_scanf_float+0x358>
 800913c:	055b      	lsls	r3, r3, #21
 800913e:	d510      	bpl.n	8009162 <_scanf_float+0x31e>
 8009140:	455e      	cmp	r6, fp
 8009142:	f67f aebf 	bls.w	8008ec4 <_scanf_float+0x80>
 8009146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800914a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800914e:	463a      	mov	r2, r7
 8009150:	4640      	mov	r0, r8
 8009152:	4798      	blx	r3
 8009154:	6923      	ldr	r3, [r4, #16]
 8009156:	3b01      	subs	r3, #1
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	e7f1      	b.n	8009140 <_scanf_float+0x2fc>
 800915c:	46aa      	mov	sl, r5
 800915e:	9602      	str	r6, [sp, #8]
 8009160:	e7df      	b.n	8009122 <_scanf_float+0x2de>
 8009162:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	2965      	cmp	r1, #101	; 0x65
 800916a:	f103 33ff 	add.w	r3, r3, #4294967295
 800916e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009172:	6123      	str	r3, [r4, #16]
 8009174:	d00c      	beq.n	8009190 <_scanf_float+0x34c>
 8009176:	2945      	cmp	r1, #69	; 0x45
 8009178:	d00a      	beq.n	8009190 <_scanf_float+0x34c>
 800917a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800917e:	463a      	mov	r2, r7
 8009180:	4640      	mov	r0, r8
 8009182:	4798      	blx	r3
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800918a:	3b01      	subs	r3, #1
 800918c:	1eb5      	subs	r5, r6, #2
 800918e:	6123      	str	r3, [r4, #16]
 8009190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009194:	463a      	mov	r2, r7
 8009196:	4640      	mov	r0, r8
 8009198:	4798      	blx	r3
 800919a:	462e      	mov	r6, r5
 800919c:	6825      	ldr	r5, [r4, #0]
 800919e:	f015 0510 	ands.w	r5, r5, #16
 80091a2:	d158      	bne.n	8009256 <_scanf_float+0x412>
 80091a4:	7035      	strb	r5, [r6, #0]
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b0:	d11c      	bne.n	80091ec <_scanf_float+0x3a8>
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	454b      	cmp	r3, r9
 80091b6:	eba3 0209 	sub.w	r2, r3, r9
 80091ba:	d124      	bne.n	8009206 <_scanf_float+0x3c2>
 80091bc:	2200      	movs	r2, #0
 80091be:	4659      	mov	r1, fp
 80091c0:	4640      	mov	r0, r8
 80091c2:	f002 fd71 	bl	800bca8 <_strtod_r>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	6821      	ldr	r1, [r4, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f011 0f02 	tst.w	r1, #2
 80091d0:	ec57 6b10 	vmov	r6, r7, d0
 80091d4:	f103 0204 	add.w	r2, r3, #4
 80091d8:	d020      	beq.n	800921c <_scanf_float+0x3d8>
 80091da:	9903      	ldr	r1, [sp, #12]
 80091dc:	600a      	str	r2, [r1, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	e9c3 6700 	strd	r6, r7, [r3]
 80091e4:	68e3      	ldr	r3, [r4, #12]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60e3      	str	r3, [r4, #12]
 80091ea:	e66c      	b.n	8008ec6 <_scanf_float+0x82>
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0e4      	beq.n	80091bc <_scanf_float+0x378>
 80091f2:	9905      	ldr	r1, [sp, #20]
 80091f4:	230a      	movs	r3, #10
 80091f6:	462a      	mov	r2, r5
 80091f8:	3101      	adds	r1, #1
 80091fa:	4640      	mov	r0, r8
 80091fc:	f002 fddc 	bl	800bdb8 <_strtol_r>
 8009200:	9b04      	ldr	r3, [sp, #16]
 8009202:	9e05      	ldr	r6, [sp, #20]
 8009204:	1ac2      	subs	r2, r0, r3
 8009206:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800920a:	429e      	cmp	r6, r3
 800920c:	bf28      	it	cs
 800920e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009212:	4912      	ldr	r1, [pc, #72]	; (800925c <_scanf_float+0x418>)
 8009214:	4630      	mov	r0, r6
 8009216:	f000 f943 	bl	80094a0 <siprintf>
 800921a:	e7cf      	b.n	80091bc <_scanf_float+0x378>
 800921c:	f011 0f04 	tst.w	r1, #4
 8009220:	9903      	ldr	r1, [sp, #12]
 8009222:	600a      	str	r2, [r1, #0]
 8009224:	d1db      	bne.n	80091de <_scanf_float+0x39a>
 8009226:	f8d3 8000 	ldr.w	r8, [r3]
 800922a:	ee10 2a10 	vmov	r2, s0
 800922e:	ee10 0a10 	vmov	r0, s0
 8009232:	463b      	mov	r3, r7
 8009234:	4639      	mov	r1, r7
 8009236:	f7f7 fc99 	bl	8000b6c <__aeabi_dcmpun>
 800923a:	b128      	cbz	r0, 8009248 <_scanf_float+0x404>
 800923c:	4808      	ldr	r0, [pc, #32]	; (8009260 <_scanf_float+0x41c>)
 800923e:	f000 faf7 	bl	8009830 <nanf>
 8009242:	ed88 0a00 	vstr	s0, [r8]
 8009246:	e7cd      	b.n	80091e4 <_scanf_float+0x3a0>
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	f7f7 fcec 	bl	8000c28 <__aeabi_d2f>
 8009250:	f8c8 0000 	str.w	r0, [r8]
 8009254:	e7c6      	b.n	80091e4 <_scanf_float+0x3a0>
 8009256:	2500      	movs	r5, #0
 8009258:	e635      	b.n	8008ec6 <_scanf_float+0x82>
 800925a:	bf00      	nop
 800925c:	0800d996 	.word	0x0800d996
 8009260:	0800dd48 	.word	0x0800dd48

08009264 <std>:
 8009264:	2300      	movs	r3, #0
 8009266:	b510      	push	{r4, lr}
 8009268:	4604      	mov	r4, r0
 800926a:	e9c0 3300 	strd	r3, r3, [r0]
 800926e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009272:	6083      	str	r3, [r0, #8]
 8009274:	8181      	strh	r1, [r0, #12]
 8009276:	6643      	str	r3, [r0, #100]	; 0x64
 8009278:	81c2      	strh	r2, [r0, #14]
 800927a:	6183      	str	r3, [r0, #24]
 800927c:	4619      	mov	r1, r3
 800927e:	2208      	movs	r2, #8
 8009280:	305c      	adds	r0, #92	; 0x5c
 8009282:	f000 fa33 	bl	80096ec <memset>
 8009286:	4b05      	ldr	r3, [pc, #20]	; (800929c <std+0x38>)
 8009288:	6263      	str	r3, [r4, #36]	; 0x24
 800928a:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <std+0x3c>)
 800928c:	62a3      	str	r3, [r4, #40]	; 0x28
 800928e:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <std+0x40>)
 8009290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009292:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <std+0x44>)
 8009294:	6224      	str	r4, [r4, #32]
 8009296:	6323      	str	r3, [r4, #48]	; 0x30
 8009298:	bd10      	pop	{r4, pc}
 800929a:	bf00      	nop
 800929c:	08009539 	.word	0x08009539
 80092a0:	0800955f 	.word	0x0800955f
 80092a4:	08009597 	.word	0x08009597
 80092a8:	080095bb 	.word	0x080095bb

080092ac <stdio_exit_handler>:
 80092ac:	4a02      	ldr	r2, [pc, #8]	; (80092b8 <stdio_exit_handler+0xc>)
 80092ae:	4903      	ldr	r1, [pc, #12]	; (80092bc <stdio_exit_handler+0x10>)
 80092b0:	4803      	ldr	r0, [pc, #12]	; (80092c0 <stdio_exit_handler+0x14>)
 80092b2:	f000 b869 	b.w	8009388 <_fwalk_sglue>
 80092b6:	bf00      	nop
 80092b8:	2000005c 	.word	0x2000005c
 80092bc:	0800ca41 	.word	0x0800ca41
 80092c0:	20000068 	.word	0x20000068

080092c4 <cleanup_stdio>:
 80092c4:	6841      	ldr	r1, [r0, #4]
 80092c6:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <cleanup_stdio+0x34>)
 80092c8:	4299      	cmp	r1, r3
 80092ca:	b510      	push	{r4, lr}
 80092cc:	4604      	mov	r4, r0
 80092ce:	d001      	beq.n	80092d4 <cleanup_stdio+0x10>
 80092d0:	f003 fbb6 	bl	800ca40 <_fflush_r>
 80092d4:	68a1      	ldr	r1, [r4, #8]
 80092d6:	4b09      	ldr	r3, [pc, #36]	; (80092fc <cleanup_stdio+0x38>)
 80092d8:	4299      	cmp	r1, r3
 80092da:	d002      	beq.n	80092e2 <cleanup_stdio+0x1e>
 80092dc:	4620      	mov	r0, r4
 80092de:	f003 fbaf 	bl	800ca40 <_fflush_r>
 80092e2:	68e1      	ldr	r1, [r4, #12]
 80092e4:	4b06      	ldr	r3, [pc, #24]	; (8009300 <cleanup_stdio+0x3c>)
 80092e6:	4299      	cmp	r1, r3
 80092e8:	d004      	beq.n	80092f4 <cleanup_stdio+0x30>
 80092ea:	4620      	mov	r0, r4
 80092ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f0:	f003 bba6 	b.w	800ca40 <_fflush_r>
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	bf00      	nop
 80092f8:	2000a298 	.word	0x2000a298
 80092fc:	2000a300 	.word	0x2000a300
 8009300:	2000a368 	.word	0x2000a368

08009304 <global_stdio_init.part.0>:
 8009304:	b510      	push	{r4, lr}
 8009306:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <global_stdio_init.part.0+0x30>)
 8009308:	4c0b      	ldr	r4, [pc, #44]	; (8009338 <global_stdio_init.part.0+0x34>)
 800930a:	4a0c      	ldr	r2, [pc, #48]	; (800933c <global_stdio_init.part.0+0x38>)
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	4620      	mov	r0, r4
 8009310:	2200      	movs	r2, #0
 8009312:	2104      	movs	r1, #4
 8009314:	f7ff ffa6 	bl	8009264 <std>
 8009318:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800931c:	2201      	movs	r2, #1
 800931e:	2109      	movs	r1, #9
 8009320:	f7ff ffa0 	bl	8009264 <std>
 8009324:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009328:	2202      	movs	r2, #2
 800932a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800932e:	2112      	movs	r1, #18
 8009330:	f7ff bf98 	b.w	8009264 <std>
 8009334:	2000a3d0 	.word	0x2000a3d0
 8009338:	2000a298 	.word	0x2000a298
 800933c:	080092ad 	.word	0x080092ad

08009340 <__sfp_lock_acquire>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__sfp_lock_acquire+0x8>)
 8009342:	f000 ba65 	b.w	8009810 <__retarget_lock_acquire_recursive>
 8009346:	bf00      	nop
 8009348:	2000a3d9 	.word	0x2000a3d9

0800934c <__sfp_lock_release>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__sfp_lock_release+0x8>)
 800934e:	f000 ba60 	b.w	8009812 <__retarget_lock_release_recursive>
 8009352:	bf00      	nop
 8009354:	2000a3d9 	.word	0x2000a3d9

08009358 <__sinit>:
 8009358:	b510      	push	{r4, lr}
 800935a:	4604      	mov	r4, r0
 800935c:	f7ff fff0 	bl	8009340 <__sfp_lock_acquire>
 8009360:	6a23      	ldr	r3, [r4, #32]
 8009362:	b11b      	cbz	r3, 800936c <__sinit+0x14>
 8009364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009368:	f7ff bff0 	b.w	800934c <__sfp_lock_release>
 800936c:	4b04      	ldr	r3, [pc, #16]	; (8009380 <__sinit+0x28>)
 800936e:	6223      	str	r3, [r4, #32]
 8009370:	4b04      	ldr	r3, [pc, #16]	; (8009384 <__sinit+0x2c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f5      	bne.n	8009364 <__sinit+0xc>
 8009378:	f7ff ffc4 	bl	8009304 <global_stdio_init.part.0>
 800937c:	e7f2      	b.n	8009364 <__sinit+0xc>
 800937e:	bf00      	nop
 8009380:	080092c5 	.word	0x080092c5
 8009384:	2000a3d0 	.word	0x2000a3d0

08009388 <_fwalk_sglue>:
 8009388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800938c:	4607      	mov	r7, r0
 800938e:	4688      	mov	r8, r1
 8009390:	4614      	mov	r4, r2
 8009392:	2600      	movs	r6, #0
 8009394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009398:	f1b9 0901 	subs.w	r9, r9, #1
 800939c:	d505      	bpl.n	80093aa <_fwalk_sglue+0x22>
 800939e:	6824      	ldr	r4, [r4, #0]
 80093a0:	2c00      	cmp	r4, #0
 80093a2:	d1f7      	bne.n	8009394 <_fwalk_sglue+0xc>
 80093a4:	4630      	mov	r0, r6
 80093a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d907      	bls.n	80093c0 <_fwalk_sglue+0x38>
 80093b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093b4:	3301      	adds	r3, #1
 80093b6:	d003      	beq.n	80093c0 <_fwalk_sglue+0x38>
 80093b8:	4629      	mov	r1, r5
 80093ba:	4638      	mov	r0, r7
 80093bc:	47c0      	blx	r8
 80093be:	4306      	orrs	r6, r0
 80093c0:	3568      	adds	r5, #104	; 0x68
 80093c2:	e7e9      	b.n	8009398 <_fwalk_sglue+0x10>

080093c4 <iprintf>:
 80093c4:	b40f      	push	{r0, r1, r2, r3}
 80093c6:	b507      	push	{r0, r1, r2, lr}
 80093c8:	4906      	ldr	r1, [pc, #24]	; (80093e4 <iprintf+0x20>)
 80093ca:	ab04      	add	r3, sp, #16
 80093cc:	6808      	ldr	r0, [r1, #0]
 80093ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d2:	6881      	ldr	r1, [r0, #8]
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	f003 f845 	bl	800c464 <_vfiprintf_r>
 80093da:	b003      	add	sp, #12
 80093dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80093e0:	b004      	add	sp, #16
 80093e2:	4770      	bx	lr
 80093e4:	200000b4 	.word	0x200000b4

080093e8 <_puts_r>:
 80093e8:	6a03      	ldr	r3, [r0, #32]
 80093ea:	b570      	push	{r4, r5, r6, lr}
 80093ec:	6884      	ldr	r4, [r0, #8]
 80093ee:	4605      	mov	r5, r0
 80093f0:	460e      	mov	r6, r1
 80093f2:	b90b      	cbnz	r3, 80093f8 <_puts_r+0x10>
 80093f4:	f7ff ffb0 	bl	8009358 <__sinit>
 80093f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093fa:	07db      	lsls	r3, r3, #31
 80093fc:	d405      	bmi.n	800940a <_puts_r+0x22>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	0598      	lsls	r0, r3, #22
 8009402:	d402      	bmi.n	800940a <_puts_r+0x22>
 8009404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009406:	f000 fa03 	bl	8009810 <__retarget_lock_acquire_recursive>
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	0719      	lsls	r1, r3, #28
 800940e:	d513      	bpl.n	8009438 <_puts_r+0x50>
 8009410:	6923      	ldr	r3, [r4, #16]
 8009412:	b18b      	cbz	r3, 8009438 <_puts_r+0x50>
 8009414:	3e01      	subs	r6, #1
 8009416:	68a3      	ldr	r3, [r4, #8]
 8009418:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800941c:	3b01      	subs	r3, #1
 800941e:	60a3      	str	r3, [r4, #8]
 8009420:	b9e9      	cbnz	r1, 800945e <_puts_r+0x76>
 8009422:	2b00      	cmp	r3, #0
 8009424:	da2e      	bge.n	8009484 <_puts_r+0x9c>
 8009426:	4622      	mov	r2, r4
 8009428:	210a      	movs	r1, #10
 800942a:	4628      	mov	r0, r5
 800942c:	f000 f8c9 	bl	80095c2 <__swbuf_r>
 8009430:	3001      	adds	r0, #1
 8009432:	d007      	beq.n	8009444 <_puts_r+0x5c>
 8009434:	250a      	movs	r5, #10
 8009436:	e007      	b.n	8009448 <_puts_r+0x60>
 8009438:	4621      	mov	r1, r4
 800943a:	4628      	mov	r0, r5
 800943c:	f000 f8fe 	bl	800963c <__swsetup_r>
 8009440:	2800      	cmp	r0, #0
 8009442:	d0e7      	beq.n	8009414 <_puts_r+0x2c>
 8009444:	f04f 35ff 	mov.w	r5, #4294967295
 8009448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800944a:	07da      	lsls	r2, r3, #31
 800944c:	d405      	bmi.n	800945a <_puts_r+0x72>
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	059b      	lsls	r3, r3, #22
 8009452:	d402      	bmi.n	800945a <_puts_r+0x72>
 8009454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009456:	f000 f9dc 	bl	8009812 <__retarget_lock_release_recursive>
 800945a:	4628      	mov	r0, r5
 800945c:	bd70      	pop	{r4, r5, r6, pc}
 800945e:	2b00      	cmp	r3, #0
 8009460:	da04      	bge.n	800946c <_puts_r+0x84>
 8009462:	69a2      	ldr	r2, [r4, #24]
 8009464:	429a      	cmp	r2, r3
 8009466:	dc06      	bgt.n	8009476 <_puts_r+0x8e>
 8009468:	290a      	cmp	r1, #10
 800946a:	d004      	beq.n	8009476 <_puts_r+0x8e>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	6022      	str	r2, [r4, #0]
 8009472:	7019      	strb	r1, [r3, #0]
 8009474:	e7cf      	b.n	8009416 <_puts_r+0x2e>
 8009476:	4622      	mov	r2, r4
 8009478:	4628      	mov	r0, r5
 800947a:	f000 f8a2 	bl	80095c2 <__swbuf_r>
 800947e:	3001      	adds	r0, #1
 8009480:	d1c9      	bne.n	8009416 <_puts_r+0x2e>
 8009482:	e7df      	b.n	8009444 <_puts_r+0x5c>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	250a      	movs	r5, #10
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	6022      	str	r2, [r4, #0]
 800948c:	701d      	strb	r5, [r3, #0]
 800948e:	e7db      	b.n	8009448 <_puts_r+0x60>

08009490 <puts>:
 8009490:	4b02      	ldr	r3, [pc, #8]	; (800949c <puts+0xc>)
 8009492:	4601      	mov	r1, r0
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	f7ff bfa7 	b.w	80093e8 <_puts_r>
 800949a:	bf00      	nop
 800949c:	200000b4 	.word	0x200000b4

080094a0 <siprintf>:
 80094a0:	b40e      	push	{r1, r2, r3}
 80094a2:	b500      	push	{lr}
 80094a4:	b09c      	sub	sp, #112	; 0x70
 80094a6:	ab1d      	add	r3, sp, #116	; 0x74
 80094a8:	9002      	str	r0, [sp, #8]
 80094aa:	9006      	str	r0, [sp, #24]
 80094ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094b0:	4809      	ldr	r0, [pc, #36]	; (80094d8 <siprintf+0x38>)
 80094b2:	9107      	str	r1, [sp, #28]
 80094b4:	9104      	str	r1, [sp, #16]
 80094b6:	4909      	ldr	r1, [pc, #36]	; (80094dc <siprintf+0x3c>)
 80094b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094bc:	9105      	str	r1, [sp, #20]
 80094be:	6800      	ldr	r0, [r0, #0]
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	a902      	add	r1, sp, #8
 80094c4:	f002 fcd4 	bl	800be70 <_svfiprintf_r>
 80094c8:	9b02      	ldr	r3, [sp, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
 80094ce:	b01c      	add	sp, #112	; 0x70
 80094d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094d4:	b003      	add	sp, #12
 80094d6:	4770      	bx	lr
 80094d8:	200000b4 	.word	0x200000b4
 80094dc:	ffff0208 	.word	0xffff0208

080094e0 <siscanf>:
 80094e0:	b40e      	push	{r1, r2, r3}
 80094e2:	b510      	push	{r4, lr}
 80094e4:	b09f      	sub	sp, #124	; 0x7c
 80094e6:	ac21      	add	r4, sp, #132	; 0x84
 80094e8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80094ec:	f854 2b04 	ldr.w	r2, [r4], #4
 80094f0:	9201      	str	r2, [sp, #4]
 80094f2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80094f6:	9004      	str	r0, [sp, #16]
 80094f8:	9008      	str	r0, [sp, #32]
 80094fa:	f7f6 fed9 	bl	80002b0 <strlen>
 80094fe:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <siscanf+0x50>)
 8009500:	9005      	str	r0, [sp, #20]
 8009502:	9009      	str	r0, [sp, #36]	; 0x24
 8009504:	930d      	str	r3, [sp, #52]	; 0x34
 8009506:	480b      	ldr	r0, [pc, #44]	; (8009534 <siscanf+0x54>)
 8009508:	9a01      	ldr	r2, [sp, #4]
 800950a:	6800      	ldr	r0, [r0, #0]
 800950c:	9403      	str	r4, [sp, #12]
 800950e:	2300      	movs	r3, #0
 8009510:	9311      	str	r3, [sp, #68]	; 0x44
 8009512:	9316      	str	r3, [sp, #88]	; 0x58
 8009514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009518:	f8ad 301e 	strh.w	r3, [sp, #30]
 800951c:	a904      	add	r1, sp, #16
 800951e:	4623      	mov	r3, r4
 8009520:	f002 fdfe 	bl	800c120 <__ssvfiscanf_r>
 8009524:	b01f      	add	sp, #124	; 0x7c
 8009526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800952a:	b003      	add	sp, #12
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	0800955b 	.word	0x0800955b
 8009534:	200000b4 	.word	0x200000b4

08009538 <__sread>:
 8009538:	b510      	push	{r4, lr}
 800953a:	460c      	mov	r4, r1
 800953c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009540:	f000 f918 	bl	8009774 <_read_r>
 8009544:	2800      	cmp	r0, #0
 8009546:	bfab      	itete	ge
 8009548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800954a:	89a3      	ldrhlt	r3, [r4, #12]
 800954c:	181b      	addge	r3, r3, r0
 800954e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009552:	bfac      	ite	ge
 8009554:	6563      	strge	r3, [r4, #84]	; 0x54
 8009556:	81a3      	strhlt	r3, [r4, #12]
 8009558:	bd10      	pop	{r4, pc}

0800955a <__seofread>:
 800955a:	2000      	movs	r0, #0
 800955c:	4770      	bx	lr

0800955e <__swrite>:
 800955e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009562:	461f      	mov	r7, r3
 8009564:	898b      	ldrh	r3, [r1, #12]
 8009566:	05db      	lsls	r3, r3, #23
 8009568:	4605      	mov	r5, r0
 800956a:	460c      	mov	r4, r1
 800956c:	4616      	mov	r6, r2
 800956e:	d505      	bpl.n	800957c <__swrite+0x1e>
 8009570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009574:	2302      	movs	r3, #2
 8009576:	2200      	movs	r2, #0
 8009578:	f000 f8ea 	bl	8009750 <_lseek_r>
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009586:	81a3      	strh	r3, [r4, #12]
 8009588:	4632      	mov	r2, r6
 800958a:	463b      	mov	r3, r7
 800958c:	4628      	mov	r0, r5
 800958e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009592:	f000 b901 	b.w	8009798 <_write_r>

08009596 <__sseek>:
 8009596:	b510      	push	{r4, lr}
 8009598:	460c      	mov	r4, r1
 800959a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800959e:	f000 f8d7 	bl	8009750 <_lseek_r>
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	bf15      	itete	ne
 80095a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80095aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095b2:	81a3      	strheq	r3, [r4, #12]
 80095b4:	bf18      	it	ne
 80095b6:	81a3      	strhne	r3, [r4, #12]
 80095b8:	bd10      	pop	{r4, pc}

080095ba <__sclose>:
 80095ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095be:	f000 b8b7 	b.w	8009730 <_close_r>

080095c2 <__swbuf_r>:
 80095c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c4:	460e      	mov	r6, r1
 80095c6:	4614      	mov	r4, r2
 80095c8:	4605      	mov	r5, r0
 80095ca:	b118      	cbz	r0, 80095d4 <__swbuf_r+0x12>
 80095cc:	6a03      	ldr	r3, [r0, #32]
 80095ce:	b90b      	cbnz	r3, 80095d4 <__swbuf_r+0x12>
 80095d0:	f7ff fec2 	bl	8009358 <__sinit>
 80095d4:	69a3      	ldr	r3, [r4, #24]
 80095d6:	60a3      	str	r3, [r4, #8]
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	071a      	lsls	r2, r3, #28
 80095dc:	d525      	bpl.n	800962a <__swbuf_r+0x68>
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	b31b      	cbz	r3, 800962a <__swbuf_r+0x68>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	6922      	ldr	r2, [r4, #16]
 80095e6:	1a98      	subs	r0, r3, r2
 80095e8:	6963      	ldr	r3, [r4, #20]
 80095ea:	b2f6      	uxtb	r6, r6
 80095ec:	4283      	cmp	r3, r0
 80095ee:	4637      	mov	r7, r6
 80095f0:	dc04      	bgt.n	80095fc <__swbuf_r+0x3a>
 80095f2:	4621      	mov	r1, r4
 80095f4:	4628      	mov	r0, r5
 80095f6:	f003 fa23 	bl	800ca40 <_fflush_r>
 80095fa:	b9e0      	cbnz	r0, 8009636 <__swbuf_r+0x74>
 80095fc:	68a3      	ldr	r3, [r4, #8]
 80095fe:	3b01      	subs	r3, #1
 8009600:	60a3      	str	r3, [r4, #8]
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	1c5a      	adds	r2, r3, #1
 8009606:	6022      	str	r2, [r4, #0]
 8009608:	701e      	strb	r6, [r3, #0]
 800960a:	6962      	ldr	r2, [r4, #20]
 800960c:	1c43      	adds	r3, r0, #1
 800960e:	429a      	cmp	r2, r3
 8009610:	d004      	beq.n	800961c <__swbuf_r+0x5a>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	07db      	lsls	r3, r3, #31
 8009616:	d506      	bpl.n	8009626 <__swbuf_r+0x64>
 8009618:	2e0a      	cmp	r6, #10
 800961a:	d104      	bne.n	8009626 <__swbuf_r+0x64>
 800961c:	4621      	mov	r1, r4
 800961e:	4628      	mov	r0, r5
 8009620:	f003 fa0e 	bl	800ca40 <_fflush_r>
 8009624:	b938      	cbnz	r0, 8009636 <__swbuf_r+0x74>
 8009626:	4638      	mov	r0, r7
 8009628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962a:	4621      	mov	r1, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f000 f805 	bl	800963c <__swsetup_r>
 8009632:	2800      	cmp	r0, #0
 8009634:	d0d5      	beq.n	80095e2 <__swbuf_r+0x20>
 8009636:	f04f 37ff 	mov.w	r7, #4294967295
 800963a:	e7f4      	b.n	8009626 <__swbuf_r+0x64>

0800963c <__swsetup_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4b2a      	ldr	r3, [pc, #168]	; (80096e8 <__swsetup_r+0xac>)
 8009640:	4605      	mov	r5, r0
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	460c      	mov	r4, r1
 8009646:	b118      	cbz	r0, 8009650 <__swsetup_r+0x14>
 8009648:	6a03      	ldr	r3, [r0, #32]
 800964a:	b90b      	cbnz	r3, 8009650 <__swsetup_r+0x14>
 800964c:	f7ff fe84 	bl	8009358 <__sinit>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009656:	0718      	lsls	r0, r3, #28
 8009658:	d422      	bmi.n	80096a0 <__swsetup_r+0x64>
 800965a:	06d9      	lsls	r1, r3, #27
 800965c:	d407      	bmi.n	800966e <__swsetup_r+0x32>
 800965e:	2309      	movs	r3, #9
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009666:	81a3      	strh	r3, [r4, #12]
 8009668:	f04f 30ff 	mov.w	r0, #4294967295
 800966c:	e034      	b.n	80096d8 <__swsetup_r+0x9c>
 800966e:	0758      	lsls	r0, r3, #29
 8009670:	d512      	bpl.n	8009698 <__swsetup_r+0x5c>
 8009672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009674:	b141      	cbz	r1, 8009688 <__swsetup_r+0x4c>
 8009676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800967a:	4299      	cmp	r1, r3
 800967c:	d002      	beq.n	8009684 <__swsetup_r+0x48>
 800967e:	4628      	mov	r0, r5
 8009680:	f000 ff58 	bl	800a534 <_free_r>
 8009684:	2300      	movs	r3, #0
 8009686:	6363      	str	r3, [r4, #52]	; 0x34
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	2300      	movs	r3, #0
 8009692:	6063      	str	r3, [r4, #4]
 8009694:	6923      	ldr	r3, [r4, #16]
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f043 0308 	orr.w	r3, r3, #8
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	6923      	ldr	r3, [r4, #16]
 80096a2:	b94b      	cbnz	r3, 80096b8 <__swsetup_r+0x7c>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096ae:	d003      	beq.n	80096b8 <__swsetup_r+0x7c>
 80096b0:	4621      	mov	r1, r4
 80096b2:	4628      	mov	r0, r5
 80096b4:	f003 fa12 	bl	800cadc <__smakebuf_r>
 80096b8:	89a0      	ldrh	r0, [r4, #12]
 80096ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096be:	f010 0301 	ands.w	r3, r0, #1
 80096c2:	d00a      	beq.n	80096da <__swsetup_r+0x9e>
 80096c4:	2300      	movs	r3, #0
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	6963      	ldr	r3, [r4, #20]
 80096ca:	425b      	negs	r3, r3
 80096cc:	61a3      	str	r3, [r4, #24]
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	b943      	cbnz	r3, 80096e4 <__swsetup_r+0xa8>
 80096d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096d6:	d1c4      	bne.n	8009662 <__swsetup_r+0x26>
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	0781      	lsls	r1, r0, #30
 80096dc:	bf58      	it	pl
 80096de:	6963      	ldrpl	r3, [r4, #20]
 80096e0:	60a3      	str	r3, [r4, #8]
 80096e2:	e7f4      	b.n	80096ce <__swsetup_r+0x92>
 80096e4:	2000      	movs	r0, #0
 80096e6:	e7f7      	b.n	80096d8 <__swsetup_r+0x9c>
 80096e8:	200000b4 	.word	0x200000b4

080096ec <memset>:
 80096ec:	4402      	add	r2, r0
 80096ee:	4603      	mov	r3, r0
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d100      	bne.n	80096f6 <memset+0xa>
 80096f4:	4770      	bx	lr
 80096f6:	f803 1b01 	strb.w	r1, [r3], #1
 80096fa:	e7f9      	b.n	80096f0 <memset+0x4>

080096fc <strstr>:
 80096fc:	780a      	ldrb	r2, [r1, #0]
 80096fe:	b570      	push	{r4, r5, r6, lr}
 8009700:	b96a      	cbnz	r2, 800971e <strstr+0x22>
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	429a      	cmp	r2, r3
 8009706:	d109      	bne.n	800971c <strstr+0x20>
 8009708:	460c      	mov	r4, r1
 800970a:	4605      	mov	r5, r0
 800970c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0f6      	beq.n	8009702 <strstr+0x6>
 8009714:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009718:	429e      	cmp	r6, r3
 800971a:	d0f7      	beq.n	800970c <strstr+0x10>
 800971c:	3001      	adds	r0, #1
 800971e:	7803      	ldrb	r3, [r0, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1ef      	bne.n	8009704 <strstr+0x8>
 8009724:	4618      	mov	r0, r3
 8009726:	e7ec      	b.n	8009702 <strstr+0x6>

08009728 <_localeconv_r>:
 8009728:	4800      	ldr	r0, [pc, #0]	; (800972c <_localeconv_r+0x4>)
 800972a:	4770      	bx	lr
 800972c:	200001a8 	.word	0x200001a8

08009730 <_close_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d06      	ldr	r5, [pc, #24]	; (800974c <_close_r+0x1c>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	f7fa fb77 	bl	8003e2e <_close>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_close_r+0x1a>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_close_r+0x1a>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	2000a3d4 	.word	0x2000a3d4

08009750 <_lseek_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d07      	ldr	r5, [pc, #28]	; (8009770 <_lseek_r+0x20>)
 8009754:	4604      	mov	r4, r0
 8009756:	4608      	mov	r0, r1
 8009758:	4611      	mov	r1, r2
 800975a:	2200      	movs	r2, #0
 800975c:	602a      	str	r2, [r5, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	f7fa fb8c 	bl	8003e7c <_lseek>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_lseek_r+0x1e>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_lseek_r+0x1e>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	2000a3d4 	.word	0x2000a3d4

08009774 <_read_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d07      	ldr	r5, [pc, #28]	; (8009794 <_read_r+0x20>)
 8009778:	4604      	mov	r4, r0
 800977a:	4608      	mov	r0, r1
 800977c:	4611      	mov	r1, r2
 800977e:	2200      	movs	r2, #0
 8009780:	602a      	str	r2, [r5, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	f7fa fb1a 	bl	8003dbc <_read>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_read_r+0x1e>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_read_r+0x1e>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	2000a3d4 	.word	0x2000a3d4

08009798 <_write_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4d07      	ldr	r5, [pc, #28]	; (80097b8 <_write_r+0x20>)
 800979c:	4604      	mov	r4, r0
 800979e:	4608      	mov	r0, r1
 80097a0:	4611      	mov	r1, r2
 80097a2:	2200      	movs	r2, #0
 80097a4:	602a      	str	r2, [r5, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	f7fa fb25 	bl	8003df6 <_write>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d102      	bne.n	80097b6 <_write_r+0x1e>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b103      	cbz	r3, 80097b6 <_write_r+0x1e>
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	2000a3d4 	.word	0x2000a3d4

080097bc <__errno>:
 80097bc:	4b01      	ldr	r3, [pc, #4]	; (80097c4 <__errno+0x8>)
 80097be:	6818      	ldr	r0, [r3, #0]
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	200000b4 	.word	0x200000b4

080097c8 <__libc_init_array>:
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	4d0d      	ldr	r5, [pc, #52]	; (8009800 <__libc_init_array+0x38>)
 80097cc:	4c0d      	ldr	r4, [pc, #52]	; (8009804 <__libc_init_array+0x3c>)
 80097ce:	1b64      	subs	r4, r4, r5
 80097d0:	10a4      	asrs	r4, r4, #2
 80097d2:	2600      	movs	r6, #0
 80097d4:	42a6      	cmp	r6, r4
 80097d6:	d109      	bne.n	80097ec <__libc_init_array+0x24>
 80097d8:	4d0b      	ldr	r5, [pc, #44]	; (8009808 <__libc_init_array+0x40>)
 80097da:	4c0c      	ldr	r4, [pc, #48]	; (800980c <__libc_init_array+0x44>)
 80097dc:	f003 ff48 	bl	800d670 <_init>
 80097e0:	1b64      	subs	r4, r4, r5
 80097e2:	10a4      	asrs	r4, r4, #2
 80097e4:	2600      	movs	r6, #0
 80097e6:	42a6      	cmp	r6, r4
 80097e8:	d105      	bne.n	80097f6 <__libc_init_array+0x2e>
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f0:	4798      	blx	r3
 80097f2:	3601      	adds	r6, #1
 80097f4:	e7ee      	b.n	80097d4 <__libc_init_array+0xc>
 80097f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097fa:	4798      	blx	r3
 80097fc:	3601      	adds	r6, #1
 80097fe:	e7f2      	b.n	80097e6 <__libc_init_array+0x1e>
 8009800:	0800ddb4 	.word	0x0800ddb4
 8009804:	0800ddb4 	.word	0x0800ddb4
 8009808:	0800ddb4 	.word	0x0800ddb4
 800980c:	0800ddb8 	.word	0x0800ddb8

08009810 <__retarget_lock_acquire_recursive>:
 8009810:	4770      	bx	lr

08009812 <__retarget_lock_release_recursive>:
 8009812:	4770      	bx	lr

08009814 <memcpy>:
 8009814:	440a      	add	r2, r1
 8009816:	4291      	cmp	r1, r2
 8009818:	f100 33ff 	add.w	r3, r0, #4294967295
 800981c:	d100      	bne.n	8009820 <memcpy+0xc>
 800981e:	4770      	bx	lr
 8009820:	b510      	push	{r4, lr}
 8009822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982a:	4291      	cmp	r1, r2
 800982c:	d1f9      	bne.n	8009822 <memcpy+0xe>
 800982e:	bd10      	pop	{r4, pc}

08009830 <nanf>:
 8009830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009838 <nanf+0x8>
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	7fc00000 	.word	0x7fc00000

0800983c <quorem>:
 800983c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	6903      	ldr	r3, [r0, #16]
 8009842:	690c      	ldr	r4, [r1, #16]
 8009844:	42a3      	cmp	r3, r4
 8009846:	4607      	mov	r7, r0
 8009848:	db7e      	blt.n	8009948 <quorem+0x10c>
 800984a:	3c01      	subs	r4, #1
 800984c:	f101 0814 	add.w	r8, r1, #20
 8009850:	f100 0514 	add.w	r5, r0, #20
 8009854:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800985e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009862:	3301      	adds	r3, #1
 8009864:	429a      	cmp	r2, r3
 8009866:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800986a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800986e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009872:	d331      	bcc.n	80098d8 <quorem+0x9c>
 8009874:	f04f 0e00 	mov.w	lr, #0
 8009878:	4640      	mov	r0, r8
 800987a:	46ac      	mov	ip, r5
 800987c:	46f2      	mov	sl, lr
 800987e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009882:	b293      	uxth	r3, r2
 8009884:	fb06 e303 	mla	r3, r6, r3, lr
 8009888:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800988c:	0c1a      	lsrs	r2, r3, #16
 800988e:	b29b      	uxth	r3, r3
 8009890:	ebaa 0303 	sub.w	r3, sl, r3
 8009894:	f8dc a000 	ldr.w	sl, [ip]
 8009898:	fa13 f38a 	uxtah	r3, r3, sl
 800989c:	fb06 220e 	mla	r2, r6, lr, r2
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	9b00      	ldr	r3, [sp, #0]
 80098a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098a8:	b292      	uxth	r2, r2
 80098aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80098b6:	4581      	cmp	r9, r0
 80098b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098bc:	f84c 3b04 	str.w	r3, [ip], #4
 80098c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098c4:	d2db      	bcs.n	800987e <quorem+0x42>
 80098c6:	f855 300b 	ldr.w	r3, [r5, fp]
 80098ca:	b92b      	cbnz	r3, 80098d8 <quorem+0x9c>
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	3b04      	subs	r3, #4
 80098d0:	429d      	cmp	r5, r3
 80098d2:	461a      	mov	r2, r3
 80098d4:	d32c      	bcc.n	8009930 <quorem+0xf4>
 80098d6:	613c      	str	r4, [r7, #16]
 80098d8:	4638      	mov	r0, r7
 80098da:	f001 f9f1 	bl	800acc0 <__mcmp>
 80098de:	2800      	cmp	r0, #0
 80098e0:	db22      	blt.n	8009928 <quorem+0xec>
 80098e2:	3601      	adds	r6, #1
 80098e4:	4629      	mov	r1, r5
 80098e6:	2000      	movs	r0, #0
 80098e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80098ec:	f8d1 c000 	ldr.w	ip, [r1]
 80098f0:	b293      	uxth	r3, r2
 80098f2:	1ac3      	subs	r3, r0, r3
 80098f4:	0c12      	lsrs	r2, r2, #16
 80098f6:	fa13 f38c 	uxtah	r3, r3, ip
 80098fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80098fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009902:	b29b      	uxth	r3, r3
 8009904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009908:	45c1      	cmp	r9, r8
 800990a:	f841 3b04 	str.w	r3, [r1], #4
 800990e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009912:	d2e9      	bcs.n	80098e8 <quorem+0xac>
 8009914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009918:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800991c:	b922      	cbnz	r2, 8009928 <quorem+0xec>
 800991e:	3b04      	subs	r3, #4
 8009920:	429d      	cmp	r5, r3
 8009922:	461a      	mov	r2, r3
 8009924:	d30a      	bcc.n	800993c <quorem+0x100>
 8009926:	613c      	str	r4, [r7, #16]
 8009928:	4630      	mov	r0, r6
 800992a:	b003      	add	sp, #12
 800992c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009930:	6812      	ldr	r2, [r2, #0]
 8009932:	3b04      	subs	r3, #4
 8009934:	2a00      	cmp	r2, #0
 8009936:	d1ce      	bne.n	80098d6 <quorem+0x9a>
 8009938:	3c01      	subs	r4, #1
 800993a:	e7c9      	b.n	80098d0 <quorem+0x94>
 800993c:	6812      	ldr	r2, [r2, #0]
 800993e:	3b04      	subs	r3, #4
 8009940:	2a00      	cmp	r2, #0
 8009942:	d1f0      	bne.n	8009926 <quorem+0xea>
 8009944:	3c01      	subs	r4, #1
 8009946:	e7eb      	b.n	8009920 <quorem+0xe4>
 8009948:	2000      	movs	r0, #0
 800994a:	e7ee      	b.n	800992a <quorem+0xee>
 800994c:	0000      	movs	r0, r0
	...

08009950 <_dtoa_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	ed2d 8b04 	vpush	{d8-d9}
 8009958:	69c5      	ldr	r5, [r0, #28]
 800995a:	b093      	sub	sp, #76	; 0x4c
 800995c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009960:	ec57 6b10 	vmov	r6, r7, d0
 8009964:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009968:	9107      	str	r1, [sp, #28]
 800996a:	4604      	mov	r4, r0
 800996c:	920a      	str	r2, [sp, #40]	; 0x28
 800996e:	930d      	str	r3, [sp, #52]	; 0x34
 8009970:	b975      	cbnz	r5, 8009990 <_dtoa_r+0x40>
 8009972:	2010      	movs	r0, #16
 8009974:	f000 fe2a 	bl	800a5cc <malloc>
 8009978:	4602      	mov	r2, r0
 800997a:	61e0      	str	r0, [r4, #28]
 800997c:	b920      	cbnz	r0, 8009988 <_dtoa_r+0x38>
 800997e:	4bae      	ldr	r3, [pc, #696]	; (8009c38 <_dtoa_r+0x2e8>)
 8009980:	21ef      	movs	r1, #239	; 0xef
 8009982:	48ae      	ldr	r0, [pc, #696]	; (8009c3c <_dtoa_r+0x2ec>)
 8009984:	f003 f9c0 	bl	800cd08 <__assert_func>
 8009988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800998c:	6005      	str	r5, [r0, #0]
 800998e:	60c5      	str	r5, [r0, #12]
 8009990:	69e3      	ldr	r3, [r4, #28]
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	b151      	cbz	r1, 80099ac <_dtoa_r+0x5c>
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	604a      	str	r2, [r1, #4]
 800999a:	2301      	movs	r3, #1
 800999c:	4093      	lsls	r3, r2
 800999e:	608b      	str	r3, [r1, #8]
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 ff07 	bl	800a7b4 <_Bfree>
 80099a6:	69e3      	ldr	r3, [r4, #28]
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	1e3b      	subs	r3, r7, #0
 80099ae:	bfbb      	ittet	lt
 80099b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099b4:	9303      	strlt	r3, [sp, #12]
 80099b6:	2300      	movge	r3, #0
 80099b8:	2201      	movlt	r2, #1
 80099ba:	bfac      	ite	ge
 80099bc:	f8c8 3000 	strge.w	r3, [r8]
 80099c0:	f8c8 2000 	strlt.w	r2, [r8]
 80099c4:	4b9e      	ldr	r3, [pc, #632]	; (8009c40 <_dtoa_r+0x2f0>)
 80099c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80099ca:	ea33 0308 	bics.w	r3, r3, r8
 80099ce:	d11b      	bne.n	8009a08 <_dtoa_r+0xb8>
 80099d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80099dc:	4333      	orrs	r3, r6
 80099de:	f000 8593 	beq.w	800a508 <_dtoa_r+0xbb8>
 80099e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099e4:	b963      	cbnz	r3, 8009a00 <_dtoa_r+0xb0>
 80099e6:	4b97      	ldr	r3, [pc, #604]	; (8009c44 <_dtoa_r+0x2f4>)
 80099e8:	e027      	b.n	8009a3a <_dtoa_r+0xea>
 80099ea:	4b97      	ldr	r3, [pc, #604]	; (8009c48 <_dtoa_r+0x2f8>)
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	9800      	ldr	r0, [sp, #0]
 80099f6:	b013      	add	sp, #76	; 0x4c
 80099f8:	ecbd 8b04 	vpop	{d8-d9}
 80099fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a00:	4b90      	ldr	r3, [pc, #576]	; (8009c44 <_dtoa_r+0x2f4>)
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	3303      	adds	r3, #3
 8009a06:	e7f3      	b.n	80099f0 <_dtoa_r+0xa0>
 8009a08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	ec51 0b17 	vmov	r0, r1, d7
 8009a12:	eeb0 8a47 	vmov.f32	s16, s14
 8009a16:	eef0 8a67 	vmov.f32	s17, s15
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f7f7 f874 	bl	8000b08 <__aeabi_dcmpeq>
 8009a20:	4681      	mov	r9, r0
 8009a22:	b160      	cbz	r0, 8009a3e <_dtoa_r+0xee>
 8009a24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a26:	2301      	movs	r3, #1
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8568 	beq.w	800a502 <_dtoa_r+0xbb2>
 8009a32:	4b86      	ldr	r3, [pc, #536]	; (8009c4c <_dtoa_r+0x2fc>)
 8009a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	e7da      	b.n	80099f4 <_dtoa_r+0xa4>
 8009a3e:	aa10      	add	r2, sp, #64	; 0x40
 8009a40:	a911      	add	r1, sp, #68	; 0x44
 8009a42:	4620      	mov	r0, r4
 8009a44:	eeb0 0a48 	vmov.f32	s0, s16
 8009a48:	eef0 0a68 	vmov.f32	s1, s17
 8009a4c:	f001 fa4e 	bl	800aeec <__d2b>
 8009a50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009a54:	4682      	mov	sl, r0
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	d07f      	beq.n	8009b5a <_dtoa_r+0x20a>
 8009a5a:	ee18 3a90 	vmov	r3, s17
 8009a5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009a66:	ec51 0b18 	vmov	r0, r1, d8
 8009a6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009a76:	4619      	mov	r1, r3
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4b75      	ldr	r3, [pc, #468]	; (8009c50 <_dtoa_r+0x300>)
 8009a7c:	f7f6 fc24 	bl	80002c8 <__aeabi_dsub>
 8009a80:	a367      	add	r3, pc, #412	; (adr r3, 8009c20 <_dtoa_r+0x2d0>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 fdd7 	bl	8000638 <__aeabi_dmul>
 8009a8a:	a367      	add	r3, pc, #412	; (adr r3, 8009c28 <_dtoa_r+0x2d8>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fc1c 	bl	80002cc <__adddf3>
 8009a94:	4606      	mov	r6, r0
 8009a96:	4628      	mov	r0, r5
 8009a98:	460f      	mov	r7, r1
 8009a9a:	f7f6 fd63 	bl	8000564 <__aeabi_i2d>
 8009a9e:	a364      	add	r3, pc, #400	; (adr r3, 8009c30 <_dtoa_r+0x2e0>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f7f6 fdc8 	bl	8000638 <__aeabi_dmul>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4630      	mov	r0, r6
 8009aae:	4639      	mov	r1, r7
 8009ab0:	f7f6 fc0c 	bl	80002cc <__adddf3>
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	460f      	mov	r7, r1
 8009ab8:	f7f7 f86e 	bl	8000b98 <__aeabi_d2iz>
 8009abc:	2200      	movs	r2, #0
 8009abe:	4683      	mov	fp, r0
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	4639      	mov	r1, r7
 8009ac6:	f7f7 f829 	bl	8000b1c <__aeabi_dcmplt>
 8009aca:	b148      	cbz	r0, 8009ae0 <_dtoa_r+0x190>
 8009acc:	4658      	mov	r0, fp
 8009ace:	f7f6 fd49 	bl	8000564 <__aeabi_i2d>
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	f7f7 f817 	bl	8000b08 <__aeabi_dcmpeq>
 8009ada:	b908      	cbnz	r0, 8009ae0 <_dtoa_r+0x190>
 8009adc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ae0:	f1bb 0f16 	cmp.w	fp, #22
 8009ae4:	d857      	bhi.n	8009b96 <_dtoa_r+0x246>
 8009ae6:	4b5b      	ldr	r3, [pc, #364]	; (8009c54 <_dtoa_r+0x304>)
 8009ae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	ec51 0b18 	vmov	r0, r1, d8
 8009af4:	f7f7 f812 	bl	8000b1c <__aeabi_dcmplt>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d04e      	beq.n	8009b9a <_dtoa_r+0x24a>
 8009afc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b00:	2300      	movs	r3, #0
 8009b02:	930c      	str	r3, [sp, #48]	; 0x30
 8009b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b06:	1b5b      	subs	r3, r3, r5
 8009b08:	1e5a      	subs	r2, r3, #1
 8009b0a:	bf45      	ittet	mi
 8009b0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b10:	9305      	strmi	r3, [sp, #20]
 8009b12:	2300      	movpl	r3, #0
 8009b14:	2300      	movmi	r3, #0
 8009b16:	9206      	str	r2, [sp, #24]
 8009b18:	bf54      	ite	pl
 8009b1a:	9305      	strpl	r3, [sp, #20]
 8009b1c:	9306      	strmi	r3, [sp, #24]
 8009b1e:	f1bb 0f00 	cmp.w	fp, #0
 8009b22:	db3c      	blt.n	8009b9e <_dtoa_r+0x24e>
 8009b24:	9b06      	ldr	r3, [sp, #24]
 8009b26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009b2a:	445b      	add	r3, fp
 8009b2c:	9306      	str	r3, [sp, #24]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9308      	str	r3, [sp, #32]
 8009b32:	9b07      	ldr	r3, [sp, #28]
 8009b34:	2b09      	cmp	r3, #9
 8009b36:	d868      	bhi.n	8009c0a <_dtoa_r+0x2ba>
 8009b38:	2b05      	cmp	r3, #5
 8009b3a:	bfc4      	itt	gt
 8009b3c:	3b04      	subgt	r3, #4
 8009b3e:	9307      	strgt	r3, [sp, #28]
 8009b40:	9b07      	ldr	r3, [sp, #28]
 8009b42:	f1a3 0302 	sub.w	r3, r3, #2
 8009b46:	bfcc      	ite	gt
 8009b48:	2500      	movgt	r5, #0
 8009b4a:	2501      	movle	r5, #1
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	f200 8085 	bhi.w	8009c5c <_dtoa_r+0x30c>
 8009b52:	e8df f003 	tbb	[pc, r3]
 8009b56:	3b2e      	.short	0x3b2e
 8009b58:	5839      	.short	0x5839
 8009b5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b5e:	441d      	add	r5, r3
 8009b60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b64:	2b20      	cmp	r3, #32
 8009b66:	bfc1      	itttt	gt
 8009b68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009b70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009b74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009b78:	bfd6      	itet	le
 8009b7a:	f1c3 0320 	rsble	r3, r3, #32
 8009b7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009b82:	fa06 f003 	lslle.w	r0, r6, r3
 8009b86:	f7f6 fcdd 	bl	8000544 <__aeabi_ui2d>
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009b90:	3d01      	subs	r5, #1
 8009b92:	920e      	str	r2, [sp, #56]	; 0x38
 8009b94:	e76f      	b.n	8009a76 <_dtoa_r+0x126>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e7b3      	b.n	8009b02 <_dtoa_r+0x1b2>
 8009b9a:	900c      	str	r0, [sp, #48]	; 0x30
 8009b9c:	e7b2      	b.n	8009b04 <_dtoa_r+0x1b4>
 8009b9e:	9b05      	ldr	r3, [sp, #20]
 8009ba0:	eba3 030b 	sub.w	r3, r3, fp
 8009ba4:	9305      	str	r3, [sp, #20]
 8009ba6:	f1cb 0300 	rsb	r3, fp, #0
 8009baa:	9308      	str	r3, [sp, #32]
 8009bac:	2300      	movs	r3, #0
 8009bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bb0:	e7bf      	b.n	8009b32 <_dtoa_r+0x1e2>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	dc52      	bgt.n	8009c62 <_dtoa_r+0x312>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	9304      	str	r3, [sp, #16]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8009bc6:	e00b      	b.n	8009be0 <_dtoa_r+0x290>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e7f3      	b.n	8009bb4 <_dtoa_r+0x264>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd2:	445b      	add	r3, fp
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	9304      	str	r3, [sp, #16]
 8009bdc:	bfb8      	it	lt
 8009bde:	2301      	movlt	r3, #1
 8009be0:	69e0      	ldr	r0, [r4, #28]
 8009be2:	2100      	movs	r1, #0
 8009be4:	2204      	movs	r2, #4
 8009be6:	f102 0614 	add.w	r6, r2, #20
 8009bea:	429e      	cmp	r6, r3
 8009bec:	d93d      	bls.n	8009c6a <_dtoa_r+0x31a>
 8009bee:	6041      	str	r1, [r0, #4]
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 fd9f 	bl	800a734 <_Balloc>
 8009bf6:	9000      	str	r0, [sp, #0]
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d139      	bne.n	8009c70 <_dtoa_r+0x320>
 8009bfc:	4b16      	ldr	r3, [pc, #88]	; (8009c58 <_dtoa_r+0x308>)
 8009bfe:	4602      	mov	r2, r0
 8009c00:	f240 11af 	movw	r1, #431	; 0x1af
 8009c04:	e6bd      	b.n	8009982 <_dtoa_r+0x32>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e7e1      	b.n	8009bce <_dtoa_r+0x27e>
 8009c0a:	2501      	movs	r5, #1
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	9307      	str	r3, [sp, #28]
 8009c10:	9509      	str	r5, [sp, #36]	; 0x24
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295
 8009c16:	9301      	str	r3, [sp, #4]
 8009c18:	9304      	str	r3, [sp, #16]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2312      	movs	r3, #18
 8009c1e:	e7d1      	b.n	8009bc4 <_dtoa_r+0x274>
 8009c20:	636f4361 	.word	0x636f4361
 8009c24:	3fd287a7 	.word	0x3fd287a7
 8009c28:	8b60c8b3 	.word	0x8b60c8b3
 8009c2c:	3fc68a28 	.word	0x3fc68a28
 8009c30:	509f79fb 	.word	0x509f79fb
 8009c34:	3fd34413 	.word	0x3fd34413
 8009c38:	0800d9a8 	.word	0x0800d9a8
 8009c3c:	0800d9bf 	.word	0x0800d9bf
 8009c40:	7ff00000 	.word	0x7ff00000
 8009c44:	0800d9a4 	.word	0x0800d9a4
 8009c48:	0800d99b 	.word	0x0800d99b
 8009c4c:	0800dd01 	.word	0x0800dd01
 8009c50:	3ff80000 	.word	0x3ff80000
 8009c54:	0800dab0 	.word	0x0800dab0
 8009c58:	0800da17 	.word	0x0800da17
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c60:	e7d7      	b.n	8009c12 <_dtoa_r+0x2c2>
 8009c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	9304      	str	r3, [sp, #16]
 8009c68:	e7ba      	b.n	8009be0 <_dtoa_r+0x290>
 8009c6a:	3101      	adds	r1, #1
 8009c6c:	0052      	lsls	r2, r2, #1
 8009c6e:	e7ba      	b.n	8009be6 <_dtoa_r+0x296>
 8009c70:	69e3      	ldr	r3, [r4, #28]
 8009c72:	9a00      	ldr	r2, [sp, #0]
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	2b0e      	cmp	r3, #14
 8009c7a:	f200 80a8 	bhi.w	8009dce <_dtoa_r+0x47e>
 8009c7e:	2d00      	cmp	r5, #0
 8009c80:	f000 80a5 	beq.w	8009dce <_dtoa_r+0x47e>
 8009c84:	f1bb 0f00 	cmp.w	fp, #0
 8009c88:	dd38      	ble.n	8009cfc <_dtoa_r+0x3ac>
 8009c8a:	4bc0      	ldr	r3, [pc, #768]	; (8009f8c <_dtoa_r+0x63c>)
 8009c8c:	f00b 020f 	and.w	r2, fp, #15
 8009c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009c98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009c9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009ca0:	d019      	beq.n	8009cd6 <_dtoa_r+0x386>
 8009ca2:	4bbb      	ldr	r3, [pc, #748]	; (8009f90 <_dtoa_r+0x640>)
 8009ca4:	ec51 0b18 	vmov	r0, r1, d8
 8009ca8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cac:	f7f6 fdee 	bl	800088c <__aeabi_ddiv>
 8009cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb4:	f008 080f 	and.w	r8, r8, #15
 8009cb8:	2503      	movs	r5, #3
 8009cba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009f90 <_dtoa_r+0x640>
 8009cbe:	f1b8 0f00 	cmp.w	r8, #0
 8009cc2:	d10a      	bne.n	8009cda <_dtoa_r+0x38a>
 8009cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cc8:	4632      	mov	r2, r6
 8009cca:	463b      	mov	r3, r7
 8009ccc:	f7f6 fdde 	bl	800088c <__aeabi_ddiv>
 8009cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cd4:	e02b      	b.n	8009d2e <_dtoa_r+0x3de>
 8009cd6:	2502      	movs	r5, #2
 8009cd8:	e7ef      	b.n	8009cba <_dtoa_r+0x36a>
 8009cda:	f018 0f01 	tst.w	r8, #1
 8009cde:	d008      	beq.n	8009cf2 <_dtoa_r+0x3a2>
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ce8:	f7f6 fca6 	bl	8000638 <__aeabi_dmul>
 8009cec:	3501      	adds	r5, #1
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009cf6:	f109 0908 	add.w	r9, r9, #8
 8009cfa:	e7e0      	b.n	8009cbe <_dtoa_r+0x36e>
 8009cfc:	f000 809f 	beq.w	8009e3e <_dtoa_r+0x4ee>
 8009d00:	f1cb 0600 	rsb	r6, fp, #0
 8009d04:	4ba1      	ldr	r3, [pc, #644]	; (8009f8c <_dtoa_r+0x63c>)
 8009d06:	4fa2      	ldr	r7, [pc, #648]	; (8009f90 <_dtoa_r+0x640>)
 8009d08:	f006 020f 	and.w	r2, r6, #15
 8009d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	ec51 0b18 	vmov	r0, r1, d8
 8009d18:	f7f6 fc8e 	bl	8000638 <__aeabi_dmul>
 8009d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d20:	1136      	asrs	r6, r6, #4
 8009d22:	2300      	movs	r3, #0
 8009d24:	2502      	movs	r5, #2
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	d17e      	bne.n	8009e28 <_dtoa_r+0x4d8>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1d0      	bne.n	8009cd0 <_dtoa_r+0x380>
 8009d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8084 	beq.w	8009e42 <_dtoa_r+0x4f2>
 8009d3a:	4b96      	ldr	r3, [pc, #600]	; (8009f94 <_dtoa_r+0x644>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4640      	mov	r0, r8
 8009d40:	4649      	mov	r1, r9
 8009d42:	f7f6 feeb 	bl	8000b1c <__aeabi_dcmplt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d07b      	beq.n	8009e42 <_dtoa_r+0x4f2>
 8009d4a:	9b04      	ldr	r3, [sp, #16]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d078      	beq.n	8009e42 <_dtoa_r+0x4f2>
 8009d50:	9b01      	ldr	r3, [sp, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd39      	ble.n	8009dca <_dtoa_r+0x47a>
 8009d56:	4b90      	ldr	r3, [pc, #576]	; (8009f98 <_dtoa_r+0x648>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	f7f6 fc6b 	bl	8000638 <__aeabi_dmul>
 8009d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d66:	9e01      	ldr	r6, [sp, #4]
 8009d68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d72:	4628      	mov	r0, r5
 8009d74:	f7f6 fbf6 	bl	8000564 <__aeabi_i2d>
 8009d78:	4642      	mov	r2, r8
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	f7f6 fc5c 	bl	8000638 <__aeabi_dmul>
 8009d80:	4b86      	ldr	r3, [pc, #536]	; (8009f9c <_dtoa_r+0x64c>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	f7f6 faa2 	bl	80002cc <__adddf3>
 8009d88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	2e00      	cmp	r6, #0
 8009d94:	d158      	bne.n	8009e48 <_dtoa_r+0x4f8>
 8009d96:	4b82      	ldr	r3, [pc, #520]	; (8009fa0 <_dtoa_r+0x650>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	f7f6 fa93 	bl	80002c8 <__aeabi_dsub>
 8009da2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009da6:	4680      	mov	r8, r0
 8009da8:	4689      	mov	r9, r1
 8009daa:	f7f6 fed5 	bl	8000b58 <__aeabi_dcmpgt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f040 8296 	bne.w	800a2e0 <_dtoa_r+0x990>
 8009db4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009db8:	4640      	mov	r0, r8
 8009dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	f7f6 feac 	bl	8000b1c <__aeabi_dcmplt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f040 8289 	bne.w	800a2dc <_dtoa_r+0x98c>
 8009dca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f2c0 814e 	blt.w	800a072 <_dtoa_r+0x722>
 8009dd6:	f1bb 0f0e 	cmp.w	fp, #14
 8009dda:	f300 814a 	bgt.w	800a072 <_dtoa_r+0x722>
 8009dde:	4b6b      	ldr	r3, [pc, #428]	; (8009f8c <_dtoa_r+0x63c>)
 8009de0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f280 80dc 	bge.w	8009fa8 <_dtoa_r+0x658>
 8009df0:	9b04      	ldr	r3, [sp, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f300 80d8 	bgt.w	8009fa8 <_dtoa_r+0x658>
 8009df8:	f040 826f 	bne.w	800a2da <_dtoa_r+0x98a>
 8009dfc:	4b68      	ldr	r3, [pc, #416]	; (8009fa0 <_dtoa_r+0x650>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	4640      	mov	r0, r8
 8009e02:	4649      	mov	r1, r9
 8009e04:	f7f6 fc18 	bl	8000638 <__aeabi_dmul>
 8009e08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e0c:	f7f6 fe9a 	bl	8000b44 <__aeabi_dcmpge>
 8009e10:	9e04      	ldr	r6, [sp, #16]
 8009e12:	4637      	mov	r7, r6
 8009e14:	2800      	cmp	r0, #0
 8009e16:	f040 8245 	bne.w	800a2a4 <_dtoa_r+0x954>
 8009e1a:	9d00      	ldr	r5, [sp, #0]
 8009e1c:	2331      	movs	r3, #49	; 0x31
 8009e1e:	f805 3b01 	strb.w	r3, [r5], #1
 8009e22:	f10b 0b01 	add.w	fp, fp, #1
 8009e26:	e241      	b.n	800a2ac <_dtoa_r+0x95c>
 8009e28:	07f2      	lsls	r2, r6, #31
 8009e2a:	d505      	bpl.n	8009e38 <_dtoa_r+0x4e8>
 8009e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e30:	f7f6 fc02 	bl	8000638 <__aeabi_dmul>
 8009e34:	3501      	adds	r5, #1
 8009e36:	2301      	movs	r3, #1
 8009e38:	1076      	asrs	r6, r6, #1
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	e773      	b.n	8009d26 <_dtoa_r+0x3d6>
 8009e3e:	2502      	movs	r5, #2
 8009e40:	e775      	b.n	8009d2e <_dtoa_r+0x3de>
 8009e42:	9e04      	ldr	r6, [sp, #16]
 8009e44:	465f      	mov	r7, fp
 8009e46:	e792      	b.n	8009d6e <_dtoa_r+0x41e>
 8009e48:	9900      	ldr	r1, [sp, #0]
 8009e4a:	4b50      	ldr	r3, [pc, #320]	; (8009f8c <_dtoa_r+0x63c>)
 8009e4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e50:	4431      	add	r1, r6
 8009e52:	9102      	str	r1, [sp, #8]
 8009e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e56:	eeb0 9a47 	vmov.f32	s18, s14
 8009e5a:	eef0 9a67 	vmov.f32	s19, s15
 8009e5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e66:	2900      	cmp	r1, #0
 8009e68:	d044      	beq.n	8009ef4 <_dtoa_r+0x5a4>
 8009e6a:	494e      	ldr	r1, [pc, #312]	; (8009fa4 <_dtoa_r+0x654>)
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	f7f6 fd0d 	bl	800088c <__aeabi_ddiv>
 8009e72:	ec53 2b19 	vmov	r2, r3, d9
 8009e76:	f7f6 fa27 	bl	80002c8 <__aeabi_dsub>
 8009e7a:	9d00      	ldr	r5, [sp, #0]
 8009e7c:	ec41 0b19 	vmov	d9, r0, r1
 8009e80:	4649      	mov	r1, r9
 8009e82:	4640      	mov	r0, r8
 8009e84:	f7f6 fe88 	bl	8000b98 <__aeabi_d2iz>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	f7f6 fb6b 	bl	8000564 <__aeabi_i2d>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4640      	mov	r0, r8
 8009e94:	4649      	mov	r1, r9
 8009e96:	f7f6 fa17 	bl	80002c8 <__aeabi_dsub>
 8009e9a:	3630      	adds	r6, #48	; 0x30
 8009e9c:	f805 6b01 	strb.w	r6, [r5], #1
 8009ea0:	ec53 2b19 	vmov	r2, r3, d9
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	4689      	mov	r9, r1
 8009ea8:	f7f6 fe38 	bl	8000b1c <__aeabi_dcmplt>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d164      	bne.n	8009f7a <_dtoa_r+0x62a>
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	4937      	ldr	r1, [pc, #220]	; (8009f94 <_dtoa_r+0x644>)
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	f7f6 fa06 	bl	80002c8 <__aeabi_dsub>
 8009ebc:	ec53 2b19 	vmov	r2, r3, d9
 8009ec0:	f7f6 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f040 80b6 	bne.w	800a036 <_dtoa_r+0x6e6>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	429d      	cmp	r5, r3
 8009ece:	f43f af7c 	beq.w	8009dca <_dtoa_r+0x47a>
 8009ed2:	4b31      	ldr	r3, [pc, #196]	; (8009f98 <_dtoa_r+0x648>)
 8009ed4:	ec51 0b19 	vmov	r0, r1, d9
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f7f6 fbad 	bl	8000638 <__aeabi_dmul>
 8009ede:	4b2e      	ldr	r3, [pc, #184]	; (8009f98 <_dtoa_r+0x648>)
 8009ee0:	ec41 0b19 	vmov	d9, r0, r1
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	4649      	mov	r1, r9
 8009eea:	f7f6 fba5 	bl	8000638 <__aeabi_dmul>
 8009eee:	4680      	mov	r8, r0
 8009ef0:	4689      	mov	r9, r1
 8009ef2:	e7c5      	b.n	8009e80 <_dtoa_r+0x530>
 8009ef4:	ec51 0b17 	vmov	r0, r1, d7
 8009ef8:	f7f6 fb9e 	bl	8000638 <__aeabi_dmul>
 8009efc:	9b02      	ldr	r3, [sp, #8]
 8009efe:	9d00      	ldr	r5, [sp, #0]
 8009f00:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f02:	ec41 0b19 	vmov	d9, r0, r1
 8009f06:	4649      	mov	r1, r9
 8009f08:	4640      	mov	r0, r8
 8009f0a:	f7f6 fe45 	bl	8000b98 <__aeabi_d2iz>
 8009f0e:	4606      	mov	r6, r0
 8009f10:	f7f6 fb28 	bl	8000564 <__aeabi_i2d>
 8009f14:	3630      	adds	r6, #48	; 0x30
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	f7f6 f9d3 	bl	80002c8 <__aeabi_dsub>
 8009f22:	f805 6b01 	strb.w	r6, [r5], #1
 8009f26:	9b02      	ldr	r3, [sp, #8]
 8009f28:	429d      	cmp	r5, r3
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	f04f 0200 	mov.w	r2, #0
 8009f32:	d124      	bne.n	8009f7e <_dtoa_r+0x62e>
 8009f34:	4b1b      	ldr	r3, [pc, #108]	; (8009fa4 <_dtoa_r+0x654>)
 8009f36:	ec51 0b19 	vmov	r0, r1, d9
 8009f3a:	f7f6 f9c7 	bl	80002cc <__adddf3>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4640      	mov	r0, r8
 8009f44:	4649      	mov	r1, r9
 8009f46:	f7f6 fe07 	bl	8000b58 <__aeabi_dcmpgt>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d173      	bne.n	800a036 <_dtoa_r+0x6e6>
 8009f4e:	ec53 2b19 	vmov	r2, r3, d9
 8009f52:	4914      	ldr	r1, [pc, #80]	; (8009fa4 <_dtoa_r+0x654>)
 8009f54:	2000      	movs	r0, #0
 8009f56:	f7f6 f9b7 	bl	80002c8 <__aeabi_dsub>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4640      	mov	r0, r8
 8009f60:	4649      	mov	r1, r9
 8009f62:	f7f6 fddb 	bl	8000b1c <__aeabi_dcmplt>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f43f af2f 	beq.w	8009dca <_dtoa_r+0x47a>
 8009f6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f6e:	1e6b      	subs	r3, r5, #1
 8009f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f76:	2b30      	cmp	r3, #48	; 0x30
 8009f78:	d0f8      	beq.n	8009f6c <_dtoa_r+0x61c>
 8009f7a:	46bb      	mov	fp, r7
 8009f7c:	e04a      	b.n	800a014 <_dtoa_r+0x6c4>
 8009f7e:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <_dtoa_r+0x648>)
 8009f80:	f7f6 fb5a 	bl	8000638 <__aeabi_dmul>
 8009f84:	4680      	mov	r8, r0
 8009f86:	4689      	mov	r9, r1
 8009f88:	e7bd      	b.n	8009f06 <_dtoa_r+0x5b6>
 8009f8a:	bf00      	nop
 8009f8c:	0800dab0 	.word	0x0800dab0
 8009f90:	0800da88 	.word	0x0800da88
 8009f94:	3ff00000 	.word	0x3ff00000
 8009f98:	40240000 	.word	0x40240000
 8009f9c:	401c0000 	.word	0x401c0000
 8009fa0:	40140000 	.word	0x40140000
 8009fa4:	3fe00000 	.word	0x3fe00000
 8009fa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fac:	9d00      	ldr	r5, [sp, #0]
 8009fae:	4642      	mov	r2, r8
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	f7f6 fc69 	bl	800088c <__aeabi_ddiv>
 8009fba:	f7f6 fded 	bl	8000b98 <__aeabi_d2iz>
 8009fbe:	9001      	str	r0, [sp, #4]
 8009fc0:	f7f6 fad0 	bl	8000564 <__aeabi_i2d>
 8009fc4:	4642      	mov	r2, r8
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	f7f6 fb36 	bl	8000638 <__aeabi_dmul>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 f978 	bl	80002c8 <__aeabi_dsub>
 8009fd8:	9e01      	ldr	r6, [sp, #4]
 8009fda:	9f04      	ldr	r7, [sp, #16]
 8009fdc:	3630      	adds	r6, #48	; 0x30
 8009fde:	f805 6b01 	strb.w	r6, [r5], #1
 8009fe2:	9e00      	ldr	r6, [sp, #0]
 8009fe4:	1bae      	subs	r6, r5, r6
 8009fe6:	42b7      	cmp	r7, r6
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	d134      	bne.n	800a058 <_dtoa_r+0x708>
 8009fee:	f7f6 f96d 	bl	80002cc <__adddf3>
 8009ff2:	4642      	mov	r2, r8
 8009ff4:	464b      	mov	r3, r9
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	f7f6 fdad 	bl	8000b58 <__aeabi_dcmpgt>
 8009ffe:	b9c8      	cbnz	r0, 800a034 <_dtoa_r+0x6e4>
 800a000:	4642      	mov	r2, r8
 800a002:	464b      	mov	r3, r9
 800a004:	4630      	mov	r0, r6
 800a006:	4639      	mov	r1, r7
 800a008:	f7f6 fd7e 	bl	8000b08 <__aeabi_dcmpeq>
 800a00c:	b110      	cbz	r0, 800a014 <_dtoa_r+0x6c4>
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	07db      	lsls	r3, r3, #31
 800a012:	d40f      	bmi.n	800a034 <_dtoa_r+0x6e4>
 800a014:	4651      	mov	r1, sl
 800a016:	4620      	mov	r0, r4
 800a018:	f000 fbcc 	bl	800a7b4 <_Bfree>
 800a01c:	2300      	movs	r3, #0
 800a01e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a020:	702b      	strb	r3, [r5, #0]
 800a022:	f10b 0301 	add.w	r3, fp, #1
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f43f ace2 	beq.w	80099f4 <_dtoa_r+0xa4>
 800a030:	601d      	str	r5, [r3, #0]
 800a032:	e4df      	b.n	80099f4 <_dtoa_r+0xa4>
 800a034:	465f      	mov	r7, fp
 800a036:	462b      	mov	r3, r5
 800a038:	461d      	mov	r5, r3
 800a03a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a03e:	2a39      	cmp	r2, #57	; 0x39
 800a040:	d106      	bne.n	800a050 <_dtoa_r+0x700>
 800a042:	9a00      	ldr	r2, [sp, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d1f7      	bne.n	800a038 <_dtoa_r+0x6e8>
 800a048:	9900      	ldr	r1, [sp, #0]
 800a04a:	2230      	movs	r2, #48	; 0x30
 800a04c:	3701      	adds	r7, #1
 800a04e:	700a      	strb	r2, [r1, #0]
 800a050:	781a      	ldrb	r2, [r3, #0]
 800a052:	3201      	adds	r2, #1
 800a054:	701a      	strb	r2, [r3, #0]
 800a056:	e790      	b.n	8009f7a <_dtoa_r+0x62a>
 800a058:	4ba3      	ldr	r3, [pc, #652]	; (800a2e8 <_dtoa_r+0x998>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	f7f6 faec 	bl	8000638 <__aeabi_dmul>
 800a060:	2200      	movs	r2, #0
 800a062:	2300      	movs	r3, #0
 800a064:	4606      	mov	r6, r0
 800a066:	460f      	mov	r7, r1
 800a068:	f7f6 fd4e 	bl	8000b08 <__aeabi_dcmpeq>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d09e      	beq.n	8009fae <_dtoa_r+0x65e>
 800a070:	e7d0      	b.n	800a014 <_dtoa_r+0x6c4>
 800a072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a074:	2a00      	cmp	r2, #0
 800a076:	f000 80ca 	beq.w	800a20e <_dtoa_r+0x8be>
 800a07a:	9a07      	ldr	r2, [sp, #28]
 800a07c:	2a01      	cmp	r2, #1
 800a07e:	f300 80ad 	bgt.w	800a1dc <_dtoa_r+0x88c>
 800a082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a084:	2a00      	cmp	r2, #0
 800a086:	f000 80a5 	beq.w	800a1d4 <_dtoa_r+0x884>
 800a08a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a08e:	9e08      	ldr	r6, [sp, #32]
 800a090:	9d05      	ldr	r5, [sp, #20]
 800a092:	9a05      	ldr	r2, [sp, #20]
 800a094:	441a      	add	r2, r3
 800a096:	9205      	str	r2, [sp, #20]
 800a098:	9a06      	ldr	r2, [sp, #24]
 800a09a:	2101      	movs	r1, #1
 800a09c:	441a      	add	r2, r3
 800a09e:	4620      	mov	r0, r4
 800a0a0:	9206      	str	r2, [sp, #24]
 800a0a2:	f000 fc87 	bl	800a9b4 <__i2b>
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	b165      	cbz	r5, 800a0c4 <_dtoa_r+0x774>
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dd09      	ble.n	800a0c4 <_dtoa_r+0x774>
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	9a05      	ldr	r2, [sp, #20]
 800a0b4:	bfa8      	it	ge
 800a0b6:	462b      	movge	r3, r5
 800a0b8:	1ad2      	subs	r2, r2, r3
 800a0ba:	9205      	str	r2, [sp, #20]
 800a0bc:	9a06      	ldr	r2, [sp, #24]
 800a0be:	1aed      	subs	r5, r5, r3
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	9306      	str	r3, [sp, #24]
 800a0c4:	9b08      	ldr	r3, [sp, #32]
 800a0c6:	b1f3      	cbz	r3, 800a106 <_dtoa_r+0x7b6>
 800a0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 80a3 	beq.w	800a216 <_dtoa_r+0x8c6>
 800a0d0:	2e00      	cmp	r6, #0
 800a0d2:	dd10      	ble.n	800a0f6 <_dtoa_r+0x7a6>
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	4632      	mov	r2, r6
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f000 fd2b 	bl	800ab34 <__pow5mult>
 800a0de:	4652      	mov	r2, sl
 800a0e0:	4601      	mov	r1, r0
 800a0e2:	4607      	mov	r7, r0
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f000 fc7b 	bl	800a9e0 <__multiply>
 800a0ea:	4651      	mov	r1, sl
 800a0ec:	4680      	mov	r8, r0
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 fb60 	bl	800a7b4 <_Bfree>
 800a0f4:	46c2      	mov	sl, r8
 800a0f6:	9b08      	ldr	r3, [sp, #32]
 800a0f8:	1b9a      	subs	r2, r3, r6
 800a0fa:	d004      	beq.n	800a106 <_dtoa_r+0x7b6>
 800a0fc:	4651      	mov	r1, sl
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 fd18 	bl	800ab34 <__pow5mult>
 800a104:	4682      	mov	sl, r0
 800a106:	2101      	movs	r1, #1
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 fc53 	bl	800a9b4 <__i2b>
 800a10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a110:	2b00      	cmp	r3, #0
 800a112:	4606      	mov	r6, r0
 800a114:	f340 8081 	ble.w	800a21a <_dtoa_r+0x8ca>
 800a118:	461a      	mov	r2, r3
 800a11a:	4601      	mov	r1, r0
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 fd09 	bl	800ab34 <__pow5mult>
 800a122:	9b07      	ldr	r3, [sp, #28]
 800a124:	2b01      	cmp	r3, #1
 800a126:	4606      	mov	r6, r0
 800a128:	dd7a      	ble.n	800a220 <_dtoa_r+0x8d0>
 800a12a:	f04f 0800 	mov.w	r8, #0
 800a12e:	6933      	ldr	r3, [r6, #16]
 800a130:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a134:	6918      	ldr	r0, [r3, #16]
 800a136:	f000 fbef 	bl	800a918 <__hi0bits>
 800a13a:	f1c0 0020 	rsb	r0, r0, #32
 800a13e:	9b06      	ldr	r3, [sp, #24]
 800a140:	4418      	add	r0, r3
 800a142:	f010 001f 	ands.w	r0, r0, #31
 800a146:	f000 8094 	beq.w	800a272 <_dtoa_r+0x922>
 800a14a:	f1c0 0320 	rsb	r3, r0, #32
 800a14e:	2b04      	cmp	r3, #4
 800a150:	f340 8085 	ble.w	800a25e <_dtoa_r+0x90e>
 800a154:	9b05      	ldr	r3, [sp, #20]
 800a156:	f1c0 001c 	rsb	r0, r0, #28
 800a15a:	4403      	add	r3, r0
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	9b06      	ldr	r3, [sp, #24]
 800a160:	4403      	add	r3, r0
 800a162:	4405      	add	r5, r0
 800a164:	9306      	str	r3, [sp, #24]
 800a166:	9b05      	ldr	r3, [sp, #20]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dd05      	ble.n	800a178 <_dtoa_r+0x828>
 800a16c:	4651      	mov	r1, sl
 800a16e:	461a      	mov	r2, r3
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fd39 	bl	800abe8 <__lshift>
 800a176:	4682      	mov	sl, r0
 800a178:	9b06      	ldr	r3, [sp, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	dd05      	ble.n	800a18a <_dtoa_r+0x83a>
 800a17e:	4631      	mov	r1, r6
 800a180:	461a      	mov	r2, r3
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fd30 	bl	800abe8 <__lshift>
 800a188:	4606      	mov	r6, r0
 800a18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d072      	beq.n	800a276 <_dtoa_r+0x926>
 800a190:	4631      	mov	r1, r6
 800a192:	4650      	mov	r0, sl
 800a194:	f000 fd94 	bl	800acc0 <__mcmp>
 800a198:	2800      	cmp	r0, #0
 800a19a:	da6c      	bge.n	800a276 <_dtoa_r+0x926>
 800a19c:	2300      	movs	r3, #0
 800a19e:	4651      	mov	r1, sl
 800a1a0:	220a      	movs	r2, #10
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 fb28 	bl	800a7f8 <__multadd>
 800a1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 81b0 	beq.w	800a516 <_dtoa_r+0xbc6>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	220a      	movs	r2, #10
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 fb1b 	bl	800a7f8 <__multadd>
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	4607      	mov	r7, r0
 800a1c8:	f300 8096 	bgt.w	800a2f8 <_dtoa_r+0x9a8>
 800a1cc:	9b07      	ldr	r3, [sp, #28]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	dc59      	bgt.n	800a286 <_dtoa_r+0x936>
 800a1d2:	e091      	b.n	800a2f8 <_dtoa_r+0x9a8>
 800a1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1da:	e758      	b.n	800a08e <_dtoa_r+0x73e>
 800a1dc:	9b04      	ldr	r3, [sp, #16]
 800a1de:	1e5e      	subs	r6, r3, #1
 800a1e0:	9b08      	ldr	r3, [sp, #32]
 800a1e2:	42b3      	cmp	r3, r6
 800a1e4:	bfbf      	itttt	lt
 800a1e6:	9b08      	ldrlt	r3, [sp, #32]
 800a1e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a1ea:	9608      	strlt	r6, [sp, #32]
 800a1ec:	1af3      	sublt	r3, r6, r3
 800a1ee:	bfb4      	ite	lt
 800a1f0:	18d2      	addlt	r2, r2, r3
 800a1f2:	1b9e      	subge	r6, r3, r6
 800a1f4:	9b04      	ldr	r3, [sp, #16]
 800a1f6:	bfbc      	itt	lt
 800a1f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a1fa:	2600      	movlt	r6, #0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bfb7      	itett	lt
 800a200:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a204:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a208:	1a9d      	sublt	r5, r3, r2
 800a20a:	2300      	movlt	r3, #0
 800a20c:	e741      	b.n	800a092 <_dtoa_r+0x742>
 800a20e:	9e08      	ldr	r6, [sp, #32]
 800a210:	9d05      	ldr	r5, [sp, #20]
 800a212:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a214:	e748      	b.n	800a0a8 <_dtoa_r+0x758>
 800a216:	9a08      	ldr	r2, [sp, #32]
 800a218:	e770      	b.n	800a0fc <_dtoa_r+0x7ac>
 800a21a:	9b07      	ldr	r3, [sp, #28]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	dc19      	bgt.n	800a254 <_dtoa_r+0x904>
 800a220:	9b02      	ldr	r3, [sp, #8]
 800a222:	b9bb      	cbnz	r3, 800a254 <_dtoa_r+0x904>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a22a:	b99b      	cbnz	r3, 800a254 <_dtoa_r+0x904>
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a232:	0d1b      	lsrs	r3, r3, #20
 800a234:	051b      	lsls	r3, r3, #20
 800a236:	b183      	cbz	r3, 800a25a <_dtoa_r+0x90a>
 800a238:	9b05      	ldr	r3, [sp, #20]
 800a23a:	3301      	adds	r3, #1
 800a23c:	9305      	str	r3, [sp, #20]
 800a23e:	9b06      	ldr	r3, [sp, #24]
 800a240:	3301      	adds	r3, #1
 800a242:	9306      	str	r3, [sp, #24]
 800a244:	f04f 0801 	mov.w	r8, #1
 800a248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f47f af6f 	bne.w	800a12e <_dtoa_r+0x7de>
 800a250:	2001      	movs	r0, #1
 800a252:	e774      	b.n	800a13e <_dtoa_r+0x7ee>
 800a254:	f04f 0800 	mov.w	r8, #0
 800a258:	e7f6      	b.n	800a248 <_dtoa_r+0x8f8>
 800a25a:	4698      	mov	r8, r3
 800a25c:	e7f4      	b.n	800a248 <_dtoa_r+0x8f8>
 800a25e:	d082      	beq.n	800a166 <_dtoa_r+0x816>
 800a260:	9a05      	ldr	r2, [sp, #20]
 800a262:	331c      	adds	r3, #28
 800a264:	441a      	add	r2, r3
 800a266:	9205      	str	r2, [sp, #20]
 800a268:	9a06      	ldr	r2, [sp, #24]
 800a26a:	441a      	add	r2, r3
 800a26c:	441d      	add	r5, r3
 800a26e:	9206      	str	r2, [sp, #24]
 800a270:	e779      	b.n	800a166 <_dtoa_r+0x816>
 800a272:	4603      	mov	r3, r0
 800a274:	e7f4      	b.n	800a260 <_dtoa_r+0x910>
 800a276:	9b04      	ldr	r3, [sp, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	dc37      	bgt.n	800a2ec <_dtoa_r+0x99c>
 800a27c:	9b07      	ldr	r3, [sp, #28]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	dd34      	ble.n	800a2ec <_dtoa_r+0x99c>
 800a282:	9b04      	ldr	r3, [sp, #16]
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	9b01      	ldr	r3, [sp, #4]
 800a288:	b963      	cbnz	r3, 800a2a4 <_dtoa_r+0x954>
 800a28a:	4631      	mov	r1, r6
 800a28c:	2205      	movs	r2, #5
 800a28e:	4620      	mov	r0, r4
 800a290:	f000 fab2 	bl	800a7f8 <__multadd>
 800a294:	4601      	mov	r1, r0
 800a296:	4606      	mov	r6, r0
 800a298:	4650      	mov	r0, sl
 800a29a:	f000 fd11 	bl	800acc0 <__mcmp>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f73f adbb 	bgt.w	8009e1a <_dtoa_r+0x4ca>
 800a2a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a6:	9d00      	ldr	r5, [sp, #0]
 800a2a8:	ea6f 0b03 	mvn.w	fp, r3
 800a2ac:	f04f 0800 	mov.w	r8, #0
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 fa7e 	bl	800a7b4 <_Bfree>
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	f43f aeab 	beq.w	800a014 <_dtoa_r+0x6c4>
 800a2be:	f1b8 0f00 	cmp.w	r8, #0
 800a2c2:	d005      	beq.n	800a2d0 <_dtoa_r+0x980>
 800a2c4:	45b8      	cmp	r8, r7
 800a2c6:	d003      	beq.n	800a2d0 <_dtoa_r+0x980>
 800a2c8:	4641      	mov	r1, r8
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 fa72 	bl	800a7b4 <_Bfree>
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 fa6e 	bl	800a7b4 <_Bfree>
 800a2d8:	e69c      	b.n	800a014 <_dtoa_r+0x6c4>
 800a2da:	2600      	movs	r6, #0
 800a2dc:	4637      	mov	r7, r6
 800a2de:	e7e1      	b.n	800a2a4 <_dtoa_r+0x954>
 800a2e0:	46bb      	mov	fp, r7
 800a2e2:	4637      	mov	r7, r6
 800a2e4:	e599      	b.n	8009e1a <_dtoa_r+0x4ca>
 800a2e6:	bf00      	nop
 800a2e8:	40240000 	.word	0x40240000
 800a2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f000 80c8 	beq.w	800a484 <_dtoa_r+0xb34>
 800a2f4:	9b04      	ldr	r3, [sp, #16]
 800a2f6:	9301      	str	r3, [sp, #4]
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	dd05      	ble.n	800a308 <_dtoa_r+0x9b8>
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	462a      	mov	r2, r5
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fc71 	bl	800abe8 <__lshift>
 800a306:	4607      	mov	r7, r0
 800a308:	f1b8 0f00 	cmp.w	r8, #0
 800a30c:	d05b      	beq.n	800a3c6 <_dtoa_r+0xa76>
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fa0f 	bl	800a734 <_Balloc>
 800a316:	4605      	mov	r5, r0
 800a318:	b928      	cbnz	r0, 800a326 <_dtoa_r+0x9d6>
 800a31a:	4b83      	ldr	r3, [pc, #524]	; (800a528 <_dtoa_r+0xbd8>)
 800a31c:	4602      	mov	r2, r0
 800a31e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a322:	f7ff bb2e 	b.w	8009982 <_dtoa_r+0x32>
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	3202      	adds	r2, #2
 800a32a:	0092      	lsls	r2, r2, #2
 800a32c:	f107 010c 	add.w	r1, r7, #12
 800a330:	300c      	adds	r0, #12
 800a332:	f7ff fa6f 	bl	8009814 <memcpy>
 800a336:	2201      	movs	r2, #1
 800a338:	4629      	mov	r1, r5
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fc54 	bl	800abe8 <__lshift>
 800a340:	9b00      	ldr	r3, [sp, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a34a:	4413      	add	r3, r2
 800a34c:	9308      	str	r3, [sp, #32]
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	46b8      	mov	r8, r7
 800a356:	9306      	str	r3, [sp, #24]
 800a358:	4607      	mov	r7, r0
 800a35a:	9b04      	ldr	r3, [sp, #16]
 800a35c:	4631      	mov	r1, r6
 800a35e:	3b01      	subs	r3, #1
 800a360:	4650      	mov	r0, sl
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	f7ff fa6a 	bl	800983c <quorem>
 800a368:	4641      	mov	r1, r8
 800a36a:	9002      	str	r0, [sp, #8]
 800a36c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a370:	4650      	mov	r0, sl
 800a372:	f000 fca5 	bl	800acc0 <__mcmp>
 800a376:	463a      	mov	r2, r7
 800a378:	9005      	str	r0, [sp, #20]
 800a37a:	4631      	mov	r1, r6
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 fcbb 	bl	800acf8 <__mdiff>
 800a382:	68c2      	ldr	r2, [r0, #12]
 800a384:	4605      	mov	r5, r0
 800a386:	bb02      	cbnz	r2, 800a3ca <_dtoa_r+0xa7a>
 800a388:	4601      	mov	r1, r0
 800a38a:	4650      	mov	r0, sl
 800a38c:	f000 fc98 	bl	800acc0 <__mcmp>
 800a390:	4602      	mov	r2, r0
 800a392:	4629      	mov	r1, r5
 800a394:	4620      	mov	r0, r4
 800a396:	9209      	str	r2, [sp, #36]	; 0x24
 800a398:	f000 fa0c 	bl	800a7b4 <_Bfree>
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3a0:	9d04      	ldr	r5, [sp, #16]
 800a3a2:	ea43 0102 	orr.w	r1, r3, r2
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	4319      	orrs	r1, r3
 800a3aa:	d110      	bne.n	800a3ce <_dtoa_r+0xa7e>
 800a3ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a3b0:	d029      	beq.n	800a406 <_dtoa_r+0xab6>
 800a3b2:	9b05      	ldr	r3, [sp, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dd02      	ble.n	800a3be <_dtoa_r+0xa6e>
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	f883 9000 	strb.w	r9, [r3]
 800a3c4:	e774      	b.n	800a2b0 <_dtoa_r+0x960>
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	e7ba      	b.n	800a340 <_dtoa_r+0x9f0>
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	e7e1      	b.n	800a392 <_dtoa_r+0xa42>
 800a3ce:	9b05      	ldr	r3, [sp, #20]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	db04      	blt.n	800a3de <_dtoa_r+0xa8e>
 800a3d4:	9907      	ldr	r1, [sp, #28]
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	9906      	ldr	r1, [sp, #24]
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	d120      	bne.n	800a420 <_dtoa_r+0xad0>
 800a3de:	2a00      	cmp	r2, #0
 800a3e0:	dded      	ble.n	800a3be <_dtoa_r+0xa6e>
 800a3e2:	4651      	mov	r1, sl
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 fbfe 	bl	800abe8 <__lshift>
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	4682      	mov	sl, r0
 800a3f0:	f000 fc66 	bl	800acc0 <__mcmp>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	dc03      	bgt.n	800a400 <_dtoa_r+0xab0>
 800a3f8:	d1e1      	bne.n	800a3be <_dtoa_r+0xa6e>
 800a3fa:	f019 0f01 	tst.w	r9, #1
 800a3fe:	d0de      	beq.n	800a3be <_dtoa_r+0xa6e>
 800a400:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a404:	d1d8      	bne.n	800a3b8 <_dtoa_r+0xa68>
 800a406:	9a01      	ldr	r2, [sp, #4]
 800a408:	2339      	movs	r3, #57	; 0x39
 800a40a:	7013      	strb	r3, [r2, #0]
 800a40c:	462b      	mov	r3, r5
 800a40e:	461d      	mov	r5, r3
 800a410:	3b01      	subs	r3, #1
 800a412:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a416:	2a39      	cmp	r2, #57	; 0x39
 800a418:	d06c      	beq.n	800a4f4 <_dtoa_r+0xba4>
 800a41a:	3201      	adds	r2, #1
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	e747      	b.n	800a2b0 <_dtoa_r+0x960>
 800a420:	2a00      	cmp	r2, #0
 800a422:	dd07      	ble.n	800a434 <_dtoa_r+0xae4>
 800a424:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a428:	d0ed      	beq.n	800a406 <_dtoa_r+0xab6>
 800a42a:	9a01      	ldr	r2, [sp, #4]
 800a42c:	f109 0301 	add.w	r3, r9, #1
 800a430:	7013      	strb	r3, [r2, #0]
 800a432:	e73d      	b.n	800a2b0 <_dtoa_r+0x960>
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	9a08      	ldr	r2, [sp, #32]
 800a438:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d043      	beq.n	800a4c8 <_dtoa_r+0xb78>
 800a440:	4651      	mov	r1, sl
 800a442:	2300      	movs	r3, #0
 800a444:	220a      	movs	r2, #10
 800a446:	4620      	mov	r0, r4
 800a448:	f000 f9d6 	bl	800a7f8 <__multadd>
 800a44c:	45b8      	cmp	r8, r7
 800a44e:	4682      	mov	sl, r0
 800a450:	f04f 0300 	mov.w	r3, #0
 800a454:	f04f 020a 	mov.w	r2, #10
 800a458:	4641      	mov	r1, r8
 800a45a:	4620      	mov	r0, r4
 800a45c:	d107      	bne.n	800a46e <_dtoa_r+0xb1e>
 800a45e:	f000 f9cb 	bl	800a7f8 <__multadd>
 800a462:	4680      	mov	r8, r0
 800a464:	4607      	mov	r7, r0
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	3301      	adds	r3, #1
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	e775      	b.n	800a35a <_dtoa_r+0xa0a>
 800a46e:	f000 f9c3 	bl	800a7f8 <__multadd>
 800a472:	4639      	mov	r1, r7
 800a474:	4680      	mov	r8, r0
 800a476:	2300      	movs	r3, #0
 800a478:	220a      	movs	r2, #10
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 f9bc 	bl	800a7f8 <__multadd>
 800a480:	4607      	mov	r7, r0
 800a482:	e7f0      	b.n	800a466 <_dtoa_r+0xb16>
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	9d00      	ldr	r5, [sp, #0]
 800a48a:	4631      	mov	r1, r6
 800a48c:	4650      	mov	r0, sl
 800a48e:	f7ff f9d5 	bl	800983c <quorem>
 800a492:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a496:	9b00      	ldr	r3, [sp, #0]
 800a498:	f805 9b01 	strb.w	r9, [r5], #1
 800a49c:	1aea      	subs	r2, r5, r3
 800a49e:	9b01      	ldr	r3, [sp, #4]
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	dd07      	ble.n	800a4b4 <_dtoa_r+0xb64>
 800a4a4:	4651      	mov	r1, sl
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	220a      	movs	r2, #10
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f9a4 	bl	800a7f8 <__multadd>
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	e7ea      	b.n	800a48a <_dtoa_r+0xb3a>
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfc8      	it	gt
 800a4ba:	461d      	movgt	r5, r3
 800a4bc:	9b00      	ldr	r3, [sp, #0]
 800a4be:	bfd8      	it	le
 800a4c0:	2501      	movle	r5, #1
 800a4c2:	441d      	add	r5, r3
 800a4c4:	f04f 0800 	mov.w	r8, #0
 800a4c8:	4651      	mov	r1, sl
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f000 fb8b 	bl	800abe8 <__lshift>
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4682      	mov	sl, r0
 800a4d6:	f000 fbf3 	bl	800acc0 <__mcmp>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	dc96      	bgt.n	800a40c <_dtoa_r+0xabc>
 800a4de:	d102      	bne.n	800a4e6 <_dtoa_r+0xb96>
 800a4e0:	f019 0f01 	tst.w	r9, #1
 800a4e4:	d192      	bne.n	800a40c <_dtoa_r+0xabc>
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	461d      	mov	r5, r3
 800a4ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ee:	2a30      	cmp	r2, #48	; 0x30
 800a4f0:	d0fa      	beq.n	800a4e8 <_dtoa_r+0xb98>
 800a4f2:	e6dd      	b.n	800a2b0 <_dtoa_r+0x960>
 800a4f4:	9a00      	ldr	r2, [sp, #0]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d189      	bne.n	800a40e <_dtoa_r+0xabe>
 800a4fa:	f10b 0b01 	add.w	fp, fp, #1
 800a4fe:	2331      	movs	r3, #49	; 0x31
 800a500:	e796      	b.n	800a430 <_dtoa_r+0xae0>
 800a502:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <_dtoa_r+0xbdc>)
 800a504:	f7ff ba99 	b.w	8009a3a <_dtoa_r+0xea>
 800a508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f47f aa6d 	bne.w	80099ea <_dtoa_r+0x9a>
 800a510:	4b07      	ldr	r3, [pc, #28]	; (800a530 <_dtoa_r+0xbe0>)
 800a512:	f7ff ba92 	b.w	8009a3a <_dtoa_r+0xea>
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	dcb5      	bgt.n	800a488 <_dtoa_r+0xb38>
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	f73f aeb1 	bgt.w	800a286 <_dtoa_r+0x936>
 800a524:	e7b0      	b.n	800a488 <_dtoa_r+0xb38>
 800a526:	bf00      	nop
 800a528:	0800da17 	.word	0x0800da17
 800a52c:	0800dd00 	.word	0x0800dd00
 800a530:	0800d99b 	.word	0x0800d99b

0800a534 <_free_r>:
 800a534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a536:	2900      	cmp	r1, #0
 800a538:	d044      	beq.n	800a5c4 <_free_r+0x90>
 800a53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a53e:	9001      	str	r0, [sp, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	f1a1 0404 	sub.w	r4, r1, #4
 800a546:	bfb8      	it	lt
 800a548:	18e4      	addlt	r4, r4, r3
 800a54a:	f000 f8e7 	bl	800a71c <__malloc_lock>
 800a54e:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <_free_r+0x94>)
 800a550:	9801      	ldr	r0, [sp, #4]
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	b933      	cbnz	r3, 800a564 <_free_r+0x30>
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	6014      	str	r4, [r2, #0]
 800a55a:	b003      	add	sp, #12
 800a55c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a560:	f000 b8e2 	b.w	800a728 <__malloc_unlock>
 800a564:	42a3      	cmp	r3, r4
 800a566:	d908      	bls.n	800a57a <_free_r+0x46>
 800a568:	6825      	ldr	r5, [r4, #0]
 800a56a:	1961      	adds	r1, r4, r5
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1949      	addeq	r1, r1, r5
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	e7ed      	b.n	800a556 <_free_r+0x22>
 800a57a:	461a      	mov	r2, r3
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	b10b      	cbz	r3, 800a584 <_free_r+0x50>
 800a580:	42a3      	cmp	r3, r4
 800a582:	d9fa      	bls.n	800a57a <_free_r+0x46>
 800a584:	6811      	ldr	r1, [r2, #0]
 800a586:	1855      	adds	r5, r2, r1
 800a588:	42a5      	cmp	r5, r4
 800a58a:	d10b      	bne.n	800a5a4 <_free_r+0x70>
 800a58c:	6824      	ldr	r4, [r4, #0]
 800a58e:	4421      	add	r1, r4
 800a590:	1854      	adds	r4, r2, r1
 800a592:	42a3      	cmp	r3, r4
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	d1e0      	bne.n	800a55a <_free_r+0x26>
 800a598:	681c      	ldr	r4, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	6053      	str	r3, [r2, #4]
 800a59e:	440c      	add	r4, r1
 800a5a0:	6014      	str	r4, [r2, #0]
 800a5a2:	e7da      	b.n	800a55a <_free_r+0x26>
 800a5a4:	d902      	bls.n	800a5ac <_free_r+0x78>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	6003      	str	r3, [r0, #0]
 800a5aa:	e7d6      	b.n	800a55a <_free_r+0x26>
 800a5ac:	6825      	ldr	r5, [r4, #0]
 800a5ae:	1961      	adds	r1, r4, r5
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf04      	itt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	6063      	str	r3, [r4, #4]
 800a5ba:	bf04      	itt	eq
 800a5bc:	1949      	addeq	r1, r1, r5
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	6054      	str	r4, [r2, #4]
 800a5c2:	e7ca      	b.n	800a55a <_free_r+0x26>
 800a5c4:	b003      	add	sp, #12
 800a5c6:	bd30      	pop	{r4, r5, pc}
 800a5c8:	2000a3dc 	.word	0x2000a3dc

0800a5cc <malloc>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	; (800a5d8 <malloc+0xc>)
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	f000 b823 	b.w	800a61c <_malloc_r>
 800a5d6:	bf00      	nop
 800a5d8:	200000b4 	.word	0x200000b4

0800a5dc <sbrk_aligned>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	4e0e      	ldr	r6, [pc, #56]	; (800a618 <sbrk_aligned+0x3c>)
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	6831      	ldr	r1, [r6, #0]
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	b911      	cbnz	r1, 800a5ee <sbrk_aligned+0x12>
 800a5e8:	f002 fb76 	bl	800ccd8 <_sbrk_r>
 800a5ec:	6030      	str	r0, [r6, #0]
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f002 fb71 	bl	800ccd8 <_sbrk_r>
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	d00a      	beq.n	800a610 <sbrk_aligned+0x34>
 800a5fa:	1cc4      	adds	r4, r0, #3
 800a5fc:	f024 0403 	bic.w	r4, r4, #3
 800a600:	42a0      	cmp	r0, r4
 800a602:	d007      	beq.n	800a614 <sbrk_aligned+0x38>
 800a604:	1a21      	subs	r1, r4, r0
 800a606:	4628      	mov	r0, r5
 800a608:	f002 fb66 	bl	800ccd8 <_sbrk_r>
 800a60c:	3001      	adds	r0, #1
 800a60e:	d101      	bne.n	800a614 <sbrk_aligned+0x38>
 800a610:	f04f 34ff 	mov.w	r4, #4294967295
 800a614:	4620      	mov	r0, r4
 800a616:	bd70      	pop	{r4, r5, r6, pc}
 800a618:	2000a3e0 	.word	0x2000a3e0

0800a61c <_malloc_r>:
 800a61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a620:	1ccd      	adds	r5, r1, #3
 800a622:	f025 0503 	bic.w	r5, r5, #3
 800a626:	3508      	adds	r5, #8
 800a628:	2d0c      	cmp	r5, #12
 800a62a:	bf38      	it	cc
 800a62c:	250c      	movcc	r5, #12
 800a62e:	2d00      	cmp	r5, #0
 800a630:	4607      	mov	r7, r0
 800a632:	db01      	blt.n	800a638 <_malloc_r+0x1c>
 800a634:	42a9      	cmp	r1, r5
 800a636:	d905      	bls.n	800a644 <_malloc_r+0x28>
 800a638:	230c      	movs	r3, #12
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	2600      	movs	r6, #0
 800a63e:	4630      	mov	r0, r6
 800a640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a718 <_malloc_r+0xfc>
 800a648:	f000 f868 	bl	800a71c <__malloc_lock>
 800a64c:	f8d8 3000 	ldr.w	r3, [r8]
 800a650:	461c      	mov	r4, r3
 800a652:	bb5c      	cbnz	r4, 800a6ac <_malloc_r+0x90>
 800a654:	4629      	mov	r1, r5
 800a656:	4638      	mov	r0, r7
 800a658:	f7ff ffc0 	bl	800a5dc <sbrk_aligned>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	4604      	mov	r4, r0
 800a660:	d155      	bne.n	800a70e <_malloc_r+0xf2>
 800a662:	f8d8 4000 	ldr.w	r4, [r8]
 800a666:	4626      	mov	r6, r4
 800a668:	2e00      	cmp	r6, #0
 800a66a:	d145      	bne.n	800a6f8 <_malloc_r+0xdc>
 800a66c:	2c00      	cmp	r4, #0
 800a66e:	d048      	beq.n	800a702 <_malloc_r+0xe6>
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	4631      	mov	r1, r6
 800a674:	4638      	mov	r0, r7
 800a676:	eb04 0903 	add.w	r9, r4, r3
 800a67a:	f002 fb2d 	bl	800ccd8 <_sbrk_r>
 800a67e:	4581      	cmp	r9, r0
 800a680:	d13f      	bne.n	800a702 <_malloc_r+0xe6>
 800a682:	6821      	ldr	r1, [r4, #0]
 800a684:	1a6d      	subs	r5, r5, r1
 800a686:	4629      	mov	r1, r5
 800a688:	4638      	mov	r0, r7
 800a68a:	f7ff ffa7 	bl	800a5dc <sbrk_aligned>
 800a68e:	3001      	adds	r0, #1
 800a690:	d037      	beq.n	800a702 <_malloc_r+0xe6>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	442b      	add	r3, r5
 800a696:	6023      	str	r3, [r4, #0]
 800a698:	f8d8 3000 	ldr.w	r3, [r8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d038      	beq.n	800a712 <_malloc_r+0xf6>
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	42a2      	cmp	r2, r4
 800a6a4:	d12b      	bne.n	800a6fe <_malloc_r+0xe2>
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	605a      	str	r2, [r3, #4]
 800a6aa:	e00f      	b.n	800a6cc <_malloc_r+0xb0>
 800a6ac:	6822      	ldr	r2, [r4, #0]
 800a6ae:	1b52      	subs	r2, r2, r5
 800a6b0:	d41f      	bmi.n	800a6f2 <_malloc_r+0xd6>
 800a6b2:	2a0b      	cmp	r2, #11
 800a6b4:	d917      	bls.n	800a6e6 <_malloc_r+0xca>
 800a6b6:	1961      	adds	r1, r4, r5
 800a6b8:	42a3      	cmp	r3, r4
 800a6ba:	6025      	str	r5, [r4, #0]
 800a6bc:	bf18      	it	ne
 800a6be:	6059      	strne	r1, [r3, #4]
 800a6c0:	6863      	ldr	r3, [r4, #4]
 800a6c2:	bf08      	it	eq
 800a6c4:	f8c8 1000 	streq.w	r1, [r8]
 800a6c8:	5162      	str	r2, [r4, r5]
 800a6ca:	604b      	str	r3, [r1, #4]
 800a6cc:	4638      	mov	r0, r7
 800a6ce:	f104 060b 	add.w	r6, r4, #11
 800a6d2:	f000 f829 	bl	800a728 <__malloc_unlock>
 800a6d6:	f026 0607 	bic.w	r6, r6, #7
 800a6da:	1d23      	adds	r3, r4, #4
 800a6dc:	1af2      	subs	r2, r6, r3
 800a6de:	d0ae      	beq.n	800a63e <_malloc_r+0x22>
 800a6e0:	1b9b      	subs	r3, r3, r6
 800a6e2:	50a3      	str	r3, [r4, r2]
 800a6e4:	e7ab      	b.n	800a63e <_malloc_r+0x22>
 800a6e6:	42a3      	cmp	r3, r4
 800a6e8:	6862      	ldr	r2, [r4, #4]
 800a6ea:	d1dd      	bne.n	800a6a8 <_malloc_r+0x8c>
 800a6ec:	f8c8 2000 	str.w	r2, [r8]
 800a6f0:	e7ec      	b.n	800a6cc <_malloc_r+0xb0>
 800a6f2:	4623      	mov	r3, r4
 800a6f4:	6864      	ldr	r4, [r4, #4]
 800a6f6:	e7ac      	b.n	800a652 <_malloc_r+0x36>
 800a6f8:	4634      	mov	r4, r6
 800a6fa:	6876      	ldr	r6, [r6, #4]
 800a6fc:	e7b4      	b.n	800a668 <_malloc_r+0x4c>
 800a6fe:	4613      	mov	r3, r2
 800a700:	e7cc      	b.n	800a69c <_malloc_r+0x80>
 800a702:	230c      	movs	r3, #12
 800a704:	603b      	str	r3, [r7, #0]
 800a706:	4638      	mov	r0, r7
 800a708:	f000 f80e 	bl	800a728 <__malloc_unlock>
 800a70c:	e797      	b.n	800a63e <_malloc_r+0x22>
 800a70e:	6025      	str	r5, [r4, #0]
 800a710:	e7dc      	b.n	800a6cc <_malloc_r+0xb0>
 800a712:	605b      	str	r3, [r3, #4]
 800a714:	deff      	udf	#255	; 0xff
 800a716:	bf00      	nop
 800a718:	2000a3dc 	.word	0x2000a3dc

0800a71c <__malloc_lock>:
 800a71c:	4801      	ldr	r0, [pc, #4]	; (800a724 <__malloc_lock+0x8>)
 800a71e:	f7ff b877 	b.w	8009810 <__retarget_lock_acquire_recursive>
 800a722:	bf00      	nop
 800a724:	2000a3d8 	.word	0x2000a3d8

0800a728 <__malloc_unlock>:
 800a728:	4801      	ldr	r0, [pc, #4]	; (800a730 <__malloc_unlock+0x8>)
 800a72a:	f7ff b872 	b.w	8009812 <__retarget_lock_release_recursive>
 800a72e:	bf00      	nop
 800a730:	2000a3d8 	.word	0x2000a3d8

0800a734 <_Balloc>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	69c6      	ldr	r6, [r0, #28]
 800a738:	4604      	mov	r4, r0
 800a73a:	460d      	mov	r5, r1
 800a73c:	b976      	cbnz	r6, 800a75c <_Balloc+0x28>
 800a73e:	2010      	movs	r0, #16
 800a740:	f7ff ff44 	bl	800a5cc <malloc>
 800a744:	4602      	mov	r2, r0
 800a746:	61e0      	str	r0, [r4, #28]
 800a748:	b920      	cbnz	r0, 800a754 <_Balloc+0x20>
 800a74a:	4b18      	ldr	r3, [pc, #96]	; (800a7ac <_Balloc+0x78>)
 800a74c:	4818      	ldr	r0, [pc, #96]	; (800a7b0 <_Balloc+0x7c>)
 800a74e:	216b      	movs	r1, #107	; 0x6b
 800a750:	f002 fada 	bl	800cd08 <__assert_func>
 800a754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a758:	6006      	str	r6, [r0, #0]
 800a75a:	60c6      	str	r6, [r0, #12]
 800a75c:	69e6      	ldr	r6, [r4, #28]
 800a75e:	68f3      	ldr	r3, [r6, #12]
 800a760:	b183      	cbz	r3, 800a784 <_Balloc+0x50>
 800a762:	69e3      	ldr	r3, [r4, #28]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a76a:	b9b8      	cbnz	r0, 800a79c <_Balloc+0x68>
 800a76c:	2101      	movs	r1, #1
 800a76e:	fa01 f605 	lsl.w	r6, r1, r5
 800a772:	1d72      	adds	r2, r6, #5
 800a774:	0092      	lsls	r2, r2, #2
 800a776:	4620      	mov	r0, r4
 800a778:	f002 fae4 	bl	800cd44 <_calloc_r>
 800a77c:	b160      	cbz	r0, 800a798 <_Balloc+0x64>
 800a77e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a782:	e00e      	b.n	800a7a2 <_Balloc+0x6e>
 800a784:	2221      	movs	r2, #33	; 0x21
 800a786:	2104      	movs	r1, #4
 800a788:	4620      	mov	r0, r4
 800a78a:	f002 fadb 	bl	800cd44 <_calloc_r>
 800a78e:	69e3      	ldr	r3, [r4, #28]
 800a790:	60f0      	str	r0, [r6, #12]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1e4      	bne.n	800a762 <_Balloc+0x2e>
 800a798:	2000      	movs	r0, #0
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	6802      	ldr	r2, [r0, #0]
 800a79e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7a8:	e7f7      	b.n	800a79a <_Balloc+0x66>
 800a7aa:	bf00      	nop
 800a7ac:	0800d9a8 	.word	0x0800d9a8
 800a7b0:	0800da28 	.word	0x0800da28

0800a7b4 <_Bfree>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	69c6      	ldr	r6, [r0, #28]
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	b976      	cbnz	r6, 800a7dc <_Bfree+0x28>
 800a7be:	2010      	movs	r0, #16
 800a7c0:	f7ff ff04 	bl	800a5cc <malloc>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	61e8      	str	r0, [r5, #28]
 800a7c8:	b920      	cbnz	r0, 800a7d4 <_Bfree+0x20>
 800a7ca:	4b09      	ldr	r3, [pc, #36]	; (800a7f0 <_Bfree+0x3c>)
 800a7cc:	4809      	ldr	r0, [pc, #36]	; (800a7f4 <_Bfree+0x40>)
 800a7ce:	218f      	movs	r1, #143	; 0x8f
 800a7d0:	f002 fa9a 	bl	800cd08 <__assert_func>
 800a7d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7d8:	6006      	str	r6, [r0, #0]
 800a7da:	60c6      	str	r6, [r0, #12]
 800a7dc:	b13c      	cbz	r4, 800a7ee <_Bfree+0x3a>
 800a7de:	69eb      	ldr	r3, [r5, #28]
 800a7e0:	6862      	ldr	r2, [r4, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7e8:	6021      	str	r1, [r4, #0]
 800a7ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}
 800a7f0:	0800d9a8 	.word	0x0800d9a8
 800a7f4:	0800da28 	.word	0x0800da28

0800a7f8 <__multadd>:
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	690d      	ldr	r5, [r1, #16]
 800a7fe:	4607      	mov	r7, r0
 800a800:	460c      	mov	r4, r1
 800a802:	461e      	mov	r6, r3
 800a804:	f101 0c14 	add.w	ip, r1, #20
 800a808:	2000      	movs	r0, #0
 800a80a:	f8dc 3000 	ldr.w	r3, [ip]
 800a80e:	b299      	uxth	r1, r3
 800a810:	fb02 6101 	mla	r1, r2, r1, r6
 800a814:	0c1e      	lsrs	r6, r3, #16
 800a816:	0c0b      	lsrs	r3, r1, #16
 800a818:	fb02 3306 	mla	r3, r2, r6, r3
 800a81c:	b289      	uxth	r1, r1
 800a81e:	3001      	adds	r0, #1
 800a820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a824:	4285      	cmp	r5, r0
 800a826:	f84c 1b04 	str.w	r1, [ip], #4
 800a82a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a82e:	dcec      	bgt.n	800a80a <__multadd+0x12>
 800a830:	b30e      	cbz	r6, 800a876 <__multadd+0x7e>
 800a832:	68a3      	ldr	r3, [r4, #8]
 800a834:	42ab      	cmp	r3, r5
 800a836:	dc19      	bgt.n	800a86c <__multadd+0x74>
 800a838:	6861      	ldr	r1, [r4, #4]
 800a83a:	4638      	mov	r0, r7
 800a83c:	3101      	adds	r1, #1
 800a83e:	f7ff ff79 	bl	800a734 <_Balloc>
 800a842:	4680      	mov	r8, r0
 800a844:	b928      	cbnz	r0, 800a852 <__multadd+0x5a>
 800a846:	4602      	mov	r2, r0
 800a848:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <__multadd+0x84>)
 800a84a:	480d      	ldr	r0, [pc, #52]	; (800a880 <__multadd+0x88>)
 800a84c:	21ba      	movs	r1, #186	; 0xba
 800a84e:	f002 fa5b 	bl	800cd08 <__assert_func>
 800a852:	6922      	ldr	r2, [r4, #16]
 800a854:	3202      	adds	r2, #2
 800a856:	f104 010c 	add.w	r1, r4, #12
 800a85a:	0092      	lsls	r2, r2, #2
 800a85c:	300c      	adds	r0, #12
 800a85e:	f7fe ffd9 	bl	8009814 <memcpy>
 800a862:	4621      	mov	r1, r4
 800a864:	4638      	mov	r0, r7
 800a866:	f7ff ffa5 	bl	800a7b4 <_Bfree>
 800a86a:	4644      	mov	r4, r8
 800a86c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a870:	3501      	adds	r5, #1
 800a872:	615e      	str	r6, [r3, #20]
 800a874:	6125      	str	r5, [r4, #16]
 800a876:	4620      	mov	r0, r4
 800a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87c:	0800da17 	.word	0x0800da17
 800a880:	0800da28 	.word	0x0800da28

0800a884 <__s2b>:
 800a884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a888:	460c      	mov	r4, r1
 800a88a:	4615      	mov	r5, r2
 800a88c:	461f      	mov	r7, r3
 800a88e:	2209      	movs	r2, #9
 800a890:	3308      	adds	r3, #8
 800a892:	4606      	mov	r6, r0
 800a894:	fb93 f3f2 	sdiv	r3, r3, r2
 800a898:	2100      	movs	r1, #0
 800a89a:	2201      	movs	r2, #1
 800a89c:	429a      	cmp	r2, r3
 800a89e:	db09      	blt.n	800a8b4 <__s2b+0x30>
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7ff ff47 	bl	800a734 <_Balloc>
 800a8a6:	b940      	cbnz	r0, 800a8ba <__s2b+0x36>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	4b19      	ldr	r3, [pc, #100]	; (800a910 <__s2b+0x8c>)
 800a8ac:	4819      	ldr	r0, [pc, #100]	; (800a914 <__s2b+0x90>)
 800a8ae:	21d3      	movs	r1, #211	; 0xd3
 800a8b0:	f002 fa2a 	bl	800cd08 <__assert_func>
 800a8b4:	0052      	lsls	r2, r2, #1
 800a8b6:	3101      	adds	r1, #1
 800a8b8:	e7f0      	b.n	800a89c <__s2b+0x18>
 800a8ba:	9b08      	ldr	r3, [sp, #32]
 800a8bc:	6143      	str	r3, [r0, #20]
 800a8be:	2d09      	cmp	r5, #9
 800a8c0:	f04f 0301 	mov.w	r3, #1
 800a8c4:	6103      	str	r3, [r0, #16]
 800a8c6:	dd16      	ble.n	800a8f6 <__s2b+0x72>
 800a8c8:	f104 0909 	add.w	r9, r4, #9
 800a8cc:	46c8      	mov	r8, r9
 800a8ce:	442c      	add	r4, r5
 800a8d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8d4:	4601      	mov	r1, r0
 800a8d6:	3b30      	subs	r3, #48	; 0x30
 800a8d8:	220a      	movs	r2, #10
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f7ff ff8c 	bl	800a7f8 <__multadd>
 800a8e0:	45a0      	cmp	r8, r4
 800a8e2:	d1f5      	bne.n	800a8d0 <__s2b+0x4c>
 800a8e4:	f1a5 0408 	sub.w	r4, r5, #8
 800a8e8:	444c      	add	r4, r9
 800a8ea:	1b2d      	subs	r5, r5, r4
 800a8ec:	1963      	adds	r3, r4, r5
 800a8ee:	42bb      	cmp	r3, r7
 800a8f0:	db04      	blt.n	800a8fc <__s2b+0x78>
 800a8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f6:	340a      	adds	r4, #10
 800a8f8:	2509      	movs	r5, #9
 800a8fa:	e7f6      	b.n	800a8ea <__s2b+0x66>
 800a8fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a900:	4601      	mov	r1, r0
 800a902:	3b30      	subs	r3, #48	; 0x30
 800a904:	220a      	movs	r2, #10
 800a906:	4630      	mov	r0, r6
 800a908:	f7ff ff76 	bl	800a7f8 <__multadd>
 800a90c:	e7ee      	b.n	800a8ec <__s2b+0x68>
 800a90e:	bf00      	nop
 800a910:	0800da17 	.word	0x0800da17
 800a914:	0800da28 	.word	0x0800da28

0800a918 <__hi0bits>:
 800a918:	0c03      	lsrs	r3, r0, #16
 800a91a:	041b      	lsls	r3, r3, #16
 800a91c:	b9d3      	cbnz	r3, 800a954 <__hi0bits+0x3c>
 800a91e:	0400      	lsls	r0, r0, #16
 800a920:	2310      	movs	r3, #16
 800a922:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a926:	bf04      	itt	eq
 800a928:	0200      	lsleq	r0, r0, #8
 800a92a:	3308      	addeq	r3, #8
 800a92c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a930:	bf04      	itt	eq
 800a932:	0100      	lsleq	r0, r0, #4
 800a934:	3304      	addeq	r3, #4
 800a936:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a93a:	bf04      	itt	eq
 800a93c:	0080      	lsleq	r0, r0, #2
 800a93e:	3302      	addeq	r3, #2
 800a940:	2800      	cmp	r0, #0
 800a942:	db05      	blt.n	800a950 <__hi0bits+0x38>
 800a944:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a948:	f103 0301 	add.w	r3, r3, #1
 800a94c:	bf08      	it	eq
 800a94e:	2320      	moveq	r3, #32
 800a950:	4618      	mov	r0, r3
 800a952:	4770      	bx	lr
 800a954:	2300      	movs	r3, #0
 800a956:	e7e4      	b.n	800a922 <__hi0bits+0xa>

0800a958 <__lo0bits>:
 800a958:	6803      	ldr	r3, [r0, #0]
 800a95a:	f013 0207 	ands.w	r2, r3, #7
 800a95e:	d00c      	beq.n	800a97a <__lo0bits+0x22>
 800a960:	07d9      	lsls	r1, r3, #31
 800a962:	d422      	bmi.n	800a9aa <__lo0bits+0x52>
 800a964:	079a      	lsls	r2, r3, #30
 800a966:	bf49      	itett	mi
 800a968:	085b      	lsrmi	r3, r3, #1
 800a96a:	089b      	lsrpl	r3, r3, #2
 800a96c:	6003      	strmi	r3, [r0, #0]
 800a96e:	2201      	movmi	r2, #1
 800a970:	bf5c      	itt	pl
 800a972:	6003      	strpl	r3, [r0, #0]
 800a974:	2202      	movpl	r2, #2
 800a976:	4610      	mov	r0, r2
 800a978:	4770      	bx	lr
 800a97a:	b299      	uxth	r1, r3
 800a97c:	b909      	cbnz	r1, 800a982 <__lo0bits+0x2a>
 800a97e:	0c1b      	lsrs	r3, r3, #16
 800a980:	2210      	movs	r2, #16
 800a982:	b2d9      	uxtb	r1, r3
 800a984:	b909      	cbnz	r1, 800a98a <__lo0bits+0x32>
 800a986:	3208      	adds	r2, #8
 800a988:	0a1b      	lsrs	r3, r3, #8
 800a98a:	0719      	lsls	r1, r3, #28
 800a98c:	bf04      	itt	eq
 800a98e:	091b      	lsreq	r3, r3, #4
 800a990:	3204      	addeq	r2, #4
 800a992:	0799      	lsls	r1, r3, #30
 800a994:	bf04      	itt	eq
 800a996:	089b      	lsreq	r3, r3, #2
 800a998:	3202      	addeq	r2, #2
 800a99a:	07d9      	lsls	r1, r3, #31
 800a99c:	d403      	bmi.n	800a9a6 <__lo0bits+0x4e>
 800a99e:	085b      	lsrs	r3, r3, #1
 800a9a0:	f102 0201 	add.w	r2, r2, #1
 800a9a4:	d003      	beq.n	800a9ae <__lo0bits+0x56>
 800a9a6:	6003      	str	r3, [r0, #0]
 800a9a8:	e7e5      	b.n	800a976 <__lo0bits+0x1e>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	e7e3      	b.n	800a976 <__lo0bits+0x1e>
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	e7e1      	b.n	800a976 <__lo0bits+0x1e>
	...

0800a9b4 <__i2b>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	f7ff febb 	bl	800a734 <_Balloc>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	b928      	cbnz	r0, 800a9ce <__i2b+0x1a>
 800a9c2:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <__i2b+0x24>)
 800a9c4:	4805      	ldr	r0, [pc, #20]	; (800a9dc <__i2b+0x28>)
 800a9c6:	f240 1145 	movw	r1, #325	; 0x145
 800a9ca:	f002 f99d 	bl	800cd08 <__assert_func>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	6144      	str	r4, [r0, #20]
 800a9d2:	6103      	str	r3, [r0, #16]
 800a9d4:	bd10      	pop	{r4, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800da17 	.word	0x0800da17
 800a9dc:	0800da28 	.word	0x0800da28

0800a9e0 <__multiply>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	4691      	mov	r9, r2
 800a9e6:	690a      	ldr	r2, [r1, #16]
 800a9e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	bfb8      	it	lt
 800a9f0:	460b      	movlt	r3, r1
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	bfbc      	itt	lt
 800a9f6:	464c      	movlt	r4, r9
 800a9f8:	4699      	movlt	r9, r3
 800a9fa:	6927      	ldr	r7, [r4, #16]
 800a9fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa00:	68a3      	ldr	r3, [r4, #8]
 800aa02:	6861      	ldr	r1, [r4, #4]
 800aa04:	eb07 060a 	add.w	r6, r7, sl
 800aa08:	42b3      	cmp	r3, r6
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	bfb8      	it	lt
 800aa0e:	3101      	addlt	r1, #1
 800aa10:	f7ff fe90 	bl	800a734 <_Balloc>
 800aa14:	b930      	cbnz	r0, 800aa24 <__multiply+0x44>
 800aa16:	4602      	mov	r2, r0
 800aa18:	4b44      	ldr	r3, [pc, #272]	; (800ab2c <__multiply+0x14c>)
 800aa1a:	4845      	ldr	r0, [pc, #276]	; (800ab30 <__multiply+0x150>)
 800aa1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa20:	f002 f972 	bl	800cd08 <__assert_func>
 800aa24:	f100 0514 	add.w	r5, r0, #20
 800aa28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	2200      	movs	r2, #0
 800aa30:	4543      	cmp	r3, r8
 800aa32:	d321      	bcc.n	800aa78 <__multiply+0x98>
 800aa34:	f104 0314 	add.w	r3, r4, #20
 800aa38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa3c:	f109 0314 	add.w	r3, r9, #20
 800aa40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa44:	9202      	str	r2, [sp, #8]
 800aa46:	1b3a      	subs	r2, r7, r4
 800aa48:	3a15      	subs	r2, #21
 800aa4a:	f022 0203 	bic.w	r2, r2, #3
 800aa4e:	3204      	adds	r2, #4
 800aa50:	f104 0115 	add.w	r1, r4, #21
 800aa54:	428f      	cmp	r7, r1
 800aa56:	bf38      	it	cc
 800aa58:	2204      	movcc	r2, #4
 800aa5a:	9201      	str	r2, [sp, #4]
 800aa5c:	9a02      	ldr	r2, [sp, #8]
 800aa5e:	9303      	str	r3, [sp, #12]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d80c      	bhi.n	800aa7e <__multiply+0x9e>
 800aa64:	2e00      	cmp	r6, #0
 800aa66:	dd03      	ble.n	800aa70 <__multiply+0x90>
 800aa68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d05b      	beq.n	800ab28 <__multiply+0x148>
 800aa70:	6106      	str	r6, [r0, #16]
 800aa72:	b005      	add	sp, #20
 800aa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa78:	f843 2b04 	str.w	r2, [r3], #4
 800aa7c:	e7d8      	b.n	800aa30 <__multiply+0x50>
 800aa7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa82:	f1ba 0f00 	cmp.w	sl, #0
 800aa86:	d024      	beq.n	800aad2 <__multiply+0xf2>
 800aa88:	f104 0e14 	add.w	lr, r4, #20
 800aa8c:	46a9      	mov	r9, r5
 800aa8e:	f04f 0c00 	mov.w	ip, #0
 800aa92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa96:	f8d9 1000 	ldr.w	r1, [r9]
 800aa9a:	fa1f fb82 	uxth.w	fp, r2
 800aa9e:	b289      	uxth	r1, r1
 800aaa0:	fb0a 110b 	mla	r1, sl, fp, r1
 800aaa4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aaa8:	f8d9 2000 	ldr.w	r2, [r9]
 800aaac:	4461      	add	r1, ip
 800aaae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aab2:	fb0a c20b 	mla	r2, sl, fp, ip
 800aab6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aaba:	b289      	uxth	r1, r1
 800aabc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aac0:	4577      	cmp	r7, lr
 800aac2:	f849 1b04 	str.w	r1, [r9], #4
 800aac6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaca:	d8e2      	bhi.n	800aa92 <__multiply+0xb2>
 800aacc:	9a01      	ldr	r2, [sp, #4]
 800aace:	f845 c002 	str.w	ip, [r5, r2]
 800aad2:	9a03      	ldr	r2, [sp, #12]
 800aad4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aad8:	3304      	adds	r3, #4
 800aada:	f1b9 0f00 	cmp.w	r9, #0
 800aade:	d021      	beq.n	800ab24 <__multiply+0x144>
 800aae0:	6829      	ldr	r1, [r5, #0]
 800aae2:	f104 0c14 	add.w	ip, r4, #20
 800aae6:	46ae      	mov	lr, r5
 800aae8:	f04f 0a00 	mov.w	sl, #0
 800aaec:	f8bc b000 	ldrh.w	fp, [ip]
 800aaf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aaf4:	fb09 220b 	mla	r2, r9, fp, r2
 800aaf8:	4452      	add	r2, sl
 800aafa:	b289      	uxth	r1, r1
 800aafc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab00:	f84e 1b04 	str.w	r1, [lr], #4
 800ab04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab0c:	f8be 1000 	ldrh.w	r1, [lr]
 800ab10:	fb09 110a 	mla	r1, r9, sl, r1
 800ab14:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab18:	4567      	cmp	r7, ip
 800ab1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab1e:	d8e5      	bhi.n	800aaec <__multiply+0x10c>
 800ab20:	9a01      	ldr	r2, [sp, #4]
 800ab22:	50a9      	str	r1, [r5, r2]
 800ab24:	3504      	adds	r5, #4
 800ab26:	e799      	b.n	800aa5c <__multiply+0x7c>
 800ab28:	3e01      	subs	r6, #1
 800ab2a:	e79b      	b.n	800aa64 <__multiply+0x84>
 800ab2c:	0800da17 	.word	0x0800da17
 800ab30:	0800da28 	.word	0x0800da28

0800ab34 <__pow5mult>:
 800ab34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab38:	4615      	mov	r5, r2
 800ab3a:	f012 0203 	ands.w	r2, r2, #3
 800ab3e:	4606      	mov	r6, r0
 800ab40:	460f      	mov	r7, r1
 800ab42:	d007      	beq.n	800ab54 <__pow5mult+0x20>
 800ab44:	4c25      	ldr	r4, [pc, #148]	; (800abdc <__pow5mult+0xa8>)
 800ab46:	3a01      	subs	r2, #1
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab4e:	f7ff fe53 	bl	800a7f8 <__multadd>
 800ab52:	4607      	mov	r7, r0
 800ab54:	10ad      	asrs	r5, r5, #2
 800ab56:	d03d      	beq.n	800abd4 <__pow5mult+0xa0>
 800ab58:	69f4      	ldr	r4, [r6, #28]
 800ab5a:	b97c      	cbnz	r4, 800ab7c <__pow5mult+0x48>
 800ab5c:	2010      	movs	r0, #16
 800ab5e:	f7ff fd35 	bl	800a5cc <malloc>
 800ab62:	4602      	mov	r2, r0
 800ab64:	61f0      	str	r0, [r6, #28]
 800ab66:	b928      	cbnz	r0, 800ab74 <__pow5mult+0x40>
 800ab68:	4b1d      	ldr	r3, [pc, #116]	; (800abe0 <__pow5mult+0xac>)
 800ab6a:	481e      	ldr	r0, [pc, #120]	; (800abe4 <__pow5mult+0xb0>)
 800ab6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab70:	f002 f8ca 	bl	800cd08 <__assert_func>
 800ab74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab78:	6004      	str	r4, [r0, #0]
 800ab7a:	60c4      	str	r4, [r0, #12]
 800ab7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab84:	b94c      	cbnz	r4, 800ab9a <__pow5mult+0x66>
 800ab86:	f240 2171 	movw	r1, #625	; 0x271
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff ff12 	bl	800a9b4 <__i2b>
 800ab90:	2300      	movs	r3, #0
 800ab92:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab96:	4604      	mov	r4, r0
 800ab98:	6003      	str	r3, [r0, #0]
 800ab9a:	f04f 0900 	mov.w	r9, #0
 800ab9e:	07eb      	lsls	r3, r5, #31
 800aba0:	d50a      	bpl.n	800abb8 <__pow5mult+0x84>
 800aba2:	4639      	mov	r1, r7
 800aba4:	4622      	mov	r2, r4
 800aba6:	4630      	mov	r0, r6
 800aba8:	f7ff ff1a 	bl	800a9e0 <__multiply>
 800abac:	4639      	mov	r1, r7
 800abae:	4680      	mov	r8, r0
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7ff fdff 	bl	800a7b4 <_Bfree>
 800abb6:	4647      	mov	r7, r8
 800abb8:	106d      	asrs	r5, r5, #1
 800abba:	d00b      	beq.n	800abd4 <__pow5mult+0xa0>
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	b938      	cbnz	r0, 800abd0 <__pow5mult+0x9c>
 800abc0:	4622      	mov	r2, r4
 800abc2:	4621      	mov	r1, r4
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff ff0b 	bl	800a9e0 <__multiply>
 800abca:	6020      	str	r0, [r4, #0]
 800abcc:	f8c0 9000 	str.w	r9, [r0]
 800abd0:	4604      	mov	r4, r0
 800abd2:	e7e4      	b.n	800ab9e <__pow5mult+0x6a>
 800abd4:	4638      	mov	r0, r7
 800abd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abda:	bf00      	nop
 800abdc:	0800db78 	.word	0x0800db78
 800abe0:	0800d9a8 	.word	0x0800d9a8
 800abe4:	0800da28 	.word	0x0800da28

0800abe8 <__lshift>:
 800abe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abec:	460c      	mov	r4, r1
 800abee:	6849      	ldr	r1, [r1, #4]
 800abf0:	6923      	ldr	r3, [r4, #16]
 800abf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	4607      	mov	r7, r0
 800abfa:	4691      	mov	r9, r2
 800abfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac00:	f108 0601 	add.w	r6, r8, #1
 800ac04:	42b3      	cmp	r3, r6
 800ac06:	db0b      	blt.n	800ac20 <__lshift+0x38>
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7ff fd93 	bl	800a734 <_Balloc>
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b948      	cbnz	r0, 800ac26 <__lshift+0x3e>
 800ac12:	4602      	mov	r2, r0
 800ac14:	4b28      	ldr	r3, [pc, #160]	; (800acb8 <__lshift+0xd0>)
 800ac16:	4829      	ldr	r0, [pc, #164]	; (800acbc <__lshift+0xd4>)
 800ac18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac1c:	f002 f874 	bl	800cd08 <__assert_func>
 800ac20:	3101      	adds	r1, #1
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	e7ee      	b.n	800ac04 <__lshift+0x1c>
 800ac26:	2300      	movs	r3, #0
 800ac28:	f100 0114 	add.w	r1, r0, #20
 800ac2c:	f100 0210 	add.w	r2, r0, #16
 800ac30:	4618      	mov	r0, r3
 800ac32:	4553      	cmp	r3, sl
 800ac34:	db33      	blt.n	800ac9e <__lshift+0xb6>
 800ac36:	6920      	ldr	r0, [r4, #16]
 800ac38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac3c:	f104 0314 	add.w	r3, r4, #20
 800ac40:	f019 091f 	ands.w	r9, r9, #31
 800ac44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac4c:	d02b      	beq.n	800aca6 <__lshift+0xbe>
 800ac4e:	f1c9 0e20 	rsb	lr, r9, #32
 800ac52:	468a      	mov	sl, r1
 800ac54:	2200      	movs	r2, #0
 800ac56:	6818      	ldr	r0, [r3, #0]
 800ac58:	fa00 f009 	lsl.w	r0, r0, r9
 800ac5c:	4310      	orrs	r0, r2
 800ac5e:	f84a 0b04 	str.w	r0, [sl], #4
 800ac62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac66:	459c      	cmp	ip, r3
 800ac68:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac6c:	d8f3      	bhi.n	800ac56 <__lshift+0x6e>
 800ac6e:	ebac 0304 	sub.w	r3, ip, r4
 800ac72:	3b15      	subs	r3, #21
 800ac74:	f023 0303 	bic.w	r3, r3, #3
 800ac78:	3304      	adds	r3, #4
 800ac7a:	f104 0015 	add.w	r0, r4, #21
 800ac7e:	4584      	cmp	ip, r0
 800ac80:	bf38      	it	cc
 800ac82:	2304      	movcc	r3, #4
 800ac84:	50ca      	str	r2, [r1, r3]
 800ac86:	b10a      	cbz	r2, 800ac8c <__lshift+0xa4>
 800ac88:	f108 0602 	add.w	r6, r8, #2
 800ac8c:	3e01      	subs	r6, #1
 800ac8e:	4638      	mov	r0, r7
 800ac90:	612e      	str	r6, [r5, #16]
 800ac92:	4621      	mov	r1, r4
 800ac94:	f7ff fd8e 	bl	800a7b4 <_Bfree>
 800ac98:	4628      	mov	r0, r5
 800ac9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800aca2:	3301      	adds	r3, #1
 800aca4:	e7c5      	b.n	800ac32 <__lshift+0x4a>
 800aca6:	3904      	subs	r1, #4
 800aca8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acac:	f841 2f04 	str.w	r2, [r1, #4]!
 800acb0:	459c      	cmp	ip, r3
 800acb2:	d8f9      	bhi.n	800aca8 <__lshift+0xc0>
 800acb4:	e7ea      	b.n	800ac8c <__lshift+0xa4>
 800acb6:	bf00      	nop
 800acb8:	0800da17 	.word	0x0800da17
 800acbc:	0800da28 	.word	0x0800da28

0800acc0 <__mcmp>:
 800acc0:	b530      	push	{r4, r5, lr}
 800acc2:	6902      	ldr	r2, [r0, #16]
 800acc4:	690c      	ldr	r4, [r1, #16]
 800acc6:	1b12      	subs	r2, r2, r4
 800acc8:	d10e      	bne.n	800ace8 <__mcmp+0x28>
 800acca:	f100 0314 	add.w	r3, r0, #20
 800acce:	3114      	adds	r1, #20
 800acd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800acd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ace0:	42a5      	cmp	r5, r4
 800ace2:	d003      	beq.n	800acec <__mcmp+0x2c>
 800ace4:	d305      	bcc.n	800acf2 <__mcmp+0x32>
 800ace6:	2201      	movs	r2, #1
 800ace8:	4610      	mov	r0, r2
 800acea:	bd30      	pop	{r4, r5, pc}
 800acec:	4283      	cmp	r3, r0
 800acee:	d3f3      	bcc.n	800acd8 <__mcmp+0x18>
 800acf0:	e7fa      	b.n	800ace8 <__mcmp+0x28>
 800acf2:	f04f 32ff 	mov.w	r2, #4294967295
 800acf6:	e7f7      	b.n	800ace8 <__mcmp+0x28>

0800acf8 <__mdiff>:
 800acf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	460c      	mov	r4, r1
 800acfe:	4606      	mov	r6, r0
 800ad00:	4611      	mov	r1, r2
 800ad02:	4620      	mov	r0, r4
 800ad04:	4690      	mov	r8, r2
 800ad06:	f7ff ffdb 	bl	800acc0 <__mcmp>
 800ad0a:	1e05      	subs	r5, r0, #0
 800ad0c:	d110      	bne.n	800ad30 <__mdiff+0x38>
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4630      	mov	r0, r6
 800ad12:	f7ff fd0f 	bl	800a734 <_Balloc>
 800ad16:	b930      	cbnz	r0, 800ad26 <__mdiff+0x2e>
 800ad18:	4b3a      	ldr	r3, [pc, #232]	; (800ae04 <__mdiff+0x10c>)
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	f240 2137 	movw	r1, #567	; 0x237
 800ad20:	4839      	ldr	r0, [pc, #228]	; (800ae08 <__mdiff+0x110>)
 800ad22:	f001 fff1 	bl	800cd08 <__assert_func>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad30:	bfa4      	itt	ge
 800ad32:	4643      	movge	r3, r8
 800ad34:	46a0      	movge	r8, r4
 800ad36:	4630      	mov	r0, r6
 800ad38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad3c:	bfa6      	itte	ge
 800ad3e:	461c      	movge	r4, r3
 800ad40:	2500      	movge	r5, #0
 800ad42:	2501      	movlt	r5, #1
 800ad44:	f7ff fcf6 	bl	800a734 <_Balloc>
 800ad48:	b920      	cbnz	r0, 800ad54 <__mdiff+0x5c>
 800ad4a:	4b2e      	ldr	r3, [pc, #184]	; (800ae04 <__mdiff+0x10c>)
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	f240 2145 	movw	r1, #581	; 0x245
 800ad52:	e7e5      	b.n	800ad20 <__mdiff+0x28>
 800ad54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad58:	6926      	ldr	r6, [r4, #16]
 800ad5a:	60c5      	str	r5, [r0, #12]
 800ad5c:	f104 0914 	add.w	r9, r4, #20
 800ad60:	f108 0514 	add.w	r5, r8, #20
 800ad64:	f100 0e14 	add.w	lr, r0, #20
 800ad68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad70:	f108 0210 	add.w	r2, r8, #16
 800ad74:	46f2      	mov	sl, lr
 800ad76:	2100      	movs	r1, #0
 800ad78:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad80:	fa11 f88b 	uxtah	r8, r1, fp
 800ad84:	b299      	uxth	r1, r3
 800ad86:	0c1b      	lsrs	r3, r3, #16
 800ad88:	eba8 0801 	sub.w	r8, r8, r1
 800ad8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad94:	fa1f f888 	uxth.w	r8, r8
 800ad98:	1419      	asrs	r1, r3, #16
 800ad9a:	454e      	cmp	r6, r9
 800ad9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ada0:	f84a 3b04 	str.w	r3, [sl], #4
 800ada4:	d8e8      	bhi.n	800ad78 <__mdiff+0x80>
 800ada6:	1b33      	subs	r3, r6, r4
 800ada8:	3b15      	subs	r3, #21
 800adaa:	f023 0303 	bic.w	r3, r3, #3
 800adae:	3304      	adds	r3, #4
 800adb0:	3415      	adds	r4, #21
 800adb2:	42a6      	cmp	r6, r4
 800adb4:	bf38      	it	cc
 800adb6:	2304      	movcc	r3, #4
 800adb8:	441d      	add	r5, r3
 800adba:	4473      	add	r3, lr
 800adbc:	469e      	mov	lr, r3
 800adbe:	462e      	mov	r6, r5
 800adc0:	4566      	cmp	r6, ip
 800adc2:	d30e      	bcc.n	800ade2 <__mdiff+0xea>
 800adc4:	f10c 0203 	add.w	r2, ip, #3
 800adc8:	1b52      	subs	r2, r2, r5
 800adca:	f022 0203 	bic.w	r2, r2, #3
 800adce:	3d03      	subs	r5, #3
 800add0:	45ac      	cmp	ip, r5
 800add2:	bf38      	it	cc
 800add4:	2200      	movcc	r2, #0
 800add6:	4413      	add	r3, r2
 800add8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800addc:	b17a      	cbz	r2, 800adfe <__mdiff+0x106>
 800adde:	6107      	str	r7, [r0, #16]
 800ade0:	e7a4      	b.n	800ad2c <__mdiff+0x34>
 800ade2:	f856 8b04 	ldr.w	r8, [r6], #4
 800ade6:	fa11 f288 	uxtah	r2, r1, r8
 800adea:	1414      	asrs	r4, r2, #16
 800adec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800adf0:	b292      	uxth	r2, r2
 800adf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800adf6:	f84e 2b04 	str.w	r2, [lr], #4
 800adfa:	1421      	asrs	r1, r4, #16
 800adfc:	e7e0      	b.n	800adc0 <__mdiff+0xc8>
 800adfe:	3f01      	subs	r7, #1
 800ae00:	e7ea      	b.n	800add8 <__mdiff+0xe0>
 800ae02:	bf00      	nop
 800ae04:	0800da17 	.word	0x0800da17
 800ae08:	0800da28 	.word	0x0800da28

0800ae0c <__ulp>:
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	ed8d 0b00 	vstr	d0, [sp]
 800ae12:	9a01      	ldr	r2, [sp, #4]
 800ae14:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <__ulp+0x48>)
 800ae16:	4013      	ands	r3, r2
 800ae18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dc08      	bgt.n	800ae32 <__ulp+0x26>
 800ae20:	425b      	negs	r3, r3
 800ae22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ae26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae2a:	da04      	bge.n	800ae36 <__ulp+0x2a>
 800ae2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae30:	4113      	asrs	r3, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	e008      	b.n	800ae48 <__ulp+0x3c>
 800ae36:	f1a2 0314 	sub.w	r3, r2, #20
 800ae3a:	2b1e      	cmp	r3, #30
 800ae3c:	bfda      	itte	le
 800ae3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ae42:	40da      	lsrle	r2, r3
 800ae44:	2201      	movgt	r2, #1
 800ae46:	2300      	movs	r3, #0
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	ec41 0b10 	vmov	d0, r0, r1
 800ae50:	b002      	add	sp, #8
 800ae52:	4770      	bx	lr
 800ae54:	7ff00000 	.word	0x7ff00000

0800ae58 <__b2d>:
 800ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5c:	6906      	ldr	r6, [r0, #16]
 800ae5e:	f100 0814 	add.w	r8, r0, #20
 800ae62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ae66:	1f37      	subs	r7, r6, #4
 800ae68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7ff fd53 	bl	800a918 <__hi0bits>
 800ae72:	f1c0 0320 	rsb	r3, r0, #32
 800ae76:	280a      	cmp	r0, #10
 800ae78:	600b      	str	r3, [r1, #0]
 800ae7a:	491b      	ldr	r1, [pc, #108]	; (800aee8 <__b2d+0x90>)
 800ae7c:	dc15      	bgt.n	800aeaa <__b2d+0x52>
 800ae7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ae82:	fa22 f30c 	lsr.w	r3, r2, ip
 800ae86:	45b8      	cmp	r8, r7
 800ae88:	ea43 0501 	orr.w	r5, r3, r1
 800ae8c:	bf34      	ite	cc
 800ae8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae92:	2300      	movcs	r3, #0
 800ae94:	3015      	adds	r0, #21
 800ae96:	fa02 f000 	lsl.w	r0, r2, r0
 800ae9a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ae9e:	4303      	orrs	r3, r0
 800aea0:	461c      	mov	r4, r3
 800aea2:	ec45 4b10 	vmov	d0, r4, r5
 800aea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeaa:	45b8      	cmp	r8, r7
 800aeac:	bf3a      	itte	cc
 800aeae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aeb2:	f1a6 0708 	subcc.w	r7, r6, #8
 800aeb6:	2300      	movcs	r3, #0
 800aeb8:	380b      	subs	r0, #11
 800aeba:	d012      	beq.n	800aee2 <__b2d+0x8a>
 800aebc:	f1c0 0120 	rsb	r1, r0, #32
 800aec0:	fa23 f401 	lsr.w	r4, r3, r1
 800aec4:	4082      	lsls	r2, r0
 800aec6:	4322      	orrs	r2, r4
 800aec8:	4547      	cmp	r7, r8
 800aeca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aece:	bf8c      	ite	hi
 800aed0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aed4:	2200      	movls	r2, #0
 800aed6:	4083      	lsls	r3, r0
 800aed8:	40ca      	lsrs	r2, r1
 800aeda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aede:	4313      	orrs	r3, r2
 800aee0:	e7de      	b.n	800aea0 <__b2d+0x48>
 800aee2:	ea42 0501 	orr.w	r5, r2, r1
 800aee6:	e7db      	b.n	800aea0 <__b2d+0x48>
 800aee8:	3ff00000 	.word	0x3ff00000

0800aeec <__d2b>:
 800aeec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aef0:	460f      	mov	r7, r1
 800aef2:	2101      	movs	r1, #1
 800aef4:	ec59 8b10 	vmov	r8, r9, d0
 800aef8:	4616      	mov	r6, r2
 800aefa:	f7ff fc1b 	bl	800a734 <_Balloc>
 800aefe:	4604      	mov	r4, r0
 800af00:	b930      	cbnz	r0, 800af10 <__d2b+0x24>
 800af02:	4602      	mov	r2, r0
 800af04:	4b24      	ldr	r3, [pc, #144]	; (800af98 <__d2b+0xac>)
 800af06:	4825      	ldr	r0, [pc, #148]	; (800af9c <__d2b+0xb0>)
 800af08:	f240 310f 	movw	r1, #783	; 0x30f
 800af0c:	f001 fefc 	bl	800cd08 <__assert_func>
 800af10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af18:	bb2d      	cbnz	r5, 800af66 <__d2b+0x7a>
 800af1a:	9301      	str	r3, [sp, #4]
 800af1c:	f1b8 0300 	subs.w	r3, r8, #0
 800af20:	d026      	beq.n	800af70 <__d2b+0x84>
 800af22:	4668      	mov	r0, sp
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	f7ff fd17 	bl	800a958 <__lo0bits>
 800af2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af2e:	b1e8      	cbz	r0, 800af6c <__d2b+0x80>
 800af30:	f1c0 0320 	rsb	r3, r0, #32
 800af34:	fa02 f303 	lsl.w	r3, r2, r3
 800af38:	430b      	orrs	r3, r1
 800af3a:	40c2      	lsrs	r2, r0
 800af3c:	6163      	str	r3, [r4, #20]
 800af3e:	9201      	str	r2, [sp, #4]
 800af40:	9b01      	ldr	r3, [sp, #4]
 800af42:	61a3      	str	r3, [r4, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	bf14      	ite	ne
 800af48:	2202      	movne	r2, #2
 800af4a:	2201      	moveq	r2, #1
 800af4c:	6122      	str	r2, [r4, #16]
 800af4e:	b1bd      	cbz	r5, 800af80 <__d2b+0x94>
 800af50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af54:	4405      	add	r5, r0
 800af56:	603d      	str	r5, [r7, #0]
 800af58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af5c:	6030      	str	r0, [r6, #0]
 800af5e:	4620      	mov	r0, r4
 800af60:	b003      	add	sp, #12
 800af62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af6a:	e7d6      	b.n	800af1a <__d2b+0x2e>
 800af6c:	6161      	str	r1, [r4, #20]
 800af6e:	e7e7      	b.n	800af40 <__d2b+0x54>
 800af70:	a801      	add	r0, sp, #4
 800af72:	f7ff fcf1 	bl	800a958 <__lo0bits>
 800af76:	9b01      	ldr	r3, [sp, #4]
 800af78:	6163      	str	r3, [r4, #20]
 800af7a:	3020      	adds	r0, #32
 800af7c:	2201      	movs	r2, #1
 800af7e:	e7e5      	b.n	800af4c <__d2b+0x60>
 800af80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af88:	6038      	str	r0, [r7, #0]
 800af8a:	6918      	ldr	r0, [r3, #16]
 800af8c:	f7ff fcc4 	bl	800a918 <__hi0bits>
 800af90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af94:	e7e2      	b.n	800af5c <__d2b+0x70>
 800af96:	bf00      	nop
 800af98:	0800da17 	.word	0x0800da17
 800af9c:	0800da28 	.word	0x0800da28

0800afa0 <__ratio>:
 800afa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	4688      	mov	r8, r1
 800afa6:	4669      	mov	r1, sp
 800afa8:	4681      	mov	r9, r0
 800afaa:	f7ff ff55 	bl	800ae58 <__b2d>
 800afae:	a901      	add	r1, sp, #4
 800afb0:	4640      	mov	r0, r8
 800afb2:	ec55 4b10 	vmov	r4, r5, d0
 800afb6:	f7ff ff4f 	bl	800ae58 <__b2d>
 800afba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800afc2:	eba3 0c02 	sub.w	ip, r3, r2
 800afc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afca:	1a9b      	subs	r3, r3, r2
 800afcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800afd0:	ec51 0b10 	vmov	r0, r1, d0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfd6      	itet	le
 800afd8:	460a      	movle	r2, r1
 800afda:	462a      	movgt	r2, r5
 800afdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afe0:	468b      	mov	fp, r1
 800afe2:	462f      	mov	r7, r5
 800afe4:	bfd4      	ite	le
 800afe6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800afea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800afee:	4620      	mov	r0, r4
 800aff0:	ee10 2a10 	vmov	r2, s0
 800aff4:	465b      	mov	r3, fp
 800aff6:	4639      	mov	r1, r7
 800aff8:	f7f5 fc48 	bl	800088c <__aeabi_ddiv>
 800affc:	ec41 0b10 	vmov	d0, r0, r1
 800b000:	b003      	add	sp, #12
 800b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b006 <__copybits>:
 800b006:	3901      	subs	r1, #1
 800b008:	b570      	push	{r4, r5, r6, lr}
 800b00a:	1149      	asrs	r1, r1, #5
 800b00c:	6914      	ldr	r4, [r2, #16]
 800b00e:	3101      	adds	r1, #1
 800b010:	f102 0314 	add.w	r3, r2, #20
 800b014:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b018:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b01c:	1f05      	subs	r5, r0, #4
 800b01e:	42a3      	cmp	r3, r4
 800b020:	d30c      	bcc.n	800b03c <__copybits+0x36>
 800b022:	1aa3      	subs	r3, r4, r2
 800b024:	3b11      	subs	r3, #17
 800b026:	f023 0303 	bic.w	r3, r3, #3
 800b02a:	3211      	adds	r2, #17
 800b02c:	42a2      	cmp	r2, r4
 800b02e:	bf88      	it	hi
 800b030:	2300      	movhi	r3, #0
 800b032:	4418      	add	r0, r3
 800b034:	2300      	movs	r3, #0
 800b036:	4288      	cmp	r0, r1
 800b038:	d305      	bcc.n	800b046 <__copybits+0x40>
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b040:	f845 6f04 	str.w	r6, [r5, #4]!
 800b044:	e7eb      	b.n	800b01e <__copybits+0x18>
 800b046:	f840 3b04 	str.w	r3, [r0], #4
 800b04a:	e7f4      	b.n	800b036 <__copybits+0x30>

0800b04c <__any_on>:
 800b04c:	f100 0214 	add.w	r2, r0, #20
 800b050:	6900      	ldr	r0, [r0, #16]
 800b052:	114b      	asrs	r3, r1, #5
 800b054:	4298      	cmp	r0, r3
 800b056:	b510      	push	{r4, lr}
 800b058:	db11      	blt.n	800b07e <__any_on+0x32>
 800b05a:	dd0a      	ble.n	800b072 <__any_on+0x26>
 800b05c:	f011 011f 	ands.w	r1, r1, #31
 800b060:	d007      	beq.n	800b072 <__any_on+0x26>
 800b062:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b066:	fa24 f001 	lsr.w	r0, r4, r1
 800b06a:	fa00 f101 	lsl.w	r1, r0, r1
 800b06e:	428c      	cmp	r4, r1
 800b070:	d10b      	bne.n	800b08a <__any_on+0x3e>
 800b072:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b076:	4293      	cmp	r3, r2
 800b078:	d803      	bhi.n	800b082 <__any_on+0x36>
 800b07a:	2000      	movs	r0, #0
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	4603      	mov	r3, r0
 800b080:	e7f7      	b.n	800b072 <__any_on+0x26>
 800b082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b086:	2900      	cmp	r1, #0
 800b088:	d0f5      	beq.n	800b076 <__any_on+0x2a>
 800b08a:	2001      	movs	r0, #1
 800b08c:	e7f6      	b.n	800b07c <__any_on+0x30>

0800b08e <sulp>:
 800b08e:	b570      	push	{r4, r5, r6, lr}
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	ec45 4b10 	vmov	d0, r4, r5
 800b098:	4616      	mov	r6, r2
 800b09a:	f7ff feb7 	bl	800ae0c <__ulp>
 800b09e:	ec51 0b10 	vmov	r0, r1, d0
 800b0a2:	b17e      	cbz	r6, 800b0c4 <sulp+0x36>
 800b0a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dd09      	ble.n	800b0c4 <sulp+0x36>
 800b0b0:	051b      	lsls	r3, r3, #20
 800b0b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b0b6:	2400      	movs	r4, #0
 800b0b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b0bc:	4622      	mov	r2, r4
 800b0be:	462b      	mov	r3, r5
 800b0c0:	f7f5 faba 	bl	8000638 <__aeabi_dmul>
 800b0c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0c8 <_strtod_l>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	ed2d 8b02 	vpush	{d8}
 800b0d0:	b09b      	sub	sp, #108	; 0x6c
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	9213      	str	r2, [sp, #76]	; 0x4c
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	9216      	str	r2, [sp, #88]	; 0x58
 800b0da:	460d      	mov	r5, r1
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	f04f 0900 	mov.w	r9, #0
 800b0e4:	460a      	mov	r2, r1
 800b0e6:	9215      	str	r2, [sp, #84]	; 0x54
 800b0e8:	7811      	ldrb	r1, [r2, #0]
 800b0ea:	292b      	cmp	r1, #43	; 0x2b
 800b0ec:	d04c      	beq.n	800b188 <_strtod_l+0xc0>
 800b0ee:	d83a      	bhi.n	800b166 <_strtod_l+0x9e>
 800b0f0:	290d      	cmp	r1, #13
 800b0f2:	d834      	bhi.n	800b15e <_strtod_l+0x96>
 800b0f4:	2908      	cmp	r1, #8
 800b0f6:	d834      	bhi.n	800b162 <_strtod_l+0x9a>
 800b0f8:	2900      	cmp	r1, #0
 800b0fa:	d03d      	beq.n	800b178 <_strtod_l+0xb0>
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	920a      	str	r2, [sp, #40]	; 0x28
 800b100:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b102:	7832      	ldrb	r2, [r6, #0]
 800b104:	2a30      	cmp	r2, #48	; 0x30
 800b106:	f040 80b4 	bne.w	800b272 <_strtod_l+0x1aa>
 800b10a:	7872      	ldrb	r2, [r6, #1]
 800b10c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b110:	2a58      	cmp	r2, #88	; 0x58
 800b112:	d170      	bne.n	800b1f6 <_strtod_l+0x12e>
 800b114:	9302      	str	r3, [sp, #8]
 800b116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	ab16      	add	r3, sp, #88	; 0x58
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	4a8e      	ldr	r2, [pc, #568]	; (800b358 <_strtod_l+0x290>)
 800b120:	ab17      	add	r3, sp, #92	; 0x5c
 800b122:	a915      	add	r1, sp, #84	; 0x54
 800b124:	4620      	mov	r0, r4
 800b126:	f001 fe8b 	bl	800ce40 <__gethex>
 800b12a:	f010 070f 	ands.w	r7, r0, #15
 800b12e:	4605      	mov	r5, r0
 800b130:	d005      	beq.n	800b13e <_strtod_l+0x76>
 800b132:	2f06      	cmp	r7, #6
 800b134:	d12a      	bne.n	800b18c <_strtod_l+0xc4>
 800b136:	3601      	adds	r6, #1
 800b138:	2300      	movs	r3, #0
 800b13a:	9615      	str	r6, [sp, #84]	; 0x54
 800b13c:	930a      	str	r3, [sp, #40]	; 0x28
 800b13e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b140:	2b00      	cmp	r3, #0
 800b142:	f040 857f 	bne.w	800bc44 <_strtod_l+0xb7c>
 800b146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b148:	b1db      	cbz	r3, 800b182 <_strtod_l+0xba>
 800b14a:	4642      	mov	r2, r8
 800b14c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b150:	ec43 2b10 	vmov	d0, r2, r3
 800b154:	b01b      	add	sp, #108	; 0x6c
 800b156:	ecbd 8b02 	vpop	{d8}
 800b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15e:	2920      	cmp	r1, #32
 800b160:	d1cc      	bne.n	800b0fc <_strtod_l+0x34>
 800b162:	3201      	adds	r2, #1
 800b164:	e7bf      	b.n	800b0e6 <_strtod_l+0x1e>
 800b166:	292d      	cmp	r1, #45	; 0x2d
 800b168:	d1c8      	bne.n	800b0fc <_strtod_l+0x34>
 800b16a:	2101      	movs	r1, #1
 800b16c:	910a      	str	r1, [sp, #40]	; 0x28
 800b16e:	1c51      	adds	r1, r2, #1
 800b170:	9115      	str	r1, [sp, #84]	; 0x54
 800b172:	7852      	ldrb	r2, [r2, #1]
 800b174:	2a00      	cmp	r2, #0
 800b176:	d1c3      	bne.n	800b100 <_strtod_l+0x38>
 800b178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b17a:	9515      	str	r5, [sp, #84]	; 0x54
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f040 855f 	bne.w	800bc40 <_strtod_l+0xb78>
 800b182:	4642      	mov	r2, r8
 800b184:	464b      	mov	r3, r9
 800b186:	e7e3      	b.n	800b150 <_strtod_l+0x88>
 800b188:	2100      	movs	r1, #0
 800b18a:	e7ef      	b.n	800b16c <_strtod_l+0xa4>
 800b18c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b18e:	b13a      	cbz	r2, 800b1a0 <_strtod_l+0xd8>
 800b190:	2135      	movs	r1, #53	; 0x35
 800b192:	a818      	add	r0, sp, #96	; 0x60
 800b194:	f7ff ff37 	bl	800b006 <__copybits>
 800b198:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b19a:	4620      	mov	r0, r4
 800b19c:	f7ff fb0a 	bl	800a7b4 <_Bfree>
 800b1a0:	3f01      	subs	r7, #1
 800b1a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1a4:	2f04      	cmp	r7, #4
 800b1a6:	d806      	bhi.n	800b1b6 <_strtod_l+0xee>
 800b1a8:	e8df f007 	tbb	[pc, r7]
 800b1ac:	201d0314 	.word	0x201d0314
 800b1b0:	14          	.byte	0x14
 800b1b1:	00          	.byte	0x00
 800b1b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b1b6:	05e9      	lsls	r1, r5, #23
 800b1b8:	bf48      	it	mi
 800b1ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b1be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1c2:	0d1b      	lsrs	r3, r3, #20
 800b1c4:	051b      	lsls	r3, r3, #20
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1b9      	bne.n	800b13e <_strtod_l+0x76>
 800b1ca:	f7fe faf7 	bl	80097bc <__errno>
 800b1ce:	2322      	movs	r3, #34	; 0x22
 800b1d0:	6003      	str	r3, [r0, #0]
 800b1d2:	e7b4      	b.n	800b13e <_strtod_l+0x76>
 800b1d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b1d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b1dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b1e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b1e4:	e7e7      	b.n	800b1b6 <_strtod_l+0xee>
 800b1e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b360 <_strtod_l+0x298>
 800b1ea:	e7e4      	b.n	800b1b6 <_strtod_l+0xee>
 800b1ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b1f0:	f04f 38ff 	mov.w	r8, #4294967295
 800b1f4:	e7df      	b.n	800b1b6 <_strtod_l+0xee>
 800b1f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	9215      	str	r2, [sp, #84]	; 0x54
 800b1fc:	785b      	ldrb	r3, [r3, #1]
 800b1fe:	2b30      	cmp	r3, #48	; 0x30
 800b200:	d0f9      	beq.n	800b1f6 <_strtod_l+0x12e>
 800b202:	2b00      	cmp	r3, #0
 800b204:	d09b      	beq.n	800b13e <_strtod_l+0x76>
 800b206:	2301      	movs	r3, #1
 800b208:	f04f 0a00 	mov.w	sl, #0
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b210:	930b      	str	r3, [sp, #44]	; 0x2c
 800b212:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b216:	46d3      	mov	fp, sl
 800b218:	220a      	movs	r2, #10
 800b21a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b21c:	7806      	ldrb	r6, [r0, #0]
 800b21e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b222:	b2d9      	uxtb	r1, r3
 800b224:	2909      	cmp	r1, #9
 800b226:	d926      	bls.n	800b276 <_strtod_l+0x1ae>
 800b228:	494c      	ldr	r1, [pc, #304]	; (800b35c <_strtod_l+0x294>)
 800b22a:	2201      	movs	r2, #1
 800b22c:	f001 fd1f 	bl	800cc6e <strncmp>
 800b230:	2800      	cmp	r0, #0
 800b232:	d030      	beq.n	800b296 <_strtod_l+0x1ce>
 800b234:	2000      	movs	r0, #0
 800b236:	4632      	mov	r2, r6
 800b238:	9005      	str	r0, [sp, #20]
 800b23a:	465e      	mov	r6, fp
 800b23c:	4603      	mov	r3, r0
 800b23e:	2a65      	cmp	r2, #101	; 0x65
 800b240:	d001      	beq.n	800b246 <_strtod_l+0x17e>
 800b242:	2a45      	cmp	r2, #69	; 0x45
 800b244:	d113      	bne.n	800b26e <_strtod_l+0x1a6>
 800b246:	b91e      	cbnz	r6, 800b250 <_strtod_l+0x188>
 800b248:	9a04      	ldr	r2, [sp, #16]
 800b24a:	4302      	orrs	r2, r0
 800b24c:	d094      	beq.n	800b178 <_strtod_l+0xb0>
 800b24e:	2600      	movs	r6, #0
 800b250:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b252:	1c6a      	adds	r2, r5, #1
 800b254:	9215      	str	r2, [sp, #84]	; 0x54
 800b256:	786a      	ldrb	r2, [r5, #1]
 800b258:	2a2b      	cmp	r2, #43	; 0x2b
 800b25a:	d074      	beq.n	800b346 <_strtod_l+0x27e>
 800b25c:	2a2d      	cmp	r2, #45	; 0x2d
 800b25e:	d078      	beq.n	800b352 <_strtod_l+0x28a>
 800b260:	f04f 0c00 	mov.w	ip, #0
 800b264:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b268:	2909      	cmp	r1, #9
 800b26a:	d97f      	bls.n	800b36c <_strtod_l+0x2a4>
 800b26c:	9515      	str	r5, [sp, #84]	; 0x54
 800b26e:	2700      	movs	r7, #0
 800b270:	e09e      	b.n	800b3b0 <_strtod_l+0x2e8>
 800b272:	2300      	movs	r3, #0
 800b274:	e7c8      	b.n	800b208 <_strtod_l+0x140>
 800b276:	f1bb 0f08 	cmp.w	fp, #8
 800b27a:	bfd8      	it	le
 800b27c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b27e:	f100 0001 	add.w	r0, r0, #1
 800b282:	bfda      	itte	le
 800b284:	fb02 3301 	mlale	r3, r2, r1, r3
 800b288:	9309      	strle	r3, [sp, #36]	; 0x24
 800b28a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b28e:	f10b 0b01 	add.w	fp, fp, #1
 800b292:	9015      	str	r0, [sp, #84]	; 0x54
 800b294:	e7c1      	b.n	800b21a <_strtod_l+0x152>
 800b296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	9215      	str	r2, [sp, #84]	; 0x54
 800b29c:	785a      	ldrb	r2, [r3, #1]
 800b29e:	f1bb 0f00 	cmp.w	fp, #0
 800b2a2:	d037      	beq.n	800b314 <_strtod_l+0x24c>
 800b2a4:	9005      	str	r0, [sp, #20]
 800b2a6:	465e      	mov	r6, fp
 800b2a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b2ac:	2b09      	cmp	r3, #9
 800b2ae:	d912      	bls.n	800b2d6 <_strtod_l+0x20e>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e7c4      	b.n	800b23e <_strtod_l+0x176>
 800b2b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	9215      	str	r2, [sp, #84]	; 0x54
 800b2ba:	785a      	ldrb	r2, [r3, #1]
 800b2bc:	3001      	adds	r0, #1
 800b2be:	2a30      	cmp	r2, #48	; 0x30
 800b2c0:	d0f8      	beq.n	800b2b4 <_strtod_l+0x1ec>
 800b2c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b2c6:	2b08      	cmp	r3, #8
 800b2c8:	f200 84c1 	bhi.w	800bc4e <_strtod_l+0xb86>
 800b2cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2ce:	9005      	str	r0, [sp, #20]
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	3a30      	subs	r2, #48	; 0x30
 800b2d8:	f100 0301 	add.w	r3, r0, #1
 800b2dc:	d014      	beq.n	800b308 <_strtod_l+0x240>
 800b2de:	9905      	ldr	r1, [sp, #20]
 800b2e0:	4419      	add	r1, r3
 800b2e2:	9105      	str	r1, [sp, #20]
 800b2e4:	4633      	mov	r3, r6
 800b2e6:	eb00 0c06 	add.w	ip, r0, r6
 800b2ea:	210a      	movs	r1, #10
 800b2ec:	4563      	cmp	r3, ip
 800b2ee:	d113      	bne.n	800b318 <_strtod_l+0x250>
 800b2f0:	1833      	adds	r3, r6, r0
 800b2f2:	2b08      	cmp	r3, #8
 800b2f4:	f106 0601 	add.w	r6, r6, #1
 800b2f8:	4406      	add	r6, r0
 800b2fa:	dc1a      	bgt.n	800b332 <_strtod_l+0x26a>
 800b2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2fe:	230a      	movs	r3, #10
 800b300:	fb03 2301 	mla	r3, r3, r1, r2
 800b304:	9309      	str	r3, [sp, #36]	; 0x24
 800b306:	2300      	movs	r3, #0
 800b308:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b30a:	1c51      	adds	r1, r2, #1
 800b30c:	9115      	str	r1, [sp, #84]	; 0x54
 800b30e:	7852      	ldrb	r2, [r2, #1]
 800b310:	4618      	mov	r0, r3
 800b312:	e7c9      	b.n	800b2a8 <_strtod_l+0x1e0>
 800b314:	4658      	mov	r0, fp
 800b316:	e7d2      	b.n	800b2be <_strtod_l+0x1f6>
 800b318:	2b08      	cmp	r3, #8
 800b31a:	f103 0301 	add.w	r3, r3, #1
 800b31e:	dc03      	bgt.n	800b328 <_strtod_l+0x260>
 800b320:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b322:	434f      	muls	r7, r1
 800b324:	9709      	str	r7, [sp, #36]	; 0x24
 800b326:	e7e1      	b.n	800b2ec <_strtod_l+0x224>
 800b328:	2b10      	cmp	r3, #16
 800b32a:	bfd8      	it	le
 800b32c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b330:	e7dc      	b.n	800b2ec <_strtod_l+0x224>
 800b332:	2e10      	cmp	r6, #16
 800b334:	bfdc      	itt	le
 800b336:	230a      	movle	r3, #10
 800b338:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b33c:	e7e3      	b.n	800b306 <_strtod_l+0x23e>
 800b33e:	2300      	movs	r3, #0
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	2301      	movs	r3, #1
 800b344:	e780      	b.n	800b248 <_strtod_l+0x180>
 800b346:	f04f 0c00 	mov.w	ip, #0
 800b34a:	1caa      	adds	r2, r5, #2
 800b34c:	9215      	str	r2, [sp, #84]	; 0x54
 800b34e:	78aa      	ldrb	r2, [r5, #2]
 800b350:	e788      	b.n	800b264 <_strtod_l+0x19c>
 800b352:	f04f 0c01 	mov.w	ip, #1
 800b356:	e7f8      	b.n	800b34a <_strtod_l+0x282>
 800b358:	0800db88 	.word	0x0800db88
 800b35c:	0800db84 	.word	0x0800db84
 800b360:	7ff00000 	.word	0x7ff00000
 800b364:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b366:	1c51      	adds	r1, r2, #1
 800b368:	9115      	str	r1, [sp, #84]	; 0x54
 800b36a:	7852      	ldrb	r2, [r2, #1]
 800b36c:	2a30      	cmp	r2, #48	; 0x30
 800b36e:	d0f9      	beq.n	800b364 <_strtod_l+0x29c>
 800b370:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b374:	2908      	cmp	r1, #8
 800b376:	f63f af7a 	bhi.w	800b26e <_strtod_l+0x1a6>
 800b37a:	3a30      	subs	r2, #48	; 0x30
 800b37c:	9208      	str	r2, [sp, #32]
 800b37e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b380:	920c      	str	r2, [sp, #48]	; 0x30
 800b382:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b384:	1c57      	adds	r7, r2, #1
 800b386:	9715      	str	r7, [sp, #84]	; 0x54
 800b388:	7852      	ldrb	r2, [r2, #1]
 800b38a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b38e:	f1be 0f09 	cmp.w	lr, #9
 800b392:	d938      	bls.n	800b406 <_strtod_l+0x33e>
 800b394:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b396:	1a7f      	subs	r7, r7, r1
 800b398:	2f08      	cmp	r7, #8
 800b39a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b39e:	dc03      	bgt.n	800b3a8 <_strtod_l+0x2e0>
 800b3a0:	9908      	ldr	r1, [sp, #32]
 800b3a2:	428f      	cmp	r7, r1
 800b3a4:	bfa8      	it	ge
 800b3a6:	460f      	movge	r7, r1
 800b3a8:	f1bc 0f00 	cmp.w	ip, #0
 800b3ac:	d000      	beq.n	800b3b0 <_strtod_l+0x2e8>
 800b3ae:	427f      	negs	r7, r7
 800b3b0:	2e00      	cmp	r6, #0
 800b3b2:	d14f      	bne.n	800b454 <_strtod_l+0x38c>
 800b3b4:	9904      	ldr	r1, [sp, #16]
 800b3b6:	4301      	orrs	r1, r0
 800b3b8:	f47f aec1 	bne.w	800b13e <_strtod_l+0x76>
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f47f aedb 	bne.w	800b178 <_strtod_l+0xb0>
 800b3c2:	2a69      	cmp	r2, #105	; 0x69
 800b3c4:	d029      	beq.n	800b41a <_strtod_l+0x352>
 800b3c6:	dc26      	bgt.n	800b416 <_strtod_l+0x34e>
 800b3c8:	2a49      	cmp	r2, #73	; 0x49
 800b3ca:	d026      	beq.n	800b41a <_strtod_l+0x352>
 800b3cc:	2a4e      	cmp	r2, #78	; 0x4e
 800b3ce:	f47f aed3 	bne.w	800b178 <_strtod_l+0xb0>
 800b3d2:	499b      	ldr	r1, [pc, #620]	; (800b640 <_strtod_l+0x578>)
 800b3d4:	a815      	add	r0, sp, #84	; 0x54
 800b3d6:	f001 ff73 	bl	800d2c0 <__match>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	f43f aecc 	beq.w	800b178 <_strtod_l+0xb0>
 800b3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b28      	cmp	r3, #40	; 0x28
 800b3e6:	d12f      	bne.n	800b448 <_strtod_l+0x380>
 800b3e8:	4996      	ldr	r1, [pc, #600]	; (800b644 <_strtod_l+0x57c>)
 800b3ea:	aa18      	add	r2, sp, #96	; 0x60
 800b3ec:	a815      	add	r0, sp, #84	; 0x54
 800b3ee:	f001 ff7b 	bl	800d2e8 <__hexnan>
 800b3f2:	2805      	cmp	r0, #5
 800b3f4:	d128      	bne.n	800b448 <_strtod_l+0x380>
 800b3f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b3fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b400:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b404:	e69b      	b.n	800b13e <_strtod_l+0x76>
 800b406:	9f08      	ldr	r7, [sp, #32]
 800b408:	210a      	movs	r1, #10
 800b40a:	fb01 2107 	mla	r1, r1, r7, r2
 800b40e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b412:	9208      	str	r2, [sp, #32]
 800b414:	e7b5      	b.n	800b382 <_strtod_l+0x2ba>
 800b416:	2a6e      	cmp	r2, #110	; 0x6e
 800b418:	e7d9      	b.n	800b3ce <_strtod_l+0x306>
 800b41a:	498b      	ldr	r1, [pc, #556]	; (800b648 <_strtod_l+0x580>)
 800b41c:	a815      	add	r0, sp, #84	; 0x54
 800b41e:	f001 ff4f 	bl	800d2c0 <__match>
 800b422:	2800      	cmp	r0, #0
 800b424:	f43f aea8 	beq.w	800b178 <_strtod_l+0xb0>
 800b428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b42a:	4988      	ldr	r1, [pc, #544]	; (800b64c <_strtod_l+0x584>)
 800b42c:	3b01      	subs	r3, #1
 800b42e:	a815      	add	r0, sp, #84	; 0x54
 800b430:	9315      	str	r3, [sp, #84]	; 0x54
 800b432:	f001 ff45 	bl	800d2c0 <__match>
 800b436:	b910      	cbnz	r0, 800b43e <_strtod_l+0x376>
 800b438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b43a:	3301      	adds	r3, #1
 800b43c:	9315      	str	r3, [sp, #84]	; 0x54
 800b43e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b65c <_strtod_l+0x594>
 800b442:	f04f 0800 	mov.w	r8, #0
 800b446:	e67a      	b.n	800b13e <_strtod_l+0x76>
 800b448:	4881      	ldr	r0, [pc, #516]	; (800b650 <_strtod_l+0x588>)
 800b44a:	f001 fc55 	bl	800ccf8 <nan>
 800b44e:	ec59 8b10 	vmov	r8, r9, d0
 800b452:	e674      	b.n	800b13e <_strtod_l+0x76>
 800b454:	9b05      	ldr	r3, [sp, #20]
 800b456:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b458:	1afb      	subs	r3, r7, r3
 800b45a:	f1bb 0f00 	cmp.w	fp, #0
 800b45e:	bf08      	it	eq
 800b460:	46b3      	moveq	fp, r6
 800b462:	2e10      	cmp	r6, #16
 800b464:	9308      	str	r3, [sp, #32]
 800b466:	4635      	mov	r5, r6
 800b468:	bfa8      	it	ge
 800b46a:	2510      	movge	r5, #16
 800b46c:	f7f5 f86a 	bl	8000544 <__aeabi_ui2d>
 800b470:	2e09      	cmp	r6, #9
 800b472:	4680      	mov	r8, r0
 800b474:	4689      	mov	r9, r1
 800b476:	dd13      	ble.n	800b4a0 <_strtod_l+0x3d8>
 800b478:	4b76      	ldr	r3, [pc, #472]	; (800b654 <_strtod_l+0x58c>)
 800b47a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b47e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b482:	f7f5 f8d9 	bl	8000638 <__aeabi_dmul>
 800b486:	4680      	mov	r8, r0
 800b488:	4650      	mov	r0, sl
 800b48a:	4689      	mov	r9, r1
 800b48c:	f7f5 f85a 	bl	8000544 <__aeabi_ui2d>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	4640      	mov	r0, r8
 800b496:	4649      	mov	r1, r9
 800b498:	f7f4 ff18 	bl	80002cc <__adddf3>
 800b49c:	4680      	mov	r8, r0
 800b49e:	4689      	mov	r9, r1
 800b4a0:	2e0f      	cmp	r6, #15
 800b4a2:	dc38      	bgt.n	800b516 <_strtod_l+0x44e>
 800b4a4:	9b08      	ldr	r3, [sp, #32]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f43f ae49 	beq.w	800b13e <_strtod_l+0x76>
 800b4ac:	dd24      	ble.n	800b4f8 <_strtod_l+0x430>
 800b4ae:	2b16      	cmp	r3, #22
 800b4b0:	dc0b      	bgt.n	800b4ca <_strtod_l+0x402>
 800b4b2:	4968      	ldr	r1, [pc, #416]	; (800b654 <_strtod_l+0x58c>)
 800b4b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4bc:	4642      	mov	r2, r8
 800b4be:	464b      	mov	r3, r9
 800b4c0:	f7f5 f8ba 	bl	8000638 <__aeabi_dmul>
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4689      	mov	r9, r1
 800b4c8:	e639      	b.n	800b13e <_strtod_l+0x76>
 800b4ca:	9a08      	ldr	r2, [sp, #32]
 800b4cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	db20      	blt.n	800b516 <_strtod_l+0x44e>
 800b4d4:	4c5f      	ldr	r4, [pc, #380]	; (800b654 <_strtod_l+0x58c>)
 800b4d6:	f1c6 060f 	rsb	r6, r6, #15
 800b4da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b4de:	4642      	mov	r2, r8
 800b4e0:	464b      	mov	r3, r9
 800b4e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4e6:	f7f5 f8a7 	bl	8000638 <__aeabi_dmul>
 800b4ea:	9b08      	ldr	r3, [sp, #32]
 800b4ec:	1b9e      	subs	r6, r3, r6
 800b4ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b4f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b4f6:	e7e3      	b.n	800b4c0 <_strtod_l+0x3f8>
 800b4f8:	9b08      	ldr	r3, [sp, #32]
 800b4fa:	3316      	adds	r3, #22
 800b4fc:	db0b      	blt.n	800b516 <_strtod_l+0x44e>
 800b4fe:	9b05      	ldr	r3, [sp, #20]
 800b500:	1bdf      	subs	r7, r3, r7
 800b502:	4b54      	ldr	r3, [pc, #336]	; (800b654 <_strtod_l+0x58c>)
 800b504:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b50c:	4640      	mov	r0, r8
 800b50e:	4649      	mov	r1, r9
 800b510:	f7f5 f9bc 	bl	800088c <__aeabi_ddiv>
 800b514:	e7d6      	b.n	800b4c4 <_strtod_l+0x3fc>
 800b516:	9b08      	ldr	r3, [sp, #32]
 800b518:	1b75      	subs	r5, r6, r5
 800b51a:	441d      	add	r5, r3
 800b51c:	2d00      	cmp	r5, #0
 800b51e:	dd70      	ble.n	800b602 <_strtod_l+0x53a>
 800b520:	f015 030f 	ands.w	r3, r5, #15
 800b524:	d00a      	beq.n	800b53c <_strtod_l+0x474>
 800b526:	494b      	ldr	r1, [pc, #300]	; (800b654 <_strtod_l+0x58c>)
 800b528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b52c:	4642      	mov	r2, r8
 800b52e:	464b      	mov	r3, r9
 800b530:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b534:	f7f5 f880 	bl	8000638 <__aeabi_dmul>
 800b538:	4680      	mov	r8, r0
 800b53a:	4689      	mov	r9, r1
 800b53c:	f035 050f 	bics.w	r5, r5, #15
 800b540:	d04d      	beq.n	800b5de <_strtod_l+0x516>
 800b542:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b546:	dd22      	ble.n	800b58e <_strtod_l+0x4c6>
 800b548:	2500      	movs	r5, #0
 800b54a:	46ab      	mov	fp, r5
 800b54c:	9509      	str	r5, [sp, #36]	; 0x24
 800b54e:	9505      	str	r5, [sp, #20]
 800b550:	2322      	movs	r3, #34	; 0x22
 800b552:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b65c <_strtod_l+0x594>
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	f04f 0800 	mov.w	r8, #0
 800b55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f43f aded 	beq.w	800b13e <_strtod_l+0x76>
 800b564:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b566:	4620      	mov	r0, r4
 800b568:	f7ff f924 	bl	800a7b4 <_Bfree>
 800b56c:	9905      	ldr	r1, [sp, #20]
 800b56e:	4620      	mov	r0, r4
 800b570:	f7ff f920 	bl	800a7b4 <_Bfree>
 800b574:	4659      	mov	r1, fp
 800b576:	4620      	mov	r0, r4
 800b578:	f7ff f91c 	bl	800a7b4 <_Bfree>
 800b57c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b57e:	4620      	mov	r0, r4
 800b580:	f7ff f918 	bl	800a7b4 <_Bfree>
 800b584:	4629      	mov	r1, r5
 800b586:	4620      	mov	r0, r4
 800b588:	f7ff f914 	bl	800a7b4 <_Bfree>
 800b58c:	e5d7      	b.n	800b13e <_strtod_l+0x76>
 800b58e:	4b32      	ldr	r3, [pc, #200]	; (800b658 <_strtod_l+0x590>)
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	2300      	movs	r3, #0
 800b594:	112d      	asrs	r5, r5, #4
 800b596:	4640      	mov	r0, r8
 800b598:	4649      	mov	r1, r9
 800b59a:	469a      	mov	sl, r3
 800b59c:	2d01      	cmp	r5, #1
 800b59e:	dc21      	bgt.n	800b5e4 <_strtod_l+0x51c>
 800b5a0:	b10b      	cbz	r3, 800b5a6 <_strtod_l+0x4de>
 800b5a2:	4680      	mov	r8, r0
 800b5a4:	4689      	mov	r9, r1
 800b5a6:	492c      	ldr	r1, [pc, #176]	; (800b658 <_strtod_l+0x590>)
 800b5a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b5ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b5b0:	4642      	mov	r2, r8
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5b8:	f7f5 f83e 	bl	8000638 <__aeabi_dmul>
 800b5bc:	4b27      	ldr	r3, [pc, #156]	; (800b65c <_strtod_l+0x594>)
 800b5be:	460a      	mov	r2, r1
 800b5c0:	400b      	ands	r3, r1
 800b5c2:	4927      	ldr	r1, [pc, #156]	; (800b660 <_strtod_l+0x598>)
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	d8be      	bhi.n	800b548 <_strtod_l+0x480>
 800b5ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b5ce:	428b      	cmp	r3, r1
 800b5d0:	bf86      	itte	hi
 800b5d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b664 <_strtod_l+0x59c>
 800b5d6:	f04f 38ff 	movhi.w	r8, #4294967295
 800b5da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9304      	str	r3, [sp, #16]
 800b5e2:	e07b      	b.n	800b6dc <_strtod_l+0x614>
 800b5e4:	07ea      	lsls	r2, r5, #31
 800b5e6:	d505      	bpl.n	800b5f4 <_strtod_l+0x52c>
 800b5e8:	9b04      	ldr	r3, [sp, #16]
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f5 f823 	bl	8000638 <__aeabi_dmul>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	9a04      	ldr	r2, [sp, #16]
 800b5f6:	3208      	adds	r2, #8
 800b5f8:	f10a 0a01 	add.w	sl, sl, #1
 800b5fc:	106d      	asrs	r5, r5, #1
 800b5fe:	9204      	str	r2, [sp, #16]
 800b600:	e7cc      	b.n	800b59c <_strtod_l+0x4d4>
 800b602:	d0ec      	beq.n	800b5de <_strtod_l+0x516>
 800b604:	426d      	negs	r5, r5
 800b606:	f015 020f 	ands.w	r2, r5, #15
 800b60a:	d00a      	beq.n	800b622 <_strtod_l+0x55a>
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <_strtod_l+0x58c>)
 800b60e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b612:	4640      	mov	r0, r8
 800b614:	4649      	mov	r1, r9
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f7f5 f937 	bl	800088c <__aeabi_ddiv>
 800b61e:	4680      	mov	r8, r0
 800b620:	4689      	mov	r9, r1
 800b622:	112d      	asrs	r5, r5, #4
 800b624:	d0db      	beq.n	800b5de <_strtod_l+0x516>
 800b626:	2d1f      	cmp	r5, #31
 800b628:	dd1e      	ble.n	800b668 <_strtod_l+0x5a0>
 800b62a:	2500      	movs	r5, #0
 800b62c:	46ab      	mov	fp, r5
 800b62e:	9509      	str	r5, [sp, #36]	; 0x24
 800b630:	9505      	str	r5, [sp, #20]
 800b632:	2322      	movs	r3, #34	; 0x22
 800b634:	f04f 0800 	mov.w	r8, #0
 800b638:	f04f 0900 	mov.w	r9, #0
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	e78d      	b.n	800b55c <_strtod_l+0x494>
 800b640:	0800d971 	.word	0x0800d971
 800b644:	0800db9c 	.word	0x0800db9c
 800b648:	0800d969 	.word	0x0800d969
 800b64c:	0800d99e 	.word	0x0800d99e
 800b650:	0800dd48 	.word	0x0800dd48
 800b654:	0800dab0 	.word	0x0800dab0
 800b658:	0800da88 	.word	0x0800da88
 800b65c:	7ff00000 	.word	0x7ff00000
 800b660:	7ca00000 	.word	0x7ca00000
 800b664:	7fefffff 	.word	0x7fefffff
 800b668:	f015 0310 	ands.w	r3, r5, #16
 800b66c:	bf18      	it	ne
 800b66e:	236a      	movne	r3, #106	; 0x6a
 800b670:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ba14 <_strtod_l+0x94c>
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	4640      	mov	r0, r8
 800b678:	4649      	mov	r1, r9
 800b67a:	2300      	movs	r3, #0
 800b67c:	07ea      	lsls	r2, r5, #31
 800b67e:	d504      	bpl.n	800b68a <_strtod_l+0x5c2>
 800b680:	e9da 2300 	ldrd	r2, r3, [sl]
 800b684:	f7f4 ffd8 	bl	8000638 <__aeabi_dmul>
 800b688:	2301      	movs	r3, #1
 800b68a:	106d      	asrs	r5, r5, #1
 800b68c:	f10a 0a08 	add.w	sl, sl, #8
 800b690:	d1f4      	bne.n	800b67c <_strtod_l+0x5b4>
 800b692:	b10b      	cbz	r3, 800b698 <_strtod_l+0x5d0>
 800b694:	4680      	mov	r8, r0
 800b696:	4689      	mov	r9, r1
 800b698:	9b04      	ldr	r3, [sp, #16]
 800b69a:	b1bb      	cbz	r3, 800b6cc <_strtod_l+0x604>
 800b69c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b6a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	dd10      	ble.n	800b6cc <_strtod_l+0x604>
 800b6aa:	2b1f      	cmp	r3, #31
 800b6ac:	f340 811e 	ble.w	800b8ec <_strtod_l+0x824>
 800b6b0:	2b34      	cmp	r3, #52	; 0x34
 800b6b2:	bfde      	ittt	le
 800b6b4:	f04f 33ff 	movle.w	r3, #4294967295
 800b6b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b6bc:	4093      	lslle	r3, r2
 800b6be:	f04f 0800 	mov.w	r8, #0
 800b6c2:	bfcc      	ite	gt
 800b6c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b6c8:	ea03 0901 	andle.w	r9, r3, r1
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	f7f5 fa18 	bl	8000b08 <__aeabi_dcmpeq>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d1a6      	bne.n	800b62a <_strtod_l+0x562>
 800b6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6e2:	4633      	mov	r3, r6
 800b6e4:	465a      	mov	r2, fp
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f7ff f8cc 	bl	800a884 <__s2b>
 800b6ec:	9009      	str	r0, [sp, #36]	; 0x24
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	f43f af2a 	beq.w	800b548 <_strtod_l+0x480>
 800b6f4:	9a08      	ldr	r2, [sp, #32]
 800b6f6:	9b05      	ldr	r3, [sp, #20]
 800b6f8:	2a00      	cmp	r2, #0
 800b6fa:	eba3 0307 	sub.w	r3, r3, r7
 800b6fe:	bfa8      	it	ge
 800b700:	2300      	movge	r3, #0
 800b702:	930c      	str	r3, [sp, #48]	; 0x30
 800b704:	2500      	movs	r5, #0
 800b706:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b70a:	9312      	str	r3, [sp, #72]	; 0x48
 800b70c:	46ab      	mov	fp, r5
 800b70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b710:	4620      	mov	r0, r4
 800b712:	6859      	ldr	r1, [r3, #4]
 800b714:	f7ff f80e 	bl	800a734 <_Balloc>
 800b718:	9005      	str	r0, [sp, #20]
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f43f af18 	beq.w	800b550 <_strtod_l+0x488>
 800b720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b722:	691a      	ldr	r2, [r3, #16]
 800b724:	3202      	adds	r2, #2
 800b726:	f103 010c 	add.w	r1, r3, #12
 800b72a:	0092      	lsls	r2, r2, #2
 800b72c:	300c      	adds	r0, #12
 800b72e:	f7fe f871 	bl	8009814 <memcpy>
 800b732:	ec49 8b10 	vmov	d0, r8, r9
 800b736:	aa18      	add	r2, sp, #96	; 0x60
 800b738:	a917      	add	r1, sp, #92	; 0x5c
 800b73a:	4620      	mov	r0, r4
 800b73c:	f7ff fbd6 	bl	800aeec <__d2b>
 800b740:	ec49 8b18 	vmov	d8, r8, r9
 800b744:	9016      	str	r0, [sp, #88]	; 0x58
 800b746:	2800      	cmp	r0, #0
 800b748:	f43f af02 	beq.w	800b550 <_strtod_l+0x488>
 800b74c:	2101      	movs	r1, #1
 800b74e:	4620      	mov	r0, r4
 800b750:	f7ff f930 	bl	800a9b4 <__i2b>
 800b754:	4683      	mov	fp, r0
 800b756:	2800      	cmp	r0, #0
 800b758:	f43f aefa 	beq.w	800b550 <_strtod_l+0x488>
 800b75c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b75e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b760:	2e00      	cmp	r6, #0
 800b762:	bfab      	itete	ge
 800b764:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b766:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b768:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b76a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b76e:	bfac      	ite	ge
 800b770:	eb06 0a03 	addge.w	sl, r6, r3
 800b774:	1b9f      	sublt	r7, r3, r6
 800b776:	9b04      	ldr	r3, [sp, #16]
 800b778:	1af6      	subs	r6, r6, r3
 800b77a:	4416      	add	r6, r2
 800b77c:	4ba0      	ldr	r3, [pc, #640]	; (800ba00 <_strtod_l+0x938>)
 800b77e:	3e01      	subs	r6, #1
 800b780:	429e      	cmp	r6, r3
 800b782:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b786:	f280 80c4 	bge.w	800b912 <_strtod_l+0x84a>
 800b78a:	1b9b      	subs	r3, r3, r6
 800b78c:	2b1f      	cmp	r3, #31
 800b78e:	eba2 0203 	sub.w	r2, r2, r3
 800b792:	f04f 0101 	mov.w	r1, #1
 800b796:	f300 80b0 	bgt.w	800b8fa <_strtod_l+0x832>
 800b79a:	fa01 f303 	lsl.w	r3, r1, r3
 800b79e:	930e      	str	r3, [sp, #56]	; 0x38
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b7a4:	eb0a 0602 	add.w	r6, sl, r2
 800b7a8:	9b04      	ldr	r3, [sp, #16]
 800b7aa:	45b2      	cmp	sl, r6
 800b7ac:	4417      	add	r7, r2
 800b7ae:	441f      	add	r7, r3
 800b7b0:	4653      	mov	r3, sl
 800b7b2:	bfa8      	it	ge
 800b7b4:	4633      	movge	r3, r6
 800b7b6:	42bb      	cmp	r3, r7
 800b7b8:	bfa8      	it	ge
 800b7ba:	463b      	movge	r3, r7
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	bfc2      	ittt	gt
 800b7c0:	1af6      	subgt	r6, r6, r3
 800b7c2:	1aff      	subgt	r7, r7, r3
 800b7c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	dd17      	ble.n	800b7fe <_strtod_l+0x736>
 800b7ce:	4659      	mov	r1, fp
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f7ff f9ae 	bl	800ab34 <__pow5mult>
 800b7d8:	4683      	mov	fp, r0
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	f43f aeb8 	beq.w	800b550 <_strtod_l+0x488>
 800b7e0:	4601      	mov	r1, r0
 800b7e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7ff f8fb 	bl	800a9e0 <__multiply>
 800b7ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	f43f aeaf 	beq.w	800b550 <_strtod_l+0x488>
 800b7f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f7fe ffdd 	bl	800a7b4 <_Bfree>
 800b7fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7fc:	9316      	str	r3, [sp, #88]	; 0x58
 800b7fe:	2e00      	cmp	r6, #0
 800b800:	f300 808c 	bgt.w	800b91c <_strtod_l+0x854>
 800b804:	9b08      	ldr	r3, [sp, #32]
 800b806:	2b00      	cmp	r3, #0
 800b808:	dd08      	ble.n	800b81c <_strtod_l+0x754>
 800b80a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b80c:	9905      	ldr	r1, [sp, #20]
 800b80e:	4620      	mov	r0, r4
 800b810:	f7ff f990 	bl	800ab34 <__pow5mult>
 800b814:	9005      	str	r0, [sp, #20]
 800b816:	2800      	cmp	r0, #0
 800b818:	f43f ae9a 	beq.w	800b550 <_strtod_l+0x488>
 800b81c:	2f00      	cmp	r7, #0
 800b81e:	dd08      	ble.n	800b832 <_strtod_l+0x76a>
 800b820:	9905      	ldr	r1, [sp, #20]
 800b822:	463a      	mov	r2, r7
 800b824:	4620      	mov	r0, r4
 800b826:	f7ff f9df 	bl	800abe8 <__lshift>
 800b82a:	9005      	str	r0, [sp, #20]
 800b82c:	2800      	cmp	r0, #0
 800b82e:	f43f ae8f 	beq.w	800b550 <_strtod_l+0x488>
 800b832:	f1ba 0f00 	cmp.w	sl, #0
 800b836:	dd08      	ble.n	800b84a <_strtod_l+0x782>
 800b838:	4659      	mov	r1, fp
 800b83a:	4652      	mov	r2, sl
 800b83c:	4620      	mov	r0, r4
 800b83e:	f7ff f9d3 	bl	800abe8 <__lshift>
 800b842:	4683      	mov	fp, r0
 800b844:	2800      	cmp	r0, #0
 800b846:	f43f ae83 	beq.w	800b550 <_strtod_l+0x488>
 800b84a:	9a05      	ldr	r2, [sp, #20]
 800b84c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b84e:	4620      	mov	r0, r4
 800b850:	f7ff fa52 	bl	800acf8 <__mdiff>
 800b854:	4605      	mov	r5, r0
 800b856:	2800      	cmp	r0, #0
 800b858:	f43f ae7a 	beq.w	800b550 <_strtod_l+0x488>
 800b85c:	68c3      	ldr	r3, [r0, #12]
 800b85e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b860:	2300      	movs	r3, #0
 800b862:	60c3      	str	r3, [r0, #12]
 800b864:	4659      	mov	r1, fp
 800b866:	f7ff fa2b 	bl	800acc0 <__mcmp>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	da60      	bge.n	800b930 <_strtod_l+0x868>
 800b86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b870:	ea53 0308 	orrs.w	r3, r3, r8
 800b874:	f040 8084 	bne.w	800b980 <_strtod_l+0x8b8>
 800b878:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d17f      	bne.n	800b980 <_strtod_l+0x8b8>
 800b880:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b884:	0d1b      	lsrs	r3, r3, #20
 800b886:	051b      	lsls	r3, r3, #20
 800b888:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b88c:	d978      	bls.n	800b980 <_strtod_l+0x8b8>
 800b88e:	696b      	ldr	r3, [r5, #20]
 800b890:	b913      	cbnz	r3, 800b898 <_strtod_l+0x7d0>
 800b892:	692b      	ldr	r3, [r5, #16]
 800b894:	2b01      	cmp	r3, #1
 800b896:	dd73      	ble.n	800b980 <_strtod_l+0x8b8>
 800b898:	4629      	mov	r1, r5
 800b89a:	2201      	movs	r2, #1
 800b89c:	4620      	mov	r0, r4
 800b89e:	f7ff f9a3 	bl	800abe8 <__lshift>
 800b8a2:	4659      	mov	r1, fp
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	f7ff fa0b 	bl	800acc0 <__mcmp>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	dd68      	ble.n	800b980 <_strtod_l+0x8b8>
 800b8ae:	9904      	ldr	r1, [sp, #16]
 800b8b0:	4a54      	ldr	r2, [pc, #336]	; (800ba04 <_strtod_l+0x93c>)
 800b8b2:	464b      	mov	r3, r9
 800b8b4:	2900      	cmp	r1, #0
 800b8b6:	f000 8084 	beq.w	800b9c2 <_strtod_l+0x8fa>
 800b8ba:	ea02 0109 	and.w	r1, r2, r9
 800b8be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b8c2:	dc7e      	bgt.n	800b9c2 <_strtod_l+0x8fa>
 800b8c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b8c8:	f77f aeb3 	ble.w	800b632 <_strtod_l+0x56a>
 800b8cc:	4b4e      	ldr	r3, [pc, #312]	; (800ba08 <_strtod_l+0x940>)
 800b8ce:	4640      	mov	r0, r8
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f7f4 feb0 	bl	8000638 <__aeabi_dmul>
 800b8d8:	4b4a      	ldr	r3, [pc, #296]	; (800ba04 <_strtod_l+0x93c>)
 800b8da:	400b      	ands	r3, r1
 800b8dc:	4680      	mov	r8, r0
 800b8de:	4689      	mov	r9, r1
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f47f ae3f 	bne.w	800b564 <_strtod_l+0x49c>
 800b8e6:	2322      	movs	r3, #34	; 0x22
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	e63b      	b.n	800b564 <_strtod_l+0x49c>
 800b8ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f4:	ea03 0808 	and.w	r8, r3, r8
 800b8f8:	e6e8      	b.n	800b6cc <_strtod_l+0x604>
 800b8fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b8fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b902:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b906:	36e2      	adds	r6, #226	; 0xe2
 800b908:	fa01 f306 	lsl.w	r3, r1, r6
 800b90c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b910:	e748      	b.n	800b7a4 <_strtod_l+0x6dc>
 800b912:	2100      	movs	r1, #0
 800b914:	2301      	movs	r3, #1
 800b916:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b91a:	e743      	b.n	800b7a4 <_strtod_l+0x6dc>
 800b91c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b91e:	4632      	mov	r2, r6
 800b920:	4620      	mov	r0, r4
 800b922:	f7ff f961 	bl	800abe8 <__lshift>
 800b926:	9016      	str	r0, [sp, #88]	; 0x58
 800b928:	2800      	cmp	r0, #0
 800b92a:	f47f af6b 	bne.w	800b804 <_strtod_l+0x73c>
 800b92e:	e60f      	b.n	800b550 <_strtod_l+0x488>
 800b930:	46ca      	mov	sl, r9
 800b932:	d171      	bne.n	800ba18 <_strtod_l+0x950>
 800b934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b936:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b93a:	b352      	cbz	r2, 800b992 <_strtod_l+0x8ca>
 800b93c:	4a33      	ldr	r2, [pc, #204]	; (800ba0c <_strtod_l+0x944>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d12a      	bne.n	800b998 <_strtod_l+0x8d0>
 800b942:	9b04      	ldr	r3, [sp, #16]
 800b944:	4641      	mov	r1, r8
 800b946:	b1fb      	cbz	r3, 800b988 <_strtod_l+0x8c0>
 800b948:	4b2e      	ldr	r3, [pc, #184]	; (800ba04 <_strtod_l+0x93c>)
 800b94a:	ea09 0303 	and.w	r3, r9, r3
 800b94e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b952:	f04f 32ff 	mov.w	r2, #4294967295
 800b956:	d81a      	bhi.n	800b98e <_strtod_l+0x8c6>
 800b958:	0d1b      	lsrs	r3, r3, #20
 800b95a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b95e:	fa02 f303 	lsl.w	r3, r2, r3
 800b962:	4299      	cmp	r1, r3
 800b964:	d118      	bne.n	800b998 <_strtod_l+0x8d0>
 800b966:	4b2a      	ldr	r3, [pc, #168]	; (800ba10 <_strtod_l+0x948>)
 800b968:	459a      	cmp	sl, r3
 800b96a:	d102      	bne.n	800b972 <_strtod_l+0x8aa>
 800b96c:	3101      	adds	r1, #1
 800b96e:	f43f adef 	beq.w	800b550 <_strtod_l+0x488>
 800b972:	4b24      	ldr	r3, [pc, #144]	; (800ba04 <_strtod_l+0x93c>)
 800b974:	ea0a 0303 	and.w	r3, sl, r3
 800b978:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b97c:	f04f 0800 	mov.w	r8, #0
 800b980:	9b04      	ldr	r3, [sp, #16]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1a2      	bne.n	800b8cc <_strtod_l+0x804>
 800b986:	e5ed      	b.n	800b564 <_strtod_l+0x49c>
 800b988:	f04f 33ff 	mov.w	r3, #4294967295
 800b98c:	e7e9      	b.n	800b962 <_strtod_l+0x89a>
 800b98e:	4613      	mov	r3, r2
 800b990:	e7e7      	b.n	800b962 <_strtod_l+0x89a>
 800b992:	ea53 0308 	orrs.w	r3, r3, r8
 800b996:	d08a      	beq.n	800b8ae <_strtod_l+0x7e6>
 800b998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b99a:	b1e3      	cbz	r3, 800b9d6 <_strtod_l+0x90e>
 800b99c:	ea13 0f0a 	tst.w	r3, sl
 800b9a0:	d0ee      	beq.n	800b980 <_strtod_l+0x8b8>
 800b9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9a4:	9a04      	ldr	r2, [sp, #16]
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	4649      	mov	r1, r9
 800b9aa:	b1c3      	cbz	r3, 800b9de <_strtod_l+0x916>
 800b9ac:	f7ff fb6f 	bl	800b08e <sulp>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	ec51 0b18 	vmov	r0, r1, d8
 800b9b8:	f7f4 fc88 	bl	80002cc <__adddf3>
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4689      	mov	r9, r1
 800b9c0:	e7de      	b.n	800b980 <_strtod_l+0x8b8>
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b9c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b9cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b9d0:	f04f 38ff 	mov.w	r8, #4294967295
 800b9d4:	e7d4      	b.n	800b980 <_strtod_l+0x8b8>
 800b9d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9d8:	ea13 0f08 	tst.w	r3, r8
 800b9dc:	e7e0      	b.n	800b9a0 <_strtod_l+0x8d8>
 800b9de:	f7ff fb56 	bl	800b08e <sulp>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	ec51 0b18 	vmov	r0, r1, d8
 800b9ea:	f7f4 fc6d 	bl	80002c8 <__aeabi_dsub>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	4680      	mov	r8, r0
 800b9f4:	4689      	mov	r9, r1
 800b9f6:	f7f5 f887 	bl	8000b08 <__aeabi_dcmpeq>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d0c0      	beq.n	800b980 <_strtod_l+0x8b8>
 800b9fe:	e618      	b.n	800b632 <_strtod_l+0x56a>
 800ba00:	fffffc02 	.word	0xfffffc02
 800ba04:	7ff00000 	.word	0x7ff00000
 800ba08:	39500000 	.word	0x39500000
 800ba0c:	000fffff 	.word	0x000fffff
 800ba10:	7fefffff 	.word	0x7fefffff
 800ba14:	0800dbb0 	.word	0x0800dbb0
 800ba18:	4659      	mov	r1, fp
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f7ff fac0 	bl	800afa0 <__ratio>
 800ba20:	ec57 6b10 	vmov	r6, r7, d0
 800ba24:	ee10 0a10 	vmov	r0, s0
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba2e:	4639      	mov	r1, r7
 800ba30:	f7f5 f87e 	bl	8000b30 <__aeabi_dcmple>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d071      	beq.n	800bb1c <_strtod_l+0xa54>
 800ba38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d17c      	bne.n	800bb38 <_strtod_l+0xa70>
 800ba3e:	f1b8 0f00 	cmp.w	r8, #0
 800ba42:	d15a      	bne.n	800bafa <_strtod_l+0xa32>
 800ba44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d15d      	bne.n	800bb08 <_strtod_l+0xa40>
 800ba4c:	4b90      	ldr	r3, [pc, #576]	; (800bc90 <_strtod_l+0xbc8>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4630      	mov	r0, r6
 800ba52:	4639      	mov	r1, r7
 800ba54:	f7f5 f862 	bl	8000b1c <__aeabi_dcmplt>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	d15c      	bne.n	800bb16 <_strtod_l+0xa4e>
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	4b8c      	ldr	r3, [pc, #560]	; (800bc94 <_strtod_l+0xbcc>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	f7f4 fde8 	bl	8000638 <__aeabi_dmul>
 800ba68:	4606      	mov	r6, r0
 800ba6a:	460f      	mov	r7, r1
 800ba6c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ba70:	9606      	str	r6, [sp, #24]
 800ba72:	9307      	str	r3, [sp, #28]
 800ba74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ba7c:	4b86      	ldr	r3, [pc, #536]	; (800bc98 <_strtod_l+0xbd0>)
 800ba7e:	ea0a 0303 	and.w	r3, sl, r3
 800ba82:	930d      	str	r3, [sp, #52]	; 0x34
 800ba84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba86:	4b85      	ldr	r3, [pc, #532]	; (800bc9c <_strtod_l+0xbd4>)
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	f040 8090 	bne.w	800bbae <_strtod_l+0xae6>
 800ba8e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ba92:	ec49 8b10 	vmov	d0, r8, r9
 800ba96:	f7ff f9b9 	bl	800ae0c <__ulp>
 800ba9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba9e:	ec51 0b10 	vmov	r0, r1, d0
 800baa2:	f7f4 fdc9 	bl	8000638 <__aeabi_dmul>
 800baa6:	4642      	mov	r2, r8
 800baa8:	464b      	mov	r3, r9
 800baaa:	f7f4 fc0f 	bl	80002cc <__adddf3>
 800baae:	460b      	mov	r3, r1
 800bab0:	4979      	ldr	r1, [pc, #484]	; (800bc98 <_strtod_l+0xbd0>)
 800bab2:	4a7b      	ldr	r2, [pc, #492]	; (800bca0 <_strtod_l+0xbd8>)
 800bab4:	4019      	ands	r1, r3
 800bab6:	4291      	cmp	r1, r2
 800bab8:	4680      	mov	r8, r0
 800baba:	d944      	bls.n	800bb46 <_strtod_l+0xa7e>
 800babc:	ee18 2a90 	vmov	r2, s17
 800bac0:	4b78      	ldr	r3, [pc, #480]	; (800bca4 <_strtod_l+0xbdc>)
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d104      	bne.n	800bad0 <_strtod_l+0xa08>
 800bac6:	ee18 3a10 	vmov	r3, s16
 800baca:	3301      	adds	r3, #1
 800bacc:	f43f ad40 	beq.w	800b550 <_strtod_l+0x488>
 800bad0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bca4 <_strtod_l+0xbdc>
 800bad4:	f04f 38ff 	mov.w	r8, #4294967295
 800bad8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bada:	4620      	mov	r0, r4
 800badc:	f7fe fe6a 	bl	800a7b4 <_Bfree>
 800bae0:	9905      	ldr	r1, [sp, #20]
 800bae2:	4620      	mov	r0, r4
 800bae4:	f7fe fe66 	bl	800a7b4 <_Bfree>
 800bae8:	4659      	mov	r1, fp
 800baea:	4620      	mov	r0, r4
 800baec:	f7fe fe62 	bl	800a7b4 <_Bfree>
 800baf0:	4629      	mov	r1, r5
 800baf2:	4620      	mov	r0, r4
 800baf4:	f7fe fe5e 	bl	800a7b4 <_Bfree>
 800baf8:	e609      	b.n	800b70e <_strtod_l+0x646>
 800bafa:	f1b8 0f01 	cmp.w	r8, #1
 800bafe:	d103      	bne.n	800bb08 <_strtod_l+0xa40>
 800bb00:	f1b9 0f00 	cmp.w	r9, #0
 800bb04:	f43f ad95 	beq.w	800b632 <_strtod_l+0x56a>
 800bb08:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bc60 <_strtod_l+0xb98>
 800bb0c:	4f60      	ldr	r7, [pc, #384]	; (800bc90 <_strtod_l+0xbc8>)
 800bb0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb12:	2600      	movs	r6, #0
 800bb14:	e7ae      	b.n	800ba74 <_strtod_l+0x9ac>
 800bb16:	4f5f      	ldr	r7, [pc, #380]	; (800bc94 <_strtod_l+0xbcc>)
 800bb18:	2600      	movs	r6, #0
 800bb1a:	e7a7      	b.n	800ba6c <_strtod_l+0x9a4>
 800bb1c:	4b5d      	ldr	r3, [pc, #372]	; (800bc94 <_strtod_l+0xbcc>)
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4639      	mov	r1, r7
 800bb22:	2200      	movs	r2, #0
 800bb24:	f7f4 fd88 	bl	8000638 <__aeabi_dmul>
 800bb28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	460f      	mov	r7, r1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d09c      	beq.n	800ba6c <_strtod_l+0x9a4>
 800bb32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bb36:	e79d      	b.n	800ba74 <_strtod_l+0x9ac>
 800bb38:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bc68 <_strtod_l+0xba0>
 800bb3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb40:	ec57 6b17 	vmov	r6, r7, d7
 800bb44:	e796      	b.n	800ba74 <_strtod_l+0x9ac>
 800bb46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bb4a:	9b04      	ldr	r3, [sp, #16]
 800bb4c:	46ca      	mov	sl, r9
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1c2      	bne.n	800bad8 <_strtod_l+0xa10>
 800bb52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb58:	0d1b      	lsrs	r3, r3, #20
 800bb5a:	051b      	lsls	r3, r3, #20
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d1bb      	bne.n	800bad8 <_strtod_l+0xa10>
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f5 f8c8 	bl	8000cf8 <__aeabi_d2lz>
 800bb68:	f7f4 fd38 	bl	80005dc <__aeabi_l2d>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 fba8 	bl	80002c8 <__aeabi_dsub>
 800bb78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb7e:	ea43 0308 	orr.w	r3, r3, r8
 800bb82:	4313      	orrs	r3, r2
 800bb84:	4606      	mov	r6, r0
 800bb86:	460f      	mov	r7, r1
 800bb88:	d054      	beq.n	800bc34 <_strtod_l+0xb6c>
 800bb8a:	a339      	add	r3, pc, #228	; (adr r3, 800bc70 <_strtod_l+0xba8>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	f7f4 ffc4 	bl	8000b1c <__aeabi_dcmplt>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f47f ace5 	bne.w	800b564 <_strtod_l+0x49c>
 800bb9a:	a337      	add	r3, pc, #220	; (adr r3, 800bc78 <_strtod_l+0xbb0>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	4630      	mov	r0, r6
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f4 ffd8 	bl	8000b58 <__aeabi_dcmpgt>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d095      	beq.n	800bad8 <_strtod_l+0xa10>
 800bbac:	e4da      	b.n	800b564 <_strtod_l+0x49c>
 800bbae:	9b04      	ldr	r3, [sp, #16]
 800bbb0:	b333      	cbz	r3, 800bc00 <_strtod_l+0xb38>
 800bbb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bbb8:	d822      	bhi.n	800bc00 <_strtod_l+0xb38>
 800bbba:	a331      	add	r3, pc, #196	; (adr r3, 800bc80 <_strtod_l+0xbb8>)
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 ffb4 	bl	8000b30 <__aeabi_dcmple>
 800bbc8:	b1a0      	cbz	r0, 800bbf4 <_strtod_l+0xb2c>
 800bbca:	4639      	mov	r1, r7
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7f5 f80b 	bl	8000be8 <__aeabi_d2uiz>
 800bbd2:	2801      	cmp	r0, #1
 800bbd4:	bf38      	it	cc
 800bbd6:	2001      	movcc	r0, #1
 800bbd8:	f7f4 fcb4 	bl	8000544 <__aeabi_ui2d>
 800bbdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbde:	4606      	mov	r6, r0
 800bbe0:	460f      	mov	r7, r1
 800bbe2:	bb23      	cbnz	r3, 800bc2e <_strtod_l+0xb66>
 800bbe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbe8:	9010      	str	r0, [sp, #64]	; 0x40
 800bbea:	9311      	str	r3, [sp, #68]	; 0x44
 800bbec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbf0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bbf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbf8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bbfc:	1a9b      	subs	r3, r3, r2
 800bbfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc04:	eeb0 0a48 	vmov.f32	s0, s16
 800bc08:	eef0 0a68 	vmov.f32	s1, s17
 800bc0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bc10:	f7ff f8fc 	bl	800ae0c <__ulp>
 800bc14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc18:	ec53 2b10 	vmov	r2, r3, d0
 800bc1c:	f7f4 fd0c 	bl	8000638 <__aeabi_dmul>
 800bc20:	ec53 2b18 	vmov	r2, r3, d8
 800bc24:	f7f4 fb52 	bl	80002cc <__adddf3>
 800bc28:	4680      	mov	r8, r0
 800bc2a:	4689      	mov	r9, r1
 800bc2c:	e78d      	b.n	800bb4a <_strtod_l+0xa82>
 800bc2e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bc32:	e7db      	b.n	800bbec <_strtod_l+0xb24>
 800bc34:	a314      	add	r3, pc, #80	; (adr r3, 800bc88 <_strtod_l+0xbc0>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f7f4 ff6f 	bl	8000b1c <__aeabi_dcmplt>
 800bc3e:	e7b3      	b.n	800bba8 <_strtod_l+0xae0>
 800bc40:	2300      	movs	r3, #0
 800bc42:	930a      	str	r3, [sp, #40]	; 0x28
 800bc44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc48:	6013      	str	r3, [r2, #0]
 800bc4a:	f7ff ba7c 	b.w	800b146 <_strtod_l+0x7e>
 800bc4e:	2a65      	cmp	r2, #101	; 0x65
 800bc50:	f43f ab75 	beq.w	800b33e <_strtod_l+0x276>
 800bc54:	2a45      	cmp	r2, #69	; 0x45
 800bc56:	f43f ab72 	beq.w	800b33e <_strtod_l+0x276>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	f7ff bbaa 	b.w	800b3b4 <_strtod_l+0x2ec>
 800bc60:	00000000 	.word	0x00000000
 800bc64:	bff00000 	.word	0xbff00000
 800bc68:	00000000 	.word	0x00000000
 800bc6c:	3ff00000 	.word	0x3ff00000
 800bc70:	94a03595 	.word	0x94a03595
 800bc74:	3fdfffff 	.word	0x3fdfffff
 800bc78:	35afe535 	.word	0x35afe535
 800bc7c:	3fe00000 	.word	0x3fe00000
 800bc80:	ffc00000 	.word	0xffc00000
 800bc84:	41dfffff 	.word	0x41dfffff
 800bc88:	94a03595 	.word	0x94a03595
 800bc8c:	3fcfffff 	.word	0x3fcfffff
 800bc90:	3ff00000 	.word	0x3ff00000
 800bc94:	3fe00000 	.word	0x3fe00000
 800bc98:	7ff00000 	.word	0x7ff00000
 800bc9c:	7fe00000 	.word	0x7fe00000
 800bca0:	7c9fffff 	.word	0x7c9fffff
 800bca4:	7fefffff 	.word	0x7fefffff

0800bca8 <_strtod_r>:
 800bca8:	4b01      	ldr	r3, [pc, #4]	; (800bcb0 <_strtod_r+0x8>)
 800bcaa:	f7ff ba0d 	b.w	800b0c8 <_strtod_l>
 800bcae:	bf00      	nop
 800bcb0:	200000b8 	.word	0x200000b8

0800bcb4 <_strtol_l.constprop.0>:
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcba:	d001      	beq.n	800bcc0 <_strtol_l.constprop.0+0xc>
 800bcbc:	2b24      	cmp	r3, #36	; 0x24
 800bcbe:	d906      	bls.n	800bcce <_strtol_l.constprop.0+0x1a>
 800bcc0:	f7fd fd7c 	bl	80097bc <__errno>
 800bcc4:	2316      	movs	r3, #22
 800bcc6:	6003      	str	r3, [r0, #0]
 800bcc8:	2000      	movs	r0, #0
 800bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bdb4 <_strtol_l.constprop.0+0x100>
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	462e      	mov	r6, r5
 800bcd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bcde:	f017 0708 	ands.w	r7, r7, #8
 800bce2:	d1f7      	bne.n	800bcd4 <_strtol_l.constprop.0+0x20>
 800bce4:	2c2d      	cmp	r4, #45	; 0x2d
 800bce6:	d132      	bne.n	800bd4e <_strtol_l.constprop.0+0x9a>
 800bce8:	782c      	ldrb	r4, [r5, #0]
 800bcea:	2701      	movs	r7, #1
 800bcec:	1cb5      	adds	r5, r6, #2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d05b      	beq.n	800bdaa <_strtol_l.constprop.0+0xf6>
 800bcf2:	2b10      	cmp	r3, #16
 800bcf4:	d109      	bne.n	800bd0a <_strtol_l.constprop.0+0x56>
 800bcf6:	2c30      	cmp	r4, #48	; 0x30
 800bcf8:	d107      	bne.n	800bd0a <_strtol_l.constprop.0+0x56>
 800bcfa:	782c      	ldrb	r4, [r5, #0]
 800bcfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bd00:	2c58      	cmp	r4, #88	; 0x58
 800bd02:	d14d      	bne.n	800bda0 <_strtol_l.constprop.0+0xec>
 800bd04:	786c      	ldrb	r4, [r5, #1]
 800bd06:	2310      	movs	r3, #16
 800bd08:	3502      	adds	r5, #2
 800bd0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bd0e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd12:	f04f 0e00 	mov.w	lr, #0
 800bd16:	fbb8 f9f3 	udiv	r9, r8, r3
 800bd1a:	4676      	mov	r6, lr
 800bd1c:	fb03 8a19 	mls	sl, r3, r9, r8
 800bd20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bd24:	f1bc 0f09 	cmp.w	ip, #9
 800bd28:	d816      	bhi.n	800bd58 <_strtol_l.constprop.0+0xa4>
 800bd2a:	4664      	mov	r4, ip
 800bd2c:	42a3      	cmp	r3, r4
 800bd2e:	dd24      	ble.n	800bd7a <_strtol_l.constprop.0+0xc6>
 800bd30:	f1be 3fff 	cmp.w	lr, #4294967295
 800bd34:	d008      	beq.n	800bd48 <_strtol_l.constprop.0+0x94>
 800bd36:	45b1      	cmp	r9, r6
 800bd38:	d31c      	bcc.n	800bd74 <_strtol_l.constprop.0+0xc0>
 800bd3a:	d101      	bne.n	800bd40 <_strtol_l.constprop.0+0x8c>
 800bd3c:	45a2      	cmp	sl, r4
 800bd3e:	db19      	blt.n	800bd74 <_strtol_l.constprop.0+0xc0>
 800bd40:	fb06 4603 	mla	r6, r6, r3, r4
 800bd44:	f04f 0e01 	mov.w	lr, #1
 800bd48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd4c:	e7e8      	b.n	800bd20 <_strtol_l.constprop.0+0x6c>
 800bd4e:	2c2b      	cmp	r4, #43	; 0x2b
 800bd50:	bf04      	itt	eq
 800bd52:	782c      	ldrbeq	r4, [r5, #0]
 800bd54:	1cb5      	addeq	r5, r6, #2
 800bd56:	e7ca      	b.n	800bcee <_strtol_l.constprop.0+0x3a>
 800bd58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bd5c:	f1bc 0f19 	cmp.w	ip, #25
 800bd60:	d801      	bhi.n	800bd66 <_strtol_l.constprop.0+0xb2>
 800bd62:	3c37      	subs	r4, #55	; 0x37
 800bd64:	e7e2      	b.n	800bd2c <_strtol_l.constprop.0+0x78>
 800bd66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bd6a:	f1bc 0f19 	cmp.w	ip, #25
 800bd6e:	d804      	bhi.n	800bd7a <_strtol_l.constprop.0+0xc6>
 800bd70:	3c57      	subs	r4, #87	; 0x57
 800bd72:	e7db      	b.n	800bd2c <_strtol_l.constprop.0+0x78>
 800bd74:	f04f 3eff 	mov.w	lr, #4294967295
 800bd78:	e7e6      	b.n	800bd48 <_strtol_l.constprop.0+0x94>
 800bd7a:	f1be 3fff 	cmp.w	lr, #4294967295
 800bd7e:	d105      	bne.n	800bd8c <_strtol_l.constprop.0+0xd8>
 800bd80:	2322      	movs	r3, #34	; 0x22
 800bd82:	6003      	str	r3, [r0, #0]
 800bd84:	4646      	mov	r6, r8
 800bd86:	b942      	cbnz	r2, 800bd9a <_strtol_l.constprop.0+0xe6>
 800bd88:	4630      	mov	r0, r6
 800bd8a:	e79e      	b.n	800bcca <_strtol_l.constprop.0+0x16>
 800bd8c:	b107      	cbz	r7, 800bd90 <_strtol_l.constprop.0+0xdc>
 800bd8e:	4276      	negs	r6, r6
 800bd90:	2a00      	cmp	r2, #0
 800bd92:	d0f9      	beq.n	800bd88 <_strtol_l.constprop.0+0xd4>
 800bd94:	f1be 0f00 	cmp.w	lr, #0
 800bd98:	d000      	beq.n	800bd9c <_strtol_l.constprop.0+0xe8>
 800bd9a:	1e69      	subs	r1, r5, #1
 800bd9c:	6011      	str	r1, [r2, #0]
 800bd9e:	e7f3      	b.n	800bd88 <_strtol_l.constprop.0+0xd4>
 800bda0:	2430      	movs	r4, #48	; 0x30
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1b1      	bne.n	800bd0a <_strtol_l.constprop.0+0x56>
 800bda6:	2308      	movs	r3, #8
 800bda8:	e7af      	b.n	800bd0a <_strtol_l.constprop.0+0x56>
 800bdaa:	2c30      	cmp	r4, #48	; 0x30
 800bdac:	d0a5      	beq.n	800bcfa <_strtol_l.constprop.0+0x46>
 800bdae:	230a      	movs	r3, #10
 800bdb0:	e7ab      	b.n	800bd0a <_strtol_l.constprop.0+0x56>
 800bdb2:	bf00      	nop
 800bdb4:	0800dbd9 	.word	0x0800dbd9

0800bdb8 <_strtol_r>:
 800bdb8:	f7ff bf7c 	b.w	800bcb4 <_strtol_l.constprop.0>

0800bdbc <__ssputs_r>:
 800bdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc0:	688e      	ldr	r6, [r1, #8]
 800bdc2:	461f      	mov	r7, r3
 800bdc4:	42be      	cmp	r6, r7
 800bdc6:	680b      	ldr	r3, [r1, #0]
 800bdc8:	4682      	mov	sl, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	4690      	mov	r8, r2
 800bdce:	d82c      	bhi.n	800be2a <__ssputs_r+0x6e>
 800bdd0:	898a      	ldrh	r2, [r1, #12]
 800bdd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdd6:	d026      	beq.n	800be26 <__ssputs_r+0x6a>
 800bdd8:	6965      	ldr	r5, [r4, #20]
 800bdda:	6909      	ldr	r1, [r1, #16]
 800bddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bde0:	eba3 0901 	sub.w	r9, r3, r1
 800bde4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bde8:	1c7b      	adds	r3, r7, #1
 800bdea:	444b      	add	r3, r9
 800bdec:	106d      	asrs	r5, r5, #1
 800bdee:	429d      	cmp	r5, r3
 800bdf0:	bf38      	it	cc
 800bdf2:	461d      	movcc	r5, r3
 800bdf4:	0553      	lsls	r3, r2, #21
 800bdf6:	d527      	bpl.n	800be48 <__ssputs_r+0x8c>
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	f7fe fc0f 	bl	800a61c <_malloc_r>
 800bdfe:	4606      	mov	r6, r0
 800be00:	b360      	cbz	r0, 800be5c <__ssputs_r+0xa0>
 800be02:	6921      	ldr	r1, [r4, #16]
 800be04:	464a      	mov	r2, r9
 800be06:	f7fd fd05 	bl	8009814 <memcpy>
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be14:	81a3      	strh	r3, [r4, #12]
 800be16:	6126      	str	r6, [r4, #16]
 800be18:	6165      	str	r5, [r4, #20]
 800be1a:	444e      	add	r6, r9
 800be1c:	eba5 0509 	sub.w	r5, r5, r9
 800be20:	6026      	str	r6, [r4, #0]
 800be22:	60a5      	str	r5, [r4, #8]
 800be24:	463e      	mov	r6, r7
 800be26:	42be      	cmp	r6, r7
 800be28:	d900      	bls.n	800be2c <__ssputs_r+0x70>
 800be2a:	463e      	mov	r6, r7
 800be2c:	6820      	ldr	r0, [r4, #0]
 800be2e:	4632      	mov	r2, r6
 800be30:	4641      	mov	r1, r8
 800be32:	f000 ff02 	bl	800cc3a <memmove>
 800be36:	68a3      	ldr	r3, [r4, #8]
 800be38:	1b9b      	subs	r3, r3, r6
 800be3a:	60a3      	str	r3, [r4, #8]
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	4433      	add	r3, r6
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	2000      	movs	r0, #0
 800be44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be48:	462a      	mov	r2, r5
 800be4a:	f001 fafa 	bl	800d442 <_realloc_r>
 800be4e:	4606      	mov	r6, r0
 800be50:	2800      	cmp	r0, #0
 800be52:	d1e0      	bne.n	800be16 <__ssputs_r+0x5a>
 800be54:	6921      	ldr	r1, [r4, #16]
 800be56:	4650      	mov	r0, sl
 800be58:	f7fe fb6c 	bl	800a534 <_free_r>
 800be5c:	230c      	movs	r3, #12
 800be5e:	f8ca 3000 	str.w	r3, [sl]
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be68:	81a3      	strh	r3, [r4, #12]
 800be6a:	f04f 30ff 	mov.w	r0, #4294967295
 800be6e:	e7e9      	b.n	800be44 <__ssputs_r+0x88>

0800be70 <_svfiprintf_r>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	4698      	mov	r8, r3
 800be76:	898b      	ldrh	r3, [r1, #12]
 800be78:	061b      	lsls	r3, r3, #24
 800be7a:	b09d      	sub	sp, #116	; 0x74
 800be7c:	4607      	mov	r7, r0
 800be7e:	460d      	mov	r5, r1
 800be80:	4614      	mov	r4, r2
 800be82:	d50e      	bpl.n	800bea2 <_svfiprintf_r+0x32>
 800be84:	690b      	ldr	r3, [r1, #16]
 800be86:	b963      	cbnz	r3, 800bea2 <_svfiprintf_r+0x32>
 800be88:	2140      	movs	r1, #64	; 0x40
 800be8a:	f7fe fbc7 	bl	800a61c <_malloc_r>
 800be8e:	6028      	str	r0, [r5, #0]
 800be90:	6128      	str	r0, [r5, #16]
 800be92:	b920      	cbnz	r0, 800be9e <_svfiprintf_r+0x2e>
 800be94:	230c      	movs	r3, #12
 800be96:	603b      	str	r3, [r7, #0]
 800be98:	f04f 30ff 	mov.w	r0, #4294967295
 800be9c:	e0d0      	b.n	800c040 <_svfiprintf_r+0x1d0>
 800be9e:	2340      	movs	r3, #64	; 0x40
 800bea0:	616b      	str	r3, [r5, #20]
 800bea2:	2300      	movs	r3, #0
 800bea4:	9309      	str	r3, [sp, #36]	; 0x24
 800bea6:	2320      	movs	r3, #32
 800bea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800beac:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb0:	2330      	movs	r3, #48	; 0x30
 800beb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c058 <_svfiprintf_r+0x1e8>
 800beb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beba:	f04f 0901 	mov.w	r9, #1
 800bebe:	4623      	mov	r3, r4
 800bec0:	469a      	mov	sl, r3
 800bec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bec6:	b10a      	cbz	r2, 800becc <_svfiprintf_r+0x5c>
 800bec8:	2a25      	cmp	r2, #37	; 0x25
 800beca:	d1f9      	bne.n	800bec0 <_svfiprintf_r+0x50>
 800becc:	ebba 0b04 	subs.w	fp, sl, r4
 800bed0:	d00b      	beq.n	800beea <_svfiprintf_r+0x7a>
 800bed2:	465b      	mov	r3, fp
 800bed4:	4622      	mov	r2, r4
 800bed6:	4629      	mov	r1, r5
 800bed8:	4638      	mov	r0, r7
 800beda:	f7ff ff6f 	bl	800bdbc <__ssputs_r>
 800bede:	3001      	adds	r0, #1
 800bee0:	f000 80a9 	beq.w	800c036 <_svfiprintf_r+0x1c6>
 800bee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bee6:	445a      	add	r2, fp
 800bee8:	9209      	str	r2, [sp, #36]	; 0x24
 800beea:	f89a 3000 	ldrb.w	r3, [sl]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 80a1 	beq.w	800c036 <_svfiprintf_r+0x1c6>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f04f 32ff 	mov.w	r2, #4294967295
 800befa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800befe:	f10a 0a01 	add.w	sl, sl, #1
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	9307      	str	r3, [sp, #28]
 800bf06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf0a:	931a      	str	r3, [sp, #104]	; 0x68
 800bf0c:	4654      	mov	r4, sl
 800bf0e:	2205      	movs	r2, #5
 800bf10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf14:	4850      	ldr	r0, [pc, #320]	; (800c058 <_svfiprintf_r+0x1e8>)
 800bf16:	f7f4 f97b 	bl	8000210 <memchr>
 800bf1a:	9a04      	ldr	r2, [sp, #16]
 800bf1c:	b9d8      	cbnz	r0, 800bf56 <_svfiprintf_r+0xe6>
 800bf1e:	06d0      	lsls	r0, r2, #27
 800bf20:	bf44      	itt	mi
 800bf22:	2320      	movmi	r3, #32
 800bf24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf28:	0711      	lsls	r1, r2, #28
 800bf2a:	bf44      	itt	mi
 800bf2c:	232b      	movmi	r3, #43	; 0x2b
 800bf2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf32:	f89a 3000 	ldrb.w	r3, [sl]
 800bf36:	2b2a      	cmp	r3, #42	; 0x2a
 800bf38:	d015      	beq.n	800bf66 <_svfiprintf_r+0xf6>
 800bf3a:	9a07      	ldr	r2, [sp, #28]
 800bf3c:	4654      	mov	r4, sl
 800bf3e:	2000      	movs	r0, #0
 800bf40:	f04f 0c0a 	mov.w	ip, #10
 800bf44:	4621      	mov	r1, r4
 800bf46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf4a:	3b30      	subs	r3, #48	; 0x30
 800bf4c:	2b09      	cmp	r3, #9
 800bf4e:	d94d      	bls.n	800bfec <_svfiprintf_r+0x17c>
 800bf50:	b1b0      	cbz	r0, 800bf80 <_svfiprintf_r+0x110>
 800bf52:	9207      	str	r2, [sp, #28]
 800bf54:	e014      	b.n	800bf80 <_svfiprintf_r+0x110>
 800bf56:	eba0 0308 	sub.w	r3, r0, r8
 800bf5a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	46a2      	mov	sl, r4
 800bf64:	e7d2      	b.n	800bf0c <_svfiprintf_r+0x9c>
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	1d19      	adds	r1, r3, #4
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	9103      	str	r1, [sp, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bfbb      	ittet	lt
 800bf72:	425b      	neglt	r3, r3
 800bf74:	f042 0202 	orrlt.w	r2, r2, #2
 800bf78:	9307      	strge	r3, [sp, #28]
 800bf7a:	9307      	strlt	r3, [sp, #28]
 800bf7c:	bfb8      	it	lt
 800bf7e:	9204      	strlt	r2, [sp, #16]
 800bf80:	7823      	ldrb	r3, [r4, #0]
 800bf82:	2b2e      	cmp	r3, #46	; 0x2e
 800bf84:	d10c      	bne.n	800bfa0 <_svfiprintf_r+0x130>
 800bf86:	7863      	ldrb	r3, [r4, #1]
 800bf88:	2b2a      	cmp	r3, #42	; 0x2a
 800bf8a:	d134      	bne.n	800bff6 <_svfiprintf_r+0x186>
 800bf8c:	9b03      	ldr	r3, [sp, #12]
 800bf8e:	1d1a      	adds	r2, r3, #4
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	9203      	str	r2, [sp, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	bfb8      	it	lt
 800bf98:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf9c:	3402      	adds	r4, #2
 800bf9e:	9305      	str	r3, [sp, #20]
 800bfa0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c068 <_svfiprintf_r+0x1f8>
 800bfa4:	7821      	ldrb	r1, [r4, #0]
 800bfa6:	2203      	movs	r2, #3
 800bfa8:	4650      	mov	r0, sl
 800bfaa:	f7f4 f931 	bl	8000210 <memchr>
 800bfae:	b138      	cbz	r0, 800bfc0 <_svfiprintf_r+0x150>
 800bfb0:	9b04      	ldr	r3, [sp, #16]
 800bfb2:	eba0 000a 	sub.w	r0, r0, sl
 800bfb6:	2240      	movs	r2, #64	; 0x40
 800bfb8:	4082      	lsls	r2, r0
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	3401      	adds	r4, #1
 800bfbe:	9304      	str	r3, [sp, #16]
 800bfc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc4:	4825      	ldr	r0, [pc, #148]	; (800c05c <_svfiprintf_r+0x1ec>)
 800bfc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfca:	2206      	movs	r2, #6
 800bfcc:	f7f4 f920 	bl	8000210 <memchr>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d038      	beq.n	800c046 <_svfiprintf_r+0x1d6>
 800bfd4:	4b22      	ldr	r3, [pc, #136]	; (800c060 <_svfiprintf_r+0x1f0>)
 800bfd6:	bb1b      	cbnz	r3, 800c020 <_svfiprintf_r+0x1b0>
 800bfd8:	9b03      	ldr	r3, [sp, #12]
 800bfda:	3307      	adds	r3, #7
 800bfdc:	f023 0307 	bic.w	r3, r3, #7
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	9303      	str	r3, [sp, #12]
 800bfe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe6:	4433      	add	r3, r6
 800bfe8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfea:	e768      	b.n	800bebe <_svfiprintf_r+0x4e>
 800bfec:	fb0c 3202 	mla	r2, ip, r2, r3
 800bff0:	460c      	mov	r4, r1
 800bff2:	2001      	movs	r0, #1
 800bff4:	e7a6      	b.n	800bf44 <_svfiprintf_r+0xd4>
 800bff6:	2300      	movs	r3, #0
 800bff8:	3401      	adds	r4, #1
 800bffa:	9305      	str	r3, [sp, #20]
 800bffc:	4619      	mov	r1, r3
 800bffe:	f04f 0c0a 	mov.w	ip, #10
 800c002:	4620      	mov	r0, r4
 800c004:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c008:	3a30      	subs	r2, #48	; 0x30
 800c00a:	2a09      	cmp	r2, #9
 800c00c:	d903      	bls.n	800c016 <_svfiprintf_r+0x1a6>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0c6      	beq.n	800bfa0 <_svfiprintf_r+0x130>
 800c012:	9105      	str	r1, [sp, #20]
 800c014:	e7c4      	b.n	800bfa0 <_svfiprintf_r+0x130>
 800c016:	fb0c 2101 	mla	r1, ip, r1, r2
 800c01a:	4604      	mov	r4, r0
 800c01c:	2301      	movs	r3, #1
 800c01e:	e7f0      	b.n	800c002 <_svfiprintf_r+0x192>
 800c020:	ab03      	add	r3, sp, #12
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	462a      	mov	r2, r5
 800c026:	4b0f      	ldr	r3, [pc, #60]	; (800c064 <_svfiprintf_r+0x1f4>)
 800c028:	a904      	add	r1, sp, #16
 800c02a:	4638      	mov	r0, r7
 800c02c:	f7fc fb44 	bl	80086b8 <_printf_float>
 800c030:	1c42      	adds	r2, r0, #1
 800c032:	4606      	mov	r6, r0
 800c034:	d1d6      	bne.n	800bfe4 <_svfiprintf_r+0x174>
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	065b      	lsls	r3, r3, #25
 800c03a:	f53f af2d 	bmi.w	800be98 <_svfiprintf_r+0x28>
 800c03e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c040:	b01d      	add	sp, #116	; 0x74
 800c042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c046:	ab03      	add	r3, sp, #12
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	462a      	mov	r2, r5
 800c04c:	4b05      	ldr	r3, [pc, #20]	; (800c064 <_svfiprintf_r+0x1f4>)
 800c04e:	a904      	add	r1, sp, #16
 800c050:	4638      	mov	r0, r7
 800c052:	f7fc fdd5 	bl	8008c00 <_printf_i>
 800c056:	e7eb      	b.n	800c030 <_svfiprintf_r+0x1c0>
 800c058:	0800dcd9 	.word	0x0800dcd9
 800c05c:	0800dce3 	.word	0x0800dce3
 800c060:	080086b9 	.word	0x080086b9
 800c064:	0800bdbd 	.word	0x0800bdbd
 800c068:	0800dcdf 	.word	0x0800dcdf

0800c06c <_sungetc_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	1c4b      	adds	r3, r1, #1
 800c070:	4614      	mov	r4, r2
 800c072:	d103      	bne.n	800c07c <_sungetc_r+0x10>
 800c074:	f04f 35ff 	mov.w	r5, #4294967295
 800c078:	4628      	mov	r0, r5
 800c07a:	bd38      	pop	{r3, r4, r5, pc}
 800c07c:	8993      	ldrh	r3, [r2, #12]
 800c07e:	f023 0320 	bic.w	r3, r3, #32
 800c082:	8193      	strh	r3, [r2, #12]
 800c084:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c086:	6852      	ldr	r2, [r2, #4]
 800c088:	b2cd      	uxtb	r5, r1
 800c08a:	b18b      	cbz	r3, 800c0b0 <_sungetc_r+0x44>
 800c08c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c08e:	4293      	cmp	r3, r2
 800c090:	dd08      	ble.n	800c0a4 <_sungetc_r+0x38>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	1e5a      	subs	r2, r3, #1
 800c096:	6022      	str	r2, [r4, #0]
 800c098:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c09c:	6863      	ldr	r3, [r4, #4]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	6063      	str	r3, [r4, #4]
 800c0a2:	e7e9      	b.n	800c078 <_sungetc_r+0xc>
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	f000 fd8e 	bl	800cbc6 <__submore>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d0f1      	beq.n	800c092 <_sungetc_r+0x26>
 800c0ae:	e7e1      	b.n	800c074 <_sungetc_r+0x8>
 800c0b0:	6921      	ldr	r1, [r4, #16]
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	b151      	cbz	r1, 800c0cc <_sungetc_r+0x60>
 800c0b6:	4299      	cmp	r1, r3
 800c0b8:	d208      	bcs.n	800c0cc <_sungetc_r+0x60>
 800c0ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c0be:	42a9      	cmp	r1, r5
 800c0c0:	d104      	bne.n	800c0cc <_sungetc_r+0x60>
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	3201      	adds	r2, #1
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	6062      	str	r2, [r4, #4]
 800c0ca:	e7d5      	b.n	800c078 <_sungetc_r+0xc>
 800c0cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	63a3      	str	r3, [r4, #56]	; 0x38
 800c0da:	4623      	mov	r3, r4
 800c0dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e7dc      	b.n	800c0a0 <_sungetc_r+0x34>

0800c0e6 <__ssrefill_r>:
 800c0e6:	b510      	push	{r4, lr}
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c0ec:	b169      	cbz	r1, 800c10a <__ssrefill_r+0x24>
 800c0ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0f2:	4299      	cmp	r1, r3
 800c0f4:	d001      	beq.n	800c0fa <__ssrefill_r+0x14>
 800c0f6:	f7fe fa1d 	bl	800a534 <_free_r>
 800c0fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0fc:	6063      	str	r3, [r4, #4]
 800c0fe:	2000      	movs	r0, #0
 800c100:	6360      	str	r0, [r4, #52]	; 0x34
 800c102:	b113      	cbz	r3, 800c10a <__ssrefill_r+0x24>
 800c104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	bd10      	pop	{r4, pc}
 800c10a:	6923      	ldr	r3, [r4, #16]
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	2300      	movs	r3, #0
 800c110:	6063      	str	r3, [r4, #4]
 800c112:	89a3      	ldrh	r3, [r4, #12]
 800c114:	f043 0320 	orr.w	r3, r3, #32
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	e7f3      	b.n	800c108 <__ssrefill_r+0x22>

0800c120 <__ssvfiscanf_r>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	460c      	mov	r4, r1
 800c126:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c12a:	2100      	movs	r1, #0
 800c12c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c130:	49a6      	ldr	r1, [pc, #664]	; (800c3cc <__ssvfiscanf_r+0x2ac>)
 800c132:	91a0      	str	r1, [sp, #640]	; 0x280
 800c134:	f10d 0804 	add.w	r8, sp, #4
 800c138:	49a5      	ldr	r1, [pc, #660]	; (800c3d0 <__ssvfiscanf_r+0x2b0>)
 800c13a:	4fa6      	ldr	r7, [pc, #664]	; (800c3d4 <__ssvfiscanf_r+0x2b4>)
 800c13c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c3d8 <__ssvfiscanf_r+0x2b8>
 800c140:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c144:	4606      	mov	r6, r0
 800c146:	91a1      	str	r1, [sp, #644]	; 0x284
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	7813      	ldrb	r3, [r2, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f000 815a 	beq.w	800c406 <__ssvfiscanf_r+0x2e6>
 800c152:	5cf9      	ldrb	r1, [r7, r3]
 800c154:	f011 0108 	ands.w	r1, r1, #8
 800c158:	f102 0501 	add.w	r5, r2, #1
 800c15c:	d019      	beq.n	800c192 <__ssvfiscanf_r+0x72>
 800c15e:	6863      	ldr	r3, [r4, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	dd0f      	ble.n	800c184 <__ssvfiscanf_r+0x64>
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	781a      	ldrb	r2, [r3, #0]
 800c168:	5cba      	ldrb	r2, [r7, r2]
 800c16a:	0712      	lsls	r2, r2, #28
 800c16c:	d401      	bmi.n	800c172 <__ssvfiscanf_r+0x52>
 800c16e:	462a      	mov	r2, r5
 800c170:	e7eb      	b.n	800c14a <__ssvfiscanf_r+0x2a>
 800c172:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c174:	3201      	adds	r2, #1
 800c176:	9245      	str	r2, [sp, #276]	; 0x114
 800c178:	6862      	ldr	r2, [r4, #4]
 800c17a:	3301      	adds	r3, #1
 800c17c:	3a01      	subs	r2, #1
 800c17e:	6062      	str	r2, [r4, #4]
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	e7ec      	b.n	800c15e <__ssvfiscanf_r+0x3e>
 800c184:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c186:	4621      	mov	r1, r4
 800c188:	4630      	mov	r0, r6
 800c18a:	4798      	blx	r3
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d0e9      	beq.n	800c164 <__ssvfiscanf_r+0x44>
 800c190:	e7ed      	b.n	800c16e <__ssvfiscanf_r+0x4e>
 800c192:	2b25      	cmp	r3, #37	; 0x25
 800c194:	d012      	beq.n	800c1bc <__ssvfiscanf_r+0x9c>
 800c196:	469a      	mov	sl, r3
 800c198:	6863      	ldr	r3, [r4, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f340 8091 	ble.w	800c2c2 <__ssvfiscanf_r+0x1a2>
 800c1a0:	6822      	ldr	r2, [r4, #0]
 800c1a2:	7813      	ldrb	r3, [r2, #0]
 800c1a4:	4553      	cmp	r3, sl
 800c1a6:	f040 812e 	bne.w	800c406 <__ssvfiscanf_r+0x2e6>
 800c1aa:	6863      	ldr	r3, [r4, #4]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	6063      	str	r3, [r4, #4]
 800c1b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c1b2:	3201      	adds	r2, #1
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	6022      	str	r2, [r4, #0]
 800c1b8:	9345      	str	r3, [sp, #276]	; 0x114
 800c1ba:	e7d8      	b.n	800c16e <__ssvfiscanf_r+0x4e>
 800c1bc:	9141      	str	r1, [sp, #260]	; 0x104
 800c1be:	9143      	str	r1, [sp, #268]	; 0x10c
 800c1c0:	7853      	ldrb	r3, [r2, #1]
 800c1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1c4:	bf02      	ittt	eq
 800c1c6:	2310      	moveq	r3, #16
 800c1c8:	1c95      	addeq	r5, r2, #2
 800c1ca:	9341      	streq	r3, [sp, #260]	; 0x104
 800c1cc:	220a      	movs	r2, #10
 800c1ce:	46aa      	mov	sl, r5
 800c1d0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c1d4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c1d8:	2b09      	cmp	r3, #9
 800c1da:	d91c      	bls.n	800c216 <__ssvfiscanf_r+0xf6>
 800c1dc:	487e      	ldr	r0, [pc, #504]	; (800c3d8 <__ssvfiscanf_r+0x2b8>)
 800c1de:	2203      	movs	r2, #3
 800c1e0:	f7f4 f816 	bl	8000210 <memchr>
 800c1e4:	b138      	cbz	r0, 800c1f6 <__ssvfiscanf_r+0xd6>
 800c1e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c1e8:	eba0 0009 	sub.w	r0, r0, r9
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	4083      	lsls	r3, r0
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	9341      	str	r3, [sp, #260]	; 0x104
 800c1f4:	4655      	mov	r5, sl
 800c1f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c1fa:	2b78      	cmp	r3, #120	; 0x78
 800c1fc:	d806      	bhi.n	800c20c <__ssvfiscanf_r+0xec>
 800c1fe:	2b57      	cmp	r3, #87	; 0x57
 800c200:	d810      	bhi.n	800c224 <__ssvfiscanf_r+0x104>
 800c202:	2b25      	cmp	r3, #37	; 0x25
 800c204:	d0c7      	beq.n	800c196 <__ssvfiscanf_r+0x76>
 800c206:	d857      	bhi.n	800c2b8 <__ssvfiscanf_r+0x198>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d065      	beq.n	800c2d8 <__ssvfiscanf_r+0x1b8>
 800c20c:	2303      	movs	r3, #3
 800c20e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c210:	230a      	movs	r3, #10
 800c212:	9342      	str	r3, [sp, #264]	; 0x108
 800c214:	e076      	b.n	800c304 <__ssvfiscanf_r+0x1e4>
 800c216:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c218:	fb02 1103 	mla	r1, r2, r3, r1
 800c21c:	3930      	subs	r1, #48	; 0x30
 800c21e:	9143      	str	r1, [sp, #268]	; 0x10c
 800c220:	4655      	mov	r5, sl
 800c222:	e7d4      	b.n	800c1ce <__ssvfiscanf_r+0xae>
 800c224:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c228:	2a20      	cmp	r2, #32
 800c22a:	d8ef      	bhi.n	800c20c <__ssvfiscanf_r+0xec>
 800c22c:	a101      	add	r1, pc, #4	; (adr r1, 800c234 <__ssvfiscanf_r+0x114>)
 800c22e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c2e7 	.word	0x0800c2e7
 800c238:	0800c20d 	.word	0x0800c20d
 800c23c:	0800c20d 	.word	0x0800c20d
 800c240:	0800c345 	.word	0x0800c345
 800c244:	0800c20d 	.word	0x0800c20d
 800c248:	0800c20d 	.word	0x0800c20d
 800c24c:	0800c20d 	.word	0x0800c20d
 800c250:	0800c20d 	.word	0x0800c20d
 800c254:	0800c20d 	.word	0x0800c20d
 800c258:	0800c20d 	.word	0x0800c20d
 800c25c:	0800c20d 	.word	0x0800c20d
 800c260:	0800c35b 	.word	0x0800c35b
 800c264:	0800c341 	.word	0x0800c341
 800c268:	0800c2bf 	.word	0x0800c2bf
 800c26c:	0800c2bf 	.word	0x0800c2bf
 800c270:	0800c2bf 	.word	0x0800c2bf
 800c274:	0800c20d 	.word	0x0800c20d
 800c278:	0800c2fd 	.word	0x0800c2fd
 800c27c:	0800c20d 	.word	0x0800c20d
 800c280:	0800c20d 	.word	0x0800c20d
 800c284:	0800c20d 	.word	0x0800c20d
 800c288:	0800c20d 	.word	0x0800c20d
 800c28c:	0800c36b 	.word	0x0800c36b
 800c290:	0800c339 	.word	0x0800c339
 800c294:	0800c2df 	.word	0x0800c2df
 800c298:	0800c20d 	.word	0x0800c20d
 800c29c:	0800c20d 	.word	0x0800c20d
 800c2a0:	0800c367 	.word	0x0800c367
 800c2a4:	0800c20d 	.word	0x0800c20d
 800c2a8:	0800c341 	.word	0x0800c341
 800c2ac:	0800c20d 	.word	0x0800c20d
 800c2b0:	0800c20d 	.word	0x0800c20d
 800c2b4:	0800c2e7 	.word	0x0800c2e7
 800c2b8:	3b45      	subs	r3, #69	; 0x45
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d8a6      	bhi.n	800c20c <__ssvfiscanf_r+0xec>
 800c2be:	2305      	movs	r3, #5
 800c2c0:	e01f      	b.n	800c302 <__ssvfiscanf_r+0x1e2>
 800c2c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	4798      	blx	r3
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f43f af68 	beq.w	800c1a0 <__ssvfiscanf_r+0x80>
 800c2d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	f040 808d 	bne.w	800c3f2 <__ssvfiscanf_r+0x2d2>
 800c2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2dc:	e08f      	b.n	800c3fe <__ssvfiscanf_r+0x2de>
 800c2de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c2e0:	f042 0220 	orr.w	r2, r2, #32
 800c2e4:	9241      	str	r2, [sp, #260]	; 0x104
 800c2e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c2e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2ec:	9241      	str	r2, [sp, #260]	; 0x104
 800c2ee:	2210      	movs	r2, #16
 800c2f0:	2b6f      	cmp	r3, #111	; 0x6f
 800c2f2:	9242      	str	r2, [sp, #264]	; 0x108
 800c2f4:	bf34      	ite	cc
 800c2f6:	2303      	movcc	r3, #3
 800c2f8:	2304      	movcs	r3, #4
 800c2fa:	e002      	b.n	800c302 <__ssvfiscanf_r+0x1e2>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9342      	str	r3, [sp, #264]	; 0x108
 800c300:	2303      	movs	r3, #3
 800c302:	9347      	str	r3, [sp, #284]	; 0x11c
 800c304:	6863      	ldr	r3, [r4, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	dd3d      	ble.n	800c386 <__ssvfiscanf_r+0x266>
 800c30a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c30c:	0659      	lsls	r1, r3, #25
 800c30e:	d404      	bmi.n	800c31a <__ssvfiscanf_r+0x1fa>
 800c310:	6823      	ldr	r3, [r4, #0]
 800c312:	781a      	ldrb	r2, [r3, #0]
 800c314:	5cba      	ldrb	r2, [r7, r2]
 800c316:	0712      	lsls	r2, r2, #28
 800c318:	d43c      	bmi.n	800c394 <__ssvfiscanf_r+0x274>
 800c31a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	dc4b      	bgt.n	800c3b8 <__ssvfiscanf_r+0x298>
 800c320:	466b      	mov	r3, sp
 800c322:	4622      	mov	r2, r4
 800c324:	a941      	add	r1, sp, #260	; 0x104
 800c326:	4630      	mov	r0, r6
 800c328:	f000 f9b6 	bl	800c698 <_scanf_chars>
 800c32c:	2801      	cmp	r0, #1
 800c32e:	d06a      	beq.n	800c406 <__ssvfiscanf_r+0x2e6>
 800c330:	2802      	cmp	r0, #2
 800c332:	f47f af1c 	bne.w	800c16e <__ssvfiscanf_r+0x4e>
 800c336:	e7cb      	b.n	800c2d0 <__ssvfiscanf_r+0x1b0>
 800c338:	2308      	movs	r3, #8
 800c33a:	9342      	str	r3, [sp, #264]	; 0x108
 800c33c:	2304      	movs	r3, #4
 800c33e:	e7e0      	b.n	800c302 <__ssvfiscanf_r+0x1e2>
 800c340:	220a      	movs	r2, #10
 800c342:	e7d5      	b.n	800c2f0 <__ssvfiscanf_r+0x1d0>
 800c344:	4629      	mov	r1, r5
 800c346:	4640      	mov	r0, r8
 800c348:	f000 fc04 	bl	800cb54 <__sccl>
 800c34c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c352:	9341      	str	r3, [sp, #260]	; 0x104
 800c354:	4605      	mov	r5, r0
 800c356:	2301      	movs	r3, #1
 800c358:	e7d3      	b.n	800c302 <__ssvfiscanf_r+0x1e2>
 800c35a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c360:	9341      	str	r3, [sp, #260]	; 0x104
 800c362:	2300      	movs	r3, #0
 800c364:	e7cd      	b.n	800c302 <__ssvfiscanf_r+0x1e2>
 800c366:	2302      	movs	r3, #2
 800c368:	e7cb      	b.n	800c302 <__ssvfiscanf_r+0x1e2>
 800c36a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c36c:	06c3      	lsls	r3, r0, #27
 800c36e:	f53f aefe 	bmi.w	800c16e <__ssvfiscanf_r+0x4e>
 800c372:	9b00      	ldr	r3, [sp, #0]
 800c374:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c376:	1d19      	adds	r1, r3, #4
 800c378:	9100      	str	r1, [sp, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	07c0      	lsls	r0, r0, #31
 800c37e:	bf4c      	ite	mi
 800c380:	801a      	strhmi	r2, [r3, #0]
 800c382:	601a      	strpl	r2, [r3, #0]
 800c384:	e6f3      	b.n	800c16e <__ssvfiscanf_r+0x4e>
 800c386:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c388:	4621      	mov	r1, r4
 800c38a:	4630      	mov	r0, r6
 800c38c:	4798      	blx	r3
 800c38e:	2800      	cmp	r0, #0
 800c390:	d0bb      	beq.n	800c30a <__ssvfiscanf_r+0x1ea>
 800c392:	e79d      	b.n	800c2d0 <__ssvfiscanf_r+0x1b0>
 800c394:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c396:	3201      	adds	r2, #1
 800c398:	9245      	str	r2, [sp, #276]	; 0x114
 800c39a:	6862      	ldr	r2, [r4, #4]
 800c39c:	3a01      	subs	r2, #1
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	6062      	str	r2, [r4, #4]
 800c3a2:	dd02      	ble.n	800c3aa <__ssvfiscanf_r+0x28a>
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	e7b2      	b.n	800c310 <__ssvfiscanf_r+0x1f0>
 800c3aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	4798      	blx	r3
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d0ac      	beq.n	800c310 <__ssvfiscanf_r+0x1f0>
 800c3b6:	e78b      	b.n	800c2d0 <__ssvfiscanf_r+0x1b0>
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	dc0f      	bgt.n	800c3dc <__ssvfiscanf_r+0x2bc>
 800c3bc:	466b      	mov	r3, sp
 800c3be:	4622      	mov	r2, r4
 800c3c0:	a941      	add	r1, sp, #260	; 0x104
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f000 f9c2 	bl	800c74c <_scanf_i>
 800c3c8:	e7b0      	b.n	800c32c <__ssvfiscanf_r+0x20c>
 800c3ca:	bf00      	nop
 800c3cc:	0800c06d 	.word	0x0800c06d
 800c3d0:	0800c0e7 	.word	0x0800c0e7
 800c3d4:	0800dbd9 	.word	0x0800dbd9
 800c3d8:	0800dcdf 	.word	0x0800dcdf
 800c3dc:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <__ssvfiscanf_r+0x2ec>)
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f43f aec5 	beq.w	800c16e <__ssvfiscanf_r+0x4e>
 800c3e4:	466b      	mov	r3, sp
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	a941      	add	r1, sp, #260	; 0x104
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f7fc fd2a 	bl	8008e44 <_scanf_float>
 800c3f0:	e79c      	b.n	800c32c <__ssvfiscanf_r+0x20c>
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c3f8:	bf18      	it	ne
 800c3fa:	f04f 30ff 	movne.w	r0, #4294967295
 800c3fe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c406:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c408:	e7f9      	b.n	800c3fe <__ssvfiscanf_r+0x2de>
 800c40a:	bf00      	nop
 800c40c:	08008e45 	.word	0x08008e45

0800c410 <__sfputc_r>:
 800c410:	6893      	ldr	r3, [r2, #8]
 800c412:	3b01      	subs	r3, #1
 800c414:	2b00      	cmp	r3, #0
 800c416:	b410      	push	{r4}
 800c418:	6093      	str	r3, [r2, #8]
 800c41a:	da08      	bge.n	800c42e <__sfputc_r+0x1e>
 800c41c:	6994      	ldr	r4, [r2, #24]
 800c41e:	42a3      	cmp	r3, r4
 800c420:	db01      	blt.n	800c426 <__sfputc_r+0x16>
 800c422:	290a      	cmp	r1, #10
 800c424:	d103      	bne.n	800c42e <__sfputc_r+0x1e>
 800c426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c42a:	f7fd b8ca 	b.w	80095c2 <__swbuf_r>
 800c42e:	6813      	ldr	r3, [r2, #0]
 800c430:	1c58      	adds	r0, r3, #1
 800c432:	6010      	str	r0, [r2, #0]
 800c434:	7019      	strb	r1, [r3, #0]
 800c436:	4608      	mov	r0, r1
 800c438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c43c:	4770      	bx	lr

0800c43e <__sfputs_r>:
 800c43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c440:	4606      	mov	r6, r0
 800c442:	460f      	mov	r7, r1
 800c444:	4614      	mov	r4, r2
 800c446:	18d5      	adds	r5, r2, r3
 800c448:	42ac      	cmp	r4, r5
 800c44a:	d101      	bne.n	800c450 <__sfputs_r+0x12>
 800c44c:	2000      	movs	r0, #0
 800c44e:	e007      	b.n	800c460 <__sfputs_r+0x22>
 800c450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c454:	463a      	mov	r2, r7
 800c456:	4630      	mov	r0, r6
 800c458:	f7ff ffda 	bl	800c410 <__sfputc_r>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d1f3      	bne.n	800c448 <__sfputs_r+0xa>
 800c460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c464 <_vfiprintf_r>:
 800c464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c468:	460d      	mov	r5, r1
 800c46a:	b09d      	sub	sp, #116	; 0x74
 800c46c:	4614      	mov	r4, r2
 800c46e:	4698      	mov	r8, r3
 800c470:	4606      	mov	r6, r0
 800c472:	b118      	cbz	r0, 800c47c <_vfiprintf_r+0x18>
 800c474:	6a03      	ldr	r3, [r0, #32]
 800c476:	b90b      	cbnz	r3, 800c47c <_vfiprintf_r+0x18>
 800c478:	f7fc ff6e 	bl	8009358 <__sinit>
 800c47c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c47e:	07d9      	lsls	r1, r3, #31
 800c480:	d405      	bmi.n	800c48e <_vfiprintf_r+0x2a>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	059a      	lsls	r2, r3, #22
 800c486:	d402      	bmi.n	800c48e <_vfiprintf_r+0x2a>
 800c488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c48a:	f7fd f9c1 	bl	8009810 <__retarget_lock_acquire_recursive>
 800c48e:	89ab      	ldrh	r3, [r5, #12]
 800c490:	071b      	lsls	r3, r3, #28
 800c492:	d501      	bpl.n	800c498 <_vfiprintf_r+0x34>
 800c494:	692b      	ldr	r3, [r5, #16]
 800c496:	b99b      	cbnz	r3, 800c4c0 <_vfiprintf_r+0x5c>
 800c498:	4629      	mov	r1, r5
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7fd f8ce 	bl	800963c <__swsetup_r>
 800c4a0:	b170      	cbz	r0, 800c4c0 <_vfiprintf_r+0x5c>
 800c4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4a4:	07dc      	lsls	r4, r3, #31
 800c4a6:	d504      	bpl.n	800c4b2 <_vfiprintf_r+0x4e>
 800c4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ac:	b01d      	add	sp, #116	; 0x74
 800c4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b2:	89ab      	ldrh	r3, [r5, #12]
 800c4b4:	0598      	lsls	r0, r3, #22
 800c4b6:	d4f7      	bmi.n	800c4a8 <_vfiprintf_r+0x44>
 800c4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ba:	f7fd f9aa 	bl	8009812 <__retarget_lock_release_recursive>
 800c4be:	e7f3      	b.n	800c4a8 <_vfiprintf_r+0x44>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4c4:	2320      	movs	r3, #32
 800c4c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ce:	2330      	movs	r3, #48	; 0x30
 800c4d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c684 <_vfiprintf_r+0x220>
 800c4d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4d8:	f04f 0901 	mov.w	r9, #1
 800c4dc:	4623      	mov	r3, r4
 800c4de:	469a      	mov	sl, r3
 800c4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4e4:	b10a      	cbz	r2, 800c4ea <_vfiprintf_r+0x86>
 800c4e6:	2a25      	cmp	r2, #37	; 0x25
 800c4e8:	d1f9      	bne.n	800c4de <_vfiprintf_r+0x7a>
 800c4ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ee:	d00b      	beq.n	800c508 <_vfiprintf_r+0xa4>
 800c4f0:	465b      	mov	r3, fp
 800c4f2:	4622      	mov	r2, r4
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f7ff ffa1 	bl	800c43e <__sfputs_r>
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	f000 80a9 	beq.w	800c654 <_vfiprintf_r+0x1f0>
 800c502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c504:	445a      	add	r2, fp
 800c506:	9209      	str	r2, [sp, #36]	; 0x24
 800c508:	f89a 3000 	ldrb.w	r3, [sl]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 80a1 	beq.w	800c654 <_vfiprintf_r+0x1f0>
 800c512:	2300      	movs	r3, #0
 800c514:	f04f 32ff 	mov.w	r2, #4294967295
 800c518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c51c:	f10a 0a01 	add.w	sl, sl, #1
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	9307      	str	r3, [sp, #28]
 800c524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c528:	931a      	str	r3, [sp, #104]	; 0x68
 800c52a:	4654      	mov	r4, sl
 800c52c:	2205      	movs	r2, #5
 800c52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c532:	4854      	ldr	r0, [pc, #336]	; (800c684 <_vfiprintf_r+0x220>)
 800c534:	f7f3 fe6c 	bl	8000210 <memchr>
 800c538:	9a04      	ldr	r2, [sp, #16]
 800c53a:	b9d8      	cbnz	r0, 800c574 <_vfiprintf_r+0x110>
 800c53c:	06d1      	lsls	r1, r2, #27
 800c53e:	bf44      	itt	mi
 800c540:	2320      	movmi	r3, #32
 800c542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c546:	0713      	lsls	r3, r2, #28
 800c548:	bf44      	itt	mi
 800c54a:	232b      	movmi	r3, #43	; 0x2b
 800c54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c550:	f89a 3000 	ldrb.w	r3, [sl]
 800c554:	2b2a      	cmp	r3, #42	; 0x2a
 800c556:	d015      	beq.n	800c584 <_vfiprintf_r+0x120>
 800c558:	9a07      	ldr	r2, [sp, #28]
 800c55a:	4654      	mov	r4, sl
 800c55c:	2000      	movs	r0, #0
 800c55e:	f04f 0c0a 	mov.w	ip, #10
 800c562:	4621      	mov	r1, r4
 800c564:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c568:	3b30      	subs	r3, #48	; 0x30
 800c56a:	2b09      	cmp	r3, #9
 800c56c:	d94d      	bls.n	800c60a <_vfiprintf_r+0x1a6>
 800c56e:	b1b0      	cbz	r0, 800c59e <_vfiprintf_r+0x13a>
 800c570:	9207      	str	r2, [sp, #28]
 800c572:	e014      	b.n	800c59e <_vfiprintf_r+0x13a>
 800c574:	eba0 0308 	sub.w	r3, r0, r8
 800c578:	fa09 f303 	lsl.w	r3, r9, r3
 800c57c:	4313      	orrs	r3, r2
 800c57e:	9304      	str	r3, [sp, #16]
 800c580:	46a2      	mov	sl, r4
 800c582:	e7d2      	b.n	800c52a <_vfiprintf_r+0xc6>
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	1d19      	adds	r1, r3, #4
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	9103      	str	r1, [sp, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bfbb      	ittet	lt
 800c590:	425b      	neglt	r3, r3
 800c592:	f042 0202 	orrlt.w	r2, r2, #2
 800c596:	9307      	strge	r3, [sp, #28]
 800c598:	9307      	strlt	r3, [sp, #28]
 800c59a:	bfb8      	it	lt
 800c59c:	9204      	strlt	r2, [sp, #16]
 800c59e:	7823      	ldrb	r3, [r4, #0]
 800c5a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a2:	d10c      	bne.n	800c5be <_vfiprintf_r+0x15a>
 800c5a4:	7863      	ldrb	r3, [r4, #1]
 800c5a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5a8:	d134      	bne.n	800c614 <_vfiprintf_r+0x1b0>
 800c5aa:	9b03      	ldr	r3, [sp, #12]
 800c5ac:	1d1a      	adds	r2, r3, #4
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	9203      	str	r2, [sp, #12]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	bfb8      	it	lt
 800c5b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5ba:	3402      	adds	r4, #2
 800c5bc:	9305      	str	r3, [sp, #20]
 800c5be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c694 <_vfiprintf_r+0x230>
 800c5c2:	7821      	ldrb	r1, [r4, #0]
 800c5c4:	2203      	movs	r2, #3
 800c5c6:	4650      	mov	r0, sl
 800c5c8:	f7f3 fe22 	bl	8000210 <memchr>
 800c5cc:	b138      	cbz	r0, 800c5de <_vfiprintf_r+0x17a>
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	eba0 000a 	sub.w	r0, r0, sl
 800c5d4:	2240      	movs	r2, #64	; 0x40
 800c5d6:	4082      	lsls	r2, r0
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	3401      	adds	r4, #1
 800c5dc:	9304      	str	r3, [sp, #16]
 800c5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e2:	4829      	ldr	r0, [pc, #164]	; (800c688 <_vfiprintf_r+0x224>)
 800c5e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5e8:	2206      	movs	r2, #6
 800c5ea:	f7f3 fe11 	bl	8000210 <memchr>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d03f      	beq.n	800c672 <_vfiprintf_r+0x20e>
 800c5f2:	4b26      	ldr	r3, [pc, #152]	; (800c68c <_vfiprintf_r+0x228>)
 800c5f4:	bb1b      	cbnz	r3, 800c63e <_vfiprintf_r+0x1da>
 800c5f6:	9b03      	ldr	r3, [sp, #12]
 800c5f8:	3307      	adds	r3, #7
 800c5fa:	f023 0307 	bic.w	r3, r3, #7
 800c5fe:	3308      	adds	r3, #8
 800c600:	9303      	str	r3, [sp, #12]
 800c602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c604:	443b      	add	r3, r7
 800c606:	9309      	str	r3, [sp, #36]	; 0x24
 800c608:	e768      	b.n	800c4dc <_vfiprintf_r+0x78>
 800c60a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c60e:	460c      	mov	r4, r1
 800c610:	2001      	movs	r0, #1
 800c612:	e7a6      	b.n	800c562 <_vfiprintf_r+0xfe>
 800c614:	2300      	movs	r3, #0
 800c616:	3401      	adds	r4, #1
 800c618:	9305      	str	r3, [sp, #20]
 800c61a:	4619      	mov	r1, r3
 800c61c:	f04f 0c0a 	mov.w	ip, #10
 800c620:	4620      	mov	r0, r4
 800c622:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c626:	3a30      	subs	r2, #48	; 0x30
 800c628:	2a09      	cmp	r2, #9
 800c62a:	d903      	bls.n	800c634 <_vfiprintf_r+0x1d0>
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d0c6      	beq.n	800c5be <_vfiprintf_r+0x15a>
 800c630:	9105      	str	r1, [sp, #20]
 800c632:	e7c4      	b.n	800c5be <_vfiprintf_r+0x15a>
 800c634:	fb0c 2101 	mla	r1, ip, r1, r2
 800c638:	4604      	mov	r4, r0
 800c63a:	2301      	movs	r3, #1
 800c63c:	e7f0      	b.n	800c620 <_vfiprintf_r+0x1bc>
 800c63e:	ab03      	add	r3, sp, #12
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	462a      	mov	r2, r5
 800c644:	4b12      	ldr	r3, [pc, #72]	; (800c690 <_vfiprintf_r+0x22c>)
 800c646:	a904      	add	r1, sp, #16
 800c648:	4630      	mov	r0, r6
 800c64a:	f7fc f835 	bl	80086b8 <_printf_float>
 800c64e:	4607      	mov	r7, r0
 800c650:	1c78      	adds	r0, r7, #1
 800c652:	d1d6      	bne.n	800c602 <_vfiprintf_r+0x19e>
 800c654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c656:	07d9      	lsls	r1, r3, #31
 800c658:	d405      	bmi.n	800c666 <_vfiprintf_r+0x202>
 800c65a:	89ab      	ldrh	r3, [r5, #12]
 800c65c:	059a      	lsls	r2, r3, #22
 800c65e:	d402      	bmi.n	800c666 <_vfiprintf_r+0x202>
 800c660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c662:	f7fd f8d6 	bl	8009812 <__retarget_lock_release_recursive>
 800c666:	89ab      	ldrh	r3, [r5, #12]
 800c668:	065b      	lsls	r3, r3, #25
 800c66a:	f53f af1d 	bmi.w	800c4a8 <_vfiprintf_r+0x44>
 800c66e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c670:	e71c      	b.n	800c4ac <_vfiprintf_r+0x48>
 800c672:	ab03      	add	r3, sp, #12
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	462a      	mov	r2, r5
 800c678:	4b05      	ldr	r3, [pc, #20]	; (800c690 <_vfiprintf_r+0x22c>)
 800c67a:	a904      	add	r1, sp, #16
 800c67c:	4630      	mov	r0, r6
 800c67e:	f7fc fabf 	bl	8008c00 <_printf_i>
 800c682:	e7e4      	b.n	800c64e <_vfiprintf_r+0x1ea>
 800c684:	0800dcd9 	.word	0x0800dcd9
 800c688:	0800dce3 	.word	0x0800dce3
 800c68c:	080086b9 	.word	0x080086b9
 800c690:	0800c43f 	.word	0x0800c43f
 800c694:	0800dcdf 	.word	0x0800dcdf

0800c698 <_scanf_chars>:
 800c698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69c:	4615      	mov	r5, r2
 800c69e:	688a      	ldr	r2, [r1, #8]
 800c6a0:	4680      	mov	r8, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	b932      	cbnz	r2, 800c6b4 <_scanf_chars+0x1c>
 800c6a6:	698a      	ldr	r2, [r1, #24]
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	bf0c      	ite	eq
 800c6ac:	2201      	moveq	r2, #1
 800c6ae:	f04f 32ff 	movne.w	r2, #4294967295
 800c6b2:	608a      	str	r2, [r1, #8]
 800c6b4:	6822      	ldr	r2, [r4, #0]
 800c6b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c748 <_scanf_chars+0xb0>
 800c6ba:	06d1      	lsls	r1, r2, #27
 800c6bc:	bf5f      	itttt	pl
 800c6be:	681a      	ldrpl	r2, [r3, #0]
 800c6c0:	1d11      	addpl	r1, r2, #4
 800c6c2:	6019      	strpl	r1, [r3, #0]
 800c6c4:	6816      	ldrpl	r6, [r2, #0]
 800c6c6:	2700      	movs	r7, #0
 800c6c8:	69a0      	ldr	r0, [r4, #24]
 800c6ca:	b188      	cbz	r0, 800c6f0 <_scanf_chars+0x58>
 800c6cc:	2801      	cmp	r0, #1
 800c6ce:	d107      	bne.n	800c6e0 <_scanf_chars+0x48>
 800c6d0:	682a      	ldr	r2, [r5, #0]
 800c6d2:	7811      	ldrb	r1, [r2, #0]
 800c6d4:	6962      	ldr	r2, [r4, #20]
 800c6d6:	5c52      	ldrb	r2, [r2, r1]
 800c6d8:	b952      	cbnz	r2, 800c6f0 <_scanf_chars+0x58>
 800c6da:	2f00      	cmp	r7, #0
 800c6dc:	d031      	beq.n	800c742 <_scanf_chars+0xaa>
 800c6de:	e022      	b.n	800c726 <_scanf_chars+0x8e>
 800c6e0:	2802      	cmp	r0, #2
 800c6e2:	d120      	bne.n	800c726 <_scanf_chars+0x8e>
 800c6e4:	682b      	ldr	r3, [r5, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c6ec:	071b      	lsls	r3, r3, #28
 800c6ee:	d41a      	bmi.n	800c726 <_scanf_chars+0x8e>
 800c6f0:	6823      	ldr	r3, [r4, #0]
 800c6f2:	06da      	lsls	r2, r3, #27
 800c6f4:	bf5e      	ittt	pl
 800c6f6:	682b      	ldrpl	r3, [r5, #0]
 800c6f8:	781b      	ldrbpl	r3, [r3, #0]
 800c6fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c6fe:	682a      	ldr	r2, [r5, #0]
 800c700:	686b      	ldr	r3, [r5, #4]
 800c702:	3201      	adds	r2, #1
 800c704:	602a      	str	r2, [r5, #0]
 800c706:	68a2      	ldr	r2, [r4, #8]
 800c708:	3b01      	subs	r3, #1
 800c70a:	3a01      	subs	r2, #1
 800c70c:	606b      	str	r3, [r5, #4]
 800c70e:	3701      	adds	r7, #1
 800c710:	60a2      	str	r2, [r4, #8]
 800c712:	b142      	cbz	r2, 800c726 <_scanf_chars+0x8e>
 800c714:	2b00      	cmp	r3, #0
 800c716:	dcd7      	bgt.n	800c6c8 <_scanf_chars+0x30>
 800c718:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c71c:	4629      	mov	r1, r5
 800c71e:	4640      	mov	r0, r8
 800c720:	4798      	blx	r3
 800c722:	2800      	cmp	r0, #0
 800c724:	d0d0      	beq.n	800c6c8 <_scanf_chars+0x30>
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	f013 0310 	ands.w	r3, r3, #16
 800c72c:	d105      	bne.n	800c73a <_scanf_chars+0xa2>
 800c72e:	68e2      	ldr	r2, [r4, #12]
 800c730:	3201      	adds	r2, #1
 800c732:	60e2      	str	r2, [r4, #12]
 800c734:	69a2      	ldr	r2, [r4, #24]
 800c736:	b102      	cbz	r2, 800c73a <_scanf_chars+0xa2>
 800c738:	7033      	strb	r3, [r6, #0]
 800c73a:	6923      	ldr	r3, [r4, #16]
 800c73c:	443b      	add	r3, r7
 800c73e:	6123      	str	r3, [r4, #16]
 800c740:	2000      	movs	r0, #0
 800c742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c746:	bf00      	nop
 800c748:	0800dbd9 	.word	0x0800dbd9

0800c74c <_scanf_i>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	4698      	mov	r8, r3
 800c752:	4b74      	ldr	r3, [pc, #464]	; (800c924 <_scanf_i+0x1d8>)
 800c754:	460c      	mov	r4, r1
 800c756:	4682      	mov	sl, r0
 800c758:	4616      	mov	r6, r2
 800c75a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c75e:	b087      	sub	sp, #28
 800c760:	ab03      	add	r3, sp, #12
 800c762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c766:	4b70      	ldr	r3, [pc, #448]	; (800c928 <_scanf_i+0x1dc>)
 800c768:	69a1      	ldr	r1, [r4, #24]
 800c76a:	4a70      	ldr	r2, [pc, #448]	; (800c92c <_scanf_i+0x1e0>)
 800c76c:	2903      	cmp	r1, #3
 800c76e:	bf18      	it	ne
 800c770:	461a      	movne	r2, r3
 800c772:	68a3      	ldr	r3, [r4, #8]
 800c774:	9201      	str	r2, [sp, #4]
 800c776:	1e5a      	subs	r2, r3, #1
 800c778:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c77c:	bf88      	it	hi
 800c77e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c782:	4627      	mov	r7, r4
 800c784:	bf82      	ittt	hi
 800c786:	eb03 0905 	addhi.w	r9, r3, r5
 800c78a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c78e:	60a3      	strhi	r3, [r4, #8]
 800c790:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c794:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c798:	bf98      	it	ls
 800c79a:	f04f 0900 	movls.w	r9, #0
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	463d      	mov	r5, r7
 800c7a2:	f04f 0b00 	mov.w	fp, #0
 800c7a6:	6831      	ldr	r1, [r6, #0]
 800c7a8:	ab03      	add	r3, sp, #12
 800c7aa:	7809      	ldrb	r1, [r1, #0]
 800c7ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	f7f3 fd2d 	bl	8000210 <memchr>
 800c7b6:	b328      	cbz	r0, 800c804 <_scanf_i+0xb8>
 800c7b8:	f1bb 0f01 	cmp.w	fp, #1
 800c7bc:	d159      	bne.n	800c872 <_scanf_i+0x126>
 800c7be:	6862      	ldr	r2, [r4, #4]
 800c7c0:	b92a      	cbnz	r2, 800c7ce <_scanf_i+0x82>
 800c7c2:	6822      	ldr	r2, [r4, #0]
 800c7c4:	2308      	movs	r3, #8
 800c7c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7ca:	6063      	str	r3, [r4, #4]
 800c7cc:	6022      	str	r2, [r4, #0]
 800c7ce:	6822      	ldr	r2, [r4, #0]
 800c7d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c7d4:	6022      	str	r2, [r4, #0]
 800c7d6:	68a2      	ldr	r2, [r4, #8]
 800c7d8:	1e51      	subs	r1, r2, #1
 800c7da:	60a1      	str	r1, [r4, #8]
 800c7dc:	b192      	cbz	r2, 800c804 <_scanf_i+0xb8>
 800c7de:	6832      	ldr	r2, [r6, #0]
 800c7e0:	1c51      	adds	r1, r2, #1
 800c7e2:	6031      	str	r1, [r6, #0]
 800c7e4:	7812      	ldrb	r2, [r2, #0]
 800c7e6:	f805 2b01 	strb.w	r2, [r5], #1
 800c7ea:	6872      	ldr	r2, [r6, #4]
 800c7ec:	3a01      	subs	r2, #1
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	6072      	str	r2, [r6, #4]
 800c7f2:	dc07      	bgt.n	800c804 <_scanf_i+0xb8>
 800c7f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c7f8:	4631      	mov	r1, r6
 800c7fa:	4650      	mov	r0, sl
 800c7fc:	4790      	blx	r2
 800c7fe:	2800      	cmp	r0, #0
 800c800:	f040 8085 	bne.w	800c90e <_scanf_i+0x1c2>
 800c804:	f10b 0b01 	add.w	fp, fp, #1
 800c808:	f1bb 0f03 	cmp.w	fp, #3
 800c80c:	d1cb      	bne.n	800c7a6 <_scanf_i+0x5a>
 800c80e:	6863      	ldr	r3, [r4, #4]
 800c810:	b90b      	cbnz	r3, 800c816 <_scanf_i+0xca>
 800c812:	230a      	movs	r3, #10
 800c814:	6063      	str	r3, [r4, #4]
 800c816:	6863      	ldr	r3, [r4, #4]
 800c818:	4945      	ldr	r1, [pc, #276]	; (800c930 <_scanf_i+0x1e4>)
 800c81a:	6960      	ldr	r0, [r4, #20]
 800c81c:	1ac9      	subs	r1, r1, r3
 800c81e:	f000 f999 	bl	800cb54 <__sccl>
 800c822:	f04f 0b00 	mov.w	fp, #0
 800c826:	68a3      	ldr	r3, [r4, #8]
 800c828:	6822      	ldr	r2, [r4, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d03d      	beq.n	800c8aa <_scanf_i+0x15e>
 800c82e:	6831      	ldr	r1, [r6, #0]
 800c830:	6960      	ldr	r0, [r4, #20]
 800c832:	f891 c000 	ldrb.w	ip, [r1]
 800c836:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d035      	beq.n	800c8aa <_scanf_i+0x15e>
 800c83e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c842:	d124      	bne.n	800c88e <_scanf_i+0x142>
 800c844:	0510      	lsls	r0, r2, #20
 800c846:	d522      	bpl.n	800c88e <_scanf_i+0x142>
 800c848:	f10b 0b01 	add.w	fp, fp, #1
 800c84c:	f1b9 0f00 	cmp.w	r9, #0
 800c850:	d003      	beq.n	800c85a <_scanf_i+0x10e>
 800c852:	3301      	adds	r3, #1
 800c854:	f109 39ff 	add.w	r9, r9, #4294967295
 800c858:	60a3      	str	r3, [r4, #8]
 800c85a:	6873      	ldr	r3, [r6, #4]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	2b00      	cmp	r3, #0
 800c860:	6073      	str	r3, [r6, #4]
 800c862:	dd1b      	ble.n	800c89c <_scanf_i+0x150>
 800c864:	6833      	ldr	r3, [r6, #0]
 800c866:	3301      	adds	r3, #1
 800c868:	6033      	str	r3, [r6, #0]
 800c86a:	68a3      	ldr	r3, [r4, #8]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	60a3      	str	r3, [r4, #8]
 800c870:	e7d9      	b.n	800c826 <_scanf_i+0xda>
 800c872:	f1bb 0f02 	cmp.w	fp, #2
 800c876:	d1ae      	bne.n	800c7d6 <_scanf_i+0x8a>
 800c878:	6822      	ldr	r2, [r4, #0]
 800c87a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c87e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c882:	d1bf      	bne.n	800c804 <_scanf_i+0xb8>
 800c884:	2310      	movs	r3, #16
 800c886:	6063      	str	r3, [r4, #4]
 800c888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c88c:	e7a2      	b.n	800c7d4 <_scanf_i+0x88>
 800c88e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c892:	6022      	str	r2, [r4, #0]
 800c894:	780b      	ldrb	r3, [r1, #0]
 800c896:	f805 3b01 	strb.w	r3, [r5], #1
 800c89a:	e7de      	b.n	800c85a <_scanf_i+0x10e>
 800c89c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8a0:	4631      	mov	r1, r6
 800c8a2:	4650      	mov	r0, sl
 800c8a4:	4798      	blx	r3
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d0df      	beq.n	800c86a <_scanf_i+0x11e>
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	05d9      	lsls	r1, r3, #23
 800c8ae:	d50d      	bpl.n	800c8cc <_scanf_i+0x180>
 800c8b0:	42bd      	cmp	r5, r7
 800c8b2:	d909      	bls.n	800c8c8 <_scanf_i+0x17c>
 800c8b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c8b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8bc:	4632      	mov	r2, r6
 800c8be:	4650      	mov	r0, sl
 800c8c0:	4798      	blx	r3
 800c8c2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c8c6:	464d      	mov	r5, r9
 800c8c8:	42bd      	cmp	r5, r7
 800c8ca:	d028      	beq.n	800c91e <_scanf_i+0x1d2>
 800c8cc:	6822      	ldr	r2, [r4, #0]
 800c8ce:	f012 0210 	ands.w	r2, r2, #16
 800c8d2:	d113      	bne.n	800c8fc <_scanf_i+0x1b0>
 800c8d4:	702a      	strb	r2, [r5, #0]
 800c8d6:	6863      	ldr	r3, [r4, #4]
 800c8d8:	9e01      	ldr	r6, [sp, #4]
 800c8da:	4639      	mov	r1, r7
 800c8dc:	4650      	mov	r0, sl
 800c8de:	47b0      	blx	r6
 800c8e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c8e4:	6821      	ldr	r1, [r4, #0]
 800c8e6:	1d1a      	adds	r2, r3, #4
 800c8e8:	f8c8 2000 	str.w	r2, [r8]
 800c8ec:	f011 0f20 	tst.w	r1, #32
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	d00f      	beq.n	800c914 <_scanf_i+0x1c8>
 800c8f4:	6018      	str	r0, [r3, #0]
 800c8f6:	68e3      	ldr	r3, [r4, #12]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	60e3      	str	r3, [r4, #12]
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	1bed      	subs	r5, r5, r7
 800c900:	445d      	add	r5, fp
 800c902:	442b      	add	r3, r5
 800c904:	6123      	str	r3, [r4, #16]
 800c906:	2000      	movs	r0, #0
 800c908:	b007      	add	sp, #28
 800c90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90e:	f04f 0b00 	mov.w	fp, #0
 800c912:	e7ca      	b.n	800c8aa <_scanf_i+0x15e>
 800c914:	07ca      	lsls	r2, r1, #31
 800c916:	bf4c      	ite	mi
 800c918:	8018      	strhmi	r0, [r3, #0]
 800c91a:	6018      	strpl	r0, [r3, #0]
 800c91c:	e7eb      	b.n	800c8f6 <_scanf_i+0x1aa>
 800c91e:	2001      	movs	r0, #1
 800c920:	e7f2      	b.n	800c908 <_scanf_i+0x1bc>
 800c922:	bf00      	nop
 800c924:	0800d938 	.word	0x0800d938
 800c928:	0800d585 	.word	0x0800d585
 800c92c:	0800bdb9 	.word	0x0800bdb9
 800c930:	0800dcfa 	.word	0x0800dcfa

0800c934 <__sflush_r>:
 800c934:	898a      	ldrh	r2, [r1, #12]
 800c936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93a:	4605      	mov	r5, r0
 800c93c:	0710      	lsls	r0, r2, #28
 800c93e:	460c      	mov	r4, r1
 800c940:	d458      	bmi.n	800c9f4 <__sflush_r+0xc0>
 800c942:	684b      	ldr	r3, [r1, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	dc05      	bgt.n	800c954 <__sflush_r+0x20>
 800c948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	dc02      	bgt.n	800c954 <__sflush_r+0x20>
 800c94e:	2000      	movs	r0, #0
 800c950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c956:	2e00      	cmp	r6, #0
 800c958:	d0f9      	beq.n	800c94e <__sflush_r+0x1a>
 800c95a:	2300      	movs	r3, #0
 800c95c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c960:	682f      	ldr	r7, [r5, #0]
 800c962:	6a21      	ldr	r1, [r4, #32]
 800c964:	602b      	str	r3, [r5, #0]
 800c966:	d032      	beq.n	800c9ce <__sflush_r+0x9a>
 800c968:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	075a      	lsls	r2, r3, #29
 800c96e:	d505      	bpl.n	800c97c <__sflush_r+0x48>
 800c970:	6863      	ldr	r3, [r4, #4]
 800c972:	1ac0      	subs	r0, r0, r3
 800c974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c976:	b10b      	cbz	r3, 800c97c <__sflush_r+0x48>
 800c978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c97a:	1ac0      	subs	r0, r0, r3
 800c97c:	2300      	movs	r3, #0
 800c97e:	4602      	mov	r2, r0
 800c980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c982:	6a21      	ldr	r1, [r4, #32]
 800c984:	4628      	mov	r0, r5
 800c986:	47b0      	blx	r6
 800c988:	1c43      	adds	r3, r0, #1
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	d106      	bne.n	800c99c <__sflush_r+0x68>
 800c98e:	6829      	ldr	r1, [r5, #0]
 800c990:	291d      	cmp	r1, #29
 800c992:	d82b      	bhi.n	800c9ec <__sflush_r+0xb8>
 800c994:	4a29      	ldr	r2, [pc, #164]	; (800ca3c <__sflush_r+0x108>)
 800c996:	410a      	asrs	r2, r1
 800c998:	07d6      	lsls	r6, r2, #31
 800c99a:	d427      	bmi.n	800c9ec <__sflush_r+0xb8>
 800c99c:	2200      	movs	r2, #0
 800c99e:	6062      	str	r2, [r4, #4]
 800c9a0:	04d9      	lsls	r1, r3, #19
 800c9a2:	6922      	ldr	r2, [r4, #16]
 800c9a4:	6022      	str	r2, [r4, #0]
 800c9a6:	d504      	bpl.n	800c9b2 <__sflush_r+0x7e>
 800c9a8:	1c42      	adds	r2, r0, #1
 800c9aa:	d101      	bne.n	800c9b0 <__sflush_r+0x7c>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b903      	cbnz	r3, 800c9b2 <__sflush_r+0x7e>
 800c9b0:	6560      	str	r0, [r4, #84]	; 0x54
 800c9b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9b4:	602f      	str	r7, [r5, #0]
 800c9b6:	2900      	cmp	r1, #0
 800c9b8:	d0c9      	beq.n	800c94e <__sflush_r+0x1a>
 800c9ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9be:	4299      	cmp	r1, r3
 800c9c0:	d002      	beq.n	800c9c8 <__sflush_r+0x94>
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f7fd fdb6 	bl	800a534 <_free_r>
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	6360      	str	r0, [r4, #52]	; 0x34
 800c9cc:	e7c0      	b.n	800c950 <__sflush_r+0x1c>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	47b0      	blx	r6
 800c9d4:	1c41      	adds	r1, r0, #1
 800c9d6:	d1c8      	bne.n	800c96a <__sflush_r+0x36>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0c5      	beq.n	800c96a <__sflush_r+0x36>
 800c9de:	2b1d      	cmp	r3, #29
 800c9e0:	d001      	beq.n	800c9e6 <__sflush_r+0xb2>
 800c9e2:	2b16      	cmp	r3, #22
 800c9e4:	d101      	bne.n	800c9ea <__sflush_r+0xb6>
 800c9e6:	602f      	str	r7, [r5, #0]
 800c9e8:	e7b1      	b.n	800c94e <__sflush_r+0x1a>
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f0:	81a3      	strh	r3, [r4, #12]
 800c9f2:	e7ad      	b.n	800c950 <__sflush_r+0x1c>
 800c9f4:	690f      	ldr	r7, [r1, #16]
 800c9f6:	2f00      	cmp	r7, #0
 800c9f8:	d0a9      	beq.n	800c94e <__sflush_r+0x1a>
 800c9fa:	0793      	lsls	r3, r2, #30
 800c9fc:	680e      	ldr	r6, [r1, #0]
 800c9fe:	bf08      	it	eq
 800ca00:	694b      	ldreq	r3, [r1, #20]
 800ca02:	600f      	str	r7, [r1, #0]
 800ca04:	bf18      	it	ne
 800ca06:	2300      	movne	r3, #0
 800ca08:	eba6 0807 	sub.w	r8, r6, r7
 800ca0c:	608b      	str	r3, [r1, #8]
 800ca0e:	f1b8 0f00 	cmp.w	r8, #0
 800ca12:	dd9c      	ble.n	800c94e <__sflush_r+0x1a>
 800ca14:	6a21      	ldr	r1, [r4, #32]
 800ca16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca18:	4643      	mov	r3, r8
 800ca1a:	463a      	mov	r2, r7
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	47b0      	blx	r6
 800ca20:	2800      	cmp	r0, #0
 800ca22:	dc06      	bgt.n	800ca32 <__sflush_r+0xfe>
 800ca24:	89a3      	ldrh	r3, [r4, #12]
 800ca26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca2a:	81a3      	strh	r3, [r4, #12]
 800ca2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca30:	e78e      	b.n	800c950 <__sflush_r+0x1c>
 800ca32:	4407      	add	r7, r0
 800ca34:	eba8 0800 	sub.w	r8, r8, r0
 800ca38:	e7e9      	b.n	800ca0e <__sflush_r+0xda>
 800ca3a:	bf00      	nop
 800ca3c:	dfbffffe 	.word	0xdfbffffe

0800ca40 <_fflush_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	690b      	ldr	r3, [r1, #16]
 800ca44:	4605      	mov	r5, r0
 800ca46:	460c      	mov	r4, r1
 800ca48:	b913      	cbnz	r3, 800ca50 <_fflush_r+0x10>
 800ca4a:	2500      	movs	r5, #0
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	bd38      	pop	{r3, r4, r5, pc}
 800ca50:	b118      	cbz	r0, 800ca5a <_fflush_r+0x1a>
 800ca52:	6a03      	ldr	r3, [r0, #32]
 800ca54:	b90b      	cbnz	r3, 800ca5a <_fflush_r+0x1a>
 800ca56:	f7fc fc7f 	bl	8009358 <__sinit>
 800ca5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d0f3      	beq.n	800ca4a <_fflush_r+0xa>
 800ca62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca64:	07d0      	lsls	r0, r2, #31
 800ca66:	d404      	bmi.n	800ca72 <_fflush_r+0x32>
 800ca68:	0599      	lsls	r1, r3, #22
 800ca6a:	d402      	bmi.n	800ca72 <_fflush_r+0x32>
 800ca6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca6e:	f7fc fecf 	bl	8009810 <__retarget_lock_acquire_recursive>
 800ca72:	4628      	mov	r0, r5
 800ca74:	4621      	mov	r1, r4
 800ca76:	f7ff ff5d 	bl	800c934 <__sflush_r>
 800ca7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca7c:	07da      	lsls	r2, r3, #31
 800ca7e:	4605      	mov	r5, r0
 800ca80:	d4e4      	bmi.n	800ca4c <_fflush_r+0xc>
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	059b      	lsls	r3, r3, #22
 800ca86:	d4e1      	bmi.n	800ca4c <_fflush_r+0xc>
 800ca88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca8a:	f7fc fec2 	bl	8009812 <__retarget_lock_release_recursive>
 800ca8e:	e7dd      	b.n	800ca4c <_fflush_r+0xc>

0800ca90 <__swhatbuf_r>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	460c      	mov	r4, r1
 800ca94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca98:	2900      	cmp	r1, #0
 800ca9a:	b096      	sub	sp, #88	; 0x58
 800ca9c:	4615      	mov	r5, r2
 800ca9e:	461e      	mov	r6, r3
 800caa0:	da0d      	bge.n	800cabe <__swhatbuf_r+0x2e>
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800caa8:	f04f 0100 	mov.w	r1, #0
 800caac:	bf0c      	ite	eq
 800caae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cab2:	2340      	movne	r3, #64	; 0x40
 800cab4:	2000      	movs	r0, #0
 800cab6:	6031      	str	r1, [r6, #0]
 800cab8:	602b      	str	r3, [r5, #0]
 800caba:	b016      	add	sp, #88	; 0x58
 800cabc:	bd70      	pop	{r4, r5, r6, pc}
 800cabe:	466a      	mov	r2, sp
 800cac0:	f000 f8e8 	bl	800cc94 <_fstat_r>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	dbec      	blt.n	800caa2 <__swhatbuf_r+0x12>
 800cac8:	9901      	ldr	r1, [sp, #4]
 800caca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cace:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cad2:	4259      	negs	r1, r3
 800cad4:	4159      	adcs	r1, r3
 800cad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cada:	e7eb      	b.n	800cab4 <__swhatbuf_r+0x24>

0800cadc <__smakebuf_r>:
 800cadc:	898b      	ldrh	r3, [r1, #12]
 800cade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cae0:	079d      	lsls	r5, r3, #30
 800cae2:	4606      	mov	r6, r0
 800cae4:	460c      	mov	r4, r1
 800cae6:	d507      	bpl.n	800caf8 <__smakebuf_r+0x1c>
 800cae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	6123      	str	r3, [r4, #16]
 800caf0:	2301      	movs	r3, #1
 800caf2:	6163      	str	r3, [r4, #20]
 800caf4:	b002      	add	sp, #8
 800caf6:	bd70      	pop	{r4, r5, r6, pc}
 800caf8:	ab01      	add	r3, sp, #4
 800cafa:	466a      	mov	r2, sp
 800cafc:	f7ff ffc8 	bl	800ca90 <__swhatbuf_r>
 800cb00:	9900      	ldr	r1, [sp, #0]
 800cb02:	4605      	mov	r5, r0
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7fd fd89 	bl	800a61c <_malloc_r>
 800cb0a:	b948      	cbnz	r0, 800cb20 <__smakebuf_r+0x44>
 800cb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb10:	059a      	lsls	r2, r3, #22
 800cb12:	d4ef      	bmi.n	800caf4 <__smakebuf_r+0x18>
 800cb14:	f023 0303 	bic.w	r3, r3, #3
 800cb18:	f043 0302 	orr.w	r3, r3, #2
 800cb1c:	81a3      	strh	r3, [r4, #12]
 800cb1e:	e7e3      	b.n	800cae8 <__smakebuf_r+0xc>
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	6020      	str	r0, [r4, #0]
 800cb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	9b00      	ldr	r3, [sp, #0]
 800cb2c:	6163      	str	r3, [r4, #20]
 800cb2e:	9b01      	ldr	r3, [sp, #4]
 800cb30:	6120      	str	r0, [r4, #16]
 800cb32:	b15b      	cbz	r3, 800cb4c <__smakebuf_r+0x70>
 800cb34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f000 f8bd 	bl	800ccb8 <_isatty_r>
 800cb3e:	b128      	cbz	r0, 800cb4c <__smakebuf_r+0x70>
 800cb40:	89a3      	ldrh	r3, [r4, #12]
 800cb42:	f023 0303 	bic.w	r3, r3, #3
 800cb46:	f043 0301 	orr.w	r3, r3, #1
 800cb4a:	81a3      	strh	r3, [r4, #12]
 800cb4c:	89a3      	ldrh	r3, [r4, #12]
 800cb4e:	431d      	orrs	r5, r3
 800cb50:	81a5      	strh	r5, [r4, #12]
 800cb52:	e7cf      	b.n	800caf4 <__smakebuf_r+0x18>

0800cb54 <__sccl>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	780b      	ldrb	r3, [r1, #0]
 800cb58:	4604      	mov	r4, r0
 800cb5a:	2b5e      	cmp	r3, #94	; 0x5e
 800cb5c:	bf0b      	itete	eq
 800cb5e:	784b      	ldrbeq	r3, [r1, #1]
 800cb60:	1c4a      	addne	r2, r1, #1
 800cb62:	1c8a      	addeq	r2, r1, #2
 800cb64:	2100      	movne	r1, #0
 800cb66:	bf08      	it	eq
 800cb68:	2101      	moveq	r1, #1
 800cb6a:	3801      	subs	r0, #1
 800cb6c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cb70:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cb74:	42a8      	cmp	r0, r5
 800cb76:	d1fb      	bne.n	800cb70 <__sccl+0x1c>
 800cb78:	b90b      	cbnz	r3, 800cb7e <__sccl+0x2a>
 800cb7a:	1e50      	subs	r0, r2, #1
 800cb7c:	bd70      	pop	{r4, r5, r6, pc}
 800cb7e:	f081 0101 	eor.w	r1, r1, #1
 800cb82:	54e1      	strb	r1, [r4, r3]
 800cb84:	4610      	mov	r0, r2
 800cb86:	4602      	mov	r2, r0
 800cb88:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cb8c:	2d2d      	cmp	r5, #45	; 0x2d
 800cb8e:	d005      	beq.n	800cb9c <__sccl+0x48>
 800cb90:	2d5d      	cmp	r5, #93	; 0x5d
 800cb92:	d016      	beq.n	800cbc2 <__sccl+0x6e>
 800cb94:	2d00      	cmp	r5, #0
 800cb96:	d0f1      	beq.n	800cb7c <__sccl+0x28>
 800cb98:	462b      	mov	r3, r5
 800cb9a:	e7f2      	b.n	800cb82 <__sccl+0x2e>
 800cb9c:	7846      	ldrb	r6, [r0, #1]
 800cb9e:	2e5d      	cmp	r6, #93	; 0x5d
 800cba0:	d0fa      	beq.n	800cb98 <__sccl+0x44>
 800cba2:	42b3      	cmp	r3, r6
 800cba4:	dcf8      	bgt.n	800cb98 <__sccl+0x44>
 800cba6:	3002      	adds	r0, #2
 800cba8:	461a      	mov	r2, r3
 800cbaa:	3201      	adds	r2, #1
 800cbac:	4296      	cmp	r6, r2
 800cbae:	54a1      	strb	r1, [r4, r2]
 800cbb0:	dcfb      	bgt.n	800cbaa <__sccl+0x56>
 800cbb2:	1af2      	subs	r2, r6, r3
 800cbb4:	3a01      	subs	r2, #1
 800cbb6:	1c5d      	adds	r5, r3, #1
 800cbb8:	42b3      	cmp	r3, r6
 800cbba:	bfa8      	it	ge
 800cbbc:	2200      	movge	r2, #0
 800cbbe:	18ab      	adds	r3, r5, r2
 800cbc0:	e7e1      	b.n	800cb86 <__sccl+0x32>
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	e7da      	b.n	800cb7c <__sccl+0x28>

0800cbc6 <__submore>:
 800cbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbca:	460c      	mov	r4, r1
 800cbcc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cbce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbd2:	4299      	cmp	r1, r3
 800cbd4:	d11d      	bne.n	800cc12 <__submore+0x4c>
 800cbd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cbda:	f7fd fd1f 	bl	800a61c <_malloc_r>
 800cbde:	b918      	cbnz	r0, 800cbe8 <__submore+0x22>
 800cbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbec:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cbf2:	6360      	str	r0, [r4, #52]	; 0x34
 800cbf4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cbf8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cbfc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cc00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cc04:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cc08:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cc0c:	6020      	str	r0, [r4, #0]
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e7e8      	b.n	800cbe4 <__submore+0x1e>
 800cc12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cc14:	0077      	lsls	r7, r6, #1
 800cc16:	463a      	mov	r2, r7
 800cc18:	f000 fc13 	bl	800d442 <_realloc_r>
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d0de      	beq.n	800cbe0 <__submore+0x1a>
 800cc22:	eb00 0806 	add.w	r8, r0, r6
 800cc26:	4601      	mov	r1, r0
 800cc28:	4632      	mov	r2, r6
 800cc2a:	4640      	mov	r0, r8
 800cc2c:	f7fc fdf2 	bl	8009814 <memcpy>
 800cc30:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cc34:	f8c4 8000 	str.w	r8, [r4]
 800cc38:	e7e9      	b.n	800cc0e <__submore+0x48>

0800cc3a <memmove>:
 800cc3a:	4288      	cmp	r0, r1
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	eb01 0402 	add.w	r4, r1, r2
 800cc42:	d902      	bls.n	800cc4a <memmove+0x10>
 800cc44:	4284      	cmp	r4, r0
 800cc46:	4623      	mov	r3, r4
 800cc48:	d807      	bhi.n	800cc5a <memmove+0x20>
 800cc4a:	1e43      	subs	r3, r0, #1
 800cc4c:	42a1      	cmp	r1, r4
 800cc4e:	d008      	beq.n	800cc62 <memmove+0x28>
 800cc50:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc54:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc58:	e7f8      	b.n	800cc4c <memmove+0x12>
 800cc5a:	4402      	add	r2, r0
 800cc5c:	4601      	mov	r1, r0
 800cc5e:	428a      	cmp	r2, r1
 800cc60:	d100      	bne.n	800cc64 <memmove+0x2a>
 800cc62:	bd10      	pop	{r4, pc}
 800cc64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc6c:	e7f7      	b.n	800cc5e <memmove+0x24>

0800cc6e <strncmp>:
 800cc6e:	b510      	push	{r4, lr}
 800cc70:	b16a      	cbz	r2, 800cc8e <strncmp+0x20>
 800cc72:	3901      	subs	r1, #1
 800cc74:	1884      	adds	r4, r0, r2
 800cc76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d103      	bne.n	800cc8a <strncmp+0x1c>
 800cc82:	42a0      	cmp	r0, r4
 800cc84:	d001      	beq.n	800cc8a <strncmp+0x1c>
 800cc86:	2a00      	cmp	r2, #0
 800cc88:	d1f5      	bne.n	800cc76 <strncmp+0x8>
 800cc8a:	1ad0      	subs	r0, r2, r3
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	4610      	mov	r0, r2
 800cc90:	e7fc      	b.n	800cc8c <strncmp+0x1e>
	...

0800cc94 <_fstat_r>:
 800cc94:	b538      	push	{r3, r4, r5, lr}
 800cc96:	4d07      	ldr	r5, [pc, #28]	; (800ccb4 <_fstat_r+0x20>)
 800cc98:	2300      	movs	r3, #0
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	4608      	mov	r0, r1
 800cc9e:	4611      	mov	r1, r2
 800cca0:	602b      	str	r3, [r5, #0]
 800cca2:	f7f7 f8d0 	bl	8003e46 <_fstat>
 800cca6:	1c43      	adds	r3, r0, #1
 800cca8:	d102      	bne.n	800ccb0 <_fstat_r+0x1c>
 800ccaa:	682b      	ldr	r3, [r5, #0]
 800ccac:	b103      	cbz	r3, 800ccb0 <_fstat_r+0x1c>
 800ccae:	6023      	str	r3, [r4, #0]
 800ccb0:	bd38      	pop	{r3, r4, r5, pc}
 800ccb2:	bf00      	nop
 800ccb4:	2000a3d4 	.word	0x2000a3d4

0800ccb8 <_isatty_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d06      	ldr	r5, [pc, #24]	; (800ccd4 <_isatty_r+0x1c>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	602b      	str	r3, [r5, #0]
 800ccc4:	f7f7 f8cf 	bl	8003e66 <_isatty>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	d102      	bne.n	800ccd2 <_isatty_r+0x1a>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	b103      	cbz	r3, 800ccd2 <_isatty_r+0x1a>
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	bd38      	pop	{r3, r4, r5, pc}
 800ccd4:	2000a3d4 	.word	0x2000a3d4

0800ccd8 <_sbrk_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	4d06      	ldr	r5, [pc, #24]	; (800ccf4 <_sbrk_r+0x1c>)
 800ccdc:	2300      	movs	r3, #0
 800ccde:	4604      	mov	r4, r0
 800cce0:	4608      	mov	r0, r1
 800cce2:	602b      	str	r3, [r5, #0]
 800cce4:	f7f7 f8d8 	bl	8003e98 <_sbrk>
 800cce8:	1c43      	adds	r3, r0, #1
 800ccea:	d102      	bne.n	800ccf2 <_sbrk_r+0x1a>
 800ccec:	682b      	ldr	r3, [r5, #0]
 800ccee:	b103      	cbz	r3, 800ccf2 <_sbrk_r+0x1a>
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	bd38      	pop	{r3, r4, r5, pc}
 800ccf4:	2000a3d4 	.word	0x2000a3d4

0800ccf8 <nan>:
 800ccf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd00 <nan+0x8>
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	00000000 	.word	0x00000000
 800cd04:	7ff80000 	.word	0x7ff80000

0800cd08 <__assert_func>:
 800cd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd0a:	4614      	mov	r4, r2
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	4b09      	ldr	r3, [pc, #36]	; (800cd34 <__assert_func+0x2c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4605      	mov	r5, r0
 800cd14:	68d8      	ldr	r0, [r3, #12]
 800cd16:	b14c      	cbz	r4, 800cd2c <__assert_func+0x24>
 800cd18:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <__assert_func+0x30>)
 800cd1a:	9100      	str	r1, [sp, #0]
 800cd1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd20:	4906      	ldr	r1, [pc, #24]	; (800cd3c <__assert_func+0x34>)
 800cd22:	462b      	mov	r3, r5
 800cd24:	f000 fc3e 	bl	800d5a4 <fiprintf>
 800cd28:	f000 fc4e 	bl	800d5c8 <abort>
 800cd2c:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <__assert_func+0x38>)
 800cd2e:	461c      	mov	r4, r3
 800cd30:	e7f3      	b.n	800cd1a <__assert_func+0x12>
 800cd32:	bf00      	nop
 800cd34:	200000b4 	.word	0x200000b4
 800cd38:	0800dd0d 	.word	0x0800dd0d
 800cd3c:	0800dd1a 	.word	0x0800dd1a
 800cd40:	0800dd48 	.word	0x0800dd48

0800cd44 <_calloc_r>:
 800cd44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd46:	fba1 2402 	umull	r2, r4, r1, r2
 800cd4a:	b94c      	cbnz	r4, 800cd60 <_calloc_r+0x1c>
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	9201      	str	r2, [sp, #4]
 800cd50:	f7fd fc64 	bl	800a61c <_malloc_r>
 800cd54:	9a01      	ldr	r2, [sp, #4]
 800cd56:	4605      	mov	r5, r0
 800cd58:	b930      	cbnz	r0, 800cd68 <_calloc_r+0x24>
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	b003      	add	sp, #12
 800cd5e:	bd30      	pop	{r4, r5, pc}
 800cd60:	220c      	movs	r2, #12
 800cd62:	6002      	str	r2, [r0, #0]
 800cd64:	2500      	movs	r5, #0
 800cd66:	e7f8      	b.n	800cd5a <_calloc_r+0x16>
 800cd68:	4621      	mov	r1, r4
 800cd6a:	f7fc fcbf 	bl	80096ec <memset>
 800cd6e:	e7f4      	b.n	800cd5a <_calloc_r+0x16>

0800cd70 <rshift>:
 800cd70:	6903      	ldr	r3, [r0, #16]
 800cd72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd7e:	f100 0414 	add.w	r4, r0, #20
 800cd82:	dd45      	ble.n	800ce10 <rshift+0xa0>
 800cd84:	f011 011f 	ands.w	r1, r1, #31
 800cd88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd90:	d10c      	bne.n	800cdac <rshift+0x3c>
 800cd92:	f100 0710 	add.w	r7, r0, #16
 800cd96:	4629      	mov	r1, r5
 800cd98:	42b1      	cmp	r1, r6
 800cd9a:	d334      	bcc.n	800ce06 <rshift+0x96>
 800cd9c:	1a9b      	subs	r3, r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	1eea      	subs	r2, r5, #3
 800cda2:	4296      	cmp	r6, r2
 800cda4:	bf38      	it	cc
 800cda6:	2300      	movcc	r3, #0
 800cda8:	4423      	add	r3, r4
 800cdaa:	e015      	b.n	800cdd8 <rshift+0x68>
 800cdac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdb0:	f1c1 0820 	rsb	r8, r1, #32
 800cdb4:	40cf      	lsrs	r7, r1
 800cdb6:	f105 0e04 	add.w	lr, r5, #4
 800cdba:	46a1      	mov	r9, r4
 800cdbc:	4576      	cmp	r6, lr
 800cdbe:	46f4      	mov	ip, lr
 800cdc0:	d815      	bhi.n	800cdee <rshift+0x7e>
 800cdc2:	1a9a      	subs	r2, r3, r2
 800cdc4:	0092      	lsls	r2, r2, #2
 800cdc6:	3a04      	subs	r2, #4
 800cdc8:	3501      	adds	r5, #1
 800cdca:	42ae      	cmp	r6, r5
 800cdcc:	bf38      	it	cc
 800cdce:	2200      	movcc	r2, #0
 800cdd0:	18a3      	adds	r3, r4, r2
 800cdd2:	50a7      	str	r7, [r4, r2]
 800cdd4:	b107      	cbz	r7, 800cdd8 <rshift+0x68>
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	1b1a      	subs	r2, r3, r4
 800cdda:	42a3      	cmp	r3, r4
 800cddc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cde0:	bf08      	it	eq
 800cde2:	2300      	moveq	r3, #0
 800cde4:	6102      	str	r2, [r0, #16]
 800cde6:	bf08      	it	eq
 800cde8:	6143      	streq	r3, [r0, #20]
 800cdea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdee:	f8dc c000 	ldr.w	ip, [ip]
 800cdf2:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdf6:	ea4c 0707 	orr.w	r7, ip, r7
 800cdfa:	f849 7b04 	str.w	r7, [r9], #4
 800cdfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce02:	40cf      	lsrs	r7, r1
 800ce04:	e7da      	b.n	800cdbc <rshift+0x4c>
 800ce06:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce0a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce0e:	e7c3      	b.n	800cd98 <rshift+0x28>
 800ce10:	4623      	mov	r3, r4
 800ce12:	e7e1      	b.n	800cdd8 <rshift+0x68>

0800ce14 <__hexdig_fun>:
 800ce14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce18:	2b09      	cmp	r3, #9
 800ce1a:	d802      	bhi.n	800ce22 <__hexdig_fun+0xe>
 800ce1c:	3820      	subs	r0, #32
 800ce1e:	b2c0      	uxtb	r0, r0
 800ce20:	4770      	bx	lr
 800ce22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce26:	2b05      	cmp	r3, #5
 800ce28:	d801      	bhi.n	800ce2e <__hexdig_fun+0x1a>
 800ce2a:	3847      	subs	r0, #71	; 0x47
 800ce2c:	e7f7      	b.n	800ce1e <__hexdig_fun+0xa>
 800ce2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce32:	2b05      	cmp	r3, #5
 800ce34:	d801      	bhi.n	800ce3a <__hexdig_fun+0x26>
 800ce36:	3827      	subs	r0, #39	; 0x27
 800ce38:	e7f1      	b.n	800ce1e <__hexdig_fun+0xa>
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	4770      	bx	lr
	...

0800ce40 <__gethex>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	4617      	mov	r7, r2
 800ce46:	680a      	ldr	r2, [r1, #0]
 800ce48:	b085      	sub	sp, #20
 800ce4a:	f102 0b02 	add.w	fp, r2, #2
 800ce4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce56:	4681      	mov	r9, r0
 800ce58:	468a      	mov	sl, r1
 800ce5a:	9302      	str	r3, [sp, #8]
 800ce5c:	32fe      	adds	r2, #254	; 0xfe
 800ce5e:	eb02 030b 	add.w	r3, r2, fp
 800ce62:	46d8      	mov	r8, fp
 800ce64:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ce68:	9301      	str	r3, [sp, #4]
 800ce6a:	2830      	cmp	r0, #48	; 0x30
 800ce6c:	d0f7      	beq.n	800ce5e <__gethex+0x1e>
 800ce6e:	f7ff ffd1 	bl	800ce14 <__hexdig_fun>
 800ce72:	4604      	mov	r4, r0
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d138      	bne.n	800ceea <__gethex+0xaa>
 800ce78:	49a7      	ldr	r1, [pc, #668]	; (800d118 <__gethex+0x2d8>)
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	f7ff fef6 	bl	800cc6e <strncmp>
 800ce82:	4606      	mov	r6, r0
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d169      	bne.n	800cf5c <__gethex+0x11c>
 800ce88:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ce8c:	465d      	mov	r5, fp
 800ce8e:	f7ff ffc1 	bl	800ce14 <__hexdig_fun>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d064      	beq.n	800cf60 <__gethex+0x120>
 800ce96:	465a      	mov	r2, fp
 800ce98:	7810      	ldrb	r0, [r2, #0]
 800ce9a:	2830      	cmp	r0, #48	; 0x30
 800ce9c:	4690      	mov	r8, r2
 800ce9e:	f102 0201 	add.w	r2, r2, #1
 800cea2:	d0f9      	beq.n	800ce98 <__gethex+0x58>
 800cea4:	f7ff ffb6 	bl	800ce14 <__hexdig_fun>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	fab0 f480 	clz	r4, r0
 800ceae:	0964      	lsrs	r4, r4, #5
 800ceb0:	465e      	mov	r6, fp
 800ceb2:	9301      	str	r3, [sp, #4]
 800ceb4:	4642      	mov	r2, r8
 800ceb6:	4615      	mov	r5, r2
 800ceb8:	3201      	adds	r2, #1
 800ceba:	7828      	ldrb	r0, [r5, #0]
 800cebc:	f7ff ffaa 	bl	800ce14 <__hexdig_fun>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d1f8      	bne.n	800ceb6 <__gethex+0x76>
 800cec4:	4994      	ldr	r1, [pc, #592]	; (800d118 <__gethex+0x2d8>)
 800cec6:	2201      	movs	r2, #1
 800cec8:	4628      	mov	r0, r5
 800ceca:	f7ff fed0 	bl	800cc6e <strncmp>
 800cece:	b978      	cbnz	r0, 800cef0 <__gethex+0xb0>
 800ced0:	b946      	cbnz	r6, 800cee4 <__gethex+0xa4>
 800ced2:	1c6e      	adds	r6, r5, #1
 800ced4:	4632      	mov	r2, r6
 800ced6:	4615      	mov	r5, r2
 800ced8:	3201      	adds	r2, #1
 800ceda:	7828      	ldrb	r0, [r5, #0]
 800cedc:	f7ff ff9a 	bl	800ce14 <__hexdig_fun>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d1f8      	bne.n	800ced6 <__gethex+0x96>
 800cee4:	1b73      	subs	r3, r6, r5
 800cee6:	009e      	lsls	r6, r3, #2
 800cee8:	e004      	b.n	800cef4 <__gethex+0xb4>
 800ceea:	2400      	movs	r4, #0
 800ceec:	4626      	mov	r6, r4
 800ceee:	e7e1      	b.n	800ceb4 <__gethex+0x74>
 800cef0:	2e00      	cmp	r6, #0
 800cef2:	d1f7      	bne.n	800cee4 <__gethex+0xa4>
 800cef4:	782b      	ldrb	r3, [r5, #0]
 800cef6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cefa:	2b50      	cmp	r3, #80	; 0x50
 800cefc:	d13d      	bne.n	800cf7a <__gethex+0x13a>
 800cefe:	786b      	ldrb	r3, [r5, #1]
 800cf00:	2b2b      	cmp	r3, #43	; 0x2b
 800cf02:	d02f      	beq.n	800cf64 <__gethex+0x124>
 800cf04:	2b2d      	cmp	r3, #45	; 0x2d
 800cf06:	d031      	beq.n	800cf6c <__gethex+0x12c>
 800cf08:	1c69      	adds	r1, r5, #1
 800cf0a:	f04f 0b00 	mov.w	fp, #0
 800cf0e:	7808      	ldrb	r0, [r1, #0]
 800cf10:	f7ff ff80 	bl	800ce14 <__hexdig_fun>
 800cf14:	1e42      	subs	r2, r0, #1
 800cf16:	b2d2      	uxtb	r2, r2
 800cf18:	2a18      	cmp	r2, #24
 800cf1a:	d82e      	bhi.n	800cf7a <__gethex+0x13a>
 800cf1c:	f1a0 0210 	sub.w	r2, r0, #16
 800cf20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf24:	f7ff ff76 	bl	800ce14 <__hexdig_fun>
 800cf28:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf2c:	fa5f fc8c 	uxtb.w	ip, ip
 800cf30:	f1bc 0f18 	cmp.w	ip, #24
 800cf34:	d91d      	bls.n	800cf72 <__gethex+0x132>
 800cf36:	f1bb 0f00 	cmp.w	fp, #0
 800cf3a:	d000      	beq.n	800cf3e <__gethex+0xfe>
 800cf3c:	4252      	negs	r2, r2
 800cf3e:	4416      	add	r6, r2
 800cf40:	f8ca 1000 	str.w	r1, [sl]
 800cf44:	b1dc      	cbz	r4, 800cf7e <__gethex+0x13e>
 800cf46:	9b01      	ldr	r3, [sp, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	bf14      	ite	ne
 800cf4c:	f04f 0800 	movne.w	r8, #0
 800cf50:	f04f 0806 	moveq.w	r8, #6
 800cf54:	4640      	mov	r0, r8
 800cf56:	b005      	add	sp, #20
 800cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5c:	4645      	mov	r5, r8
 800cf5e:	4626      	mov	r6, r4
 800cf60:	2401      	movs	r4, #1
 800cf62:	e7c7      	b.n	800cef4 <__gethex+0xb4>
 800cf64:	f04f 0b00 	mov.w	fp, #0
 800cf68:	1ca9      	adds	r1, r5, #2
 800cf6a:	e7d0      	b.n	800cf0e <__gethex+0xce>
 800cf6c:	f04f 0b01 	mov.w	fp, #1
 800cf70:	e7fa      	b.n	800cf68 <__gethex+0x128>
 800cf72:	230a      	movs	r3, #10
 800cf74:	fb03 0002 	mla	r0, r3, r2, r0
 800cf78:	e7d0      	b.n	800cf1c <__gethex+0xdc>
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	e7e0      	b.n	800cf40 <__gethex+0x100>
 800cf7e:	eba5 0308 	sub.w	r3, r5, r8
 800cf82:	3b01      	subs	r3, #1
 800cf84:	4621      	mov	r1, r4
 800cf86:	2b07      	cmp	r3, #7
 800cf88:	dc0a      	bgt.n	800cfa0 <__gethex+0x160>
 800cf8a:	4648      	mov	r0, r9
 800cf8c:	f7fd fbd2 	bl	800a734 <_Balloc>
 800cf90:	4604      	mov	r4, r0
 800cf92:	b940      	cbnz	r0, 800cfa6 <__gethex+0x166>
 800cf94:	4b61      	ldr	r3, [pc, #388]	; (800d11c <__gethex+0x2dc>)
 800cf96:	4602      	mov	r2, r0
 800cf98:	21e4      	movs	r1, #228	; 0xe4
 800cf9a:	4861      	ldr	r0, [pc, #388]	; (800d120 <__gethex+0x2e0>)
 800cf9c:	f7ff feb4 	bl	800cd08 <__assert_func>
 800cfa0:	3101      	adds	r1, #1
 800cfa2:	105b      	asrs	r3, r3, #1
 800cfa4:	e7ef      	b.n	800cf86 <__gethex+0x146>
 800cfa6:	f100 0a14 	add.w	sl, r0, #20
 800cfaa:	2300      	movs	r3, #0
 800cfac:	495a      	ldr	r1, [pc, #360]	; (800d118 <__gethex+0x2d8>)
 800cfae:	f8cd a004 	str.w	sl, [sp, #4]
 800cfb2:	469b      	mov	fp, r3
 800cfb4:	45a8      	cmp	r8, r5
 800cfb6:	d342      	bcc.n	800d03e <__gethex+0x1fe>
 800cfb8:	9801      	ldr	r0, [sp, #4]
 800cfba:	f840 bb04 	str.w	fp, [r0], #4
 800cfbe:	eba0 000a 	sub.w	r0, r0, sl
 800cfc2:	1080      	asrs	r0, r0, #2
 800cfc4:	6120      	str	r0, [r4, #16]
 800cfc6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cfca:	4658      	mov	r0, fp
 800cfcc:	f7fd fca4 	bl	800a918 <__hi0bits>
 800cfd0:	683d      	ldr	r5, [r7, #0]
 800cfd2:	eba8 0000 	sub.w	r0, r8, r0
 800cfd6:	42a8      	cmp	r0, r5
 800cfd8:	dd59      	ble.n	800d08e <__gethex+0x24e>
 800cfda:	eba0 0805 	sub.w	r8, r0, r5
 800cfde:	4641      	mov	r1, r8
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7fe f833 	bl	800b04c <__any_on>
 800cfe6:	4683      	mov	fp, r0
 800cfe8:	b1b8      	cbz	r0, 800d01a <__gethex+0x1da>
 800cfea:	f108 33ff 	add.w	r3, r8, #4294967295
 800cfee:	1159      	asrs	r1, r3, #5
 800cff0:	f003 021f 	and.w	r2, r3, #31
 800cff4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cff8:	f04f 0b01 	mov.w	fp, #1
 800cffc:	fa0b f202 	lsl.w	r2, fp, r2
 800d000:	420a      	tst	r2, r1
 800d002:	d00a      	beq.n	800d01a <__gethex+0x1da>
 800d004:	455b      	cmp	r3, fp
 800d006:	dd06      	ble.n	800d016 <__gethex+0x1d6>
 800d008:	f1a8 0102 	sub.w	r1, r8, #2
 800d00c:	4620      	mov	r0, r4
 800d00e:	f7fe f81d 	bl	800b04c <__any_on>
 800d012:	2800      	cmp	r0, #0
 800d014:	d138      	bne.n	800d088 <__gethex+0x248>
 800d016:	f04f 0b02 	mov.w	fp, #2
 800d01a:	4641      	mov	r1, r8
 800d01c:	4620      	mov	r0, r4
 800d01e:	f7ff fea7 	bl	800cd70 <rshift>
 800d022:	4446      	add	r6, r8
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	42b3      	cmp	r3, r6
 800d028:	da41      	bge.n	800d0ae <__gethex+0x26e>
 800d02a:	4621      	mov	r1, r4
 800d02c:	4648      	mov	r0, r9
 800d02e:	f7fd fbc1 	bl	800a7b4 <_Bfree>
 800d032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d034:	2300      	movs	r3, #0
 800d036:	6013      	str	r3, [r2, #0]
 800d038:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d03c:	e78a      	b.n	800cf54 <__gethex+0x114>
 800d03e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d042:	2a2e      	cmp	r2, #46	; 0x2e
 800d044:	d014      	beq.n	800d070 <__gethex+0x230>
 800d046:	2b20      	cmp	r3, #32
 800d048:	d106      	bne.n	800d058 <__gethex+0x218>
 800d04a:	9b01      	ldr	r3, [sp, #4]
 800d04c:	f843 bb04 	str.w	fp, [r3], #4
 800d050:	f04f 0b00 	mov.w	fp, #0
 800d054:	9301      	str	r3, [sp, #4]
 800d056:	465b      	mov	r3, fp
 800d058:	7828      	ldrb	r0, [r5, #0]
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	f7ff feda 	bl	800ce14 <__hexdig_fun>
 800d060:	9b03      	ldr	r3, [sp, #12]
 800d062:	f000 000f 	and.w	r0, r0, #15
 800d066:	4098      	lsls	r0, r3
 800d068:	ea4b 0b00 	orr.w	fp, fp, r0
 800d06c:	3304      	adds	r3, #4
 800d06e:	e7a1      	b.n	800cfb4 <__gethex+0x174>
 800d070:	45a8      	cmp	r8, r5
 800d072:	d8e8      	bhi.n	800d046 <__gethex+0x206>
 800d074:	2201      	movs	r2, #1
 800d076:	4628      	mov	r0, r5
 800d078:	9303      	str	r3, [sp, #12]
 800d07a:	f7ff fdf8 	bl	800cc6e <strncmp>
 800d07e:	4926      	ldr	r1, [pc, #152]	; (800d118 <__gethex+0x2d8>)
 800d080:	9b03      	ldr	r3, [sp, #12]
 800d082:	2800      	cmp	r0, #0
 800d084:	d1df      	bne.n	800d046 <__gethex+0x206>
 800d086:	e795      	b.n	800cfb4 <__gethex+0x174>
 800d088:	f04f 0b03 	mov.w	fp, #3
 800d08c:	e7c5      	b.n	800d01a <__gethex+0x1da>
 800d08e:	da0b      	bge.n	800d0a8 <__gethex+0x268>
 800d090:	eba5 0800 	sub.w	r8, r5, r0
 800d094:	4621      	mov	r1, r4
 800d096:	4642      	mov	r2, r8
 800d098:	4648      	mov	r0, r9
 800d09a:	f7fd fda5 	bl	800abe8 <__lshift>
 800d09e:	eba6 0608 	sub.w	r6, r6, r8
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	f100 0a14 	add.w	sl, r0, #20
 800d0a8:	f04f 0b00 	mov.w	fp, #0
 800d0ac:	e7ba      	b.n	800d024 <__gethex+0x1e4>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	42b3      	cmp	r3, r6
 800d0b2:	dd73      	ble.n	800d19c <__gethex+0x35c>
 800d0b4:	1b9e      	subs	r6, r3, r6
 800d0b6:	42b5      	cmp	r5, r6
 800d0b8:	dc34      	bgt.n	800d124 <__gethex+0x2e4>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d023      	beq.n	800d108 <__gethex+0x2c8>
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	d025      	beq.n	800d110 <__gethex+0x2d0>
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d115      	bne.n	800d0f4 <__gethex+0x2b4>
 800d0c8:	42b5      	cmp	r5, r6
 800d0ca:	d113      	bne.n	800d0f4 <__gethex+0x2b4>
 800d0cc:	2d01      	cmp	r5, #1
 800d0ce:	d10b      	bne.n	800d0e8 <__gethex+0x2a8>
 800d0d0:	9a02      	ldr	r2, [sp, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	6123      	str	r3, [r4, #16]
 800d0da:	f8ca 3000 	str.w	r3, [sl]
 800d0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0e0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d0e4:	601c      	str	r4, [r3, #0]
 800d0e6:	e735      	b.n	800cf54 <__gethex+0x114>
 800d0e8:	1e69      	subs	r1, r5, #1
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f7fd ffae 	bl	800b04c <__any_on>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d1ed      	bne.n	800d0d0 <__gethex+0x290>
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	4648      	mov	r0, r9
 800d0f8:	f7fd fb5c 	bl	800a7b4 <_Bfree>
 800d0fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0fe:	2300      	movs	r3, #0
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d106:	e725      	b.n	800cf54 <__gethex+0x114>
 800d108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1f2      	bne.n	800d0f4 <__gethex+0x2b4>
 800d10e:	e7df      	b.n	800d0d0 <__gethex+0x290>
 800d110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1dc      	bne.n	800d0d0 <__gethex+0x290>
 800d116:	e7ed      	b.n	800d0f4 <__gethex+0x2b4>
 800d118:	0800db84 	.word	0x0800db84
 800d11c:	0800da17 	.word	0x0800da17
 800d120:	0800dd49 	.word	0x0800dd49
 800d124:	f106 38ff 	add.w	r8, r6, #4294967295
 800d128:	f1bb 0f00 	cmp.w	fp, #0
 800d12c:	d133      	bne.n	800d196 <__gethex+0x356>
 800d12e:	f1b8 0f00 	cmp.w	r8, #0
 800d132:	d004      	beq.n	800d13e <__gethex+0x2fe>
 800d134:	4641      	mov	r1, r8
 800d136:	4620      	mov	r0, r4
 800d138:	f7fd ff88 	bl	800b04c <__any_on>
 800d13c:	4683      	mov	fp, r0
 800d13e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d142:	2301      	movs	r3, #1
 800d144:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d148:	f008 081f 	and.w	r8, r8, #31
 800d14c:	fa03 f308 	lsl.w	r3, r3, r8
 800d150:	4213      	tst	r3, r2
 800d152:	4631      	mov	r1, r6
 800d154:	4620      	mov	r0, r4
 800d156:	bf18      	it	ne
 800d158:	f04b 0b02 	orrne.w	fp, fp, #2
 800d15c:	1bad      	subs	r5, r5, r6
 800d15e:	f7ff fe07 	bl	800cd70 <rshift>
 800d162:	687e      	ldr	r6, [r7, #4]
 800d164:	f04f 0802 	mov.w	r8, #2
 800d168:	f1bb 0f00 	cmp.w	fp, #0
 800d16c:	d04a      	beq.n	800d204 <__gethex+0x3c4>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2b02      	cmp	r3, #2
 800d172:	d016      	beq.n	800d1a2 <__gethex+0x362>
 800d174:	2b03      	cmp	r3, #3
 800d176:	d018      	beq.n	800d1aa <__gethex+0x36a>
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d109      	bne.n	800d190 <__gethex+0x350>
 800d17c:	f01b 0f02 	tst.w	fp, #2
 800d180:	d006      	beq.n	800d190 <__gethex+0x350>
 800d182:	f8da 3000 	ldr.w	r3, [sl]
 800d186:	ea4b 0b03 	orr.w	fp, fp, r3
 800d18a:	f01b 0f01 	tst.w	fp, #1
 800d18e:	d10f      	bne.n	800d1b0 <__gethex+0x370>
 800d190:	f048 0810 	orr.w	r8, r8, #16
 800d194:	e036      	b.n	800d204 <__gethex+0x3c4>
 800d196:	f04f 0b01 	mov.w	fp, #1
 800d19a:	e7d0      	b.n	800d13e <__gethex+0x2fe>
 800d19c:	f04f 0801 	mov.w	r8, #1
 800d1a0:	e7e2      	b.n	800d168 <__gethex+0x328>
 800d1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1a4:	f1c3 0301 	rsb	r3, r3, #1
 800d1a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0ef      	beq.n	800d190 <__gethex+0x350>
 800d1b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1b4:	f104 0214 	add.w	r2, r4, #20
 800d1b8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	4694      	mov	ip, r2
 800d1c6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d1ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d1ce:	d01e      	beq.n	800d20e <__gethex+0x3ce>
 800d1d0:	3101      	adds	r1, #1
 800d1d2:	f8cc 1000 	str.w	r1, [ip]
 800d1d6:	f1b8 0f02 	cmp.w	r8, #2
 800d1da:	f104 0214 	add.w	r2, r4, #20
 800d1de:	d13d      	bne.n	800d25c <__gethex+0x41c>
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	42ab      	cmp	r3, r5
 800d1e6:	d10b      	bne.n	800d200 <__gethex+0x3c0>
 800d1e8:	1169      	asrs	r1, r5, #5
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	f005 051f 	and.w	r5, r5, #31
 800d1f0:	fa03 f505 	lsl.w	r5, r3, r5
 800d1f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1f8:	421d      	tst	r5, r3
 800d1fa:	bf18      	it	ne
 800d1fc:	f04f 0801 	movne.w	r8, #1
 800d200:	f048 0820 	orr.w	r8, r8, #32
 800d204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d206:	601c      	str	r4, [r3, #0]
 800d208:	9b02      	ldr	r3, [sp, #8]
 800d20a:	601e      	str	r6, [r3, #0]
 800d20c:	e6a2      	b.n	800cf54 <__gethex+0x114>
 800d20e:	4290      	cmp	r0, r2
 800d210:	f842 3c04 	str.w	r3, [r2, #-4]
 800d214:	d8d6      	bhi.n	800d1c4 <__gethex+0x384>
 800d216:	68a2      	ldr	r2, [r4, #8]
 800d218:	4593      	cmp	fp, r2
 800d21a:	db17      	blt.n	800d24c <__gethex+0x40c>
 800d21c:	6861      	ldr	r1, [r4, #4]
 800d21e:	4648      	mov	r0, r9
 800d220:	3101      	adds	r1, #1
 800d222:	f7fd fa87 	bl	800a734 <_Balloc>
 800d226:	4682      	mov	sl, r0
 800d228:	b918      	cbnz	r0, 800d232 <__gethex+0x3f2>
 800d22a:	4b1b      	ldr	r3, [pc, #108]	; (800d298 <__gethex+0x458>)
 800d22c:	4602      	mov	r2, r0
 800d22e:	2184      	movs	r1, #132	; 0x84
 800d230:	e6b3      	b.n	800cf9a <__gethex+0x15a>
 800d232:	6922      	ldr	r2, [r4, #16]
 800d234:	3202      	adds	r2, #2
 800d236:	f104 010c 	add.w	r1, r4, #12
 800d23a:	0092      	lsls	r2, r2, #2
 800d23c:	300c      	adds	r0, #12
 800d23e:	f7fc fae9 	bl	8009814 <memcpy>
 800d242:	4621      	mov	r1, r4
 800d244:	4648      	mov	r0, r9
 800d246:	f7fd fab5 	bl	800a7b4 <_Bfree>
 800d24a:	4654      	mov	r4, sl
 800d24c:	6922      	ldr	r2, [r4, #16]
 800d24e:	1c51      	adds	r1, r2, #1
 800d250:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d254:	6121      	str	r1, [r4, #16]
 800d256:	2101      	movs	r1, #1
 800d258:	6151      	str	r1, [r2, #20]
 800d25a:	e7bc      	b.n	800d1d6 <__gethex+0x396>
 800d25c:	6921      	ldr	r1, [r4, #16]
 800d25e:	4559      	cmp	r1, fp
 800d260:	dd0b      	ble.n	800d27a <__gethex+0x43a>
 800d262:	2101      	movs	r1, #1
 800d264:	4620      	mov	r0, r4
 800d266:	f7ff fd83 	bl	800cd70 <rshift>
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	3601      	adds	r6, #1
 800d26e:	42b3      	cmp	r3, r6
 800d270:	f6ff aedb 	blt.w	800d02a <__gethex+0x1ea>
 800d274:	f04f 0801 	mov.w	r8, #1
 800d278:	e7c2      	b.n	800d200 <__gethex+0x3c0>
 800d27a:	f015 051f 	ands.w	r5, r5, #31
 800d27e:	d0f9      	beq.n	800d274 <__gethex+0x434>
 800d280:	9b01      	ldr	r3, [sp, #4]
 800d282:	441a      	add	r2, r3
 800d284:	f1c5 0520 	rsb	r5, r5, #32
 800d288:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d28c:	f7fd fb44 	bl	800a918 <__hi0bits>
 800d290:	42a8      	cmp	r0, r5
 800d292:	dbe6      	blt.n	800d262 <__gethex+0x422>
 800d294:	e7ee      	b.n	800d274 <__gethex+0x434>
 800d296:	bf00      	nop
 800d298:	0800da17 	.word	0x0800da17

0800d29c <L_shift>:
 800d29c:	f1c2 0208 	rsb	r2, r2, #8
 800d2a0:	0092      	lsls	r2, r2, #2
 800d2a2:	b570      	push	{r4, r5, r6, lr}
 800d2a4:	f1c2 0620 	rsb	r6, r2, #32
 800d2a8:	6843      	ldr	r3, [r0, #4]
 800d2aa:	6804      	ldr	r4, [r0, #0]
 800d2ac:	fa03 f506 	lsl.w	r5, r3, r6
 800d2b0:	432c      	orrs	r4, r5
 800d2b2:	40d3      	lsrs	r3, r2
 800d2b4:	6004      	str	r4, [r0, #0]
 800d2b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2ba:	4288      	cmp	r0, r1
 800d2bc:	d3f4      	bcc.n	800d2a8 <L_shift+0xc>
 800d2be:	bd70      	pop	{r4, r5, r6, pc}

0800d2c0 <__match>:
 800d2c0:	b530      	push	{r4, r5, lr}
 800d2c2:	6803      	ldr	r3, [r0, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ca:	b914      	cbnz	r4, 800d2d2 <__match+0x12>
 800d2cc:	6003      	str	r3, [r0, #0]
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	bd30      	pop	{r4, r5, pc}
 800d2d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2da:	2d19      	cmp	r5, #25
 800d2dc:	bf98      	it	ls
 800d2de:	3220      	addls	r2, #32
 800d2e0:	42a2      	cmp	r2, r4
 800d2e2:	d0f0      	beq.n	800d2c6 <__match+0x6>
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	e7f3      	b.n	800d2d0 <__match+0x10>

0800d2e8 <__hexnan>:
 800d2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ec:	680b      	ldr	r3, [r1, #0]
 800d2ee:	6801      	ldr	r1, [r0, #0]
 800d2f0:	115e      	asrs	r6, r3, #5
 800d2f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2f6:	f013 031f 	ands.w	r3, r3, #31
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	bf18      	it	ne
 800d2fe:	3604      	addne	r6, #4
 800d300:	2500      	movs	r5, #0
 800d302:	1f37      	subs	r7, r6, #4
 800d304:	4682      	mov	sl, r0
 800d306:	4690      	mov	r8, r2
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d30e:	46b9      	mov	r9, r7
 800d310:	463c      	mov	r4, r7
 800d312:	9502      	str	r5, [sp, #8]
 800d314:	46ab      	mov	fp, r5
 800d316:	784a      	ldrb	r2, [r1, #1]
 800d318:	1c4b      	adds	r3, r1, #1
 800d31a:	9303      	str	r3, [sp, #12]
 800d31c:	b342      	cbz	r2, 800d370 <__hexnan+0x88>
 800d31e:	4610      	mov	r0, r2
 800d320:	9105      	str	r1, [sp, #20]
 800d322:	9204      	str	r2, [sp, #16]
 800d324:	f7ff fd76 	bl	800ce14 <__hexdig_fun>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d14f      	bne.n	800d3cc <__hexnan+0xe4>
 800d32c:	9a04      	ldr	r2, [sp, #16]
 800d32e:	9905      	ldr	r1, [sp, #20]
 800d330:	2a20      	cmp	r2, #32
 800d332:	d818      	bhi.n	800d366 <__hexnan+0x7e>
 800d334:	9b02      	ldr	r3, [sp, #8]
 800d336:	459b      	cmp	fp, r3
 800d338:	dd13      	ble.n	800d362 <__hexnan+0x7a>
 800d33a:	454c      	cmp	r4, r9
 800d33c:	d206      	bcs.n	800d34c <__hexnan+0x64>
 800d33e:	2d07      	cmp	r5, #7
 800d340:	dc04      	bgt.n	800d34c <__hexnan+0x64>
 800d342:	462a      	mov	r2, r5
 800d344:	4649      	mov	r1, r9
 800d346:	4620      	mov	r0, r4
 800d348:	f7ff ffa8 	bl	800d29c <L_shift>
 800d34c:	4544      	cmp	r4, r8
 800d34e:	d950      	bls.n	800d3f2 <__hexnan+0x10a>
 800d350:	2300      	movs	r3, #0
 800d352:	f1a4 0904 	sub.w	r9, r4, #4
 800d356:	f844 3c04 	str.w	r3, [r4, #-4]
 800d35a:	f8cd b008 	str.w	fp, [sp, #8]
 800d35e:	464c      	mov	r4, r9
 800d360:	461d      	mov	r5, r3
 800d362:	9903      	ldr	r1, [sp, #12]
 800d364:	e7d7      	b.n	800d316 <__hexnan+0x2e>
 800d366:	2a29      	cmp	r2, #41	; 0x29
 800d368:	d155      	bne.n	800d416 <__hexnan+0x12e>
 800d36a:	3102      	adds	r1, #2
 800d36c:	f8ca 1000 	str.w	r1, [sl]
 800d370:	f1bb 0f00 	cmp.w	fp, #0
 800d374:	d04f      	beq.n	800d416 <__hexnan+0x12e>
 800d376:	454c      	cmp	r4, r9
 800d378:	d206      	bcs.n	800d388 <__hexnan+0xa0>
 800d37a:	2d07      	cmp	r5, #7
 800d37c:	dc04      	bgt.n	800d388 <__hexnan+0xa0>
 800d37e:	462a      	mov	r2, r5
 800d380:	4649      	mov	r1, r9
 800d382:	4620      	mov	r0, r4
 800d384:	f7ff ff8a 	bl	800d29c <L_shift>
 800d388:	4544      	cmp	r4, r8
 800d38a:	d934      	bls.n	800d3f6 <__hexnan+0x10e>
 800d38c:	f1a8 0204 	sub.w	r2, r8, #4
 800d390:	4623      	mov	r3, r4
 800d392:	f853 1b04 	ldr.w	r1, [r3], #4
 800d396:	f842 1f04 	str.w	r1, [r2, #4]!
 800d39a:	429f      	cmp	r7, r3
 800d39c:	d2f9      	bcs.n	800d392 <__hexnan+0xaa>
 800d39e:	1b3b      	subs	r3, r7, r4
 800d3a0:	f023 0303 	bic.w	r3, r3, #3
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	3e03      	subs	r6, #3
 800d3a8:	3401      	adds	r4, #1
 800d3aa:	42a6      	cmp	r6, r4
 800d3ac:	bf38      	it	cc
 800d3ae:	2304      	movcc	r3, #4
 800d3b0:	4443      	add	r3, r8
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f843 2b04 	str.w	r2, [r3], #4
 800d3b8:	429f      	cmp	r7, r3
 800d3ba:	d2fb      	bcs.n	800d3b4 <__hexnan+0xcc>
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	b91b      	cbnz	r3, 800d3c8 <__hexnan+0xe0>
 800d3c0:	4547      	cmp	r7, r8
 800d3c2:	d126      	bne.n	800d412 <__hexnan+0x12a>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	603b      	str	r3, [r7, #0]
 800d3c8:	2005      	movs	r0, #5
 800d3ca:	e025      	b.n	800d418 <__hexnan+0x130>
 800d3cc:	3501      	adds	r5, #1
 800d3ce:	2d08      	cmp	r5, #8
 800d3d0:	f10b 0b01 	add.w	fp, fp, #1
 800d3d4:	dd06      	ble.n	800d3e4 <__hexnan+0xfc>
 800d3d6:	4544      	cmp	r4, r8
 800d3d8:	d9c3      	bls.n	800d362 <__hexnan+0x7a>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3e0:	2501      	movs	r5, #1
 800d3e2:	3c04      	subs	r4, #4
 800d3e4:	6822      	ldr	r2, [r4, #0]
 800d3e6:	f000 000f 	and.w	r0, r0, #15
 800d3ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3ee:	6020      	str	r0, [r4, #0]
 800d3f0:	e7b7      	b.n	800d362 <__hexnan+0x7a>
 800d3f2:	2508      	movs	r5, #8
 800d3f4:	e7b5      	b.n	800d362 <__hexnan+0x7a>
 800d3f6:	9b01      	ldr	r3, [sp, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d0df      	beq.n	800d3bc <__hexnan+0xd4>
 800d3fc:	f1c3 0320 	rsb	r3, r3, #32
 800d400:	f04f 32ff 	mov.w	r2, #4294967295
 800d404:	40da      	lsrs	r2, r3
 800d406:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d40a:	4013      	ands	r3, r2
 800d40c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d410:	e7d4      	b.n	800d3bc <__hexnan+0xd4>
 800d412:	3f04      	subs	r7, #4
 800d414:	e7d2      	b.n	800d3bc <__hexnan+0xd4>
 800d416:	2004      	movs	r0, #4
 800d418:	b007      	add	sp, #28
 800d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d41e <__ascii_mbtowc>:
 800d41e:	b082      	sub	sp, #8
 800d420:	b901      	cbnz	r1, 800d424 <__ascii_mbtowc+0x6>
 800d422:	a901      	add	r1, sp, #4
 800d424:	b142      	cbz	r2, 800d438 <__ascii_mbtowc+0x1a>
 800d426:	b14b      	cbz	r3, 800d43c <__ascii_mbtowc+0x1e>
 800d428:	7813      	ldrb	r3, [r2, #0]
 800d42a:	600b      	str	r3, [r1, #0]
 800d42c:	7812      	ldrb	r2, [r2, #0]
 800d42e:	1e10      	subs	r0, r2, #0
 800d430:	bf18      	it	ne
 800d432:	2001      	movne	r0, #1
 800d434:	b002      	add	sp, #8
 800d436:	4770      	bx	lr
 800d438:	4610      	mov	r0, r2
 800d43a:	e7fb      	b.n	800d434 <__ascii_mbtowc+0x16>
 800d43c:	f06f 0001 	mvn.w	r0, #1
 800d440:	e7f8      	b.n	800d434 <__ascii_mbtowc+0x16>

0800d442 <_realloc_r>:
 800d442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d446:	4680      	mov	r8, r0
 800d448:	4614      	mov	r4, r2
 800d44a:	460e      	mov	r6, r1
 800d44c:	b921      	cbnz	r1, 800d458 <_realloc_r+0x16>
 800d44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d452:	4611      	mov	r1, r2
 800d454:	f7fd b8e2 	b.w	800a61c <_malloc_r>
 800d458:	b92a      	cbnz	r2, 800d466 <_realloc_r+0x24>
 800d45a:	f7fd f86b 	bl	800a534 <_free_r>
 800d45e:	4625      	mov	r5, r4
 800d460:	4628      	mov	r0, r5
 800d462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d466:	f000 f8b6 	bl	800d5d6 <_malloc_usable_size_r>
 800d46a:	4284      	cmp	r4, r0
 800d46c:	4607      	mov	r7, r0
 800d46e:	d802      	bhi.n	800d476 <_realloc_r+0x34>
 800d470:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d474:	d812      	bhi.n	800d49c <_realloc_r+0x5a>
 800d476:	4621      	mov	r1, r4
 800d478:	4640      	mov	r0, r8
 800d47a:	f7fd f8cf 	bl	800a61c <_malloc_r>
 800d47e:	4605      	mov	r5, r0
 800d480:	2800      	cmp	r0, #0
 800d482:	d0ed      	beq.n	800d460 <_realloc_r+0x1e>
 800d484:	42bc      	cmp	r4, r7
 800d486:	4622      	mov	r2, r4
 800d488:	4631      	mov	r1, r6
 800d48a:	bf28      	it	cs
 800d48c:	463a      	movcs	r2, r7
 800d48e:	f7fc f9c1 	bl	8009814 <memcpy>
 800d492:	4631      	mov	r1, r6
 800d494:	4640      	mov	r0, r8
 800d496:	f7fd f84d 	bl	800a534 <_free_r>
 800d49a:	e7e1      	b.n	800d460 <_realloc_r+0x1e>
 800d49c:	4635      	mov	r5, r6
 800d49e:	e7df      	b.n	800d460 <_realloc_r+0x1e>

0800d4a0 <_strtoul_l.constprop.0>:
 800d4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4a4:	4f36      	ldr	r7, [pc, #216]	; (800d580 <_strtoul_l.constprop.0+0xe0>)
 800d4a6:	4686      	mov	lr, r0
 800d4a8:	460d      	mov	r5, r1
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4b0:	5d3e      	ldrb	r6, [r7, r4]
 800d4b2:	f016 0608 	ands.w	r6, r6, #8
 800d4b6:	d1f8      	bne.n	800d4aa <_strtoul_l.constprop.0+0xa>
 800d4b8:	2c2d      	cmp	r4, #45	; 0x2d
 800d4ba:	d130      	bne.n	800d51e <_strtoul_l.constprop.0+0x7e>
 800d4bc:	782c      	ldrb	r4, [r5, #0]
 800d4be:	2601      	movs	r6, #1
 800d4c0:	1c85      	adds	r5, r0, #2
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d057      	beq.n	800d576 <_strtoul_l.constprop.0+0xd6>
 800d4c6:	2b10      	cmp	r3, #16
 800d4c8:	d109      	bne.n	800d4de <_strtoul_l.constprop.0+0x3e>
 800d4ca:	2c30      	cmp	r4, #48	; 0x30
 800d4cc:	d107      	bne.n	800d4de <_strtoul_l.constprop.0+0x3e>
 800d4ce:	7828      	ldrb	r0, [r5, #0]
 800d4d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d4d4:	2858      	cmp	r0, #88	; 0x58
 800d4d6:	d149      	bne.n	800d56c <_strtoul_l.constprop.0+0xcc>
 800d4d8:	786c      	ldrb	r4, [r5, #1]
 800d4da:	2310      	movs	r3, #16
 800d4dc:	3502      	adds	r5, #2
 800d4de:	f04f 38ff 	mov.w	r8, #4294967295
 800d4e2:	2700      	movs	r7, #0
 800d4e4:	fbb8 f8f3 	udiv	r8, r8, r3
 800d4e8:	fb03 f908 	mul.w	r9, r3, r8
 800d4ec:	ea6f 0909 	mvn.w	r9, r9
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d4f6:	f1bc 0f09 	cmp.w	ip, #9
 800d4fa:	d815      	bhi.n	800d528 <_strtoul_l.constprop.0+0x88>
 800d4fc:	4664      	mov	r4, ip
 800d4fe:	42a3      	cmp	r3, r4
 800d500:	dd23      	ble.n	800d54a <_strtoul_l.constprop.0+0xaa>
 800d502:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d506:	d007      	beq.n	800d518 <_strtoul_l.constprop.0+0x78>
 800d508:	4580      	cmp	r8, r0
 800d50a:	d31b      	bcc.n	800d544 <_strtoul_l.constprop.0+0xa4>
 800d50c:	d101      	bne.n	800d512 <_strtoul_l.constprop.0+0x72>
 800d50e:	45a1      	cmp	r9, r4
 800d510:	db18      	blt.n	800d544 <_strtoul_l.constprop.0+0xa4>
 800d512:	fb00 4003 	mla	r0, r0, r3, r4
 800d516:	2701      	movs	r7, #1
 800d518:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d51c:	e7e9      	b.n	800d4f2 <_strtoul_l.constprop.0+0x52>
 800d51e:	2c2b      	cmp	r4, #43	; 0x2b
 800d520:	bf04      	itt	eq
 800d522:	782c      	ldrbeq	r4, [r5, #0]
 800d524:	1c85      	addeq	r5, r0, #2
 800d526:	e7cc      	b.n	800d4c2 <_strtoul_l.constprop.0+0x22>
 800d528:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d52c:	f1bc 0f19 	cmp.w	ip, #25
 800d530:	d801      	bhi.n	800d536 <_strtoul_l.constprop.0+0x96>
 800d532:	3c37      	subs	r4, #55	; 0x37
 800d534:	e7e3      	b.n	800d4fe <_strtoul_l.constprop.0+0x5e>
 800d536:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d53a:	f1bc 0f19 	cmp.w	ip, #25
 800d53e:	d804      	bhi.n	800d54a <_strtoul_l.constprop.0+0xaa>
 800d540:	3c57      	subs	r4, #87	; 0x57
 800d542:	e7dc      	b.n	800d4fe <_strtoul_l.constprop.0+0x5e>
 800d544:	f04f 37ff 	mov.w	r7, #4294967295
 800d548:	e7e6      	b.n	800d518 <_strtoul_l.constprop.0+0x78>
 800d54a:	1c7b      	adds	r3, r7, #1
 800d54c:	d106      	bne.n	800d55c <_strtoul_l.constprop.0+0xbc>
 800d54e:	2322      	movs	r3, #34	; 0x22
 800d550:	f8ce 3000 	str.w	r3, [lr]
 800d554:	4638      	mov	r0, r7
 800d556:	b932      	cbnz	r2, 800d566 <_strtoul_l.constprop.0+0xc6>
 800d558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d55c:	b106      	cbz	r6, 800d560 <_strtoul_l.constprop.0+0xc0>
 800d55e:	4240      	negs	r0, r0
 800d560:	2a00      	cmp	r2, #0
 800d562:	d0f9      	beq.n	800d558 <_strtoul_l.constprop.0+0xb8>
 800d564:	b107      	cbz	r7, 800d568 <_strtoul_l.constprop.0+0xc8>
 800d566:	1e69      	subs	r1, r5, #1
 800d568:	6011      	str	r1, [r2, #0]
 800d56a:	e7f5      	b.n	800d558 <_strtoul_l.constprop.0+0xb8>
 800d56c:	2430      	movs	r4, #48	; 0x30
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1b5      	bne.n	800d4de <_strtoul_l.constprop.0+0x3e>
 800d572:	2308      	movs	r3, #8
 800d574:	e7b3      	b.n	800d4de <_strtoul_l.constprop.0+0x3e>
 800d576:	2c30      	cmp	r4, #48	; 0x30
 800d578:	d0a9      	beq.n	800d4ce <_strtoul_l.constprop.0+0x2e>
 800d57a:	230a      	movs	r3, #10
 800d57c:	e7af      	b.n	800d4de <_strtoul_l.constprop.0+0x3e>
 800d57e:	bf00      	nop
 800d580:	0800dbd9 	.word	0x0800dbd9

0800d584 <_strtoul_r>:
 800d584:	f7ff bf8c 	b.w	800d4a0 <_strtoul_l.constprop.0>

0800d588 <__ascii_wctomb>:
 800d588:	b149      	cbz	r1, 800d59e <__ascii_wctomb+0x16>
 800d58a:	2aff      	cmp	r2, #255	; 0xff
 800d58c:	bf85      	ittet	hi
 800d58e:	238a      	movhi	r3, #138	; 0x8a
 800d590:	6003      	strhi	r3, [r0, #0]
 800d592:	700a      	strbls	r2, [r1, #0]
 800d594:	f04f 30ff 	movhi.w	r0, #4294967295
 800d598:	bf98      	it	ls
 800d59a:	2001      	movls	r0, #1
 800d59c:	4770      	bx	lr
 800d59e:	4608      	mov	r0, r1
 800d5a0:	4770      	bx	lr
	...

0800d5a4 <fiprintf>:
 800d5a4:	b40e      	push	{r1, r2, r3}
 800d5a6:	b503      	push	{r0, r1, lr}
 800d5a8:	4601      	mov	r1, r0
 800d5aa:	ab03      	add	r3, sp, #12
 800d5ac:	4805      	ldr	r0, [pc, #20]	; (800d5c4 <fiprintf+0x20>)
 800d5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b2:	6800      	ldr	r0, [r0, #0]
 800d5b4:	9301      	str	r3, [sp, #4]
 800d5b6:	f7fe ff55 	bl	800c464 <_vfiprintf_r>
 800d5ba:	b002      	add	sp, #8
 800d5bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5c0:	b003      	add	sp, #12
 800d5c2:	4770      	bx	lr
 800d5c4:	200000b4 	.word	0x200000b4

0800d5c8 <abort>:
 800d5c8:	b508      	push	{r3, lr}
 800d5ca:	2006      	movs	r0, #6
 800d5cc:	f000 f834 	bl	800d638 <raise>
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	f7f6 fbe9 	bl	8003da8 <_exit>

0800d5d6 <_malloc_usable_size_r>:
 800d5d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5da:	1f18      	subs	r0, r3, #4
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	bfbc      	itt	lt
 800d5e0:	580b      	ldrlt	r3, [r1, r0]
 800d5e2:	18c0      	addlt	r0, r0, r3
 800d5e4:	4770      	bx	lr

0800d5e6 <_raise_r>:
 800d5e6:	291f      	cmp	r1, #31
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	460d      	mov	r5, r1
 800d5ee:	d904      	bls.n	800d5fa <_raise_r+0x14>
 800d5f0:	2316      	movs	r3, #22
 800d5f2:	6003      	str	r3, [r0, #0]
 800d5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f8:	bd38      	pop	{r3, r4, r5, pc}
 800d5fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d5fc:	b112      	cbz	r2, 800d604 <_raise_r+0x1e>
 800d5fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d602:	b94b      	cbnz	r3, 800d618 <_raise_r+0x32>
 800d604:	4620      	mov	r0, r4
 800d606:	f000 f831 	bl	800d66c <_getpid_r>
 800d60a:	462a      	mov	r2, r5
 800d60c:	4601      	mov	r1, r0
 800d60e:	4620      	mov	r0, r4
 800d610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d614:	f000 b818 	b.w	800d648 <_kill_r>
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d00a      	beq.n	800d632 <_raise_r+0x4c>
 800d61c:	1c59      	adds	r1, r3, #1
 800d61e:	d103      	bne.n	800d628 <_raise_r+0x42>
 800d620:	2316      	movs	r3, #22
 800d622:	6003      	str	r3, [r0, #0]
 800d624:	2001      	movs	r0, #1
 800d626:	e7e7      	b.n	800d5f8 <_raise_r+0x12>
 800d628:	2400      	movs	r4, #0
 800d62a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d62e:	4628      	mov	r0, r5
 800d630:	4798      	blx	r3
 800d632:	2000      	movs	r0, #0
 800d634:	e7e0      	b.n	800d5f8 <_raise_r+0x12>
	...

0800d638 <raise>:
 800d638:	4b02      	ldr	r3, [pc, #8]	; (800d644 <raise+0xc>)
 800d63a:	4601      	mov	r1, r0
 800d63c:	6818      	ldr	r0, [r3, #0]
 800d63e:	f7ff bfd2 	b.w	800d5e6 <_raise_r>
 800d642:	bf00      	nop
 800d644:	200000b4 	.word	0x200000b4

0800d648 <_kill_r>:
 800d648:	b538      	push	{r3, r4, r5, lr}
 800d64a:	4d07      	ldr	r5, [pc, #28]	; (800d668 <_kill_r+0x20>)
 800d64c:	2300      	movs	r3, #0
 800d64e:	4604      	mov	r4, r0
 800d650:	4608      	mov	r0, r1
 800d652:	4611      	mov	r1, r2
 800d654:	602b      	str	r3, [r5, #0]
 800d656:	f7f6 fb97 	bl	8003d88 <_kill>
 800d65a:	1c43      	adds	r3, r0, #1
 800d65c:	d102      	bne.n	800d664 <_kill_r+0x1c>
 800d65e:	682b      	ldr	r3, [r5, #0]
 800d660:	b103      	cbz	r3, 800d664 <_kill_r+0x1c>
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	bd38      	pop	{r3, r4, r5, pc}
 800d666:	bf00      	nop
 800d668:	2000a3d4 	.word	0x2000a3d4

0800d66c <_getpid_r>:
 800d66c:	f7f6 bb84 	b.w	8003d78 <_getpid>

0800d670 <_init>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	bf00      	nop
 800d674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d676:	bc08      	pop	{r3}
 800d678:	469e      	mov	lr, r3
 800d67a:	4770      	bx	lr

0800d67c <_fini>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	bf00      	nop
 800d680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d682:	bc08      	pop	{r3}
 800d684:	469e      	mov	lr, r3
 800d686:	4770      	bx	lr
